
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  08009f78  08009f78  0000af78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a678  0800a678  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a678  0800a678  0000b678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a680  0800a680  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a680  0800a680  0000b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a684  0800a684  0000b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a688  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001e8  0800a870  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800a870  0000c56c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011072  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258f  00000000  00000000  0001d28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  0001f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3d  00000000  00000000  000207e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027eff  00000000  00000000  0002141d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012737  00000000  00000000  0004931c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4b0f  00000000  00000000  0005ba53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005500  00000000  00000000  001505a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00155aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f5c 	.word	0x08009f5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009f5c 	.word	0x08009f5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a3b      	ldr	r2, [pc, #236]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b39      	ldr	r3, [pc, #228]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a35      	ldr	r2, [pc, #212]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b33      	ldr	r3, [pc, #204]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a29      	ldr	r2, [pc, #164]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f001 fc21 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 7158 	mov.w	r1, #864	@ 0x360
 8000fc0:	4820      	ldr	r0, [pc, #128]	@ (8001044 <MX_GPIO_Init+0x10c>)
 8000fc2:	f001 fc1b 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4819      	ldr	r0, [pc, #100]	@ (8001044 <MX_GPIO_Init+0x10c>)
 8000fde:	f001 fa63 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffc:	f001 fa54 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001000:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <MX_GPIO_Init+0x10c>)
 800101a:	f001 fa45 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_GPIO_Init+0x110>)
 8001034:	f001 fa38 	bl	80024a8 <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	48000800 	.word	0x48000800
 8001048:	48000400 	.word	0x48000400

0800104c <PID_Init>:

PID_TypeDef pid_L, pid_R;



void PID_Init(PID_TypeDef *pid, float Kp, float Ki, float Kd, float setpoint) {
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6178      	str	r0, [r7, #20]
 8001054:	ed87 0a04 	vstr	s0, [r7, #16]
 8001058:	edc7 0a03 	vstr	s1, [r7, #12]
 800105c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001060:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->Kp = Kp;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
    pid->integral = 0;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
    pid->output = 0;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <Odometry_Init>:
    float theta;
} Odometry_TypeDef;

Odometry_TypeDef odom;

void Odometry_Init(Odometry_TypeDef *odom) {
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    odom->x = 0.0f;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
    odom->y = 0.0f;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
    odom->theta = 0.0f;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <Update_Odometry>:


void Update_Odometry(Odometry_TypeDef *odom, float speed_L, float speed_R, float dt) {
 80010d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d4:	b08a      	sub	sp, #40	@ 0x28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	ed87 0a02 	vstr	s0, [r7, #8]
 80010de:	edc7 0a01 	vstr	s1, [r7, #4]
 80010e2:	ed87 1a00 	vstr	s2, [r7]
    float wheel_base = 0.2f;
 80010e6:	4b76      	ldr	r3, [pc, #472]	@ (80012c0 <Update_Odometry+0x1f0>)
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    float wheel_radius = 0.05f;
 80010ea:	4b76      	ldr	r3, [pc, #472]	@ (80012c4 <Update_Odometry+0x1f4>)
 80010ec:	623b      	str	r3, [r7, #32]

    // Convert speed from RPM to meters per second
    float v_L = (speed_L / 60.0f) * (2 * M_PI * wheel_radius);
 80010ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f2:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80012c8 <Update_Odometry+0x1f8>
 80010f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010fa:	ee16 0a90 	vmov	r0, s13
 80010fe:	f7ff fa23 	bl	8000548 <__aeabi_f2d>
 8001102:	4604      	mov	r4, r0
 8001104:	460d      	mov	r5, r1
 8001106:	6a38      	ldr	r0, [r7, #32]
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_f2d>
 800110c:	a36a      	add	r3, pc, #424	@ (adr r3, 80012b8 <Update_Odometry+0x1e8>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff fa71 	bl	80005f8 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4620      	mov	r0, r4
 800111c:	4629      	mov	r1, r5
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd3d 	bl	8000ba8 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	61fb      	str	r3, [r7, #28]
    float v_R = (speed_R / 60.0f) * (2 * M_PI * wheel_radius);
 8001132:	edd7 7a01 	vldr	s15, [r7, #4]
 8001136:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80012c8 <Update_Odometry+0x1f8>
 800113a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800113e:	ee16 0a90 	vmov	r0, s13
 8001142:	f7ff fa01 	bl	8000548 <__aeabi_f2d>
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	6a38      	ldr	r0, [r7, #32]
 800114c:	f7ff f9fc 	bl	8000548 <__aeabi_f2d>
 8001150:	a359      	add	r3, pc, #356	@ (adr r3, 80012b8 <Update_Odometry+0x1e8>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fa4f 	bl	80005f8 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff fa49 	bl	80005f8 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd1b 	bl	8000ba8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	61bb      	str	r3, [r7, #24]

    // Calculate linear and angular velocities
    float v = (v_L + v_R) / 2.0f;
 8001176:	ed97 7a07 	vldr	s14, [r7, #28]
 800117a:	edd7 7a06 	vldr	s15, [r7, #24]
 800117e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001182:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118a:	edc7 7a05 	vstr	s15, [r7, #20]
    float omega = (v_R - v_L) / 2 * wheel_base;
 800118e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001192:	edd7 7a07 	vldr	s15, [r7, #28]
 8001196:	ee37 7a67 	vsub.f32	s14, s14, s15
 800119a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800119e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	edc7 7a04 	vstr	s15, [r7, #16]

    // Update position and orientation
    odom->x += v * cos(odom->theta) * dt;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9c8 	bl	8000548 <__aeabi_f2d>
 80011b8:	4604      	mov	r4, r0
 80011ba:	460d      	mov	r5, r1
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	f7ff f9c3 	bl	8000548 <__aeabi_f2d>
 80011c2:	4680      	mov	r8, r0
 80011c4:	4689      	mov	r9, r1
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9bc 	bl	8000548 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	ec43 2b10 	vmov	d0, r2, r3
 80011d8:	f005 f8ce 	bl	8006378 <cos>
 80011dc:	ec53 2b10 	vmov	r2, r3, d0
 80011e0:	4640      	mov	r0, r8
 80011e2:	4649      	mov	r1, r9
 80011e4:	f7ff fa08 	bl	80005f8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4690      	mov	r8, r2
 80011ee:	4699      	mov	r9, r3
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f7ff f9a9 	bl	8000548 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4640      	mov	r0, r8
 80011fc:	4649      	mov	r1, r9
 80011fe:	f7ff f9fb 	bl	80005f8 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff f83f 	bl	800028c <__adddf3>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fcc7 	bl	8000ba8 <__aeabi_d2f>
 800121a:	4602      	mov	r2, r0
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	601a      	str	r2, [r3, #0]
    odom->y += v * sin(odom->theta) * dt;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f98f 	bl	8000548 <__aeabi_f2d>
 800122a:	4604      	mov	r4, r0
 800122c:	460d      	mov	r5, r1
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff f98a 	bl	8000548 <__aeabi_f2d>
 8001234:	4680      	mov	r8, r0
 8001236:	4689      	mov	r9, r1
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f983 	bl	8000548 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	ec43 2b10 	vmov	d0, r2, r3
 800124a:	f005 f8f1 	bl	8006430 <sin>
 800124e:	ec53 2b10 	vmov	r2, r3, d0
 8001252:	4640      	mov	r0, r8
 8001254:	4649      	mov	r1, r9
 8001256:	f7ff f9cf 	bl	80005f8 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4690      	mov	r8, r2
 8001260:	4699      	mov	r9, r3
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f7ff f970 	bl	8000548 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4640      	mov	r0, r8
 800126e:	4649      	mov	r1, r9
 8001270:	f7ff f9c2 	bl	80005f8 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff f806 	bl	800028c <__adddf3>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc8e 	bl	8000ba8 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	605a      	str	r2, [r3, #4]
    odom->theta += omega * dt;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	ed93 7a02 	vldr	s14, [r3, #8]
 8001298:	edd7 6a04 	vldr	s13, [r7, #16]
 800129c:	edd7 7a00 	vldr	s15, [r7]
 80012a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	@ 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012b8:	54442d18 	.word	0x54442d18
 80012bc:	401921fb 	.word	0x401921fb
 80012c0:	3e4ccccd 	.word	0x3e4ccccd
 80012c4:	3d4ccccd 	.word	0x3d4ccccd
 80012c8:	42700000 	.word	0x42700000

080012cc <SetTarget>:
    float y;
} Target_TypeDef;

Target_TypeDef target;

void SetTarget(float x, float y) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80012d6:	edc7 0a00 	vstr	s1, [r7]
    target.x = x;
 80012da:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <SetTarget+0x28>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6013      	str	r3, [r2, #0]
    target.y = y;
 80012e0:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <SetTarget+0x28>)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	6053      	str	r3, [r2, #4]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000258 	.word	0x20000258

080012f8 <CalculateTargetError>:


void CalculateTargetError(Odometry_TypeDef *odom, Target_TypeDef *target, float *distance, float *angle) {
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
    float dx = target->x - odom->x;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	ed93 7a00 	vldr	s14, [r3]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001316:	edc7 7a05 	vstr	s15, [r7, #20]
    float dy = target->y - odom->y;
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	edd3 7a01 	vldr	s15, [r3, #4]
 8001326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132a:	edc7 7a04 	vstr	s15, [r7, #16]
    *distance = sqrt(dx * dx + dy * dy);
 800132e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001332:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001336:	edd7 7a04 	vldr	s15, [r7, #16]
 800133a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800133e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001342:	ee17 0a90 	vmov	r0, s15
 8001346:	f7ff f8ff 	bl	8000548 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b10 	vmov	d0, r2, r3
 8001352:	f004 fe4b 	bl	8005fec <sqrt>
 8001356:	ec53 2b10 	vmov	r2, r3, d0
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc23 	bl	8000ba8 <__aeabi_d2f>
 8001362:	4602      	mov	r2, r0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	601a      	str	r2, [r3, #0]
    *angle = atan2(dy, dx) - odom->theta;
 8001368:	6938      	ldr	r0, [r7, #16]
 800136a:	f7ff f8ed 	bl	8000548 <__aeabi_f2d>
 800136e:	4604      	mov	r4, r0
 8001370:	460d      	mov	r5, r1
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff f8e8 	bl	8000548 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	ec43 2b11 	vmov	d1, r2, r3
 8001380:	ec45 4b10 	vmov	d0, r4, r5
 8001384:	f004 fd69 	bl	8005e5a <atan2>
 8001388:	ec55 4b10 	vmov	r4, r5, d0
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8d9 	bl	8000548 <__aeabi_f2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4620      	mov	r0, r4
 800139c:	4629      	mov	r1, r5
 800139e:	f7fe ff73 	bl	8000288 <__aeabi_dsub>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fbfd 	bl	8000ba8 <__aeabi_d2f>
 80013ae:	4602      	mov	r2, r0
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	601a      	str	r2, [r3, #0]
    if (*angle > M_PI) *angle -= 2 * M_PI;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8c5 	bl	8000548 <__aeabi_f2d>
 80013be:	a320      	add	r3, pc, #128	@ (adr r3, 8001440 <CalculateTargetError+0x148>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff fba8 	bl	8000b18 <__aeabi_dcmpgt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d012      	beq.n	80013f4 <CalculateTargetError+0xfc>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8b8 	bl	8000548 <__aeabi_f2d>
 80013d8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001448 <CalculateTargetError+0x150>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7fe ff53 	bl	8000288 <__aeabi_dsub>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fbdd 	bl	8000ba8 <__aeabi_d2f>
 80013ee:	4602      	mov	r2, r0
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	601a      	str	r2, [r3, #0]
    if (*angle < -M_PI) *angle += 2 * M_PI;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8a5 	bl	8000548 <__aeabi_f2d>
 80013fe:	a314      	add	r3, pc, #80	@ (adr r3, 8001450 <CalculateTargetError+0x158>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff fb6a 	bl	8000adc <__aeabi_dcmplt>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d100      	bne.n	8001410 <CalculateTargetError+0x118>
}
 800140e:	e012      	b.n	8001436 <CalculateTargetError+0x13e>
    if (*angle < -M_PI) *angle += 2 * M_PI;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f897 	bl	8000548 <__aeabi_f2d>
 800141a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001448 <CalculateTargetError+0x150>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7fe ff34 	bl	800028c <__adddf3>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fbbc 	bl	8000ba8 <__aeabi_d2f>
 8001430:	4602      	mov	r2, r0
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	601a      	str	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bdb0      	pop	{r4, r5, r7, pc}
 800143e:	bf00      	nop
 8001440:	54442d18 	.word	0x54442d18
 8001444:	400921fb 	.word	0x400921fb
 8001448:	54442d18 	.word	0x54442d18
 800144c:	401921fb 	.word	0x401921fb
 8001450:	54442d18 	.word	0x54442d18
 8001454:	c00921fb 	.word	0xc00921fb

08001458 <SetMotorDirection>:
void UART_Transmit(const char *data) {
    HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}


void SetMotorDirection(int direction_L, int direction_R) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]

    if (direction_L == 1) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10b      	bne.n	8001480 <SetMotorDirection+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800146e:	4819      	ldr	r0, [pc, #100]	@ (80014d4 <SetMotorDirection+0x7c>)
 8001470:	f001 f9c4 	bl	80027fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2120      	movs	r1, #32
 8001478:	4816      	ldr	r0, [pc, #88]	@ (80014d4 <SetMotorDirection+0x7c>)
 800147a:	f001 f9bf 	bl	80027fc <HAL_GPIO_WritePin>
 800147e:	e00a      	b.n	8001496 <SetMotorDirection+0x3e>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001486:	4813      	ldr	r0, [pc, #76]	@ (80014d4 <SetMotorDirection+0x7c>)
 8001488:	f001 f9b8 	bl	80027fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2120      	movs	r1, #32
 8001490:	4810      	ldr	r0, [pc, #64]	@ (80014d4 <SetMotorDirection+0x7c>)
 8001492:	f001 f9b3 	bl	80027fc <HAL_GPIO_WritePin>
    }

    if (direction_R == 1) {
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d10b      	bne.n	80014b4 <SetMotorDirection+0x5c>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2140      	movs	r1, #64	@ 0x40
 80014a0:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <SetMotorDirection+0x7c>)
 80014a2:	f001 f9ab 	bl	80027fc <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ac:	4809      	ldr	r0, [pc, #36]	@ (80014d4 <SetMotorDirection+0x7c>)
 80014ae:	f001 f9a5 	bl	80027fc <HAL_GPIO_WritePin>
          } else {
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
          }

}
 80014b2:	e00a      	b.n	80014ca <SetMotorDirection+0x72>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2140      	movs	r1, #64	@ 0x40
 80014b8:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <SetMotorDirection+0x7c>)
 80014ba:	f001 f99f 	bl	80027fc <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014c4:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <SetMotorDirection+0x7c>)
 80014c6:	f001 f999 	bl	80027fc <HAL_GPIO_WritePin>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	48000800 	.word	0x48000800

080014d8 <_write>:
    } else {
        UART_Transmit("Sensor 2: No object detected\r\n");
    }
}

int _write(int file, char* ptr, int len){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	4804      	ldr	r0, [pc, #16]	@ (8001500 <_write+0x28>)
 80014f0:	f003 ff5c 	bl	80053ac <HAL_UART_Transmit>
	return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000394 	.word	0x20000394

08001504 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    if(htim == &htim6){
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a16      	ldr	r2, [pc, #88]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d123      	bne.n	800155c <HAL_TIM_PeriodElapsedCallback+0x58>

    	speed_L = ( TIMER_FREQENCY * __HAL_TIM_GET_COUNTER(&htim2) * SECOND_IN_MINUTE) / ( MOTOR_1_GEAR * ENCODER_1_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2);
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	09db      	lsrs	r3, r3, #7
 8001524:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	461a      	mov	r2, r3
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800152e:	601a      	str	r2, [r3, #0]
    	htim2.Instance->CNT = 0;
 8001530:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24

    	speed_R = ( TIMER_FREQENCY * __HAL_TIM_GET_COUNTER(&htim3) * SECOND_IN_MINUTE) / ( MOTOR_2_GEAR * ENCODER_2_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2);
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	09db      	lsrs	r3, r3, #7
 8001548:	4a0c      	ldr	r2, [pc, #48]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	461a      	mov	r2, r3
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001552:	601a      	str	r2, [r3, #0]
    	htim3.Instance->CNT = 0;
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24

    }
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	20000348 	.word	0x20000348
 800156c:	200002b0 	.word	0x200002b0
 8001570:	0c30c312 	.word	0x0c30c312
 8001574:	20000204 	.word	0x20000204
 8001578:	200002fc 	.word	0x200002fc
 800157c:	06906909 	.word	0x06906909
 8001580:	20000208 	.word	0x20000208

08001584 <PID_Compute>:


float PID_Compute(PID_TypeDef *pid, float current_value) {
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	ed87 0a00 	vstr	s0, [r7]

    float error = pid->setpoint - current_value;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	ed93 7a03 	vldr	s14, [r3, #12]
 8001596:	edd7 7a00 	vldr	s15, [r7]
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	edc7 7a03 	vstr	s15, [r7, #12]
    pid->integral += error;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80015a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	edc3 7a05 	vstr	s15, [r3, #20]
    float derivative = error - pid->prev_error;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80015bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80015c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c4:	edc7 7a02 	vstr	s15, [r7, #8]

    pid->output = (pid->Kp * error) + (pid->Ki * pid->integral) + (pid->Kd * derivative);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	ed93 7a00 	vldr	s14, [r3]
 80015ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	edd3 7a05 	vldr	s15, [r3, #20]
 80015e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80015f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	edc3 7a06 	vstr	s15, [r3, #24]
    pid->prev_error = error;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	611a      	str	r2, [r3, #16]


    return pid->output;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	ee07 3a90 	vmov	s15, r3
}
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001624:	b08c      	sub	sp, #48	@ 0x30
 8001626:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001628:	f000 fd8c 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162c:	f000 f8f4 	bl	8001818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001630:	f7ff fc82 	bl	8000f38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001634:	f000 fcd0 	bl	8001fd8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001638:	f000 fa60 	bl	8001afc <MX_TIM1_Init>
  MX_TIM2_Init();
 800163c:	f000 fafa 	bl	8001c34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001640:	f000 fb4c 	bl	8001cdc <MX_TIM3_Init>
  MX_TIM6_Init();
 8001644:	f000 fba0 	bl	8001d88 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001648:	2100      	movs	r1, #0
 800164a:	4861      	ldr	r0, [pc, #388]	@ (80017d0 <main+0x1b0>)
 800164c:	f002 fd2e 	bl	80040ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001650:	2104      	movs	r1, #4
 8001652:	485f      	ldr	r0, [pc, #380]	@ (80017d0 <main+0x1b0>)
 8001654:	f002 fd2a 	bl	80040ac <HAL_TIM_PWM_Start>
  //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
  //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001658:	213c      	movs	r1, #60	@ 0x3c
 800165a:	485e      	ldr	r0, [pc, #376]	@ (80017d4 <main+0x1b4>)
 800165c:	f002 fed2 	bl	8004404 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001660:	213c      	movs	r1, #60	@ 0x3c
 8001662:	485d      	ldr	r0, [pc, #372]	@ (80017d8 <main+0x1b8>)
 8001664:	f002 fece 	bl	8004404 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8001668:	485c      	ldr	r0, [pc, #368]	@ (80017dc <main+0x1bc>)
 800166a:	f002 fc57 	bl	8003f1c <HAL_TIM_Base_Start_IT>

  Odometry_Init(&odom);
 800166e:	485c      	ldr	r0, [pc, #368]	@ (80017e0 <main+0x1c0>)
 8001670:	f7ff fd16 	bl	80010a0 <Odometry_Init>

  PID_Init(&pid_L, 2, 0.1, 0.2, 50);
 8001674:	eddf 1a5b 	vldr	s3, [pc, #364]	@ 80017e4 <main+0x1c4>
 8001678:	ed9f 1a5b 	vldr	s2, [pc, #364]	@ 80017e8 <main+0x1c8>
 800167c:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 80017ec <main+0x1cc>
 8001680:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001684:	485a      	ldr	r0, [pc, #360]	@ (80017f0 <main+0x1d0>)
 8001686:	f7ff fce1 	bl	800104c <PID_Init>
  PID_Init(&pid_R, 2, 0.1, 0.2, 50);
 800168a:	eddf 1a56 	vldr	s3, [pc, #344]	@ 80017e4 <main+0x1c4>
 800168e:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 80017e8 <main+0x1c8>
 8001692:	eddf 0a56 	vldr	s1, [pc, #344]	@ 80017ec <main+0x1cc>
 8001696:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800169a:	4856      	ldr	r0, [pc, #344]	@ (80017f4 <main+0x1d4>)
 800169c:	f7ff fcd6 	bl	800104c <PID_Init>

  uint32_t prev_time = HAL_GetTick();
 80016a0:	f000 fdc0 	bl	8002224 <HAL_GetTick>
 80016a4:	61f8      	str	r0, [r7, #28]


  SetMotorDirection(0,0);
 80016a6:	2100      	movs	r1, #0
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fed5 	bl	8001458 <SetMotorDirection>

  SetTarget(10.0f, 5.0f);
 80016ae:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80016b2:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80016b6:	f7ff fe09 	bl	80012cc <SetTarget>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      	  count = __HAL_TIM_GET_COUNTER(&htim2);
 80016ba:	4b46      	ldr	r3, [pc, #280]	@ (80017d4 <main+0x1b4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	4a4d      	ldr	r2, [pc, #308]	@ (80017f8 <main+0x1d8>)
 80016c2:	6013      	str	r3, [r2, #0]
      	  count1 = __HAL_TIM_GET_COUNTER(&htim3);
 80016c4:	4b44      	ldr	r3, [pc, #272]	@ (80017d8 <main+0x1b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	4a4c      	ldr	r2, [pc, #304]	@ (80017fc <main+0x1dc>)
 80016cc:	6013      	str	r3, [r2, #0]

          uint32_t current_time = HAL_GetTick();
 80016ce:	f000 fda9 	bl	8002224 <HAL_GetTick>
 80016d2:	61b8      	str	r0, [r7, #24]
          float dt = (current_time - prev_time) / 1000.0f;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016e2:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8001800 <main+0x1e0>
 80016e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ea:	edc7 7a05 	vstr	s15, [r7, #20]
          prev_time = current_time;
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	61fb      	str	r3, [r7, #28]

          float distance, angle;
          CalculateTargetError(&odom, &target, &distance, &angle);
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	f107 0208 	add.w	r2, r7, #8
 80016f8:	4942      	ldr	r1, [pc, #264]	@ (8001804 <main+0x1e4>)
 80016fa:	4839      	ldr	r0, [pc, #228]	@ (80017e0 <main+0x1c0>)
 80016fc:	f7ff fdfc 	bl	80012f8 <CalculateTargetError>

          // Update PID setpoints
          pid_L.setpoint = distance;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4a3b      	ldr	r2, [pc, #236]	@ (80017f0 <main+0x1d0>)
 8001704:	60d3      	str	r3, [r2, #12]
          pid_R.setpoint = angle;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a3a      	ldr	r2, [pc, #232]	@ (80017f4 <main+0x1d4>)
 800170a:	60d3      	str	r3, [r2, #12]

          // Calculate speed using PID controllers
          float speed_L = PID_Compute(&pid_L, 0);
 800170c:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8001808 <main+0x1e8>
 8001710:	4837      	ldr	r0, [pc, #220]	@ (80017f0 <main+0x1d0>)
 8001712:	f7ff ff37 	bl	8001584 <PID_Compute>
 8001716:	ed87 0a04 	vstr	s0, [r7, #16]
          float speed_R = PID_Compute(&pid_R, 0);
 800171a:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001808 <main+0x1e8>
 800171e:	4835      	ldr	r0, [pc, #212]	@ (80017f4 <main+0x1d4>)
 8001720:	f7ff ff30 	bl	8001584 <PID_Compute>
 8001724:	ed87 0a03 	vstr	s0, [r7, #12]
          // Update motor speeds
          //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed_L);
          //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed_R);

          // Update odometry
          Update_Odometry(&odom, speed_L, speed_R, dt);
 8001728:	ed97 1a05 	vldr	s2, [r7, #20]
 800172c:	edd7 0a03 	vldr	s1, [r7, #12]
 8001730:	ed97 0a04 	vldr	s0, [r7, #16]
 8001734:	482a      	ldr	r0, [pc, #168]	@ (80017e0 <main+0x1c0>)
 8001736:	f7ff fccb 	bl	80010d0 <Update_Odometry>

          // Print odometry and target data for debugging
          printf("Position: x = %.2f, y = %.2f, theta = %.2f\n\r", odom.x, odom.y, odom.theta);
 800173a:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <main+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff02 	bl	8000548 <__aeabi_f2d>
 8001744:	4680      	mov	r8, r0
 8001746:	4689      	mov	r9, r1
 8001748:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <main+0x1c0>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fefb 	bl	8000548 <__aeabi_f2d>
 8001752:	4604      	mov	r4, r0
 8001754:	460d      	mov	r5, r1
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <main+0x1c0>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fef4 	bl	8000548 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001768:	e9cd 4500 	strd	r4, r5, [sp]
 800176c:	4642      	mov	r2, r8
 800176e:	464b      	mov	r3, r9
 8001770:	4826      	ldr	r0, [pc, #152]	@ (800180c <main+0x1ec>)
 8001772:	f006 fc7b 	bl	800806c <iprintf>
          printf("Target: x = %.2f, y = %.2f\n\r", target.x, target.y);
 8001776:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <main+0x1e4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fee4 	bl	8000548 <__aeabi_f2d>
 8001780:	4604      	mov	r4, r0
 8001782:	460d      	mov	r5, r1
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <main+0x1e4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fedd 	bl	8000548 <__aeabi_f2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	e9cd 2300 	strd	r2, r3, [sp]
 8001796:	4622      	mov	r2, r4
 8001798:	462b      	mov	r3, r5
 800179a:	481d      	ldr	r0, [pc, #116]	@ (8001810 <main+0x1f0>)
 800179c:	f006 fc66 	bl	800806c <iprintf>
          printf("Distance to target: %.2f, Angle to target: %.2f\n\r", distance, angle);
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fed0 	bl	8000548 <__aeabi_f2d>
 80017a8:	4604      	mov	r4, r0
 80017aa:	460d      	mov	r5, r1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe feca 	bl	8000548 <__aeabi_f2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	e9cd 2300 	strd	r2, r3, [sp]
 80017bc:	4622      	mov	r2, r4
 80017be:	462b      	mov	r3, r5
 80017c0:	4814      	ldr	r0, [pc, #80]	@ (8001814 <main+0x1f4>)
 80017c2:	f006 fc53 	bl	800806c <iprintf>

          HAL_Delay(50);
 80017c6:	2032      	movs	r0, #50	@ 0x32
 80017c8:	f000 fd38 	bl	800223c <HAL_Delay>
  {
 80017cc:	bf00      	nop
 80017ce:	e774      	b.n	80016ba <main+0x9a>
 80017d0:	20000264 	.word	0x20000264
 80017d4:	200002b0 	.word	0x200002b0
 80017d8:	200002fc 	.word	0x200002fc
 80017dc:	20000348 	.word	0x20000348
 80017e0:	2000024c 	.word	0x2000024c
 80017e4:	42480000 	.word	0x42480000
 80017e8:	3e4ccccd 	.word	0x3e4ccccd
 80017ec:	3dcccccd 	.word	0x3dcccccd
 80017f0:	20000214 	.word	0x20000214
 80017f4:	20000230 	.word	0x20000230
 80017f8:	2000020c 	.word	0x2000020c
 80017fc:	20000210 	.word	0x20000210
 8001800:	447a0000 	.word	0x447a0000
 8001804:	20000258 	.word	0x20000258
 8001808:	00000000 	.word	0x00000000
 800180c:	08009ff0 	.word	0x08009ff0
 8001810:	0800a020 	.word	0x0800a020
 8001814:	0800a040 	.word	0x0800a040

08001818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b096      	sub	sp, #88	@ 0x58
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	2244      	movs	r2, #68	@ 0x44
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f006 fc32 	bl	8008090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	463b      	mov	r3, r7
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800183a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800183e:	f001 f803 	bl	8002848 <HAL_PWREx_ControlVoltageScaling>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001848:	f000 f837 	bl	80018ba <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800184c:	2302      	movs	r3, #2
 800184e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001854:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001856:	2310      	movs	r3, #16
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185a:	2302      	movs	r3, #2
 800185c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800185e:	2302      	movs	r3, #2
 8001860:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001862:	2301      	movs	r3, #1
 8001864:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001866:	230a      	movs	r3, #10
 8001868:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800186a:	2307      	movs	r3, #7
 800186c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800186e:	2302      	movs	r3, #2
 8001870:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001872:	2302      	movs	r3, #2
 8001874:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4618      	mov	r0, r3
 800187c:	f001 f83a 	bl	80028f4 <HAL_RCC_OscConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001886:	f000 f818 	bl	80018ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188a:	230f      	movs	r3, #15
 800188c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188e:	2303      	movs	r3, #3
 8001890:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800189e:	463b      	mov	r3, r7
 80018a0:	2104      	movs	r1, #4
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fc02 	bl	80030ac <HAL_RCC_ClockConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018ae:	f000 f804 	bl	80018ba <Error_Handler>
  }
}
 80018b2:	bf00      	nop
 80018b4:	3758      	adds	r7, #88	@ 0x58
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018be:	b672      	cpsid	i
}
 80018c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c2:	bf00      	nop
 80018c4:	e7fd      	b.n	80018c2 <Error_Handler+0x8>
	...

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <HAL_MspInit+0x44>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d2:	4a0e      	ldr	r2, [pc, #56]	@ (800190c <HAL_MspInit+0x44>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <HAL_MspInit+0x44>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_MspInit+0x44>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	4a08      	ldr	r2, [pc, #32]	@ (800190c <HAL_MspInit+0x44>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_MspInit+0x44>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <NMI_Handler+0x4>

08001918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <MemManage_Handler+0x4>

08001928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <UsageFault_Handler+0x4>

08001938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001966:	f000 fc49 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <TIM6_DAC_IRQHandler+0x10>)
 8001976:	f002 fdd3 	bl	8004520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000348 	.word	0x20000348

08001984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_kill>:

int _kill(int pid, int sig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800199e:	f006 fb83 	bl	80080a8 <__errno>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2216      	movs	r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
  return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_exit>:

void _exit (int status)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffe7 	bl	8001994 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c6:	bf00      	nop
 80019c8:	e7fd      	b.n	80019c6 <_exit+0x12>

080019ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e00a      	b.n	80019f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019dc:	f3af 8000 	nop.w
 80019e0:	4601      	mov	r1, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	60ba      	str	r2, [r7, #8]
 80019e8:	b2ca      	uxtb	r2, r1
 80019ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbf0      	blt.n	80019dc <_read+0x12>
  }

  return len;
 80019fa:	687b      	ldr	r3, [r7, #4]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_isatty>:

int _isatty(int file)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f006 fb04 	bl	80080a8 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20018000 	.word	0x20018000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	20000260 	.word	0x20000260
 8001ad4:	20000570 	.word	0x20000570

08001ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b096      	sub	sp, #88	@ 0x58
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	222c      	movs	r2, #44	@ 0x2c
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f006 fab1 	bl	8008090 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001b30:	4a3f      	ldr	r2, [pc, #252]	@ (8001c30 <MX_TIM1_Init+0x134>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001b34:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001b36:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001b3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b42:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001b44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b38      	ldr	r3, [pc, #224]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b50:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b35      	ldr	r3, [pc, #212]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b5c:	4833      	ldr	r0, [pc, #204]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001b5e:	f002 fa4d 	bl	8003ffc <HAL_TIM_PWM_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001b68:	f7ff fea7 	bl	80018ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	482b      	ldr	r0, [pc, #172]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001b80:	f003 faa2 	bl	80050c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001b8a:	f7ff fe96 	bl	80018ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8e:	2360      	movs	r3, #96	@ 0x60
 8001b90:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b96:	2300      	movs	r3, #0
 8001b98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001baa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	481e      	ldr	r0, [pc, #120]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001bb4:	f002 fdb6 	bl	8004724 <HAL_TIM_PWM_ConfigChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001bbe:	f7ff fe7c 	bl	80018ba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4818      	ldr	r0, [pc, #96]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001bcc:	f002 fdaa 	bl	8004724 <HAL_TIM_PWM_ConfigChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001bd6:	f7ff fe70 	bl	80018ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001c10:	f003 fae2 	bl	80051d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8001c1a:	f7ff fe4e 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c1e:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <MX_TIM1_Init+0x130>)
 8001c20:	f000 f9a2 	bl	8001f68 <HAL_TIM_MspPostInit>

}
 8001c24:	bf00      	nop
 8001c26:	3758      	adds	r7, #88	@ 0x58
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000264 	.word	0x20000264
 8001c30:	40012c00 	.word	0x40012c00

08001c34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	@ 0x30
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	2224      	movs	r2, #36	@ 0x24
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f006 fa24 	bl	8008090 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c52:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <MX_TIM2_Init+0xa4>)
 8001c54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <MX_TIM2_Init+0xa4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd8 <MX_TIM2_Init+0xa4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <MX_TIM2_Init+0xa4>)
 8001c68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <MX_TIM2_Init+0xa4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <MX_TIM2_Init+0xa4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001c8a:	230f      	movs	r3, #15
 8001c8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c92:	2301      	movs	r3, #1
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <MX_TIM2_Init+0xa4>)
 8001ca6:	f002 fb07 	bl	80042b8 <HAL_TIM_Encoder_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001cb0:	f7ff fe03 	bl	80018ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <MX_TIM2_Init+0xa4>)
 8001cc2:	f003 fa01 	bl	80050c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001ccc:	f7ff fdf5 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3730      	adds	r7, #48	@ 0x30
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200002b0 	.word	0x200002b0

08001cdc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	@ 0x30
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	2224      	movs	r2, #36	@ 0x24
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f006 f9d0 	bl	8008090 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <MX_TIM3_Init+0xa4>)
 8001cfc:	4a21      	ldr	r2, [pc, #132]	@ (8001d84 <MX_TIM3_Init+0xa8>)
 8001cfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <MX_TIM3_Init+0xa4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <MX_TIM3_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <MX_TIM3_Init+0xa4>)
 8001d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <MX_TIM3_Init+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <MX_TIM3_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d20:	2303      	movs	r3, #3
 8001d22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001d30:	230f      	movs	r3, #15
 8001d32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480d      	ldr	r0, [pc, #52]	@ (8001d80 <MX_TIM3_Init+0xa4>)
 8001d4c:	f002 fab4 	bl	80042b8 <HAL_TIM_Encoder_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001d56:	f7ff fdb0 	bl	80018ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d62:	463b      	mov	r3, r7
 8001d64:	4619      	mov	r1, r3
 8001d66:	4806      	ldr	r0, [pc, #24]	@ (8001d80 <MX_TIM3_Init+0xa4>)
 8001d68:	f003 f9ae 	bl	80050c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001d72:	f7ff fda2 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	3730      	adds	r7, #48	@ 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200002fc 	.word	0x200002fc
 8001d84:	40000400 	.word	0x40000400

08001d88 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d98:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <MX_TIM6_Init+0x68>)
 8001d9a:	4a16      	ldr	r2, [pc, #88]	@ (8001df4 <MX_TIM6_Init+0x6c>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001d9e:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <MX_TIM6_Init+0x68>)
 8001da0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001da4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <MX_TIM6_Init+0x68>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001dac:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <MX_TIM6_Init+0x68>)
 8001dae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001db2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <MX_TIM6_Init+0x68>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dba:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <MX_TIM6_Init+0x68>)
 8001dbc:	f002 f856 	bl	8003e6c <HAL_TIM_Base_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001dc6:	f7ff fd78 	bl	80018ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	@ (8001df0 <MX_TIM6_Init+0x68>)
 8001dd8:	f003 f976 	bl	80050c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001de2:	f7ff fd6a 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000348 	.word	0x20000348
 8001df4:	40001000 	.word	0x40001000

08001df8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <HAL_TIM_PWM_MspInit+0x38>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10b      	bne.n	8001e22 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0e:	4a09      	ldr	r2, [pc, #36]	@ (8001e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e16:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08c      	sub	sp, #48	@ 0x30
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e58:	d129      	bne.n	8001eae <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e66:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e7e:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea8:	f000 fafe 	bl	80024a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001eac:	e02d      	b.n	8001f0a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d128      	bne.n	8001f0a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebc:	4a15      	ldr	r2, [pc, #84]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec4:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ee8:	23c0      	movs	r3, #192	@ 0xc0
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f06:	f000 facf 	bl	80024a8 <HAL_GPIO_Init>
}
 8001f0a:	bf00      	nop
 8001f0c:	3730      	adds	r7, #48	@ 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40000400 	.word	0x40000400

08001f1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <HAL_TIM_Base_MspInit+0x44>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d113      	bne.n	8001f56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <HAL_TIM_Base_MspInit+0x48>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	4a0c      	ldr	r2, [pc, #48]	@ (8001f64 <HAL_TIM_Base_MspInit+0x48>)
 8001f34:	f043 0310 	orr.w	r3, r3, #16
 8001f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_TIM_Base_MspInit+0x48>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2036      	movs	r0, #54	@ 0x36
 8001f4c:	f000 fa75 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f50:	2036      	movs	r0, #54	@ 0x36
 8001f52:	f000 fa8e 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40001000 	.word	0x40001000
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <HAL_TIM_MspPostInit+0x68>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d11d      	bne.n	8001fc6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_TIM_MspPostInit+0x6c>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <HAL_TIM_MspPostInit+0x6c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_TIM_MspPostInit+0x6c>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc2:	f000 fa71 	bl	80024a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 8001fde:	4a15      	ldr	r2, [pc, #84]	@ (8002034 <MX_USART2_UART_Init+0x5c>)
 8001fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 8001fe4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 8001ffe:	220c      	movs	r2, #12
 8002000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200e:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 8002016:	2200      	movs	r2, #0
 8002018:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201a:	4805      	ldr	r0, [pc, #20]	@ (8002030 <MX_USART2_UART_Init+0x58>)
 800201c:	f003 f978 	bl	8005310 <HAL_UART_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002026:	f7ff fc48 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000394 	.word	0x20000394
 8002034:	40004400 	.word	0x40004400

08002038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0ac      	sub	sp, #176	@ 0xb0
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2288      	movs	r2, #136	@ 0x88
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f006 f819 	bl	8008090 <memset>
  if(uartHandle->Instance==USART2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a21      	ldr	r2, [pc, #132]	@ (80020e8 <HAL_UART_MspInit+0xb0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d13b      	bne.n	80020e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002068:	2302      	movs	r3, #2
 800206a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800206c:	2300      	movs	r3, #0
 800206e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4618      	mov	r0, r3
 8002076:	f001 fa3d 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002080:	f7ff fc1b 	bl	80018ba <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002084:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <HAL_UART_MspInit+0xb4>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	4a18      	ldr	r2, [pc, #96]	@ (80020ec <HAL_UART_MspInit+0xb4>)
 800208a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002090:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <HAL_UART_MspInit+0xb4>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <HAL_UART_MspInit+0xb4>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a0:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <HAL_UART_MspInit+0xb4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a8:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <HAL_UART_MspInit+0xb4>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020b4:	230c      	movs	r3, #12
 80020b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020cc:	2307      	movs	r3, #7
 80020ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020dc:	f000 f9e4 	bl	80024a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020e0:	bf00      	nop
 80020e2:	37b0      	adds	r7, #176	@ 0xb0
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40004400 	.word	0x40004400
 80020ec:	40021000 	.word	0x40021000

080020f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f4:	f7ff fcf0 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <LoopForever+0x6>)
  ldr r1, =_edata
 80020fa:	490d      	ldr	r1, [pc, #52]	@ (8002130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <LoopForever+0xe>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002110:	4c0a      	ldr	r4, [pc, #40]	@ (800213c <LoopForever+0x16>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211e:	f005 ffc9 	bl	80080b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002122:	f7ff fa7d 	bl	8001620 <main>

08002126 <LoopForever>:

LoopForever:
    b LoopForever
 8002126:	e7fe      	b.n	8002126 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002128:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002134:	0800a688 	.word	0x0800a688
  ldr r2, =_sbss
 8002138:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800213c:	2000056c 	.word	0x2000056c

08002140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_2_IRQHandler>
	...

08002144 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <HAL_Init+0x3c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a0b      	ldr	r2, [pc, #44]	@ (8002180 <HAL_Init+0x3c>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002158:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215a:	2003      	movs	r0, #3
 800215c:	f000 f962 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002160:	2000      	movs	r0, #0
 8002162:	f000 f80f 	bl	8002184 <HAL_InitTick>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	e001      	b.n	8002176 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002172:	f7ff fba9 	bl	80018c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002176:	79fb      	ldrb	r3, [r7, #7]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002190:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <HAL_InitTick+0x6c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d023      	beq.n	80021e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002198:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <HAL_InitTick+0x70>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <HAL_InitTick+0x6c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f96d 	bl	800248e <HAL_SYSTICK_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b0f      	cmp	r3, #15
 80021be:	d809      	bhi.n	80021d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c0:	2200      	movs	r2, #0
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021c8:	f000 f937 	bl	800243a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021cc:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <HAL_InitTick+0x74>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e007      	b.n	80021e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e004      	b.n	80021e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	e001      	b.n	80021e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000008 	.word	0x20000008
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	2000041c 	.word	0x2000041c

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	2000041c 	.word	0x2000041c

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff ffee 	bl	8002224 <HAL_GetTick>
 8002248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002262:	bf00      	nop
 8002264:	f7ff ffde 	bl	8002224 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000008 	.word	0x20000008

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	@ (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	@ (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff3e 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff31 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa2 	bl	80023e0 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b6:	e17f      	b.n	80027b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	4013      	ands	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8171 	beq.w	80027b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d005      	beq.n	80024e8 <HAL_GPIO_Init+0x40>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d130      	bne.n	800254a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800251e:	2201      	movs	r2, #1
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 0201 	and.w	r2, r3, #1
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b03      	cmp	r3, #3
 8002554:	d118      	bne.n	8002588 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800255c:	2201      	movs	r2, #1
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	f003 0201 	and.w	r2, r3, #1
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b03      	cmp	r3, #3
 8002592:	d017      	beq.n	80025c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d123      	bne.n	8002618 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	08da      	lsrs	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3208      	adds	r2, #8
 80025d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	220f      	movs	r2, #15
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	08da      	lsrs	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3208      	adds	r2, #8
 8002612:	6939      	ldr	r1, [r7, #16]
 8002614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0203 	and.w	r2, r3, #3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80ac 	beq.w	80027b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	4b5f      	ldr	r3, [pc, #380]	@ (80027d8 <HAL_GPIO_Init+0x330>)
 800265c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265e:	4a5e      	ldr	r2, [pc, #376]	@ (80027d8 <HAL_GPIO_Init+0x330>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6613      	str	r3, [r2, #96]	@ 0x60
 8002666:	4b5c      	ldr	r3, [pc, #368]	@ (80027d8 <HAL_GPIO_Init+0x330>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002672:	4a5a      	ldr	r2, [pc, #360]	@ (80027dc <HAL_GPIO_Init+0x334>)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800269c:	d025      	beq.n	80026ea <HAL_GPIO_Init+0x242>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4f      	ldr	r2, [pc, #316]	@ (80027e0 <HAL_GPIO_Init+0x338>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01f      	beq.n	80026e6 <HAL_GPIO_Init+0x23e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4e      	ldr	r2, [pc, #312]	@ (80027e4 <HAL_GPIO_Init+0x33c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d019      	beq.n	80026e2 <HAL_GPIO_Init+0x23a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4d      	ldr	r2, [pc, #308]	@ (80027e8 <HAL_GPIO_Init+0x340>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_GPIO_Init+0x236>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4c      	ldr	r2, [pc, #304]	@ (80027ec <HAL_GPIO_Init+0x344>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00d      	beq.n	80026da <HAL_GPIO_Init+0x232>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4b      	ldr	r2, [pc, #300]	@ (80027f0 <HAL_GPIO_Init+0x348>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <HAL_GPIO_Init+0x22e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4a      	ldr	r2, [pc, #296]	@ (80027f4 <HAL_GPIO_Init+0x34c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d101      	bne.n	80026d2 <HAL_GPIO_Init+0x22a>
 80026ce:	2306      	movs	r3, #6
 80026d0:	e00c      	b.n	80026ec <HAL_GPIO_Init+0x244>
 80026d2:	2307      	movs	r3, #7
 80026d4:	e00a      	b.n	80026ec <HAL_GPIO_Init+0x244>
 80026d6:	2305      	movs	r3, #5
 80026d8:	e008      	b.n	80026ec <HAL_GPIO_Init+0x244>
 80026da:	2304      	movs	r3, #4
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x244>
 80026de:	2303      	movs	r3, #3
 80026e0:	e004      	b.n	80026ec <HAL_GPIO_Init+0x244>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_Init+0x244>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_Init+0x244>
 80026ea:	2300      	movs	r3, #0
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	f002 0203 	and.w	r2, r2, #3
 80026f2:	0092      	lsls	r2, r2, #2
 80026f4:	4093      	lsls	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026fc:	4937      	ldr	r1, [pc, #220]	@ (80027dc <HAL_GPIO_Init+0x334>)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800270a:	4b3b      	ldr	r3, [pc, #236]	@ (80027f8 <HAL_GPIO_Init+0x350>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800272e:	4a32      	ldr	r2, [pc, #200]	@ (80027f8 <HAL_GPIO_Init+0x350>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002734:	4b30      	ldr	r3, [pc, #192]	@ (80027f8 <HAL_GPIO_Init+0x350>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002758:	4a27      	ldr	r2, [pc, #156]	@ (80027f8 <HAL_GPIO_Init+0x350>)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800275e:	4b26      	ldr	r3, [pc, #152]	@ (80027f8 <HAL_GPIO_Init+0x350>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002782:	4a1d      	ldr	r2, [pc, #116]	@ (80027f8 <HAL_GPIO_Init+0x350>)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002788:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <HAL_GPIO_Init+0x350>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ac:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <HAL_GPIO_Init+0x350>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f47f ae78 	bne.w	80024b8 <HAL_GPIO_Init+0x10>
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40010000 	.word	0x40010000
 80027e0:	48000400 	.word	0x48000400
 80027e4:	48000800 	.word	0x48000800
 80027e8:	48000c00 	.word	0x48000c00
 80027ec:	48001000 	.word	0x48001000
 80027f0:	48001400 	.word	0x48001400
 80027f4:	48001800 	.word	0x48001800
 80027f8:	40010400 	.word	0x40010400

080027fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
 8002808:	4613      	mov	r3, r2
 800280a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800280c:	787b      	ldrb	r3, [r7, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002818:	e002      	b.n	8002820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002830:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <HAL_PWREx_GetVoltageRange+0x18>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40007000 	.word	0x40007000

08002848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002856:	d130      	bne.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002858:	4b23      	ldr	r3, [pc, #140]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002864:	d038      	beq.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002866:	4b20      	ldr	r3, [pc, #128]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800286e:	4a1e      	ldr	r2, [pc, #120]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002870:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002876:	4b1d      	ldr	r3, [pc, #116]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2232      	movs	r2, #50	@ 0x32
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	4a1b      	ldr	r2, [pc, #108]	@ (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0c9b      	lsrs	r3, r3, #18
 8002888:	3301      	adds	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288c:	e002      	b.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3b01      	subs	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002894:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a0:	d102      	bne.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f2      	bne.n	800288e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028a8:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b4:	d110      	bne.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e00f      	b.n	80028da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ba:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c6:	d007      	beq.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028c8:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028d0:	4a05      	ldr	r2, [pc, #20]	@ (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40007000 	.word	0x40007000
 80028ec:	20000000 	.word	0x20000000
 80028f0:	431bde83 	.word	0x431bde83

080028f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e3ca      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002906:	4b97      	ldr	r3, [pc, #604]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002910:	4b94      	ldr	r3, [pc, #592]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80e4 	beq.w	8002af0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <HAL_RCC_OscConfig+0x4a>
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b0c      	cmp	r3, #12
 8002932:	f040 808b 	bne.w	8002a4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b01      	cmp	r3, #1
 800293a:	f040 8087 	bne.w	8002a4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800293e:	4b89      	ldr	r3, [pc, #548]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x62>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e3a2      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1a      	ldr	r2, [r3, #32]
 800295a:	4b82      	ldr	r3, [pc, #520]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <HAL_RCC_OscConfig+0x7c>
 8002966:	4b7f      	ldr	r3, [pc, #508]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800296e:	e005      	b.n	800297c <HAL_RCC_OscConfig+0x88>
 8002970:	4b7c      	ldr	r3, [pc, #496]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800297c:	4293      	cmp	r3, r2
 800297e:	d223      	bcs.n	80029c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fd55 	bl	8003434 <RCC_SetFlashLatencyFromMSIRange>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e383      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002994:	4b73      	ldr	r3, [pc, #460]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a72      	ldr	r2, [pc, #456]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 800299a:	f043 0308 	orr.w	r3, r3, #8
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b70      	ldr	r3, [pc, #448]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	496d      	ldr	r1, [pc, #436]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	4968      	ldr	r1, [pc, #416]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
 80029c6:	e025      	b.n	8002a14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029c8:	4b66      	ldr	r3, [pc, #408]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a65      	ldr	r2, [pc, #404]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b63      	ldr	r3, [pc, #396]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4960      	ldr	r1, [pc, #384]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	495b      	ldr	r1, [pc, #364]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fd15 	bl	8003434 <RCC_SetFlashLatencyFromMSIRange>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e343      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a14:	f000 fc4a 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b52      	ldr	r3, [pc, #328]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	4950      	ldr	r1, [pc, #320]	@ (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a30:	4a4e      	ldr	r2, [pc, #312]	@ (8002b6c <HAL_RCC_OscConfig+0x278>)
 8002a32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a34:	4b4e      	ldr	r3, [pc, #312]	@ (8002b70 <HAL_RCC_OscConfig+0x27c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fba3 	bl	8002184 <HAL_InitTick>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d052      	beq.n	8002aee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	e327      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d032      	beq.n	8002aba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a54:	4b43      	ldr	r3, [pc, #268]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a42      	ldr	r2, [pc, #264]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a60:	f7ff fbe0 	bl	8002224 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a68:	f7ff fbdc 	bl	8002224 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e310      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a86:	4b37      	ldr	r3, [pc, #220]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a36      	ldr	r2, [pc, #216]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	f043 0308 	orr.w	r3, r3, #8
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4931      	ldr	r1, [pc, #196]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	492c      	ldr	r1, [pc, #176]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	e01a      	b.n	8002af0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aba:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a29      	ldr	r2, [pc, #164]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff fbad 	bl	8002224 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ace:	f7ff fba9 	bl	8002224 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e2dd      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ae0:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x1da>
 8002aec:	e000      	b.n	8002af0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d074      	beq.n	8002be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x21a>
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d10e      	bne.n	8002b26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d064      	beq.n	8002be4 <HAL_RCC_OscConfig+0x2f0>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d160      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e2ba      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x24a>
 8002b30:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0b      	ldr	r2, [pc, #44]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e026      	b.n	8002b8c <HAL_RCC_OscConfig+0x298>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b46:	d115      	bne.n	8002b74 <HAL_RCC_OscConfig+0x280>
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a05      	ldr	r2, [pc, #20]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a02      	ldr	r2, [pc, #8]	@ (8002b64 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e014      	b.n	8002b8c <HAL_RCC_OscConfig+0x298>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	0800a074 	.word	0x0800a074
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004
 8002b74:	4ba0      	ldr	r3, [pc, #640]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a9f      	ldr	r2, [pc, #636]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b9d      	ldr	r3, [pc, #628]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a9c      	ldr	r2, [pc, #624]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7ff fb46 	bl	8002224 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fb42 	bl	8002224 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	@ 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e276      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bae:	4b92      	ldr	r3, [pc, #584]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x2a8>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7ff fb32 	bl	8002224 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7ff fb2e 	bl	8002224 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	@ 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e262      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bd6:	4b88      	ldr	r3, [pc, #544]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2d0>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d060      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_OscConfig+0x310>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d119      	bne.n	8002c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d116      	bne.n	8002c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c04:	4b7c      	ldr	r3, [pc, #496]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x328>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e23f      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b76      	ldr	r3, [pc, #472]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	4973      	ldr	r1, [pc, #460]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c30:	e040      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d023      	beq.n	8002c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7ff faed 	bl	8002224 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7ff fae9 	bl	8002224 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e21d      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c60:	4b65      	ldr	r3, [pc, #404]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b62      	ldr	r3, [pc, #392]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	495f      	ldr	r1, [pc, #380]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
 8002c80:	e018      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	4b5d      	ldr	r3, [pc, #372]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5c      	ldr	r2, [pc, #368]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7ff fac9 	bl	8002224 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c96:	f7ff fac5 	bl	8002224 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1f9      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca8:	4b53      	ldr	r3, [pc, #332]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f0      	bne.n	8002c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d03c      	beq.n	8002d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cce:	4a4a      	ldr	r2, [pc, #296]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7ff faa4 	bl	8002224 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7ff faa0 	bl	8002224 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1d4      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf2:	4b41      	ldr	r3, [pc, #260]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ef      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x3ec>
 8002d00:	e01b      	b.n	8002d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d02:	4b3d      	ldr	r3, [pc, #244]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d08:	4a3b      	ldr	r2, [pc, #236]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7ff fa87 	bl	8002224 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1a:	f7ff fa83 	bl	8002224 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1b7      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d2c:	4b32      	ldr	r3, [pc, #200]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ef      	bne.n	8002d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80a6 	beq.w	8002e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b27      	ldr	r3, [pc, #156]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	4a26      	ldr	r2, [pc, #152]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d74:	4b21      	ldr	r3, [pc, #132]	@ (8002dfc <HAL_RCC_OscConfig+0x508>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d118      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d80:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <HAL_RCC_OscConfig+0x508>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <HAL_RCC_OscConfig+0x508>)
 8002d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8c:	f7ff fa4a 	bl	8002224 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d94:	f7ff fa46 	bl	8002224 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e17a      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da6:	4b15      	ldr	r3, [pc, #84]	@ (8002dfc <HAL_RCC_OscConfig+0x508>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4d8>
 8002dba:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dca:	e029      	b.n	8002e20 <HAL_RCC_OscConfig+0x52c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d115      	bne.n	8002e00 <HAL_RCC_OscConfig+0x50c>
 8002dd4:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dda:	4a07      	ldr	r2, [pc, #28]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002de4:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	4a03      	ldr	r2, [pc, #12]	@ (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002df4:	e014      	b.n	8002e20 <HAL_RCC_OscConfig+0x52c>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	4b9c      	ldr	r3, [pc, #624]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e06:	4a9b      	ldr	r2, [pc, #620]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e10:	4b98      	ldr	r3, [pc, #608]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	4a97      	ldr	r2, [pc, #604]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002e18:	f023 0304 	bic.w	r3, r3, #4
 8002e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d016      	beq.n	8002e56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7ff f9fc 	bl	8002224 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e30:	f7ff f9f8 	bl	8002224 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e12a      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e46:	4b8b      	ldr	r3, [pc, #556]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ed      	beq.n	8002e30 <HAL_RCC_OscConfig+0x53c>
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7ff f9e5 	bl	8002224 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7ff f9e1 	bl	8002224 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e113      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e74:	4b7f      	ldr	r3, [pc, #508]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1ed      	bne.n	8002e5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d105      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e88:	4b7a      	ldr	r3, [pc, #488]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8c:	4a79      	ldr	r2, [pc, #484]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80fe 	beq.w	800309a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	f040 80d0 	bne.w	8003048 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ea8:	4b72      	ldr	r3, [pc, #456]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d130      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d127      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d11f      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ee8:	2a07      	cmp	r2, #7
 8002eea:	bf14      	ite	ne
 8002eec:	2201      	movne	r2, #1
 8002eee:	2200      	moveq	r2, #0
 8002ef0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d113      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	085b      	lsrs	r3, r3, #1
 8002f02:	3b01      	subs	r3, #1
 8002f04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d109      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	3b01      	subs	r3, #1
 8002f18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d06e      	beq.n	8002ffc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	d069      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f24:	4b53      	ldr	r3, [pc, #332]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f30:	4b50      	ldr	r3, [pc, #320]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0ad      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f40:	4b4c      	ldr	r3, [pc, #304]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f4c:	f7ff f96a 	bl	8002224 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f54:	f7ff f966 	bl	8002224 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e09a      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f66:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f72:	4b40      	ldr	r3, [pc, #256]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	4b40      	ldr	r3, [pc, #256]	@ (8003078 <HAL_RCC_OscConfig+0x784>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f82:	3a01      	subs	r2, #1
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	4311      	orrs	r1, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f8c:	0212      	lsls	r2, r2, #8
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f94:	0852      	lsrs	r2, r2, #1
 8002f96:	3a01      	subs	r2, #1
 8002f98:	0552      	lsls	r2, r2, #21
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fa0:	0852      	lsrs	r2, r2, #1
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	0652      	lsls	r2, r2, #25
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fac:	0912      	lsrs	r2, r2, #4
 8002fae:	0452      	lsls	r2, r2, #17
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	4930      	ldr	r1, [pc, #192]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd0:	f7ff f928 	bl	8002224 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7ff f924 	bl	8002224 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e058      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	4b22      	ldr	r3, [pc, #136]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff6:	e050      	b.n	800309a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e04f      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d148      	bne.n	800309a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003008:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a19      	ldr	r2, [pc, #100]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 800300e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003014:	4b17      	ldr	r3, [pc, #92]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a16      	ldr	r2, [pc, #88]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 800301a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800301e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003020:	f7ff f900 	bl	8002224 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7ff f8fc 	bl	8002224 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e030      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303a:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x734>
 8003046:	e028      	b.n	800309a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d023      	beq.n	8003096 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <HAL_RCC_OscConfig+0x780>)
 8003054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7ff f8e3 	bl	8002224 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	e00c      	b.n	800307c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7ff f8df 	bl	8002224 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d905      	bls.n	800307c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e013      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
 8003074:	40021000 	.word	0x40021000
 8003078:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <HAL_RCC_OscConfig+0x7b0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ec      	bne.n	8003062 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <HAL_RCC_OscConfig+0x7b0>)
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4905      	ldr	r1, [pc, #20]	@ (80030a4 <HAL_RCC_OscConfig+0x7b0>)
 800308e:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_RCC_OscConfig+0x7b4>)
 8003090:	4013      	ands	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
 8003094:	e001      	b.n	800309a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000
 80030a8:	feeefffc 	.word	0xfeeefffc

080030ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0e7      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b75      	ldr	r3, [pc, #468]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b72      	ldr	r3, [pc, #456]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4970      	ldr	r1, [pc, #448]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b6e      	ldr	r3, [pc, #440]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0cf      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b66      	ldr	r3, [pc, #408]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003108:	429a      	cmp	r2, r3
 800310a:	d908      	bls.n	800311e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b63      	ldr	r3, [pc, #396]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4960      	ldr	r1, [pc, #384]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d04c      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	4b5a      	ldr	r3, [pc, #360]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d121      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0a6      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314a:	4b54      	ldr	r3, [pc, #336]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d115      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e09a      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003162:	4b4e      	ldr	r3, [pc, #312]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e08e      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003172:	4b4a      	ldr	r3, [pc, #296]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e086      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b46      	ldr	r3, [pc, #280]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4943      	ldr	r1, [pc, #268]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003194:	f7ff f846 	bl	8002224 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7ff f842 	bl	8002224 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e06e      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b3a      	ldr	r3, [pc, #232]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	4b31      	ldr	r3, [pc, #196]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031dc:	429a      	cmp	r2, r3
 80031de:	d208      	bcs.n	80031f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e0:	4b2e      	ldr	r3, [pc, #184]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	492b      	ldr	r1, [pc, #172]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f2:	4b29      	ldr	r3, [pc, #164]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d210      	bcs.n	8003222 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003200:	4b25      	ldr	r3, [pc, #148]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 0207 	bic.w	r2, r3, #7
 8003208:	4923      	ldr	r1, [pc, #140]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003210:	4b21      	ldr	r3, [pc, #132]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d001      	beq.n	8003222 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e036      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322e:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4918      	ldr	r1, [pc, #96]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4910      	ldr	r1, [pc, #64]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003260:	f000 f824 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	490b      	ldr	r1, [pc, #44]	@ (80032a0 <HAL_RCC_ClockConfig+0x1f4>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
 800327c:	4a09      	ldr	r2, [pc, #36]	@ (80032a4 <HAL_RCC_ClockConfig+0x1f8>)
 800327e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_RCC_ClockConfig+0x1fc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe ff7d 	bl	8002184 <HAL_InitTick>
 800328a:	4603      	mov	r3, r0
 800328c:	72fb      	strb	r3, [r7, #11]

  return status;
 800328e:	7afb      	ldrb	r3, [r7, #11]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40022000 	.word	0x40022000
 800329c:	40021000 	.word	0x40021000
 80032a0:	0800a074 	.word	0x0800a074
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ba:	4b3e      	ldr	r3, [pc, #248]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c4:	4b3b      	ldr	r3, [pc, #236]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x34>
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d121      	bne.n	800331e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d11e      	bne.n	800331e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032e0:	4b34      	ldr	r3, [pc, #208]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032ec:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e005      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032fc:	4b2d      	ldr	r3, [pc, #180]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003308:	4a2b      	ldr	r2, [pc, #172]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003310:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10d      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d102      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003324:	4b25      	ldr	r3, [pc, #148]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	e004      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d101      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003332:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d134      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800333a:	4b1e      	ldr	r3, [pc, #120]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d003      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0xa6>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d003      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0xac>
 8003350:	e005      	b.n	800335e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003354:	617b      	str	r3, [r7, #20]
      break;
 8003356:	e005      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003358:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800335a:	617b      	str	r3, [r7, #20]
      break;
 800335c:	e002      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	617b      	str	r3, [r7, #20]
      break;
 8003362:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	3301      	adds	r3, #1
 8003370:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003372:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	fb03 f202 	mul.w	r2, r3, r2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800338a:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	0e5b      	lsrs	r3, r3, #25
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	3301      	adds	r3, #1
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033a4:	69bb      	ldr	r3, [r7, #24]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	0800a08c 	.word	0x0800a08c
 80033bc:	00f42400 	.word	0x00f42400
 80033c0:	007a1200 	.word	0x007a1200

080033c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c8:	4b03      	ldr	r3, [pc, #12]	@ (80033d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033e0:	f7ff fff0 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4904      	ldr	r1, [pc, #16]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	0800a084 	.word	0x0800a084

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800340c:	f7ff ffda 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	0adb      	lsrs	r3, r3, #11
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4904      	ldr	r1, [pc, #16]	@ (8003430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	0800a084 	.word	0x0800a084

08003434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003440:	4b2a      	ldr	r3, [pc, #168]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800344c:	f7ff f9ee 	bl	800282c <HAL_PWREx_GetVoltageRange>
 8003450:	6178      	str	r0, [r7, #20]
 8003452:	e014      	b.n	800347e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003454:	4b25      	ldr	r3, [pc, #148]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003458:	4a24      	ldr	r2, [pc, #144]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800345e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003460:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800346c:	f7ff f9de 	bl	800282c <HAL_PWREx_GetVoltageRange>
 8003470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003472:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003476:	4a1d      	ldr	r2, [pc, #116]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800347c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003484:	d10b      	bne.n	800349e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b80      	cmp	r3, #128	@ 0x80
 800348a:	d919      	bls.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003490:	d902      	bls.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003492:	2302      	movs	r3, #2
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	e013      	b.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003498:	2301      	movs	r3, #1
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e010      	b.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b80      	cmp	r3, #128	@ 0x80
 80034a2:	d902      	bls.n	80034aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034a4:	2303      	movs	r3, #3
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e00a      	b.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b80      	cmp	r3, #128	@ 0x80
 80034ae:	d102      	bne.n	80034b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b0:	2302      	movs	r3, #2
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	e004      	b.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b70      	cmp	r3, #112	@ 0x70
 80034ba:	d101      	bne.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034bc:	2301      	movs	r3, #1
 80034be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034c0:	4b0b      	ldr	r3, [pc, #44]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 0207 	bic.w	r2, r3, #7
 80034c8:	4909      	ldr	r1, [pc, #36]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034d0:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d001      	beq.n	80034e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40022000 	.word	0x40022000

080034f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034fc:	2300      	movs	r3, #0
 80034fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003500:	2300      	movs	r3, #0
 8003502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800350c:	2b00      	cmp	r3, #0
 800350e:	d041      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003514:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003518:	d02a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800351a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800351e:	d824      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003520:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003524:	d008      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003526:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800352a:	d81e      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003534:	d010      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003536:	e018      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003538:	4b86      	ldr	r3, [pc, #536]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4a85      	ldr	r2, [pc, #532]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003542:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003544:	e015      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3304      	adds	r3, #4
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fabb 	bl	8003ac8 <RCCEx_PLLSAI1_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003556:	e00c      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3320      	adds	r3, #32
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fba6 	bl	8003cb0 <RCCEx_PLLSAI2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003568:	e003      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	74fb      	strb	r3, [r7, #19]
      break;
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003578:	4b76      	ldr	r3, [pc, #472]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003586:	4973      	ldr	r1, [pc, #460]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800358e:	e001      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d041      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035a8:	d02a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035ae:	d824      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035b4:	d008      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035ba:	d81e      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035c4:	d010      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035c6:	e018      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035c8:	4b62      	ldr	r3, [pc, #392]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a61      	ldr	r2, [pc, #388]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d4:	e015      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fa73 	bl	8003ac8 <RCCEx_PLLSAI1_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035e6:	e00c      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3320      	adds	r3, #32
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fb5e 	bl	8003cb0 <RCCEx_PLLSAI2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035f8:	e003      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	74fb      	strb	r3, [r7, #19]
      break;
 80035fe:	e000      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003608:	4b52      	ldr	r3, [pc, #328]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003616:	494f      	ldr	r1, [pc, #316]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800361e:	e001      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a0 	beq.w	8003772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003636:	4b47      	ldr	r3, [pc, #284]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003646:	2300      	movs	r3, #0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364c:	4b41      	ldr	r3, [pc, #260]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003650:	4a40      	ldr	r2, [pc, #256]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003656:	6593      	str	r3, [r2, #88]	@ 0x58
 8003658:	4b3e      	ldr	r3, [pc, #248]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003664:	2301      	movs	r3, #1
 8003666:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003668:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3a      	ldr	r2, [pc, #232]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800366e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003674:	f7fe fdd6 	bl	8002224 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800367a:	e009      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367c:	f7fe fdd2 	bl	8002224 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d902      	bls.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	74fb      	strb	r3, [r7, #19]
        break;
 800368e:	e005      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003690:	4b31      	ldr	r3, [pc, #196]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ef      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d15c      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01f      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d019      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036c0:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036cc:	4b21      	ldr	r3, [pc, #132]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d2:	4a20      	ldr	r2, [pc, #128]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036ec:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fe fd91 	bl	8002224 <HAL_GetTick>
 8003702:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003704:	e00b      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fd8d 	bl	8002224 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d902      	bls.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	74fb      	strb	r3, [r7, #19]
            break;
 800371c:	e006      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ec      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10c      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003732:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003742:	4904      	ldr	r1, [pc, #16]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800374a:	e009      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	74bb      	strb	r3, [r7, #18]
 8003750:	e006      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003760:	7c7b      	ldrb	r3, [r7, #17]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d105      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	4b9e      	ldr	r3, [pc, #632]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	4a9d      	ldr	r2, [pc, #628]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800377e:	4b98      	ldr	r3, [pc, #608]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003784:	f023 0203 	bic.w	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	4994      	ldr	r1, [pc, #592]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a0:	4b8f      	ldr	r3, [pc, #572]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	f023 020c 	bic.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ae:	498c      	ldr	r1, [pc, #560]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c2:	4b87      	ldr	r3, [pc, #540]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	4983      	ldr	r1, [pc, #524]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037e4:	4b7e      	ldr	r3, [pc, #504]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f2:	497b      	ldr	r1, [pc, #492]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003806:	4b76      	ldr	r3, [pc, #472]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003814:	4972      	ldr	r1, [pc, #456]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003828:	4b6d      	ldr	r3, [pc, #436]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003836:	496a      	ldr	r1, [pc, #424]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800384a:	4b65      	ldr	r3, [pc, #404]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003850:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	4961      	ldr	r1, [pc, #388]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800386c:	4b5c      	ldr	r3, [pc, #368]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003872:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387a:	4959      	ldr	r1, [pc, #356]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800388e:	4b54      	ldr	r3, [pc, #336]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389c:	4950      	ldr	r1, [pc, #320]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b0:	4b4b      	ldr	r3, [pc, #300]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038be:	4948      	ldr	r1, [pc, #288]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d2:	4b43      	ldr	r3, [pc, #268]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	493f      	ldr	r1, [pc, #252]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d028      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f4:	4b3a      	ldr	r3, [pc, #232]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003902:	4937      	ldr	r1, [pc, #220]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800390e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003912:	d106      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003914:	4b32      	ldr	r3, [pc, #200]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a31      	ldr	r2, [pc, #196]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800391e:	60d3      	str	r3, [r2, #12]
 8003920:	e011      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003926:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800392a:	d10c      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f8c8 	bl	8003ac8 <RCCEx_PLLSAI1_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d028      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003952:	4b23      	ldr	r3, [pc, #140]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003958:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003960:	491f      	ldr	r1, [pc, #124]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003970:	d106      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003972:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	4a1a      	ldr	r2, [pc, #104]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800397c:	60d3      	str	r3, [r2, #12]
 800397e:	e011      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003984:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f899 	bl	8003ac8 <RCCEx_PLLSAI1_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02b      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039be:	4908      	ldr	r1, [pc, #32]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039ce:	d109      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d0:	4b03      	ldr	r3, [pc, #12]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a02      	ldr	r2, [pc, #8]	@ (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039da:	60d3      	str	r3, [r2, #12]
 80039dc:	e014      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f867 	bl	8003ac8 <RCCEx_PLLSAI1_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02f      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a14:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a22:	4928      	ldr	r1, [pc, #160]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a32:	d10d      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	2102      	movs	r1, #2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f844 	bl	8003ac8 <RCCEx_PLLSAI1_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d014      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	74bb      	strb	r3, [r7, #18]
 8003a4e:	e011      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3320      	adds	r3, #32
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f925 	bl	8003cb0 <RCCEx_PLLSAI2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a6a:	7cfb      	ldrb	r3, [r7, #19]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a80:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a8e:	490d      	ldr	r1, [pc, #52]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aa2:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ab2:	4904      	ldr	r1, [pc, #16]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003aba:	7cbb      	ldrb	r3, [r7, #18]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ad6:	4b75      	ldr	r3, [pc, #468]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d018      	beq.n	8003b14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ae2:	4b72      	ldr	r3, [pc, #456]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0203 	and.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d10d      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
       ||
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003afa:	4b6c      	ldr	r3, [pc, #432]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
       ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d047      	beq.n	8003b9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	e044      	b.n	8003b9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d018      	beq.n	8003b4e <RCCEx_PLLSAI1_Config+0x86>
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d825      	bhi.n	8003b6c <RCCEx_PLLSAI1_Config+0xa4>
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d002      	beq.n	8003b2a <RCCEx_PLLSAI1_Config+0x62>
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d009      	beq.n	8003b3c <RCCEx_PLLSAI1_Config+0x74>
 8003b28:	e020      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b2a:	4b60      	ldr	r3, [pc, #384]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d11d      	bne.n	8003b72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3a:	e01a      	b.n	8003b72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d116      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4c:	e013      	b.n	8003b76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b4e:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10f      	bne.n	8003b7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b5a:	4b54      	ldr	r3, [pc, #336]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b6a:	e006      	b.n	8003b7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b70:	e004      	b.n	8003b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b72:	bf00      	nop
 8003b74:	e002      	b.n	8003b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b76:	bf00      	nop
 8003b78:	e000      	b.n	8003b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10d      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b82:	4b4a      	ldr	r3, [pc, #296]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6819      	ldr	r1, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	430b      	orrs	r3, r1
 8003b98:	4944      	ldr	r1, [pc, #272]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d17d      	bne.n	8003ca0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ba4:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a40      	ldr	r2, [pc, #256]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb0:	f7fe fb38 	bl	8002224 <HAL_GetTick>
 8003bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bb6:	e009      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb8:	f7fe fb34 	bl	8002224 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d902      	bls.n	8003bcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8003bca:	e005      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bcc:	4b37      	ldr	r3, [pc, #220]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ef      	bne.n	8003bb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d160      	bne.n	8003ca0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d111      	bne.n	8003c08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be4:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6892      	ldr	r2, [r2, #8]
 8003bf4:	0211      	lsls	r1, r2, #8
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68d2      	ldr	r2, [r2, #12]
 8003bfa:	0912      	lsrs	r2, r2, #4
 8003bfc:	0452      	lsls	r2, r2, #17
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	492a      	ldr	r1, [pc, #168]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	610b      	str	r3, [r1, #16]
 8003c06:	e027      	b.n	8003c58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d112      	bne.n	8003c34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c0e:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003c16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6892      	ldr	r2, [r2, #8]
 8003c1e:	0211      	lsls	r1, r2, #8
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6912      	ldr	r2, [r2, #16]
 8003c24:	0852      	lsrs	r2, r2, #1
 8003c26:	3a01      	subs	r2, #1
 8003c28:	0552      	lsls	r2, r2, #21
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	491f      	ldr	r1, [pc, #124]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	610b      	str	r3, [r1, #16]
 8003c32:	e011      	b.n	8003c58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c34:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6892      	ldr	r2, [r2, #8]
 8003c44:	0211      	lsls	r1, r2, #8
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6952      	ldr	r2, [r2, #20]
 8003c4a:	0852      	lsrs	r2, r2, #1
 8003c4c:	3a01      	subs	r2, #1
 8003c4e:	0652      	lsls	r2, r2, #25
 8003c50:	430a      	orrs	r2, r1
 8003c52:	4916      	ldr	r1, [pc, #88]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c58:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a13      	ldr	r2, [pc, #76]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fe fade 	bl	8002224 <HAL_GetTick>
 8003c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c6a:	e009      	b.n	8003c80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c6c:	f7fe fada 	bl	8002224 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d902      	bls.n	8003c80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c7e:	e005      	b.n	8003c8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c80:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ef      	beq.n	8003c6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c92:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	4904      	ldr	r1, [pc, #16]	@ (8003cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000

08003cb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d018      	beq.n	8003cfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cca:	4b67      	ldr	r3, [pc, #412]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0203 	and.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d10d      	bne.n	8003cf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ce2:	4b61      	ldr	r3, [pc, #388]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
       ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d047      	beq.n	8003d86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e044      	b.n	8003d86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d018      	beq.n	8003d36 <RCCEx_PLLSAI2_Config+0x86>
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d825      	bhi.n	8003d54 <RCCEx_PLLSAI2_Config+0xa4>
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d002      	beq.n	8003d12 <RCCEx_PLLSAI2_Config+0x62>
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d009      	beq.n	8003d24 <RCCEx_PLLSAI2_Config+0x74>
 8003d10:	e020      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d12:	4b55      	ldr	r3, [pc, #340]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d11d      	bne.n	8003d5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d22:	e01a      	b.n	8003d5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d24:	4b50      	ldr	r3, [pc, #320]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d116      	bne.n	8003d5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d34:	e013      	b.n	8003d5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d36:	4b4c      	ldr	r3, [pc, #304]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d42:	4b49      	ldr	r3, [pc, #292]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d52:	e006      	b.n	8003d62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      break;
 8003d58:	e004      	b.n	8003d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e002      	b.n	8003d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10d      	bne.n	8003d86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6819      	ldr	r1, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	4939      	ldr	r1, [pc, #228]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d167      	bne.n	8003e5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d8c:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a35      	ldr	r2, [pc, #212]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fe fa44 	bl	8002224 <HAL_GetTick>
 8003d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d9e:	e009      	b.n	8003db4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003da0:	f7fe fa40 	bl	8002224 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d902      	bls.n	8003db4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	73fb      	strb	r3, [r7, #15]
        break;
 8003db2:	e005      	b.n	8003dc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003db4:	4b2c      	ldr	r3, [pc, #176]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ef      	bne.n	8003da0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d14a      	bne.n	8003e5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d111      	bne.n	8003df0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dcc:	4b26      	ldr	r3, [pc, #152]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6892      	ldr	r2, [r2, #8]
 8003ddc:	0211      	lsls	r1, r2, #8
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68d2      	ldr	r2, [r2, #12]
 8003de2:	0912      	lsrs	r2, r2, #4
 8003de4:	0452      	lsls	r2, r2, #17
 8003de6:	430a      	orrs	r2, r1
 8003de8:	491f      	ldr	r1, [pc, #124]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	614b      	str	r3, [r1, #20]
 8003dee:	e011      	b.n	8003e14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003df0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003df8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6892      	ldr	r2, [r2, #8]
 8003e00:	0211      	lsls	r1, r2, #8
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6912      	ldr	r2, [r2, #16]
 8003e06:	0852      	lsrs	r2, r2, #1
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	0652      	lsls	r2, r2, #25
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	4916      	ldr	r1, [pc, #88]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a13      	ldr	r2, [pc, #76]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fe fa00 	bl	8002224 <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e26:	e009      	b.n	8003e3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e28:	f7fe f9fc 	bl	8002224 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d902      	bls.n	8003e3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	73fb      	strb	r3, [r7, #15]
          break;
 8003e3a:	e005      	b.n	8003e48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ef      	beq.n	8003e28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e4e:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4904      	ldr	r1, [pc, #16]	@ (8003e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000

08003e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e049      	b.n	8003f12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe f842 	bl	8001f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f000 fd76 	bl	800499c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d001      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e04f      	b.n	8003fd4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a23      	ldr	r2, [pc, #140]	@ (8003fe0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <HAL_TIM_Base_Start_IT+0x76>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5e:	d018      	beq.n	8003f92 <HAL_TIM_Base_Start_IT+0x76>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_TIM_Base_Start_IT+0x76>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_TIM_Base_Start_IT+0x76>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1c      	ldr	r2, [pc, #112]	@ (8003fec <HAL_TIM_Base_Start_IT+0xd0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <HAL_TIM_Base_Start_IT+0x76>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_TIM_Base_Start_IT+0x76>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a19      	ldr	r2, [pc, #100]	@ (8003ff4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d115      	bne.n	8003fbe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	4b17      	ldr	r3, [pc, #92]	@ (8003ff8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b06      	cmp	r3, #6
 8003fa2:	d015      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0xb4>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003faa:	d011      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbc:	e008      	b.n	8003fd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0201 	orr.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e000      	b.n	8003fd2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	40000c00 	.word	0x40000c00
 8003ff0:	40013400 	.word	0x40013400
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	00010007 	.word	0x00010007

08003ffc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e049      	b.n	80040a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd fee8 	bl	8001df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 fcae 	bl	800499c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_TIM_PWM_Start+0x24>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e03c      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d109      	bne.n	80040ea <HAL_TIM_PWM_Start+0x3e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e02f      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d109      	bne.n	8004104 <HAL_TIM_PWM_Start+0x58>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e022      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d109      	bne.n	800411e <HAL_TIM_PWM_Start+0x72>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	e015      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b10      	cmp	r3, #16
 8004122:	d109      	bne.n	8004138 <HAL_TIM_PWM_Start+0x8c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e008      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e09c      	b.n	800428c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0xb6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004160:	e023      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0xc6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004170:	e01b      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0xd6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004180:	e013      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d104      	bne.n	8004192 <HAL_TIM_PWM_Start+0xe6>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004190:	e00b      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b10      	cmp	r3, #16
 8004196:	d104      	bne.n	80041a2 <HAL_TIM_PWM_Start+0xf6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041a0:	e003      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2201      	movs	r2, #1
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ff62 	bl	800507c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a35      	ldr	r2, [pc, #212]	@ (8004294 <HAL_TIM_PWM_Start+0x1e8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_TIM_PWM_Start+0x13e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a34      	ldr	r2, [pc, #208]	@ (8004298 <HAL_TIM_PWM_Start+0x1ec>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_TIM_PWM_Start+0x13e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a32      	ldr	r2, [pc, #200]	@ (800429c <HAL_TIM_PWM_Start+0x1f0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <HAL_TIM_PWM_Start+0x13e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a31      	ldr	r2, [pc, #196]	@ (80042a0 <HAL_TIM_PWM_Start+0x1f4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_TIM_PWM_Start+0x13e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2f      	ldr	r2, [pc, #188]	@ (80042a4 <HAL_TIM_PWM_Start+0x1f8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_PWM_Start+0x142>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_TIM_PWM_Start+0x144>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004202:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a22      	ldr	r2, [pc, #136]	@ (8004294 <HAL_TIM_PWM_Start+0x1e8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_TIM_PWM_Start+0x19e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004216:	d018      	beq.n	800424a <HAL_TIM_PWM_Start+0x19e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a22      	ldr	r2, [pc, #136]	@ (80042a8 <HAL_TIM_PWM_Start+0x1fc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_TIM_PWM_Start+0x19e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a21      	ldr	r2, [pc, #132]	@ (80042ac <HAL_TIM_PWM_Start+0x200>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_TIM_PWM_Start+0x19e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1f      	ldr	r2, [pc, #124]	@ (80042b0 <HAL_TIM_PWM_Start+0x204>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_TIM_PWM_Start+0x19e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a17      	ldr	r2, [pc, #92]	@ (8004298 <HAL_TIM_PWM_Start+0x1ec>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIM_PWM_Start+0x19e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a15      	ldr	r2, [pc, #84]	@ (800429c <HAL_TIM_PWM_Start+0x1f0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d115      	bne.n	8004276 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	4b18      	ldr	r3, [pc, #96]	@ (80042b4 <HAL_TIM_PWM_Start+0x208>)
 8004252:	4013      	ands	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d015      	beq.n	8004288 <HAL_TIM_PWM_Start+0x1dc>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004262:	d011      	beq.n	8004288 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	e008      	b.n	8004288 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e000      	b.n	800428a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004288:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40013400 	.word	0x40013400
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800
 80042b0:	40000c00 	.word	0x40000c00
 80042b4:	00010007 	.word	0x00010007

080042b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e097      	b.n	80043fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7fd fda9 	bl	8001e38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2202      	movs	r2, #2
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80042fc:	f023 0307 	bic.w	r3, r3, #7
 8004300:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3304      	adds	r3, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4610      	mov	r0, r2
 800430e:	f000 fb45 	bl	800499c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	4313      	orrs	r3, r2
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004358:	f023 030c 	bic.w	r3, r3, #12
 800435c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004364:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	4313      	orrs	r3, r2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	031b      	lsls	r3, r3, #12
 8004388:	4313      	orrs	r3, r2
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	4313      	orrs	r3, r2
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004414:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800441c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004424:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800442c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d110      	bne.n	8004456 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d102      	bne.n	8004440 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800443a:	7b7b      	ldrb	r3, [r7, #13]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d001      	beq.n	8004444 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e069      	b.n	8004518 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004454:	e031      	b.n	80044ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d110      	bne.n	800447e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800445c:	7bbb      	ldrb	r3, [r7, #14]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d102      	bne.n	8004468 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004462:	7b3b      	ldrb	r3, [r7, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d001      	beq.n	800446c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e055      	b.n	8004518 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800447c:	e01d      	b.n	80044ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d108      	bne.n	8004496 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004484:	7bbb      	ldrb	r3, [r7, #14]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d105      	bne.n	8004496 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800448a:	7b7b      	ldrb	r3, [r7, #13]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d102      	bne.n	8004496 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004490:	7b3b      	ldrb	r3, [r7, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e03e      	b.n	8004518 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_TIM_Encoder_Start+0xc4>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d008      	beq.n	80044d8 <HAL_TIM_Encoder_Start+0xd4>
 80044c6:	e00f      	b.n	80044e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2201      	movs	r2, #1
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fdd3 	bl	800507c <TIM_CCxChannelCmd>
      break;
 80044d6:	e016      	b.n	8004506 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	2104      	movs	r1, #4
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fdcb 	bl	800507c <TIM_CCxChannelCmd>
      break;
 80044e6:	e00e      	b.n	8004506 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2201      	movs	r2, #1
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fdc3 	bl	800507c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2201      	movs	r2, #1
 80044fc:	2104      	movs	r1, #4
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fdbc 	bl	800507c <TIM_CCxChannelCmd>
      break;
 8004504:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d020      	beq.n	8004584 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0202 	mvn.w	r2, #2
 8004554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f9f8 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f9ea 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9fb 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d020      	beq.n	80045d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01b      	beq.n	80045d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0204 	mvn.w	r2, #4
 80045a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f9d2 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 80045bc:	e005      	b.n	80045ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9c4 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f9d5 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d020      	beq.n	800461c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01b      	beq.n	800461c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0208 	mvn.w	r2, #8
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2204      	movs	r2, #4
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9ac 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f99e 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f9af 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b00      	cmp	r3, #0
 8004624:	d020      	beq.n	8004668 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01b      	beq.n	8004668 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0210 	mvn.w	r2, #16
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2208      	movs	r2, #8
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f986 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f978 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f989 	bl	8004974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00c      	beq.n	800468c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0201 	mvn.w	r2, #1
 8004684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc ff3c 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fe1c 	bl	80052e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00c      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fe14 	bl	80052fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f948 	bl	8004988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00c      	beq.n	800471c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0220 	mvn.w	r2, #32
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fddc 	bl	80052d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800473e:	2302      	movs	r3, #2
 8004740:	e0ff      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b14      	cmp	r3, #20
 800474e:	f200 80f0 	bhi.w	8004932 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004752:	a201      	add	r2, pc, #4	@ (adr r2, 8004758 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004758:	080047ad 	.word	0x080047ad
 800475c:	08004933 	.word	0x08004933
 8004760:	08004933 	.word	0x08004933
 8004764:	08004933 	.word	0x08004933
 8004768:	080047ed 	.word	0x080047ed
 800476c:	08004933 	.word	0x08004933
 8004770:	08004933 	.word	0x08004933
 8004774:	08004933 	.word	0x08004933
 8004778:	0800482f 	.word	0x0800482f
 800477c:	08004933 	.word	0x08004933
 8004780:	08004933 	.word	0x08004933
 8004784:	08004933 	.word	0x08004933
 8004788:	0800486f 	.word	0x0800486f
 800478c:	08004933 	.word	0x08004933
 8004790:	08004933 	.word	0x08004933
 8004794:	08004933 	.word	0x08004933
 8004798:	080048b1 	.word	0x080048b1
 800479c:	08004933 	.word	0x08004933
 80047a0:	08004933 	.word	0x08004933
 80047a4:	08004933 	.word	0x08004933
 80047a8:	080048f1 	.word	0x080048f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f98c 	bl	8004ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0208 	orr.w	r2, r2, #8
 80047c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0204 	bic.w	r2, r2, #4
 80047d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6999      	ldr	r1, [r3, #24]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	619a      	str	r2, [r3, #24]
      break;
 80047ea:	e0a5      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f9fc 	bl	8004bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6999      	ldr	r1, [r3, #24]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	021a      	lsls	r2, r3, #8
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	619a      	str	r2, [r3, #24]
      break;
 800482c:	e084      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fa65 	bl	8004d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0208 	orr.w	r2, r2, #8
 8004848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0204 	bic.w	r2, r2, #4
 8004858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69d9      	ldr	r1, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	61da      	str	r2, [r3, #28]
      break;
 800486c:	e064      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 facd 	bl	8004e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69d9      	ldr	r1, [r3, #28]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	021a      	lsls	r2, r3, #8
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	61da      	str	r2, [r3, #28]
      break;
 80048ae:	e043      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fb16 	bl	8004ee8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0208 	orr.w	r2, r2, #8
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0204 	bic.w	r2, r2, #4
 80048da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048ee:	e023      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fb5a 	bl	8004fb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800491a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	021a      	lsls	r2, r3, #8
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004930:	e002      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
      break;
 8004936:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004940:	7dfb      	ldrb	r3, [r7, #23]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop

0800494c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a40      	ldr	r2, [pc, #256]	@ (8004ab0 <TIM_Base_SetConfig+0x114>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ba:	d00f      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a3d      	ldr	r2, [pc, #244]	@ (8004ab4 <TIM_Base_SetConfig+0x118>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00b      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ab8 <TIM_Base_SetConfig+0x11c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a3b      	ldr	r2, [pc, #236]	@ (8004abc <TIM_Base_SetConfig+0x120>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ac0 <TIM_Base_SetConfig+0x124>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d108      	bne.n	80049ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab0 <TIM_Base_SetConfig+0x114>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01f      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fc:	d01b      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab4 <TIM_Base_SetConfig+0x118>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d017      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab8 <TIM_Base_SetConfig+0x11c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2a      	ldr	r2, [pc, #168]	@ (8004abc <TIM_Base_SetConfig+0x120>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00f      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a29      	ldr	r2, [pc, #164]	@ (8004ac0 <TIM_Base_SetConfig+0x124>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00b      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a28      	ldr	r2, [pc, #160]	@ (8004ac4 <TIM_Base_SetConfig+0x128>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d007      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a27      	ldr	r2, [pc, #156]	@ (8004ac8 <TIM_Base_SetConfig+0x12c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_Base_SetConfig+0x9a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a26      	ldr	r2, [pc, #152]	@ (8004acc <TIM_Base_SetConfig+0x130>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d108      	bne.n	8004a48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a10      	ldr	r2, [pc, #64]	@ (8004ab0 <TIM_Base_SetConfig+0x114>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00f      	beq.n	8004a94 <TIM_Base_SetConfig+0xf8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a12      	ldr	r2, [pc, #72]	@ (8004ac0 <TIM_Base_SetConfig+0x124>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <TIM_Base_SetConfig+0xf8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a11      	ldr	r2, [pc, #68]	@ (8004ac4 <TIM_Base_SetConfig+0x128>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d007      	beq.n	8004a94 <TIM_Base_SetConfig+0xf8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a10      	ldr	r2, [pc, #64]	@ (8004ac8 <TIM_Base_SetConfig+0x12c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_Base_SetConfig+0xf8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8004acc <TIM_Base_SetConfig+0x130>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d103      	bne.n	8004a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	615a      	str	r2, [r3, #20]
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40013400 	.word	0x40013400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f023 0201 	bic.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f023 0302 	bic.w	r3, r3, #2
 8004b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004bdc <TIM_OC1_SetConfig+0x10c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00f      	beq.n	8004b50 <TIM_OC1_SetConfig+0x80>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a2b      	ldr	r2, [pc, #172]	@ (8004be0 <TIM_OC1_SetConfig+0x110>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00b      	beq.n	8004b50 <TIM_OC1_SetConfig+0x80>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004be4 <TIM_OC1_SetConfig+0x114>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d007      	beq.n	8004b50 <TIM_OC1_SetConfig+0x80>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a29      	ldr	r2, [pc, #164]	@ (8004be8 <TIM_OC1_SetConfig+0x118>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC1_SetConfig+0x80>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a28      	ldr	r2, [pc, #160]	@ (8004bec <TIM_OC1_SetConfig+0x11c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10c      	bne.n	8004b6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0308 	bic.w	r3, r3, #8
 8004b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f023 0304 	bic.w	r3, r3, #4
 8004b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bdc <TIM_OC1_SetConfig+0x10c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00f      	beq.n	8004b92 <TIM_OC1_SetConfig+0xc2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a1a      	ldr	r2, [pc, #104]	@ (8004be0 <TIM_OC1_SetConfig+0x110>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <TIM_OC1_SetConfig+0xc2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	@ (8004be4 <TIM_OC1_SetConfig+0x114>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <TIM_OC1_SetConfig+0xc2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a18      	ldr	r2, [pc, #96]	@ (8004be8 <TIM_OC1_SetConfig+0x118>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_OC1_SetConfig+0xc2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a17      	ldr	r2, [pc, #92]	@ (8004bec <TIM_OC1_SetConfig+0x11c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d111      	bne.n	8004bb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	621a      	str	r2, [r3, #32]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40013400 	.word	0x40013400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40014400 	.word	0x40014400
 8004bec:	40014800 	.word	0x40014800

08004bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f023 0210 	bic.w	r2, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 0320 	bic.w	r3, r3, #32
 8004c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a28      	ldr	r2, [pc, #160]	@ (8004cf0 <TIM_OC2_SetConfig+0x100>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_OC2_SetConfig+0x6c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a27      	ldr	r2, [pc, #156]	@ (8004cf4 <TIM_OC2_SetConfig+0x104>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d10d      	bne.n	8004c78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf0 <TIM_OC2_SetConfig+0x100>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_OC2_SetConfig+0xb0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf4 <TIM_OC2_SetConfig+0x104>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_OC2_SetConfig+0xb0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf8 <TIM_OC2_SetConfig+0x108>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_OC2_SetConfig+0xb0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a1a      	ldr	r2, [pc, #104]	@ (8004cfc <TIM_OC2_SetConfig+0x10c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_OC2_SetConfig+0xb0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a19      	ldr	r2, [pc, #100]	@ (8004d00 <TIM_OC2_SetConfig+0x110>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d113      	bne.n	8004cc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40012c00 	.word	0x40012c00
 8004cf4:	40013400 	.word	0x40013400
 8004cf8:	40014000 	.word	0x40014000
 8004cfc:	40014400 	.word	0x40014400
 8004d00:	40014800 	.word	0x40014800

08004d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a27      	ldr	r2, [pc, #156]	@ (8004e00 <TIM_OC3_SetConfig+0xfc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_OC3_SetConfig+0x6a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a26      	ldr	r2, [pc, #152]	@ (8004e04 <TIM_OC3_SetConfig+0x100>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10d      	bne.n	8004d8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004e00 <TIM_OC3_SetConfig+0xfc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00f      	beq.n	8004db2 <TIM_OC3_SetConfig+0xae>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1b      	ldr	r2, [pc, #108]	@ (8004e04 <TIM_OC3_SetConfig+0x100>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00b      	beq.n	8004db2 <TIM_OC3_SetConfig+0xae>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004e08 <TIM_OC3_SetConfig+0x104>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <TIM_OC3_SetConfig+0xae>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a19      	ldr	r2, [pc, #100]	@ (8004e0c <TIM_OC3_SetConfig+0x108>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_OC3_SetConfig+0xae>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a18      	ldr	r2, [pc, #96]	@ (8004e10 <TIM_OC3_SetConfig+0x10c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d113      	bne.n	8004dda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	621a      	str	r2, [r3, #32]
}
 8004df4:	bf00      	nop
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40013400 	.word	0x40013400
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800

08004e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	031b      	lsls	r3, r3, #12
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a18      	ldr	r2, [pc, #96]	@ (8004ed4 <TIM_OC4_SetConfig+0xc0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00f      	beq.n	8004e98 <TIM_OC4_SetConfig+0x84>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a17      	ldr	r2, [pc, #92]	@ (8004ed8 <TIM_OC4_SetConfig+0xc4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <TIM_OC4_SetConfig+0x84>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <TIM_OC4_SetConfig+0xc8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <TIM_OC4_SetConfig+0x84>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ee0 <TIM_OC4_SetConfig+0xcc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_OC4_SetConfig+0x84>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a14      	ldr	r2, [pc, #80]	@ (8004ee4 <TIM_OC4_SetConfig+0xd0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d109      	bne.n	8004eac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	019b      	lsls	r3, r3, #6
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40013400 	.word	0x40013400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800

08004ee8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a17      	ldr	r2, [pc, #92]	@ (8004f9c <TIM_OC5_SetConfig+0xb4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00f      	beq.n	8004f62 <TIM_OC5_SetConfig+0x7a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a16      	ldr	r2, [pc, #88]	@ (8004fa0 <TIM_OC5_SetConfig+0xb8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00b      	beq.n	8004f62 <TIM_OC5_SetConfig+0x7a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a15      	ldr	r2, [pc, #84]	@ (8004fa4 <TIM_OC5_SetConfig+0xbc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <TIM_OC5_SetConfig+0x7a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a14      	ldr	r2, [pc, #80]	@ (8004fa8 <TIM_OC5_SetConfig+0xc0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <TIM_OC5_SetConfig+0x7a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a13      	ldr	r2, [pc, #76]	@ (8004fac <TIM_OC5_SetConfig+0xc4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d109      	bne.n	8004f76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	621a      	str	r2, [r3, #32]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40013400 	.word	0x40013400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800

08004fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	051b      	lsls	r3, r3, #20
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a18      	ldr	r2, [pc, #96]	@ (8005068 <TIM_OC6_SetConfig+0xb8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00f      	beq.n	800502c <TIM_OC6_SetConfig+0x7c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a17      	ldr	r2, [pc, #92]	@ (800506c <TIM_OC6_SetConfig+0xbc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_OC6_SetConfig+0x7c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a16      	ldr	r2, [pc, #88]	@ (8005070 <TIM_OC6_SetConfig+0xc0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_OC6_SetConfig+0x7c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a15      	ldr	r2, [pc, #84]	@ (8005074 <TIM_OC6_SetConfig+0xc4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_OC6_SetConfig+0x7c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a14      	ldr	r2, [pc, #80]	@ (8005078 <TIM_OC6_SetConfig+0xc8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d109      	bne.n	8005040 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	029b      	lsls	r3, r3, #10
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40013400 	.word	0x40013400
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800

0800507c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2201      	movs	r2, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	43db      	mvns	r3, r3
 800509e:	401a      	ands	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1a      	ldr	r2, [r3, #32]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050dc:	2302      	movs	r3, #2
 80050de:	e068      	b.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2e      	ldr	r2, [pc, #184]	@ (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2d      	ldr	r2, [pc, #180]	@ (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800511a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1e      	ldr	r2, [pc, #120]	@ (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01d      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005152:	d018      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1b      	ldr	r2, [pc, #108]	@ (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1a      	ldr	r2, [pc, #104]	@ (80051cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a18      	ldr	r2, [pc, #96]	@ (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d009      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a13      	ldr	r2, [pc, #76]	@ (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a14      	ldr	r2, [pc, #80]	@ (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10c      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800518c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	4313      	orrs	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40013400 	.word	0x40013400
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40014000 	.word	0x40014000

080051d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e065      	b.n	80052c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a16      	ldr	r2, [pc, #88]	@ (80052cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a14      	ldr	r2, [pc, #80]	@ (80052d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d115      	bne.n	80052ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528c:	051b      	lsls	r3, r3, #20
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40013400 	.word	0x40013400

080052d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e040      	b.n	80053a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fc fe80 	bl	8002038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2224      	movs	r2, #36	@ 0x24
 800533c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0201 	bic.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fb6a 	bl	8005a30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f8af 	bl	80054c0 <UART_SetConfig>
 8005362:	4603      	mov	r3, r0
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e01b      	b.n	80053a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800537a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800538a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fbe9 	bl	8005b74 <UART_CheckIdleState>
 80053a2:	4603      	mov	r3, r0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	@ 0x28
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d177      	bne.n	80054b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_UART_Transmit+0x24>
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e070      	b.n	80054b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2221      	movs	r2, #33	@ 0x21
 80053e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053e2:	f7fc ff1f 	bl	8002224 <HAL_GetTick>
 80053e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	88fa      	ldrh	r2, [r7, #6]
 80053ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	88fa      	ldrh	r2, [r7, #6]
 80053f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005400:	d108      	bne.n	8005414 <HAL_UART_Transmit+0x68>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e003      	b.n	800541c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800541c:	e02f      	b.n	800547e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	2180      	movs	r1, #128	@ 0x80
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fc4b 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e03b      	b.n	80054b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	881a      	ldrh	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005450:	b292      	uxth	r2, r2
 8005452:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	3302      	adds	r3, #2
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e007      	b.n	800546c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	781a      	ldrb	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3301      	adds	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1c9      	bne.n	800541e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2200      	movs	r2, #0
 8005492:	2140      	movs	r1, #64	@ 0x40
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fc15 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e005      	b.n	80054b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e000      	b.n	80054b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80054b4:	2302      	movs	r3, #2
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c4:	b08a      	sub	sp, #40	@ 0x28
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	431a      	orrs	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	431a      	orrs	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4ba4      	ldr	r3, [pc, #656]	@ (8005780 <UART_SetConfig+0x2c0>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a99      	ldr	r2, [pc, #612]	@ (8005784 <UART_SetConfig+0x2c4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005528:	4313      	orrs	r3, r2
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553c:	430a      	orrs	r2, r1
 800553e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a90      	ldr	r2, [pc, #576]	@ (8005788 <UART_SetConfig+0x2c8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d126      	bne.n	8005598 <UART_SetConfig+0xd8>
 800554a:	4b90      	ldr	r3, [pc, #576]	@ (800578c <UART_SetConfig+0x2cc>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	2b03      	cmp	r3, #3
 8005556:	d81b      	bhi.n	8005590 <UART_SetConfig+0xd0>
 8005558:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <UART_SetConfig+0xa0>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005571 	.word	0x08005571
 8005564:	08005581 	.word	0x08005581
 8005568:	08005579 	.word	0x08005579
 800556c:	08005589 	.word	0x08005589
 8005570:	2301      	movs	r3, #1
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005576:	e116      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005578:	2302      	movs	r3, #2
 800557a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800557e:	e112      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005580:	2304      	movs	r3, #4
 8005582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005586:	e10e      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005588:	2308      	movs	r3, #8
 800558a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800558e:	e10a      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005590:	2310      	movs	r3, #16
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005596:	e106      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a7c      	ldr	r2, [pc, #496]	@ (8005790 <UART_SetConfig+0x2d0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d138      	bne.n	8005614 <UART_SetConfig+0x154>
 80055a2:	4b7a      	ldr	r3, [pc, #488]	@ (800578c <UART_SetConfig+0x2cc>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b0c      	cmp	r3, #12
 80055ae:	d82d      	bhi.n	800560c <UART_SetConfig+0x14c>
 80055b0:	a201      	add	r2, pc, #4	@ (adr r2, 80055b8 <UART_SetConfig+0xf8>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055ed 	.word	0x080055ed
 80055bc:	0800560d 	.word	0x0800560d
 80055c0:	0800560d 	.word	0x0800560d
 80055c4:	0800560d 	.word	0x0800560d
 80055c8:	080055fd 	.word	0x080055fd
 80055cc:	0800560d 	.word	0x0800560d
 80055d0:	0800560d 	.word	0x0800560d
 80055d4:	0800560d 	.word	0x0800560d
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	0800560d 	.word	0x0800560d
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	08005605 	.word	0x08005605
 80055ec:	2300      	movs	r3, #0
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f2:	e0d8      	b.n	80057a6 <UART_SetConfig+0x2e6>
 80055f4:	2302      	movs	r3, #2
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055fa:	e0d4      	b.n	80057a6 <UART_SetConfig+0x2e6>
 80055fc:	2304      	movs	r3, #4
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005602:	e0d0      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005604:	2308      	movs	r3, #8
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800560a:	e0cc      	b.n	80057a6 <UART_SetConfig+0x2e6>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005612:	e0c8      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a5e      	ldr	r2, [pc, #376]	@ (8005794 <UART_SetConfig+0x2d4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d125      	bne.n	800566a <UART_SetConfig+0x1aa>
 800561e:	4b5b      	ldr	r3, [pc, #364]	@ (800578c <UART_SetConfig+0x2cc>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005624:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005628:	2b30      	cmp	r3, #48	@ 0x30
 800562a:	d016      	beq.n	800565a <UART_SetConfig+0x19a>
 800562c:	2b30      	cmp	r3, #48	@ 0x30
 800562e:	d818      	bhi.n	8005662 <UART_SetConfig+0x1a2>
 8005630:	2b20      	cmp	r3, #32
 8005632:	d00a      	beq.n	800564a <UART_SetConfig+0x18a>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d814      	bhi.n	8005662 <UART_SetConfig+0x1a2>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <UART_SetConfig+0x182>
 800563c:	2b10      	cmp	r3, #16
 800563e:	d008      	beq.n	8005652 <UART_SetConfig+0x192>
 8005640:	e00f      	b.n	8005662 <UART_SetConfig+0x1a2>
 8005642:	2300      	movs	r3, #0
 8005644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005648:	e0ad      	b.n	80057a6 <UART_SetConfig+0x2e6>
 800564a:	2302      	movs	r3, #2
 800564c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005650:	e0a9      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005652:	2304      	movs	r3, #4
 8005654:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005658:	e0a5      	b.n	80057a6 <UART_SetConfig+0x2e6>
 800565a:	2308      	movs	r3, #8
 800565c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005660:	e0a1      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005662:	2310      	movs	r3, #16
 8005664:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005668:	e09d      	b.n	80057a6 <UART_SetConfig+0x2e6>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a4a      	ldr	r2, [pc, #296]	@ (8005798 <UART_SetConfig+0x2d8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d125      	bne.n	80056c0 <UART_SetConfig+0x200>
 8005674:	4b45      	ldr	r3, [pc, #276]	@ (800578c <UART_SetConfig+0x2cc>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800567e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005680:	d016      	beq.n	80056b0 <UART_SetConfig+0x1f0>
 8005682:	2bc0      	cmp	r3, #192	@ 0xc0
 8005684:	d818      	bhi.n	80056b8 <UART_SetConfig+0x1f8>
 8005686:	2b80      	cmp	r3, #128	@ 0x80
 8005688:	d00a      	beq.n	80056a0 <UART_SetConfig+0x1e0>
 800568a:	2b80      	cmp	r3, #128	@ 0x80
 800568c:	d814      	bhi.n	80056b8 <UART_SetConfig+0x1f8>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <UART_SetConfig+0x1d8>
 8005692:	2b40      	cmp	r3, #64	@ 0x40
 8005694:	d008      	beq.n	80056a8 <UART_SetConfig+0x1e8>
 8005696:	e00f      	b.n	80056b8 <UART_SetConfig+0x1f8>
 8005698:	2300      	movs	r3, #0
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800569e:	e082      	b.n	80057a6 <UART_SetConfig+0x2e6>
 80056a0:	2302      	movs	r3, #2
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056a6:	e07e      	b.n	80057a6 <UART_SetConfig+0x2e6>
 80056a8:	2304      	movs	r3, #4
 80056aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ae:	e07a      	b.n	80057a6 <UART_SetConfig+0x2e6>
 80056b0:	2308      	movs	r3, #8
 80056b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056b6:	e076      	b.n	80057a6 <UART_SetConfig+0x2e6>
 80056b8:	2310      	movs	r3, #16
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056be:	e072      	b.n	80057a6 <UART_SetConfig+0x2e6>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a35      	ldr	r2, [pc, #212]	@ (800579c <UART_SetConfig+0x2dc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d12a      	bne.n	8005720 <UART_SetConfig+0x260>
 80056ca:	4b30      	ldr	r3, [pc, #192]	@ (800578c <UART_SetConfig+0x2cc>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056d8:	d01a      	beq.n	8005710 <UART_SetConfig+0x250>
 80056da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056de:	d81b      	bhi.n	8005718 <UART_SetConfig+0x258>
 80056e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e4:	d00c      	beq.n	8005700 <UART_SetConfig+0x240>
 80056e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ea:	d815      	bhi.n	8005718 <UART_SetConfig+0x258>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <UART_SetConfig+0x238>
 80056f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056f4:	d008      	beq.n	8005708 <UART_SetConfig+0x248>
 80056f6:	e00f      	b.n	8005718 <UART_SetConfig+0x258>
 80056f8:	2300      	movs	r3, #0
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fe:	e052      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005700:	2302      	movs	r3, #2
 8005702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005706:	e04e      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005708:	2304      	movs	r3, #4
 800570a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800570e:	e04a      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005710:	2308      	movs	r3, #8
 8005712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005716:	e046      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005718:	2310      	movs	r3, #16
 800571a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800571e:	e042      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a17      	ldr	r2, [pc, #92]	@ (8005784 <UART_SetConfig+0x2c4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d13a      	bne.n	80057a0 <UART_SetConfig+0x2e0>
 800572a:	4b18      	ldr	r3, [pc, #96]	@ (800578c <UART_SetConfig+0x2cc>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005730:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005734:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005738:	d01a      	beq.n	8005770 <UART_SetConfig+0x2b0>
 800573a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800573e:	d81b      	bhi.n	8005778 <UART_SetConfig+0x2b8>
 8005740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005744:	d00c      	beq.n	8005760 <UART_SetConfig+0x2a0>
 8005746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800574a:	d815      	bhi.n	8005778 <UART_SetConfig+0x2b8>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <UART_SetConfig+0x298>
 8005750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005754:	d008      	beq.n	8005768 <UART_SetConfig+0x2a8>
 8005756:	e00f      	b.n	8005778 <UART_SetConfig+0x2b8>
 8005758:	2300      	movs	r3, #0
 800575a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575e:	e022      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005760:	2302      	movs	r3, #2
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005766:	e01e      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576e:	e01a      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005776:	e016      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800577e:	e012      	b.n	80057a6 <UART_SetConfig+0x2e6>
 8005780:	efff69f3 	.word	0xefff69f3
 8005784:	40008000 	.word	0x40008000
 8005788:	40013800 	.word	0x40013800
 800578c:	40021000 	.word	0x40021000
 8005790:	40004400 	.word	0x40004400
 8005794:	40004800 	.word	0x40004800
 8005798:	40004c00 	.word	0x40004c00
 800579c:	40005000 	.word	0x40005000
 80057a0:	2310      	movs	r3, #16
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a9f      	ldr	r2, [pc, #636]	@ (8005a28 <UART_SetConfig+0x568>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d17a      	bne.n	80058a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d824      	bhi.n	8005802 <UART_SetConfig+0x342>
 80057b8:	a201      	add	r2, pc, #4	@ (adr r2, 80057c0 <UART_SetConfig+0x300>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	08005803 	.word	0x08005803
 80057c8:	080057ed 	.word	0x080057ed
 80057cc:	08005803 	.word	0x08005803
 80057d0:	080057f3 	.word	0x080057f3
 80057d4:	08005803 	.word	0x08005803
 80057d8:	08005803 	.word	0x08005803
 80057dc:	08005803 	.word	0x08005803
 80057e0:	080057fb 	.word	0x080057fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e4:	f7fd fdfa 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 80057e8:	61f8      	str	r0, [r7, #28]
        break;
 80057ea:	e010      	b.n	800580e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057ec:	4b8f      	ldr	r3, [pc, #572]	@ (8005a2c <UART_SetConfig+0x56c>)
 80057ee:	61fb      	str	r3, [r7, #28]
        break;
 80057f0:	e00d      	b.n	800580e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f2:	f7fd fd5b 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 80057f6:	61f8      	str	r0, [r7, #28]
        break;
 80057f8:	e009      	b.n	800580e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057fe:	61fb      	str	r3, [r7, #28]
        break;
 8005800:	e005      	b.n	800580e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800580c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80fb 	beq.w	8005a0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	429a      	cmp	r2, r3
 8005824:	d305      	bcc.n	8005832 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	429a      	cmp	r2, r3
 8005830:	d903      	bls.n	800583a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005838:	e0e8      	b.n	8005a0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2200      	movs	r2, #0
 800583e:	461c      	mov	r4, r3
 8005840:	4615      	mov	r5, r2
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	022b      	lsls	r3, r5, #8
 800584c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005850:	0222      	lsls	r2, r4, #8
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	6849      	ldr	r1, [r1, #4]
 8005856:	0849      	lsrs	r1, r1, #1
 8005858:	2000      	movs	r0, #0
 800585a:	4688      	mov	r8, r1
 800585c:	4681      	mov	r9, r0
 800585e:	eb12 0a08 	adds.w	sl, r2, r8
 8005862:	eb43 0b09 	adc.w	fp, r3, r9
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	603b      	str	r3, [r7, #0]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005874:	4650      	mov	r0, sl
 8005876:	4659      	mov	r1, fp
 8005878:	f7fb f9e6 	bl	8000c48 <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4613      	mov	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800588a:	d308      	bcc.n	800589e <UART_SetConfig+0x3de>
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005892:	d204      	bcs.n	800589e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	60da      	str	r2, [r3, #12]
 800589c:	e0b6      	b.n	8005a0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058a4:	e0b2      	b.n	8005a0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ae:	d15e      	bne.n	800596e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d828      	bhi.n	800590a <UART_SetConfig+0x44a>
 80058b8:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <UART_SetConfig+0x400>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	0800590b 	.word	0x0800590b
 80058d0:	080058fb 	.word	0x080058fb
 80058d4:	0800590b 	.word	0x0800590b
 80058d8:	0800590b 	.word	0x0800590b
 80058dc:	0800590b 	.word	0x0800590b
 80058e0:	08005903 	.word	0x08005903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e4:	f7fd fd7a 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 80058e8:	61f8      	str	r0, [r7, #28]
        break;
 80058ea:	e014      	b.n	8005916 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7fd fd8c 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 80058f0:	61f8      	str	r0, [r7, #28]
        break;
 80058f2:	e010      	b.n	8005916 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f4:	4b4d      	ldr	r3, [pc, #308]	@ (8005a2c <UART_SetConfig+0x56c>)
 80058f6:	61fb      	str	r3, [r7, #28]
        break;
 80058f8:	e00d      	b.n	8005916 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058fa:	f7fd fcd7 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 80058fe:	61f8      	str	r0, [r7, #28]
        break;
 8005900:	e009      	b.n	8005916 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005906:	61fb      	str	r3, [r7, #28]
        break;
 8005908:	e005      	b.n	8005916 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005914:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d077      	beq.n	8005a0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	005a      	lsls	r2, r3, #1
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	441a      	add	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b0f      	cmp	r3, #15
 8005936:	d916      	bls.n	8005966 <UART_SetConfig+0x4a6>
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800593e:	d212      	bcs.n	8005966 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f023 030f 	bic.w	r3, r3, #15
 8005948:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	b29a      	uxth	r2, r3
 8005956:	8afb      	ldrh	r3, [r7, #22]
 8005958:	4313      	orrs	r3, r2
 800595a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	8afa      	ldrh	r2, [r7, #22]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	e052      	b.n	8005a0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800596c:	e04e      	b.n	8005a0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800596e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005972:	2b08      	cmp	r3, #8
 8005974:	d827      	bhi.n	80059c6 <UART_SetConfig+0x506>
 8005976:	a201      	add	r2, pc, #4	@ (adr r2, 800597c <UART_SetConfig+0x4bc>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059b1 	.word	0x080059b1
 8005988:	080059c7 	.word	0x080059c7
 800598c:	080059b7 	.word	0x080059b7
 8005990:	080059c7 	.word	0x080059c7
 8005994:	080059c7 	.word	0x080059c7
 8005998:	080059c7 	.word	0x080059c7
 800599c:	080059bf 	.word	0x080059bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a0:	f7fd fd1c 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 80059a4:	61f8      	str	r0, [r7, #28]
        break;
 80059a6:	e014      	b.n	80059d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059a8:	f7fd fd2e 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 80059ac:	61f8      	str	r0, [r7, #28]
        break;
 80059ae:	e010      	b.n	80059d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b0:	4b1e      	ldr	r3, [pc, #120]	@ (8005a2c <UART_SetConfig+0x56c>)
 80059b2:	61fb      	str	r3, [r7, #28]
        break;
 80059b4:	e00d      	b.n	80059d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b6:	f7fd fc79 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 80059ba:	61f8      	str	r0, [r7, #28]
        break;
 80059bc:	e009      	b.n	80059d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059c2:	61fb      	str	r3, [r7, #28]
        break;
 80059c4:	e005      	b.n	80059d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059d0:	bf00      	nop
    }

    if (pclk != 0U)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d019      	beq.n	8005a0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	085a      	lsrs	r2, r3, #1
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	d909      	bls.n	8005a06 <UART_SetConfig+0x546>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f8:	d205      	bcs.n	8005a06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60da      	str	r2, [r3, #12]
 8005a04:	e002      	b.n	8005a0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3728      	adds	r7, #40	@ 0x28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a26:	bf00      	nop
 8005a28:	40008000 	.word	0x40008000
 8005a2c:	00f42400 	.word	0x00f42400

08005a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01a      	beq.n	8005b46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b2e:	d10a      	bne.n	8005b46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
  }
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b098      	sub	sp, #96	@ 0x60
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b84:	f7fc fb4e 	bl	8002224 <HAL_GetTick>
 8005b88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d12e      	bne.n	8005bf6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f88c 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d021      	beq.n	8005bf6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e6      	bne.n	8005bb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e062      	b.n	8005cbc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d149      	bne.n	8005c98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f856 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d03c      	beq.n	8005c98 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e6      	bne.n	8005c1e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c70:	61fa      	str	r2, [r7, #28]
 8005c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	69b9      	ldr	r1, [r7, #24]
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e5      	bne.n	8005c50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e011      	b.n	8005cbc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3758      	adds	r7, #88	@ 0x58
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd4:	e049      	b.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cdc:	d045      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cde:	f7fc faa1 	bl	8002224 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e048      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d031      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d110      	bne.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f838 	bl	8005d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2208      	movs	r2, #8
 8005d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e029      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d44:	d111      	bne.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f81e 	bl	8005d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e00f      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d0a6      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b095      	sub	sp, #84	@ 0x54
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005daa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e6      	bne.n	8005d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d118      	bne.n	8005e3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 0310 	bic.w	r3, r3, #16
 8005e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6979      	ldr	r1, [r7, #20]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	613b      	str	r3, [r7, #16]
   return(result);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e6      	bne.n	8005e08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e4e:	bf00      	nop
 8005e50:	3754      	adds	r7, #84	@ 0x54
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <atan2>:
 8005e5a:	f000 b801 	b.w	8005e60 <__ieee754_atan2>
	...

08005e60 <__ieee754_atan2>:
 8005e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e64:	ec57 6b11 	vmov	r6, r7, d1
 8005e68:	4273      	negs	r3, r6
 8005e6a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005fe8 <__ieee754_atan2+0x188>
 8005e6e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8005e72:	4333      	orrs	r3, r6
 8005e74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005e78:	4543      	cmp	r3, r8
 8005e7a:	ec51 0b10 	vmov	r0, r1, d0
 8005e7e:	4635      	mov	r5, r6
 8005e80:	d809      	bhi.n	8005e96 <__ieee754_atan2+0x36>
 8005e82:	4244      	negs	r4, r0
 8005e84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005e88:	4304      	orrs	r4, r0
 8005e8a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005e8e:	4544      	cmp	r4, r8
 8005e90:	468e      	mov	lr, r1
 8005e92:	4681      	mov	r9, r0
 8005e94:	d907      	bls.n	8005ea6 <__ieee754_atan2+0x46>
 8005e96:	4632      	mov	r2, r6
 8005e98:	463b      	mov	r3, r7
 8005e9a:	f7fa f9f7 	bl	800028c <__adddf3>
 8005e9e:	ec41 0b10 	vmov	d0, r0, r1
 8005ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8005eaa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8005eae:	4334      	orrs	r4, r6
 8005eb0:	d103      	bne.n	8005eba <__ieee754_atan2+0x5a>
 8005eb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb6:	f000 b8c7 	b.w	8006048 <atan>
 8005eba:	17bc      	asrs	r4, r7, #30
 8005ebc:	f004 0402 	and.w	r4, r4, #2
 8005ec0:	ea53 0909 	orrs.w	r9, r3, r9
 8005ec4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005ec8:	d107      	bne.n	8005eda <__ieee754_atan2+0x7a>
 8005eca:	2c02      	cmp	r4, #2
 8005ecc:	d05f      	beq.n	8005f8e <__ieee754_atan2+0x12e>
 8005ece:	2c03      	cmp	r4, #3
 8005ed0:	d1e5      	bne.n	8005e9e <__ieee754_atan2+0x3e>
 8005ed2:	a141      	add	r1, pc, #260	@ (adr r1, 8005fd8 <__ieee754_atan2+0x178>)
 8005ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ed8:	e7e1      	b.n	8005e9e <__ieee754_atan2+0x3e>
 8005eda:	4315      	orrs	r5, r2
 8005edc:	d106      	bne.n	8005eec <__ieee754_atan2+0x8c>
 8005ede:	f1be 0f00 	cmp.w	lr, #0
 8005ee2:	da5f      	bge.n	8005fa4 <__ieee754_atan2+0x144>
 8005ee4:	a13e      	add	r1, pc, #248	@ (adr r1, 8005fe0 <__ieee754_atan2+0x180>)
 8005ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eea:	e7d8      	b.n	8005e9e <__ieee754_atan2+0x3e>
 8005eec:	4542      	cmp	r2, r8
 8005eee:	d10f      	bne.n	8005f10 <__ieee754_atan2+0xb0>
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8005ef6:	d107      	bne.n	8005f08 <__ieee754_atan2+0xa8>
 8005ef8:	2c02      	cmp	r4, #2
 8005efa:	d84c      	bhi.n	8005f96 <__ieee754_atan2+0x136>
 8005efc:	4b34      	ldr	r3, [pc, #208]	@ (8005fd0 <__ieee754_atan2+0x170>)
 8005efe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f06:	e7ca      	b.n	8005e9e <__ieee754_atan2+0x3e>
 8005f08:	2c02      	cmp	r4, #2
 8005f0a:	d848      	bhi.n	8005f9e <__ieee754_atan2+0x13e>
 8005f0c:	4b31      	ldr	r3, [pc, #196]	@ (8005fd4 <__ieee754_atan2+0x174>)
 8005f0e:	e7f6      	b.n	8005efe <__ieee754_atan2+0x9e>
 8005f10:	4543      	cmp	r3, r8
 8005f12:	d0e4      	beq.n	8005ede <__ieee754_atan2+0x7e>
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8005f1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005f1e:	da1e      	bge.n	8005f5e <__ieee754_atan2+0xfe>
 8005f20:	2f00      	cmp	r7, #0
 8005f22:	da01      	bge.n	8005f28 <__ieee754_atan2+0xc8>
 8005f24:	323c      	adds	r2, #60	@ 0x3c
 8005f26:	db1e      	blt.n	8005f66 <__ieee754_atan2+0x106>
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa fc8e 	bl	800084c <__aeabi_ddiv>
 8005f30:	ec41 0b10 	vmov	d0, r0, r1
 8005f34:	f000 fa74 	bl	8006420 <fabs>
 8005f38:	f000 f886 	bl	8006048 <atan>
 8005f3c:	ec51 0b10 	vmov	r0, r1, d0
 8005f40:	2c01      	cmp	r4, #1
 8005f42:	d013      	beq.n	8005f6c <__ieee754_atan2+0x10c>
 8005f44:	2c02      	cmp	r4, #2
 8005f46:	d015      	beq.n	8005f74 <__ieee754_atan2+0x114>
 8005f48:	2c00      	cmp	r4, #0
 8005f4a:	d0a8      	beq.n	8005e9e <__ieee754_atan2+0x3e>
 8005f4c:	a318      	add	r3, pc, #96	@ (adr r3, 8005fb0 <__ieee754_atan2+0x150>)
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f7fa f999 	bl	8000288 <__aeabi_dsub>
 8005f56:	a318      	add	r3, pc, #96	@ (adr r3, 8005fb8 <__ieee754_atan2+0x158>)
 8005f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5c:	e014      	b.n	8005f88 <__ieee754_atan2+0x128>
 8005f5e:	a118      	add	r1, pc, #96	@ (adr r1, 8005fc0 <__ieee754_atan2+0x160>)
 8005f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f64:	e7ec      	b.n	8005f40 <__ieee754_atan2+0xe0>
 8005f66:	2000      	movs	r0, #0
 8005f68:	2100      	movs	r1, #0
 8005f6a:	e7e9      	b.n	8005f40 <__ieee754_atan2+0xe0>
 8005f6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f70:	4619      	mov	r1, r3
 8005f72:	e794      	b.n	8005e9e <__ieee754_atan2+0x3e>
 8005f74:	a30e      	add	r3, pc, #56	@ (adr r3, 8005fb0 <__ieee754_atan2+0x150>)
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f7fa f985 	bl	8000288 <__aeabi_dsub>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	a10d      	add	r1, pc, #52	@ (adr r1, 8005fb8 <__ieee754_atan2+0x158>)
 8005f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f88:	f7fa f97e 	bl	8000288 <__aeabi_dsub>
 8005f8c:	e787      	b.n	8005e9e <__ieee754_atan2+0x3e>
 8005f8e:	a10a      	add	r1, pc, #40	@ (adr r1, 8005fb8 <__ieee754_atan2+0x158>)
 8005f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f94:	e783      	b.n	8005e9e <__ieee754_atan2+0x3e>
 8005f96:	a10c      	add	r1, pc, #48	@ (adr r1, 8005fc8 <__ieee754_atan2+0x168>)
 8005f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9c:	e77f      	b.n	8005e9e <__ieee754_atan2+0x3e>
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	e77c      	b.n	8005e9e <__ieee754_atan2+0x3e>
 8005fa4:	a106      	add	r1, pc, #24	@ (adr r1, 8005fc0 <__ieee754_atan2+0x160>)
 8005fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005faa:	e778      	b.n	8005e9e <__ieee754_atan2+0x3e>
 8005fac:	f3af 8000 	nop.w
 8005fb0:	33145c07 	.word	0x33145c07
 8005fb4:	3ca1a626 	.word	0x3ca1a626
 8005fb8:	54442d18 	.word	0x54442d18
 8005fbc:	400921fb 	.word	0x400921fb
 8005fc0:	54442d18 	.word	0x54442d18
 8005fc4:	3ff921fb 	.word	0x3ff921fb
 8005fc8:	54442d18 	.word	0x54442d18
 8005fcc:	3fe921fb 	.word	0x3fe921fb
 8005fd0:	0800a0d8 	.word	0x0800a0d8
 8005fd4:	0800a0c0 	.word	0x0800a0c0
 8005fd8:	54442d18 	.word	0x54442d18
 8005fdc:	c00921fb 	.word	0xc00921fb
 8005fe0:	54442d18 	.word	0x54442d18
 8005fe4:	bff921fb 	.word	0xbff921fb
 8005fe8:	7ff00000 	.word	0x7ff00000

08005fec <sqrt>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	ed2d 8b02 	vpush	{d8}
 8005ff2:	ec55 4b10 	vmov	r4, r5, d0
 8005ff6:	f000 fa6f 	bl	80064d8 <__ieee754_sqrt>
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	eeb0 8a40 	vmov.f32	s16, s0
 8006006:	eef0 8a60 	vmov.f32	s17, s1
 800600a:	f7fa fd8f 	bl	8000b2c <__aeabi_dcmpun>
 800600e:	b990      	cbnz	r0, 8006036 <sqrt+0x4a>
 8006010:	2200      	movs	r2, #0
 8006012:	2300      	movs	r3, #0
 8006014:	4620      	mov	r0, r4
 8006016:	4629      	mov	r1, r5
 8006018:	f7fa fd60 	bl	8000adc <__aeabi_dcmplt>
 800601c:	b158      	cbz	r0, 8006036 <sqrt+0x4a>
 800601e:	f002 f843 	bl	80080a8 <__errno>
 8006022:	2321      	movs	r3, #33	@ 0x21
 8006024:	6003      	str	r3, [r0, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	2300      	movs	r3, #0
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	f7fa fc0d 	bl	800084c <__aeabi_ddiv>
 8006032:	ec41 0b18 	vmov	d8, r0, r1
 8006036:	eeb0 0a48 	vmov.f32	s0, s16
 800603a:	eef0 0a68 	vmov.f32	s1, s17
 800603e:	ecbd 8b02 	vpop	{d8}
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	0000      	movs	r0, r0
	...

08006048 <atan>:
 8006048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	ec55 4b10 	vmov	r4, r5, d0
 8006050:	4bbf      	ldr	r3, [pc, #764]	@ (8006350 <atan+0x308>)
 8006052:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006056:	429e      	cmp	r6, r3
 8006058:	46ab      	mov	fp, r5
 800605a:	d918      	bls.n	800608e <atan+0x46>
 800605c:	4bbd      	ldr	r3, [pc, #756]	@ (8006354 <atan+0x30c>)
 800605e:	429e      	cmp	r6, r3
 8006060:	d801      	bhi.n	8006066 <atan+0x1e>
 8006062:	d109      	bne.n	8006078 <atan+0x30>
 8006064:	b144      	cbz	r4, 8006078 <atan+0x30>
 8006066:	4622      	mov	r2, r4
 8006068:	462b      	mov	r3, r5
 800606a:	4620      	mov	r0, r4
 800606c:	4629      	mov	r1, r5
 800606e:	f7fa f90d 	bl	800028c <__adddf3>
 8006072:	4604      	mov	r4, r0
 8006074:	460d      	mov	r5, r1
 8006076:	e006      	b.n	8006086 <atan+0x3e>
 8006078:	f1bb 0f00 	cmp.w	fp, #0
 800607c:	f340 812b 	ble.w	80062d6 <atan+0x28e>
 8006080:	a597      	add	r5, pc, #604	@ (adr r5, 80062e0 <atan+0x298>)
 8006082:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006086:	ec45 4b10 	vmov	d0, r4, r5
 800608a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608e:	4bb2      	ldr	r3, [pc, #712]	@ (8006358 <atan+0x310>)
 8006090:	429e      	cmp	r6, r3
 8006092:	d813      	bhi.n	80060bc <atan+0x74>
 8006094:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006098:	429e      	cmp	r6, r3
 800609a:	d80c      	bhi.n	80060b6 <atan+0x6e>
 800609c:	a392      	add	r3, pc, #584	@ (adr r3, 80062e8 <atan+0x2a0>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	4620      	mov	r0, r4
 80060a4:	4629      	mov	r1, r5
 80060a6:	f7fa f8f1 	bl	800028c <__adddf3>
 80060aa:	4bac      	ldr	r3, [pc, #688]	@ (800635c <atan+0x314>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	f7fa fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d1e7      	bne.n	8006086 <atan+0x3e>
 80060b6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80060ba:	e029      	b.n	8006110 <atan+0xc8>
 80060bc:	f000 f9b0 	bl	8006420 <fabs>
 80060c0:	4ba7      	ldr	r3, [pc, #668]	@ (8006360 <atan+0x318>)
 80060c2:	429e      	cmp	r6, r3
 80060c4:	ec55 4b10 	vmov	r4, r5, d0
 80060c8:	f200 80bc 	bhi.w	8006244 <atan+0x1fc>
 80060cc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80060d0:	429e      	cmp	r6, r3
 80060d2:	f200 809e 	bhi.w	8006212 <atan+0x1ca>
 80060d6:	4622      	mov	r2, r4
 80060d8:	462b      	mov	r3, r5
 80060da:	4620      	mov	r0, r4
 80060dc:	4629      	mov	r1, r5
 80060de:	f7fa f8d5 	bl	800028c <__adddf3>
 80060e2:	4b9e      	ldr	r3, [pc, #632]	@ (800635c <atan+0x314>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	f7fa f8cf 	bl	8000288 <__aeabi_dsub>
 80060ea:	2200      	movs	r2, #0
 80060ec:	4606      	mov	r6, r0
 80060ee:	460f      	mov	r7, r1
 80060f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80060f4:	4620      	mov	r0, r4
 80060f6:	4629      	mov	r1, r5
 80060f8:	f7fa f8c8 	bl	800028c <__adddf3>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	f7fa fba2 	bl	800084c <__aeabi_ddiv>
 8006108:	f04f 0a00 	mov.w	sl, #0
 800610c:	4604      	mov	r4, r0
 800610e:	460d      	mov	r5, r1
 8006110:	4622      	mov	r2, r4
 8006112:	462b      	mov	r3, r5
 8006114:	4620      	mov	r0, r4
 8006116:	4629      	mov	r1, r5
 8006118:	f7fa fa6e 	bl	80005f8 <__aeabi_dmul>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4680      	mov	r8, r0
 8006122:	4689      	mov	r9, r1
 8006124:	f7fa fa68 	bl	80005f8 <__aeabi_dmul>
 8006128:	a371      	add	r3, pc, #452	@ (adr r3, 80062f0 <atan+0x2a8>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	4606      	mov	r6, r0
 8006130:	460f      	mov	r7, r1
 8006132:	f7fa fa61 	bl	80005f8 <__aeabi_dmul>
 8006136:	a370      	add	r3, pc, #448	@ (adr r3, 80062f8 <atan+0x2b0>)
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f7fa f8a6 	bl	800028c <__adddf3>
 8006140:	4632      	mov	r2, r6
 8006142:	463b      	mov	r3, r7
 8006144:	f7fa fa58 	bl	80005f8 <__aeabi_dmul>
 8006148:	a36d      	add	r3, pc, #436	@ (adr r3, 8006300 <atan+0x2b8>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f7fa f89d 	bl	800028c <__adddf3>
 8006152:	4632      	mov	r2, r6
 8006154:	463b      	mov	r3, r7
 8006156:	f7fa fa4f 	bl	80005f8 <__aeabi_dmul>
 800615a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006308 <atan+0x2c0>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	f7fa f894 	bl	800028c <__adddf3>
 8006164:	4632      	mov	r2, r6
 8006166:	463b      	mov	r3, r7
 8006168:	f7fa fa46 	bl	80005f8 <__aeabi_dmul>
 800616c:	a368      	add	r3, pc, #416	@ (adr r3, 8006310 <atan+0x2c8>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f7fa f88b 	bl	800028c <__adddf3>
 8006176:	4632      	mov	r2, r6
 8006178:	463b      	mov	r3, r7
 800617a:	f7fa fa3d 	bl	80005f8 <__aeabi_dmul>
 800617e:	a366      	add	r3, pc, #408	@ (adr r3, 8006318 <atan+0x2d0>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f7fa f882 	bl	800028c <__adddf3>
 8006188:	4642      	mov	r2, r8
 800618a:	464b      	mov	r3, r9
 800618c:	f7fa fa34 	bl	80005f8 <__aeabi_dmul>
 8006190:	a363      	add	r3, pc, #396	@ (adr r3, 8006320 <atan+0x2d8>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	4680      	mov	r8, r0
 8006198:	4689      	mov	r9, r1
 800619a:	4630      	mov	r0, r6
 800619c:	4639      	mov	r1, r7
 800619e:	f7fa fa2b 	bl	80005f8 <__aeabi_dmul>
 80061a2:	a361      	add	r3, pc, #388	@ (adr r3, 8006328 <atan+0x2e0>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa f86e 	bl	8000288 <__aeabi_dsub>
 80061ac:	4632      	mov	r2, r6
 80061ae:	463b      	mov	r3, r7
 80061b0:	f7fa fa22 	bl	80005f8 <__aeabi_dmul>
 80061b4:	a35e      	add	r3, pc, #376	@ (adr r3, 8006330 <atan+0x2e8>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7fa f865 	bl	8000288 <__aeabi_dsub>
 80061be:	4632      	mov	r2, r6
 80061c0:	463b      	mov	r3, r7
 80061c2:	f7fa fa19 	bl	80005f8 <__aeabi_dmul>
 80061c6:	a35c      	add	r3, pc, #368	@ (adr r3, 8006338 <atan+0x2f0>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa f85c 	bl	8000288 <__aeabi_dsub>
 80061d0:	4632      	mov	r2, r6
 80061d2:	463b      	mov	r3, r7
 80061d4:	f7fa fa10 	bl	80005f8 <__aeabi_dmul>
 80061d8:	a359      	add	r3, pc, #356	@ (adr r3, 8006340 <atan+0x2f8>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f7fa f853 	bl	8000288 <__aeabi_dsub>
 80061e2:	4632      	mov	r2, r6
 80061e4:	463b      	mov	r3, r7
 80061e6:	f7fa fa07 	bl	80005f8 <__aeabi_dmul>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4640      	mov	r0, r8
 80061f0:	4649      	mov	r1, r9
 80061f2:	f7fa f84b 	bl	800028c <__adddf3>
 80061f6:	4622      	mov	r2, r4
 80061f8:	462b      	mov	r3, r5
 80061fa:	f7fa f9fd 	bl	80005f8 <__aeabi_dmul>
 80061fe:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	d148      	bne.n	800629a <atan+0x252>
 8006208:	4620      	mov	r0, r4
 800620a:	4629      	mov	r1, r5
 800620c:	f7fa f83c 	bl	8000288 <__aeabi_dsub>
 8006210:	e72f      	b.n	8006072 <atan+0x2a>
 8006212:	4b52      	ldr	r3, [pc, #328]	@ (800635c <atan+0x314>)
 8006214:	2200      	movs	r2, #0
 8006216:	4620      	mov	r0, r4
 8006218:	4629      	mov	r1, r5
 800621a:	f7fa f835 	bl	8000288 <__aeabi_dsub>
 800621e:	4b4f      	ldr	r3, [pc, #316]	@ (800635c <atan+0x314>)
 8006220:	4606      	mov	r6, r0
 8006222:	460f      	mov	r7, r1
 8006224:	2200      	movs	r2, #0
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	f7fa f82f 	bl	800028c <__adddf3>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4630      	mov	r0, r6
 8006234:	4639      	mov	r1, r7
 8006236:	f7fa fb09 	bl	800084c <__aeabi_ddiv>
 800623a:	f04f 0a01 	mov.w	sl, #1
 800623e:	4604      	mov	r4, r0
 8006240:	460d      	mov	r5, r1
 8006242:	e765      	b.n	8006110 <atan+0xc8>
 8006244:	4b47      	ldr	r3, [pc, #284]	@ (8006364 <atan+0x31c>)
 8006246:	429e      	cmp	r6, r3
 8006248:	d21c      	bcs.n	8006284 <atan+0x23c>
 800624a:	4b47      	ldr	r3, [pc, #284]	@ (8006368 <atan+0x320>)
 800624c:	2200      	movs	r2, #0
 800624e:	4620      	mov	r0, r4
 8006250:	4629      	mov	r1, r5
 8006252:	f7fa f819 	bl	8000288 <__aeabi_dsub>
 8006256:	4b44      	ldr	r3, [pc, #272]	@ (8006368 <atan+0x320>)
 8006258:	4606      	mov	r6, r0
 800625a:	460f      	mov	r7, r1
 800625c:	2200      	movs	r2, #0
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa f9c9 	bl	80005f8 <__aeabi_dmul>
 8006266:	4b3d      	ldr	r3, [pc, #244]	@ (800635c <atan+0x314>)
 8006268:	2200      	movs	r2, #0
 800626a:	f7fa f80f 	bl	800028c <__adddf3>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4630      	mov	r0, r6
 8006274:	4639      	mov	r1, r7
 8006276:	f7fa fae9 	bl	800084c <__aeabi_ddiv>
 800627a:	f04f 0a02 	mov.w	sl, #2
 800627e:	4604      	mov	r4, r0
 8006280:	460d      	mov	r5, r1
 8006282:	e745      	b.n	8006110 <atan+0xc8>
 8006284:	4622      	mov	r2, r4
 8006286:	462b      	mov	r3, r5
 8006288:	4938      	ldr	r1, [pc, #224]	@ (800636c <atan+0x324>)
 800628a:	2000      	movs	r0, #0
 800628c:	f7fa fade 	bl	800084c <__aeabi_ddiv>
 8006290:	f04f 0a03 	mov.w	sl, #3
 8006294:	4604      	mov	r4, r0
 8006296:	460d      	mov	r5, r1
 8006298:	e73a      	b.n	8006110 <atan+0xc8>
 800629a:	4b35      	ldr	r3, [pc, #212]	@ (8006370 <atan+0x328>)
 800629c:	4e35      	ldr	r6, [pc, #212]	@ (8006374 <atan+0x32c>)
 800629e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7f9 ffef 	bl	8000288 <__aeabi_dsub>
 80062aa:	4622      	mov	r2, r4
 80062ac:	462b      	mov	r3, r5
 80062ae:	f7f9 ffeb 	bl	8000288 <__aeabi_dsub>
 80062b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	e9d6 0100 	ldrd	r0, r1, [r6]
 80062be:	f7f9 ffe3 	bl	8000288 <__aeabi_dsub>
 80062c2:	f1bb 0f00 	cmp.w	fp, #0
 80062c6:	4604      	mov	r4, r0
 80062c8:	460d      	mov	r5, r1
 80062ca:	f6bf aedc 	bge.w	8006086 <atan+0x3e>
 80062ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80062d2:	461d      	mov	r5, r3
 80062d4:	e6d7      	b.n	8006086 <atan+0x3e>
 80062d6:	a51c      	add	r5, pc, #112	@ (adr r5, 8006348 <atan+0x300>)
 80062d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062dc:	e6d3      	b.n	8006086 <atan+0x3e>
 80062de:	bf00      	nop
 80062e0:	54442d18 	.word	0x54442d18
 80062e4:	3ff921fb 	.word	0x3ff921fb
 80062e8:	8800759c 	.word	0x8800759c
 80062ec:	7e37e43c 	.word	0x7e37e43c
 80062f0:	e322da11 	.word	0xe322da11
 80062f4:	3f90ad3a 	.word	0x3f90ad3a
 80062f8:	24760deb 	.word	0x24760deb
 80062fc:	3fa97b4b 	.word	0x3fa97b4b
 8006300:	a0d03d51 	.word	0xa0d03d51
 8006304:	3fb10d66 	.word	0x3fb10d66
 8006308:	c54c206e 	.word	0xc54c206e
 800630c:	3fb745cd 	.word	0x3fb745cd
 8006310:	920083ff 	.word	0x920083ff
 8006314:	3fc24924 	.word	0x3fc24924
 8006318:	5555550d 	.word	0x5555550d
 800631c:	3fd55555 	.word	0x3fd55555
 8006320:	2c6a6c2f 	.word	0x2c6a6c2f
 8006324:	bfa2b444 	.word	0xbfa2b444
 8006328:	52defd9a 	.word	0x52defd9a
 800632c:	3fadde2d 	.word	0x3fadde2d
 8006330:	af749a6d 	.word	0xaf749a6d
 8006334:	3fb3b0f2 	.word	0x3fb3b0f2
 8006338:	fe231671 	.word	0xfe231671
 800633c:	3fbc71c6 	.word	0x3fbc71c6
 8006340:	9998ebc4 	.word	0x9998ebc4
 8006344:	3fc99999 	.word	0x3fc99999
 8006348:	54442d18 	.word	0x54442d18
 800634c:	bff921fb 	.word	0xbff921fb
 8006350:	440fffff 	.word	0x440fffff
 8006354:	7ff00000 	.word	0x7ff00000
 8006358:	3fdbffff 	.word	0x3fdbffff
 800635c:	3ff00000 	.word	0x3ff00000
 8006360:	3ff2ffff 	.word	0x3ff2ffff
 8006364:	40038000 	.word	0x40038000
 8006368:	3ff80000 	.word	0x3ff80000
 800636c:	bff00000 	.word	0xbff00000
 8006370:	0800a0f0 	.word	0x0800a0f0
 8006374:	0800a110 	.word	0x0800a110

08006378 <cos>:
 8006378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800637a:	ec53 2b10 	vmov	r2, r3, d0
 800637e:	4826      	ldr	r0, [pc, #152]	@ (8006418 <cos+0xa0>)
 8006380:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006384:	4281      	cmp	r1, r0
 8006386:	d806      	bhi.n	8006396 <cos+0x1e>
 8006388:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006410 <cos+0x98>
 800638c:	b005      	add	sp, #20
 800638e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006392:	f000 bed1 	b.w	8007138 <__kernel_cos>
 8006396:	4821      	ldr	r0, [pc, #132]	@ (800641c <cos+0xa4>)
 8006398:	4281      	cmp	r1, r0
 800639a:	d908      	bls.n	80063ae <cos+0x36>
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	f7f9 ff72 	bl	8000288 <__aeabi_dsub>
 80063a4:	ec41 0b10 	vmov	d0, r0, r1
 80063a8:	b005      	add	sp, #20
 80063aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80063ae:	4668      	mov	r0, sp
 80063b0:	f000 f96e 	bl	8006690 <__ieee754_rem_pio2>
 80063b4:	f000 0003 	and.w	r0, r0, #3
 80063b8:	2801      	cmp	r0, #1
 80063ba:	d00b      	beq.n	80063d4 <cos+0x5c>
 80063bc:	2802      	cmp	r0, #2
 80063be:	d015      	beq.n	80063ec <cos+0x74>
 80063c0:	b9d8      	cbnz	r0, 80063fa <cos+0x82>
 80063c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063c6:	ed9d 0b00 	vldr	d0, [sp]
 80063ca:	f000 feb5 	bl	8007138 <__kernel_cos>
 80063ce:	ec51 0b10 	vmov	r0, r1, d0
 80063d2:	e7e7      	b.n	80063a4 <cos+0x2c>
 80063d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063d8:	ed9d 0b00 	vldr	d0, [sp]
 80063dc:	f000 ff74 	bl	80072c8 <__kernel_sin>
 80063e0:	ec53 2b10 	vmov	r2, r3, d0
 80063e4:	4610      	mov	r0, r2
 80063e6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80063ea:	e7db      	b.n	80063a4 <cos+0x2c>
 80063ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063f0:	ed9d 0b00 	vldr	d0, [sp]
 80063f4:	f000 fea0 	bl	8007138 <__kernel_cos>
 80063f8:	e7f2      	b.n	80063e0 <cos+0x68>
 80063fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063fe:	ed9d 0b00 	vldr	d0, [sp]
 8006402:	2001      	movs	r0, #1
 8006404:	f000 ff60 	bl	80072c8 <__kernel_sin>
 8006408:	e7e1      	b.n	80063ce <cos+0x56>
 800640a:	bf00      	nop
 800640c:	f3af 8000 	nop.w
	...
 8006418:	3fe921fb 	.word	0x3fe921fb
 800641c:	7fefffff 	.word	0x7fefffff

08006420 <fabs>:
 8006420:	ec51 0b10 	vmov	r0, r1, d0
 8006424:	4602      	mov	r2, r0
 8006426:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800642a:	ec43 2b10 	vmov	d0, r2, r3
 800642e:	4770      	bx	lr

08006430 <sin>:
 8006430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006432:	ec53 2b10 	vmov	r2, r3, d0
 8006436:	4826      	ldr	r0, [pc, #152]	@ (80064d0 <sin+0xa0>)
 8006438:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800643c:	4281      	cmp	r1, r0
 800643e:	d807      	bhi.n	8006450 <sin+0x20>
 8006440:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80064c8 <sin+0x98>
 8006444:	2000      	movs	r0, #0
 8006446:	b005      	add	sp, #20
 8006448:	f85d eb04 	ldr.w	lr, [sp], #4
 800644c:	f000 bf3c 	b.w	80072c8 <__kernel_sin>
 8006450:	4820      	ldr	r0, [pc, #128]	@ (80064d4 <sin+0xa4>)
 8006452:	4281      	cmp	r1, r0
 8006454:	d908      	bls.n	8006468 <sin+0x38>
 8006456:	4610      	mov	r0, r2
 8006458:	4619      	mov	r1, r3
 800645a:	f7f9 ff15 	bl	8000288 <__aeabi_dsub>
 800645e:	ec41 0b10 	vmov	d0, r0, r1
 8006462:	b005      	add	sp, #20
 8006464:	f85d fb04 	ldr.w	pc, [sp], #4
 8006468:	4668      	mov	r0, sp
 800646a:	f000 f911 	bl	8006690 <__ieee754_rem_pio2>
 800646e:	f000 0003 	and.w	r0, r0, #3
 8006472:	2801      	cmp	r0, #1
 8006474:	d00c      	beq.n	8006490 <sin+0x60>
 8006476:	2802      	cmp	r0, #2
 8006478:	d011      	beq.n	800649e <sin+0x6e>
 800647a:	b9e8      	cbnz	r0, 80064b8 <sin+0x88>
 800647c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006480:	ed9d 0b00 	vldr	d0, [sp]
 8006484:	2001      	movs	r0, #1
 8006486:	f000 ff1f 	bl	80072c8 <__kernel_sin>
 800648a:	ec51 0b10 	vmov	r0, r1, d0
 800648e:	e7e6      	b.n	800645e <sin+0x2e>
 8006490:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006494:	ed9d 0b00 	vldr	d0, [sp]
 8006498:	f000 fe4e 	bl	8007138 <__kernel_cos>
 800649c:	e7f5      	b.n	800648a <sin+0x5a>
 800649e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064a2:	ed9d 0b00 	vldr	d0, [sp]
 80064a6:	2001      	movs	r0, #1
 80064a8:	f000 ff0e 	bl	80072c8 <__kernel_sin>
 80064ac:	ec53 2b10 	vmov	r2, r3, d0
 80064b0:	4610      	mov	r0, r2
 80064b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80064b6:	e7d2      	b.n	800645e <sin+0x2e>
 80064b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064bc:	ed9d 0b00 	vldr	d0, [sp]
 80064c0:	f000 fe3a 	bl	8007138 <__kernel_cos>
 80064c4:	e7f2      	b.n	80064ac <sin+0x7c>
 80064c6:	bf00      	nop
	...
 80064d0:	3fe921fb 	.word	0x3fe921fb
 80064d4:	7fefffff 	.word	0x7fefffff

080064d8 <__ieee754_sqrt>:
 80064d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064dc:	4a68      	ldr	r2, [pc, #416]	@ (8006680 <__ieee754_sqrt+0x1a8>)
 80064de:	ec55 4b10 	vmov	r4, r5, d0
 80064e2:	43aa      	bics	r2, r5
 80064e4:	462b      	mov	r3, r5
 80064e6:	4621      	mov	r1, r4
 80064e8:	d110      	bne.n	800650c <__ieee754_sqrt+0x34>
 80064ea:	4622      	mov	r2, r4
 80064ec:	4620      	mov	r0, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	f7fa f882 	bl	80005f8 <__aeabi_dmul>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4620      	mov	r0, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	f7f9 fec6 	bl	800028c <__adddf3>
 8006500:	4604      	mov	r4, r0
 8006502:	460d      	mov	r5, r1
 8006504:	ec45 4b10 	vmov	d0, r4, r5
 8006508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	2d00      	cmp	r5, #0
 800650e:	dc0e      	bgt.n	800652e <__ieee754_sqrt+0x56>
 8006510:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006514:	4322      	orrs	r2, r4
 8006516:	d0f5      	beq.n	8006504 <__ieee754_sqrt+0x2c>
 8006518:	b19d      	cbz	r5, 8006542 <__ieee754_sqrt+0x6a>
 800651a:	4622      	mov	r2, r4
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7f9 feb2 	bl	8000288 <__aeabi_dsub>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	f7fa f990 	bl	800084c <__aeabi_ddiv>
 800652c:	e7e8      	b.n	8006500 <__ieee754_sqrt+0x28>
 800652e:	152a      	asrs	r2, r5, #20
 8006530:	d115      	bne.n	800655e <__ieee754_sqrt+0x86>
 8006532:	2000      	movs	r0, #0
 8006534:	e009      	b.n	800654a <__ieee754_sqrt+0x72>
 8006536:	0acb      	lsrs	r3, r1, #11
 8006538:	3a15      	subs	r2, #21
 800653a:	0549      	lsls	r1, r1, #21
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0fa      	beq.n	8006536 <__ieee754_sqrt+0x5e>
 8006540:	e7f7      	b.n	8006532 <__ieee754_sqrt+0x5a>
 8006542:	462a      	mov	r2, r5
 8006544:	e7fa      	b.n	800653c <__ieee754_sqrt+0x64>
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	3001      	adds	r0, #1
 800654a:	02dc      	lsls	r4, r3, #11
 800654c:	d5fb      	bpl.n	8006546 <__ieee754_sqrt+0x6e>
 800654e:	1e44      	subs	r4, r0, #1
 8006550:	1b12      	subs	r2, r2, r4
 8006552:	f1c0 0420 	rsb	r4, r0, #32
 8006556:	fa21 f404 	lsr.w	r4, r1, r4
 800655a:	4323      	orrs	r3, r4
 800655c:	4081      	lsls	r1, r0
 800655e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006562:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800656a:	07d2      	lsls	r2, r2, #31
 800656c:	bf5c      	itt	pl
 800656e:	005b      	lslpl	r3, r3, #1
 8006570:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006574:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006578:	bf58      	it	pl
 800657a:	0049      	lslpl	r1, r1, #1
 800657c:	2600      	movs	r6, #0
 800657e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006582:	106d      	asrs	r5, r5, #1
 8006584:	0049      	lsls	r1, r1, #1
 8006586:	2016      	movs	r0, #22
 8006588:	4632      	mov	r2, r6
 800658a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800658e:	1917      	adds	r7, r2, r4
 8006590:	429f      	cmp	r7, r3
 8006592:	bfde      	ittt	le
 8006594:	193a      	addle	r2, r7, r4
 8006596:	1bdb      	suble	r3, r3, r7
 8006598:	1936      	addle	r6, r6, r4
 800659a:	0fcf      	lsrs	r7, r1, #31
 800659c:	3801      	subs	r0, #1
 800659e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80065a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80065a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80065aa:	d1f0      	bne.n	800658e <__ieee754_sqrt+0xb6>
 80065ac:	4604      	mov	r4, r0
 80065ae:	2720      	movs	r7, #32
 80065b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80065b4:	429a      	cmp	r2, r3
 80065b6:	eb00 0e0c 	add.w	lr, r0, ip
 80065ba:	db02      	blt.n	80065c2 <__ieee754_sqrt+0xea>
 80065bc:	d113      	bne.n	80065e6 <__ieee754_sqrt+0x10e>
 80065be:	458e      	cmp	lr, r1
 80065c0:	d811      	bhi.n	80065e6 <__ieee754_sqrt+0x10e>
 80065c2:	f1be 0f00 	cmp.w	lr, #0
 80065c6:	eb0e 000c 	add.w	r0, lr, ip
 80065ca:	da42      	bge.n	8006652 <__ieee754_sqrt+0x17a>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	db40      	blt.n	8006652 <__ieee754_sqrt+0x17a>
 80065d0:	f102 0801 	add.w	r8, r2, #1
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	458e      	cmp	lr, r1
 80065d8:	bf88      	it	hi
 80065da:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80065de:	eba1 010e 	sub.w	r1, r1, lr
 80065e2:	4464      	add	r4, ip
 80065e4:	4642      	mov	r2, r8
 80065e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80065ea:	3f01      	subs	r7, #1
 80065ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80065f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80065f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80065f8:	d1dc      	bne.n	80065b4 <__ieee754_sqrt+0xdc>
 80065fa:	4319      	orrs	r1, r3
 80065fc:	d01b      	beq.n	8006636 <__ieee754_sqrt+0x15e>
 80065fe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006684 <__ieee754_sqrt+0x1ac>
 8006602:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006688 <__ieee754_sqrt+0x1b0>
 8006606:	e9da 0100 	ldrd	r0, r1, [sl]
 800660a:	e9db 2300 	ldrd	r2, r3, [fp]
 800660e:	f7f9 fe3b 	bl	8000288 <__aeabi_dsub>
 8006612:	e9da 8900 	ldrd	r8, r9, [sl]
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4640      	mov	r0, r8
 800661c:	4649      	mov	r1, r9
 800661e:	f7fa fa67 	bl	8000af0 <__aeabi_dcmple>
 8006622:	b140      	cbz	r0, 8006636 <__ieee754_sqrt+0x15e>
 8006624:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8006628:	e9da 0100 	ldrd	r0, r1, [sl]
 800662c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006630:	d111      	bne.n	8006656 <__ieee754_sqrt+0x17e>
 8006632:	3601      	adds	r6, #1
 8006634:	463c      	mov	r4, r7
 8006636:	1072      	asrs	r2, r6, #1
 8006638:	0863      	lsrs	r3, r4, #1
 800663a:	07f1      	lsls	r1, r6, #31
 800663c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006640:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006644:	bf48      	it	mi
 8006646:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800664a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800664e:	4618      	mov	r0, r3
 8006650:	e756      	b.n	8006500 <__ieee754_sqrt+0x28>
 8006652:	4690      	mov	r8, r2
 8006654:	e7be      	b.n	80065d4 <__ieee754_sqrt+0xfc>
 8006656:	f7f9 fe19 	bl	800028c <__adddf3>
 800665a:	e9da 8900 	ldrd	r8, r9, [sl]
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7fa fa39 	bl	8000adc <__aeabi_dcmplt>
 800666a:	b120      	cbz	r0, 8006676 <__ieee754_sqrt+0x19e>
 800666c:	1ca0      	adds	r0, r4, #2
 800666e:	bf08      	it	eq
 8006670:	3601      	addeq	r6, #1
 8006672:	3402      	adds	r4, #2
 8006674:	e7df      	b.n	8006636 <__ieee754_sqrt+0x15e>
 8006676:	1c63      	adds	r3, r4, #1
 8006678:	f023 0401 	bic.w	r4, r3, #1
 800667c:	e7db      	b.n	8006636 <__ieee754_sqrt+0x15e>
 800667e:	bf00      	nop
 8006680:	7ff00000 	.word	0x7ff00000
 8006684:	20000018 	.word	0x20000018
 8006688:	20000010 	.word	0x20000010
 800668c:	00000000 	.word	0x00000000

08006690 <__ieee754_rem_pio2>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	ec57 6b10 	vmov	r6, r7, d0
 8006698:	4bc5      	ldr	r3, [pc, #788]	@ (80069b0 <__ieee754_rem_pio2+0x320>)
 800669a:	b08d      	sub	sp, #52	@ 0x34
 800669c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80066a0:	4598      	cmp	r8, r3
 80066a2:	4604      	mov	r4, r0
 80066a4:	9704      	str	r7, [sp, #16]
 80066a6:	d807      	bhi.n	80066b8 <__ieee754_rem_pio2+0x28>
 80066a8:	2200      	movs	r2, #0
 80066aa:	2300      	movs	r3, #0
 80066ac:	ed80 0b00 	vstr	d0, [r0]
 80066b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80066b4:	2500      	movs	r5, #0
 80066b6:	e028      	b.n	800670a <__ieee754_rem_pio2+0x7a>
 80066b8:	4bbe      	ldr	r3, [pc, #760]	@ (80069b4 <__ieee754_rem_pio2+0x324>)
 80066ba:	4598      	cmp	r8, r3
 80066bc:	d878      	bhi.n	80067b0 <__ieee754_rem_pio2+0x120>
 80066be:	9b04      	ldr	r3, [sp, #16]
 80066c0:	4dbd      	ldr	r5, [pc, #756]	@ (80069b8 <__ieee754_rem_pio2+0x328>)
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	4630      	mov	r0, r6
 80066c6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006978 <__ieee754_rem_pio2+0x2e8>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	4639      	mov	r1, r7
 80066ce:	dd38      	ble.n	8006742 <__ieee754_rem_pio2+0xb2>
 80066d0:	f7f9 fdda 	bl	8000288 <__aeabi_dsub>
 80066d4:	45a8      	cmp	r8, r5
 80066d6:	4606      	mov	r6, r0
 80066d8:	460f      	mov	r7, r1
 80066da:	d01a      	beq.n	8006712 <__ieee754_rem_pio2+0x82>
 80066dc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006980 <__ieee754_rem_pio2+0x2f0>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f7f9 fdd1 	bl	8000288 <__aeabi_dsub>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4680      	mov	r8, r0
 80066ec:	4689      	mov	r9, r1
 80066ee:	4630      	mov	r0, r6
 80066f0:	4639      	mov	r1, r7
 80066f2:	f7f9 fdc9 	bl	8000288 <__aeabi_dsub>
 80066f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006980 <__ieee754_rem_pio2+0x2f0>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f7f9 fdc4 	bl	8000288 <__aeabi_dsub>
 8006700:	e9c4 8900 	strd	r8, r9, [r4]
 8006704:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006708:	2501      	movs	r5, #1
 800670a:	4628      	mov	r0, r5
 800670c:	b00d      	add	sp, #52	@ 0x34
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006712:	a39d      	add	r3, pc, #628	@ (adr r3, 8006988 <__ieee754_rem_pio2+0x2f8>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f7f9 fdb6 	bl	8000288 <__aeabi_dsub>
 800671c:	a39c      	add	r3, pc, #624	@ (adr r3, 8006990 <__ieee754_rem_pio2+0x300>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	4606      	mov	r6, r0
 8006724:	460f      	mov	r7, r1
 8006726:	f7f9 fdaf 	bl	8000288 <__aeabi_dsub>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4680      	mov	r8, r0
 8006730:	4689      	mov	r9, r1
 8006732:	4630      	mov	r0, r6
 8006734:	4639      	mov	r1, r7
 8006736:	f7f9 fda7 	bl	8000288 <__aeabi_dsub>
 800673a:	a395      	add	r3, pc, #596	@ (adr r3, 8006990 <__ieee754_rem_pio2+0x300>)
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	e7dc      	b.n	80066fc <__ieee754_rem_pio2+0x6c>
 8006742:	f7f9 fda3 	bl	800028c <__adddf3>
 8006746:	45a8      	cmp	r8, r5
 8006748:	4606      	mov	r6, r0
 800674a:	460f      	mov	r7, r1
 800674c:	d018      	beq.n	8006780 <__ieee754_rem_pio2+0xf0>
 800674e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006980 <__ieee754_rem_pio2+0x2f0>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7f9 fd9a 	bl	800028c <__adddf3>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4680      	mov	r8, r0
 800675e:	4689      	mov	r9, r1
 8006760:	4630      	mov	r0, r6
 8006762:	4639      	mov	r1, r7
 8006764:	f7f9 fd90 	bl	8000288 <__aeabi_dsub>
 8006768:	a385      	add	r3, pc, #532	@ (adr r3, 8006980 <__ieee754_rem_pio2+0x2f0>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f7f9 fd8d 	bl	800028c <__adddf3>
 8006772:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006776:	e9c4 8900 	strd	r8, r9, [r4]
 800677a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800677e:	e7c4      	b.n	800670a <__ieee754_rem_pio2+0x7a>
 8006780:	a381      	add	r3, pc, #516	@ (adr r3, 8006988 <__ieee754_rem_pio2+0x2f8>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f7f9 fd81 	bl	800028c <__adddf3>
 800678a:	a381      	add	r3, pc, #516	@ (adr r3, 8006990 <__ieee754_rem_pio2+0x300>)
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	4606      	mov	r6, r0
 8006792:	460f      	mov	r7, r1
 8006794:	f7f9 fd7a 	bl	800028c <__adddf3>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4680      	mov	r8, r0
 800679e:	4689      	mov	r9, r1
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7f9 fd70 	bl	8000288 <__aeabi_dsub>
 80067a8:	a379      	add	r3, pc, #484	@ (adr r3, 8006990 <__ieee754_rem_pio2+0x300>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	e7de      	b.n	800676e <__ieee754_rem_pio2+0xde>
 80067b0:	4b82      	ldr	r3, [pc, #520]	@ (80069bc <__ieee754_rem_pio2+0x32c>)
 80067b2:	4598      	cmp	r8, r3
 80067b4:	f200 80d1 	bhi.w	800695a <__ieee754_rem_pio2+0x2ca>
 80067b8:	f7ff fe32 	bl	8006420 <fabs>
 80067bc:	ec57 6b10 	vmov	r6, r7, d0
 80067c0:	a375      	add	r3, pc, #468	@ (adr r3, 8006998 <__ieee754_rem_pio2+0x308>)
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	4630      	mov	r0, r6
 80067c8:	4639      	mov	r1, r7
 80067ca:	f7f9 ff15 	bl	80005f8 <__aeabi_dmul>
 80067ce:	4b7c      	ldr	r3, [pc, #496]	@ (80069c0 <__ieee754_rem_pio2+0x330>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	f7f9 fd5b 	bl	800028c <__adddf3>
 80067d6:	f7fa f9bf 	bl	8000b58 <__aeabi_d2iz>
 80067da:	4605      	mov	r5, r0
 80067dc:	f7f9 fea2 	bl	8000524 <__aeabi_i2d>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067e8:	a363      	add	r3, pc, #396	@ (adr r3, 8006978 <__ieee754_rem_pio2+0x2e8>)
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	f7f9 ff03 	bl	80005f8 <__aeabi_dmul>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7f9 fd45 	bl	8000288 <__aeabi_dsub>
 80067fe:	a360      	add	r3, pc, #384	@ (adr r3, 8006980 <__ieee754_rem_pio2+0x2f0>)
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	4682      	mov	sl, r0
 8006806:	468b      	mov	fp, r1
 8006808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800680c:	f7f9 fef4 	bl	80005f8 <__aeabi_dmul>
 8006810:	2d1f      	cmp	r5, #31
 8006812:	4606      	mov	r6, r0
 8006814:	460f      	mov	r7, r1
 8006816:	dc0c      	bgt.n	8006832 <__ieee754_rem_pio2+0x1a2>
 8006818:	4b6a      	ldr	r3, [pc, #424]	@ (80069c4 <__ieee754_rem_pio2+0x334>)
 800681a:	1e6a      	subs	r2, r5, #1
 800681c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006820:	4543      	cmp	r3, r8
 8006822:	d006      	beq.n	8006832 <__ieee754_rem_pio2+0x1a2>
 8006824:	4632      	mov	r2, r6
 8006826:	463b      	mov	r3, r7
 8006828:	4650      	mov	r0, sl
 800682a:	4659      	mov	r1, fp
 800682c:	f7f9 fd2c 	bl	8000288 <__aeabi_dsub>
 8006830:	e00e      	b.n	8006850 <__ieee754_rem_pio2+0x1c0>
 8006832:	463b      	mov	r3, r7
 8006834:	4632      	mov	r2, r6
 8006836:	4650      	mov	r0, sl
 8006838:	4659      	mov	r1, fp
 800683a:	f7f9 fd25 	bl	8000288 <__aeabi_dsub>
 800683e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006842:	9305      	str	r3, [sp, #20]
 8006844:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006848:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800684c:	2b10      	cmp	r3, #16
 800684e:	dc02      	bgt.n	8006856 <__ieee754_rem_pio2+0x1c6>
 8006850:	e9c4 0100 	strd	r0, r1, [r4]
 8006854:	e039      	b.n	80068ca <__ieee754_rem_pio2+0x23a>
 8006856:	a34c      	add	r3, pc, #304	@ (adr r3, 8006988 <__ieee754_rem_pio2+0x2f8>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006860:	f7f9 feca 	bl	80005f8 <__aeabi_dmul>
 8006864:	4606      	mov	r6, r0
 8006866:	460f      	mov	r7, r1
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4650      	mov	r0, sl
 800686e:	4659      	mov	r1, fp
 8006870:	f7f9 fd0a 	bl	8000288 <__aeabi_dsub>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4680      	mov	r8, r0
 800687a:	4689      	mov	r9, r1
 800687c:	4650      	mov	r0, sl
 800687e:	4659      	mov	r1, fp
 8006880:	f7f9 fd02 	bl	8000288 <__aeabi_dsub>
 8006884:	4632      	mov	r2, r6
 8006886:	463b      	mov	r3, r7
 8006888:	f7f9 fcfe 	bl	8000288 <__aeabi_dsub>
 800688c:	a340      	add	r3, pc, #256	@ (adr r3, 8006990 <__ieee754_rem_pio2+0x300>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	4606      	mov	r6, r0
 8006894:	460f      	mov	r7, r1
 8006896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800689a:	f7f9 fead 	bl	80005f8 <__aeabi_dmul>
 800689e:	4632      	mov	r2, r6
 80068a0:	463b      	mov	r3, r7
 80068a2:	f7f9 fcf1 	bl	8000288 <__aeabi_dsub>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4606      	mov	r6, r0
 80068ac:	460f      	mov	r7, r1
 80068ae:	4640      	mov	r0, r8
 80068b0:	4649      	mov	r1, r9
 80068b2:	f7f9 fce9 	bl	8000288 <__aeabi_dsub>
 80068b6:	9a05      	ldr	r2, [sp, #20]
 80068b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b31      	cmp	r3, #49	@ 0x31
 80068c0:	dc20      	bgt.n	8006904 <__ieee754_rem_pio2+0x274>
 80068c2:	e9c4 0100 	strd	r0, r1, [r4]
 80068c6:	46c2      	mov	sl, r8
 80068c8:	46cb      	mov	fp, r9
 80068ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80068ce:	4650      	mov	r0, sl
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	4659      	mov	r1, fp
 80068d6:	f7f9 fcd7 	bl	8000288 <__aeabi_dsub>
 80068da:	463b      	mov	r3, r7
 80068dc:	4632      	mov	r2, r6
 80068de:	f7f9 fcd3 	bl	8000288 <__aeabi_dsub>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068ea:	f6bf af0e 	bge.w	800670a <__ieee754_rem_pio2+0x7a>
 80068ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80068f2:	6063      	str	r3, [r4, #4]
 80068f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068f8:	f8c4 8000 	str.w	r8, [r4]
 80068fc:	60a0      	str	r0, [r4, #8]
 80068fe:	60e3      	str	r3, [r4, #12]
 8006900:	426d      	negs	r5, r5
 8006902:	e702      	b.n	800670a <__ieee754_rem_pio2+0x7a>
 8006904:	a326      	add	r3, pc, #152	@ (adr r3, 80069a0 <__ieee754_rem_pio2+0x310>)
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800690e:	f7f9 fe73 	bl	80005f8 <__aeabi_dmul>
 8006912:	4606      	mov	r6, r0
 8006914:	460f      	mov	r7, r1
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f7f9 fcb3 	bl	8000288 <__aeabi_dsub>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4682      	mov	sl, r0
 8006928:	468b      	mov	fp, r1
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	f7f9 fcab 	bl	8000288 <__aeabi_dsub>
 8006932:	4632      	mov	r2, r6
 8006934:	463b      	mov	r3, r7
 8006936:	f7f9 fca7 	bl	8000288 <__aeabi_dsub>
 800693a:	a31b      	add	r3, pc, #108	@ (adr r3, 80069a8 <__ieee754_rem_pio2+0x318>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	4606      	mov	r6, r0
 8006942:	460f      	mov	r7, r1
 8006944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006948:	f7f9 fe56 	bl	80005f8 <__aeabi_dmul>
 800694c:	4632      	mov	r2, r6
 800694e:	463b      	mov	r3, r7
 8006950:	f7f9 fc9a 	bl	8000288 <__aeabi_dsub>
 8006954:	4606      	mov	r6, r0
 8006956:	460f      	mov	r7, r1
 8006958:	e764      	b.n	8006824 <__ieee754_rem_pio2+0x194>
 800695a:	4b1b      	ldr	r3, [pc, #108]	@ (80069c8 <__ieee754_rem_pio2+0x338>)
 800695c:	4598      	cmp	r8, r3
 800695e:	d935      	bls.n	80069cc <__ieee754_rem_pio2+0x33c>
 8006960:	4632      	mov	r2, r6
 8006962:	463b      	mov	r3, r7
 8006964:	4630      	mov	r0, r6
 8006966:	4639      	mov	r1, r7
 8006968:	f7f9 fc8e 	bl	8000288 <__aeabi_dsub>
 800696c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006970:	e9c4 0100 	strd	r0, r1, [r4]
 8006974:	e69e      	b.n	80066b4 <__ieee754_rem_pio2+0x24>
 8006976:	bf00      	nop
 8006978:	54400000 	.word	0x54400000
 800697c:	3ff921fb 	.word	0x3ff921fb
 8006980:	1a626331 	.word	0x1a626331
 8006984:	3dd0b461 	.word	0x3dd0b461
 8006988:	1a600000 	.word	0x1a600000
 800698c:	3dd0b461 	.word	0x3dd0b461
 8006990:	2e037073 	.word	0x2e037073
 8006994:	3ba3198a 	.word	0x3ba3198a
 8006998:	6dc9c883 	.word	0x6dc9c883
 800699c:	3fe45f30 	.word	0x3fe45f30
 80069a0:	2e000000 	.word	0x2e000000
 80069a4:	3ba3198a 	.word	0x3ba3198a
 80069a8:	252049c1 	.word	0x252049c1
 80069ac:	397b839a 	.word	0x397b839a
 80069b0:	3fe921fb 	.word	0x3fe921fb
 80069b4:	4002d97b 	.word	0x4002d97b
 80069b8:	3ff921fb 	.word	0x3ff921fb
 80069bc:	413921fb 	.word	0x413921fb
 80069c0:	3fe00000 	.word	0x3fe00000
 80069c4:	0800a130 	.word	0x0800a130
 80069c8:	7fefffff 	.word	0x7fefffff
 80069cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80069d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80069d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80069d8:	4630      	mov	r0, r6
 80069da:	460f      	mov	r7, r1
 80069dc:	f7fa f8bc 	bl	8000b58 <__aeabi_d2iz>
 80069e0:	f7f9 fda0 	bl	8000524 <__aeabi_i2d>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4630      	mov	r0, r6
 80069ea:	4639      	mov	r1, r7
 80069ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069f0:	f7f9 fc4a 	bl	8000288 <__aeabi_dsub>
 80069f4:	4b22      	ldr	r3, [pc, #136]	@ (8006a80 <__ieee754_rem_pio2+0x3f0>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	f7f9 fdfe 	bl	80005f8 <__aeabi_dmul>
 80069fc:	460f      	mov	r7, r1
 80069fe:	4606      	mov	r6, r0
 8006a00:	f7fa f8aa 	bl	8000b58 <__aeabi_d2iz>
 8006a04:	f7f9 fd8e 	bl	8000524 <__aeabi_i2d>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	4639      	mov	r1, r7
 8006a10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a14:	f7f9 fc38 	bl	8000288 <__aeabi_dsub>
 8006a18:	4b19      	ldr	r3, [pc, #100]	@ (8006a80 <__ieee754_rem_pio2+0x3f0>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f7f9 fdec 	bl	80005f8 <__aeabi_dmul>
 8006a20:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006a24:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006a28:	f04f 0803 	mov.w	r8, #3
 8006a2c:	2600      	movs	r6, #0
 8006a2e:	2700      	movs	r7, #0
 8006a30:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006a34:	4632      	mov	r2, r6
 8006a36:	463b      	mov	r3, r7
 8006a38:	46c2      	mov	sl, r8
 8006a3a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006a3e:	f7fa f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d1f4      	bne.n	8006a30 <__ieee754_rem_pio2+0x3a0>
 8006a46:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <__ieee754_rem_pio2+0x3f4>)
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	462a      	mov	r2, r5
 8006a50:	4653      	mov	r3, sl
 8006a52:	4621      	mov	r1, r4
 8006a54:	a806      	add	r0, sp, #24
 8006a56:	f000 f817 	bl	8006a88 <__kernel_rem_pio2>
 8006a5a:	9b04      	ldr	r3, [sp, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	4605      	mov	r5, r0
 8006a60:	f6bf ae53 	bge.w	800670a <__ieee754_rem_pio2+0x7a>
 8006a64:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006a68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a6c:	e9c4 2300 	strd	r2, r3, [r4]
 8006a70:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006a74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a78:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006a7c:	e740      	b.n	8006900 <__ieee754_rem_pio2+0x270>
 8006a7e:	bf00      	nop
 8006a80:	41700000 	.word	0x41700000
 8006a84:	0800a1b0 	.word	0x0800a1b0

08006a88 <__kernel_rem_pio2>:
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	ed2d 8b02 	vpush	{d8}
 8006a90:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006a94:	f112 0f14 	cmn.w	r2, #20
 8006a98:	9306      	str	r3, [sp, #24]
 8006a9a:	9104      	str	r1, [sp, #16]
 8006a9c:	4bbe      	ldr	r3, [pc, #760]	@ (8006d98 <__kernel_rem_pio2+0x310>)
 8006a9e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006aa0:	9008      	str	r0, [sp, #32]
 8006aa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	9b06      	ldr	r3, [sp, #24]
 8006aaa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006aae:	bfa8      	it	ge
 8006ab0:	1ed4      	subge	r4, r2, #3
 8006ab2:	9305      	str	r3, [sp, #20]
 8006ab4:	bfb2      	itee	lt
 8006ab6:	2400      	movlt	r4, #0
 8006ab8:	2318      	movge	r3, #24
 8006aba:	fb94 f4f3 	sdivge	r4, r4, r3
 8006abe:	f06f 0317 	mvn.w	r3, #23
 8006ac2:	fb04 3303 	mla	r3, r4, r3, r3
 8006ac6:	eb03 0b02 	add.w	fp, r3, r2
 8006aca:	9b00      	ldr	r3, [sp, #0]
 8006acc:	9a05      	ldr	r2, [sp, #20]
 8006ace:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006d88 <__kernel_rem_pio2+0x300>
 8006ad2:	eb03 0802 	add.w	r8, r3, r2
 8006ad6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006ad8:	1aa7      	subs	r7, r4, r2
 8006ada:	ae20      	add	r6, sp, #128	@ 0x80
 8006adc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006ae0:	2500      	movs	r5, #0
 8006ae2:	4545      	cmp	r5, r8
 8006ae4:	dd13      	ble.n	8006b0e <__kernel_rem_pio2+0x86>
 8006ae6:	9b06      	ldr	r3, [sp, #24]
 8006ae8:	aa20      	add	r2, sp, #128	@ 0x80
 8006aea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006aee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006af2:	f04f 0800 	mov.w	r8, #0
 8006af6:	9b00      	ldr	r3, [sp, #0]
 8006af8:	4598      	cmp	r8, r3
 8006afa:	dc31      	bgt.n	8006b60 <__kernel_rem_pio2+0xd8>
 8006afc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006d88 <__kernel_rem_pio2+0x300>
 8006b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b08:	462f      	mov	r7, r5
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	e01b      	b.n	8006b46 <__kernel_rem_pio2+0xbe>
 8006b0e:	42ef      	cmn	r7, r5
 8006b10:	d407      	bmi.n	8006b22 <__kernel_rem_pio2+0x9a>
 8006b12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006b16:	f7f9 fd05 	bl	8000524 <__aeabi_i2d>
 8006b1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006b1e:	3501      	adds	r5, #1
 8006b20:	e7df      	b.n	8006ae2 <__kernel_rem_pio2+0x5a>
 8006b22:	ec51 0b18 	vmov	r0, r1, d8
 8006b26:	e7f8      	b.n	8006b1a <__kernel_rem_pio2+0x92>
 8006b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006b30:	f7f9 fd62 	bl	80005f8 <__aeabi_dmul>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b3c:	f7f9 fba6 	bl	800028c <__adddf3>
 8006b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b44:	3601      	adds	r6, #1
 8006b46:	9b05      	ldr	r3, [sp, #20]
 8006b48:	429e      	cmp	r6, r3
 8006b4a:	f1a7 0708 	sub.w	r7, r7, #8
 8006b4e:	ddeb      	ble.n	8006b28 <__kernel_rem_pio2+0xa0>
 8006b50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b54:	f108 0801 	add.w	r8, r8, #1
 8006b58:	ecaa 7b02 	vstmia	sl!, {d7}
 8006b5c:	3508      	adds	r5, #8
 8006b5e:	e7ca      	b.n	8006af6 <__kernel_rem_pio2+0x6e>
 8006b60:	9b00      	ldr	r3, [sp, #0]
 8006b62:	f8dd 8000 	ldr.w	r8, [sp]
 8006b66:	aa0c      	add	r2, sp, #48	@ 0x30
 8006b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b6e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006b70:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b76:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006b7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b7c:	ab98      	add	r3, sp, #608	@ 0x260
 8006b7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006b82:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006b86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b8a:	ac0c      	add	r4, sp, #48	@ 0x30
 8006b8c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006b8e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006b92:	46a1      	mov	r9, r4
 8006b94:	46c2      	mov	sl, r8
 8006b96:	f1ba 0f00 	cmp.w	sl, #0
 8006b9a:	f1a5 0508 	sub.w	r5, r5, #8
 8006b9e:	dc77      	bgt.n	8006c90 <__kernel_rem_pio2+0x208>
 8006ba0:	4658      	mov	r0, fp
 8006ba2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006ba6:	f000 fc4b 	bl	8007440 <scalbn>
 8006baa:	ec57 6b10 	vmov	r6, r7, d0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7f9 fd1e 	bl	80005f8 <__aeabi_dmul>
 8006bbc:	ec41 0b10 	vmov	d0, r0, r1
 8006bc0:	f000 fcbe 	bl	8007540 <floor>
 8006bc4:	4b75      	ldr	r3, [pc, #468]	@ (8006d9c <__kernel_rem_pio2+0x314>)
 8006bc6:	ec51 0b10 	vmov	r0, r1, d0
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f7f9 fd14 	bl	80005f8 <__aeabi_dmul>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 fb56 	bl	8000288 <__aeabi_dsub>
 8006bdc:	460f      	mov	r7, r1
 8006bde:	4606      	mov	r6, r0
 8006be0:	f7f9 ffba 	bl	8000b58 <__aeabi_d2iz>
 8006be4:	9002      	str	r0, [sp, #8]
 8006be6:	f7f9 fc9d 	bl	8000524 <__aeabi_i2d>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4630      	mov	r0, r6
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	f7f9 fb49 	bl	8000288 <__aeabi_dsub>
 8006bf6:	f1bb 0f00 	cmp.w	fp, #0
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	dd6c      	ble.n	8006cda <__kernel_rem_pio2+0x252>
 8006c00:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8006c04:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c06:	9d02      	ldr	r5, [sp, #8]
 8006c08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c0c:	f1cb 0018 	rsb	r0, fp, #24
 8006c10:	fa43 f200 	asr.w	r2, r3, r0
 8006c14:	4415      	add	r5, r2
 8006c16:	4082      	lsls	r2, r0
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	aa0c      	add	r2, sp, #48	@ 0x30
 8006c1c:	9502      	str	r5, [sp, #8]
 8006c1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006c22:	f1cb 0217 	rsb	r2, fp, #23
 8006c26:	fa43 f902 	asr.w	r9, r3, r2
 8006c2a:	f1b9 0f00 	cmp.w	r9, #0
 8006c2e:	dd64      	ble.n	8006cfa <__kernel_rem_pio2+0x272>
 8006c30:	9b02      	ldr	r3, [sp, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	3301      	adds	r3, #1
 8006c36:	9302      	str	r3, [sp, #8]
 8006c38:	4615      	mov	r5, r2
 8006c3a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006c3e:	4590      	cmp	r8, r2
 8006c40:	f300 80b8 	bgt.w	8006db4 <__kernel_rem_pio2+0x32c>
 8006c44:	f1bb 0f00 	cmp.w	fp, #0
 8006c48:	dd07      	ble.n	8006c5a <__kernel_rem_pio2+0x1d2>
 8006c4a:	f1bb 0f01 	cmp.w	fp, #1
 8006c4e:	f000 80bf 	beq.w	8006dd0 <__kernel_rem_pio2+0x348>
 8006c52:	f1bb 0f02 	cmp.w	fp, #2
 8006c56:	f000 80c6 	beq.w	8006de6 <__kernel_rem_pio2+0x35e>
 8006c5a:	f1b9 0f02 	cmp.w	r9, #2
 8006c5e:	d14c      	bne.n	8006cfa <__kernel_rem_pio2+0x272>
 8006c60:	4632      	mov	r2, r6
 8006c62:	463b      	mov	r3, r7
 8006c64:	494e      	ldr	r1, [pc, #312]	@ (8006da0 <__kernel_rem_pio2+0x318>)
 8006c66:	2000      	movs	r0, #0
 8006c68:	f7f9 fb0e 	bl	8000288 <__aeabi_dsub>
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	460f      	mov	r7, r1
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	d042      	beq.n	8006cfa <__kernel_rem_pio2+0x272>
 8006c74:	4658      	mov	r0, fp
 8006c76:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006d90 <__kernel_rem_pio2+0x308>
 8006c7a:	f000 fbe1 	bl	8007440 <scalbn>
 8006c7e:	4630      	mov	r0, r6
 8006c80:	4639      	mov	r1, r7
 8006c82:	ec53 2b10 	vmov	r2, r3, d0
 8006c86:	f7f9 faff 	bl	8000288 <__aeabi_dsub>
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	e034      	b.n	8006cfa <__kernel_rem_pio2+0x272>
 8006c90:	4b44      	ldr	r3, [pc, #272]	@ (8006da4 <__kernel_rem_pio2+0x31c>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c98:	f7f9 fcae 	bl	80005f8 <__aeabi_dmul>
 8006c9c:	f7f9 ff5c 	bl	8000b58 <__aeabi_d2iz>
 8006ca0:	f7f9 fc40 	bl	8000524 <__aeabi_i2d>
 8006ca4:	4b40      	ldr	r3, [pc, #256]	@ (8006da8 <__kernel_rem_pio2+0x320>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4606      	mov	r6, r0
 8006caa:	460f      	mov	r7, r1
 8006cac:	f7f9 fca4 	bl	80005f8 <__aeabi_dmul>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb8:	f7f9 fae6 	bl	8000288 <__aeabi_dsub>
 8006cbc:	f7f9 ff4c 	bl	8000b58 <__aeabi_d2iz>
 8006cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cc4:	f849 0b04 	str.w	r0, [r9], #4
 8006cc8:	4639      	mov	r1, r7
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7f9 fade 	bl	800028c <__adddf3>
 8006cd0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd8:	e75d      	b.n	8006b96 <__kernel_rem_pio2+0x10e>
 8006cda:	d107      	bne.n	8006cec <__kernel_rem_pio2+0x264>
 8006cdc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006ce0:	aa0c      	add	r2, sp, #48	@ 0x30
 8006ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006cea:	e79e      	b.n	8006c2a <__kernel_rem_pio2+0x1a2>
 8006cec:	4b2f      	ldr	r3, [pc, #188]	@ (8006dac <__kernel_rem_pio2+0x324>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f7f9 ff08 	bl	8000b04 <__aeabi_dcmpge>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d143      	bne.n	8006d80 <__kernel_rem_pio2+0x2f8>
 8006cf8:	4681      	mov	r9, r0
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4630      	mov	r0, r6
 8006d00:	4639      	mov	r1, r7
 8006d02:	f7f9 fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f000 80bf 	beq.w	8006e8a <__kernel_rem_pio2+0x402>
 8006d0c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006d10:	2200      	movs	r2, #0
 8006d12:	9900      	ldr	r1, [sp, #0]
 8006d14:	428b      	cmp	r3, r1
 8006d16:	da6e      	bge.n	8006df6 <__kernel_rem_pio2+0x36e>
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	f000 8089 	beq.w	8006e30 <__kernel_rem_pio2+0x3a8>
 8006d1e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006d22:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d24:	f1ab 0b18 	sub.w	fp, fp, #24
 8006d28:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f6      	beq.n	8006d1e <__kernel_rem_pio2+0x296>
 8006d30:	4658      	mov	r0, fp
 8006d32:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006d90 <__kernel_rem_pio2+0x308>
 8006d36:	f000 fb83 	bl	8007440 <scalbn>
 8006d3a:	f108 0301 	add.w	r3, r8, #1
 8006d3e:	00da      	lsls	r2, r3, #3
 8006d40:	9205      	str	r2, [sp, #20]
 8006d42:	ec55 4b10 	vmov	r4, r5, d0
 8006d46:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006d48:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006da4 <__kernel_rem_pio2+0x31c>
 8006d4c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006d50:	4646      	mov	r6, r8
 8006d52:	f04f 0a00 	mov.w	sl, #0
 8006d56:	2e00      	cmp	r6, #0
 8006d58:	f280 80cf 	bge.w	8006efa <__kernel_rem_pio2+0x472>
 8006d5c:	4644      	mov	r4, r8
 8006d5e:	2c00      	cmp	r4, #0
 8006d60:	f2c0 80fd 	blt.w	8006f5e <__kernel_rem_pio2+0x4d6>
 8006d64:	4b12      	ldr	r3, [pc, #72]	@ (8006db0 <__kernel_rem_pio2+0x328>)
 8006d66:	461f      	mov	r7, r3
 8006d68:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006d6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d6e:	9306      	str	r3, [sp, #24]
 8006d70:	f04f 0a00 	mov.w	sl, #0
 8006d74:	f04f 0b00 	mov.w	fp, #0
 8006d78:	2600      	movs	r6, #0
 8006d7a:	eba8 0504 	sub.w	r5, r8, r4
 8006d7e:	e0e2      	b.n	8006f46 <__kernel_rem_pio2+0x4be>
 8006d80:	f04f 0902 	mov.w	r9, #2
 8006d84:	e754      	b.n	8006c30 <__kernel_rem_pio2+0x1a8>
 8006d86:	bf00      	nop
	...
 8006d94:	3ff00000 	.word	0x3ff00000
 8006d98:	0800a2f8 	.word	0x0800a2f8
 8006d9c:	40200000 	.word	0x40200000
 8006da0:	3ff00000 	.word	0x3ff00000
 8006da4:	3e700000 	.word	0x3e700000
 8006da8:	41700000 	.word	0x41700000
 8006dac:	3fe00000 	.word	0x3fe00000
 8006db0:	0800a2b8 	.word	0x0800a2b8
 8006db4:	f854 3b04 	ldr.w	r3, [r4], #4
 8006db8:	b945      	cbnz	r5, 8006dcc <__kernel_rem_pio2+0x344>
 8006dba:	b123      	cbz	r3, 8006dc6 <__kernel_rem_pio2+0x33e>
 8006dbc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006dc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	3201      	adds	r2, #1
 8006dc8:	461d      	mov	r5, r3
 8006dca:	e738      	b.n	8006c3e <__kernel_rem_pio2+0x1b6>
 8006dcc:	1acb      	subs	r3, r1, r3
 8006dce:	e7f7      	b.n	8006dc0 <__kernel_rem_pio2+0x338>
 8006dd0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8006dd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8006dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dda:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006dde:	a90c      	add	r1, sp, #48	@ 0x30
 8006de0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006de4:	e739      	b.n	8006c5a <__kernel_rem_pio2+0x1d2>
 8006de6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8006dea:	ab0c      	add	r3, sp, #48	@ 0x30
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006df4:	e7f3      	b.n	8006dde <__kernel_rem_pio2+0x356>
 8006df6:	a90c      	add	r1, sp, #48	@ 0x30
 8006df8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	e787      	b.n	8006d12 <__kernel_rem_pio2+0x28a>
 8006e02:	3401      	adds	r4, #1
 8006e04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	d0fa      	beq.n	8006e02 <__kernel_rem_pio2+0x37a>
 8006e0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006e12:	eb0d 0503 	add.w	r5, sp, r3
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	aa20      	add	r2, sp, #128	@ 0x80
 8006e1a:	4443      	add	r3, r8
 8006e1c:	f108 0701 	add.w	r7, r8, #1
 8006e20:	3d98      	subs	r5, #152	@ 0x98
 8006e22:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006e26:	4444      	add	r4, r8
 8006e28:	42bc      	cmp	r4, r7
 8006e2a:	da04      	bge.n	8006e36 <__kernel_rem_pio2+0x3ae>
 8006e2c:	46a0      	mov	r8, r4
 8006e2e:	e6a2      	b.n	8006b76 <__kernel_rem_pio2+0xee>
 8006e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e32:	2401      	movs	r4, #1
 8006e34:	e7e6      	b.n	8006e04 <__kernel_rem_pio2+0x37c>
 8006e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e38:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006e3c:	f7f9 fb72 	bl	8000524 <__aeabi_i2d>
 8006e40:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007108 <__kernel_rem_pio2+0x680>
 8006e44:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006e48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e50:	46b2      	mov	sl, r6
 8006e52:	f04f 0800 	mov.w	r8, #0
 8006e56:	9b05      	ldr	r3, [sp, #20]
 8006e58:	4598      	cmp	r8, r3
 8006e5a:	dd05      	ble.n	8006e68 <__kernel_rem_pio2+0x3e0>
 8006e5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e60:	3701      	adds	r7, #1
 8006e62:	eca5 7b02 	vstmia	r5!, {d7}
 8006e66:	e7df      	b.n	8006e28 <__kernel_rem_pio2+0x3a0>
 8006e68:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006e6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006e70:	f7f9 fbc2 	bl	80005f8 <__aeabi_dmul>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e7c:	f7f9 fa06 	bl	800028c <__adddf3>
 8006e80:	f108 0801 	add.w	r8, r8, #1
 8006e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e88:	e7e5      	b.n	8006e56 <__kernel_rem_pio2+0x3ce>
 8006e8a:	f1cb 0000 	rsb	r0, fp, #0
 8006e8e:	ec47 6b10 	vmov	d0, r6, r7
 8006e92:	f000 fad5 	bl	8007440 <scalbn>
 8006e96:	ec55 4b10 	vmov	r4, r5, d0
 8006e9a:	4b9d      	ldr	r3, [pc, #628]	@ (8007110 <__kernel_rem_pio2+0x688>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	f7f9 fe2f 	bl	8000b04 <__aeabi_dcmpge>
 8006ea6:	b300      	cbz	r0, 8006eea <__kernel_rem_pio2+0x462>
 8006ea8:	4b9a      	ldr	r3, [pc, #616]	@ (8007114 <__kernel_rem_pio2+0x68c>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4620      	mov	r0, r4
 8006eae:	4629      	mov	r1, r5
 8006eb0:	f7f9 fba2 	bl	80005f8 <__aeabi_dmul>
 8006eb4:	f7f9 fe50 	bl	8000b58 <__aeabi_d2iz>
 8006eb8:	4606      	mov	r6, r0
 8006eba:	f7f9 fb33 	bl	8000524 <__aeabi_i2d>
 8006ebe:	4b94      	ldr	r3, [pc, #592]	@ (8007110 <__kernel_rem_pio2+0x688>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f7f9 fb99 	bl	80005f8 <__aeabi_dmul>
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4629      	mov	r1, r5
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f7f9 f9db 	bl	8000288 <__aeabi_dsub>
 8006ed2:	f7f9 fe41 	bl	8000b58 <__aeabi_d2iz>
 8006ed6:	ab0c      	add	r3, sp, #48	@ 0x30
 8006ed8:	f10b 0b18 	add.w	fp, fp, #24
 8006edc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006ee0:	f108 0801 	add.w	r8, r8, #1
 8006ee4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006ee8:	e722      	b.n	8006d30 <__kernel_rem_pio2+0x2a8>
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	f7f9 fe33 	bl	8000b58 <__aeabi_d2iz>
 8006ef2:	ab0c      	add	r3, sp, #48	@ 0x30
 8006ef4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006ef8:	e71a      	b.n	8006d30 <__kernel_rem_pio2+0x2a8>
 8006efa:	ab0c      	add	r3, sp, #48	@ 0x30
 8006efc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f00:	f7f9 fb10 	bl	8000524 <__aeabi_i2d>
 8006f04:	4622      	mov	r2, r4
 8006f06:	462b      	mov	r3, r5
 8006f08:	f7f9 fb76 	bl	80005f8 <__aeabi_dmul>
 8006f0c:	4652      	mov	r2, sl
 8006f0e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006f12:	465b      	mov	r3, fp
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	f7f9 fb6e 	bl	80005f8 <__aeabi_dmul>
 8006f1c:	3e01      	subs	r6, #1
 8006f1e:	4604      	mov	r4, r0
 8006f20:	460d      	mov	r5, r1
 8006f22:	e718      	b.n	8006d56 <__kernel_rem_pio2+0x2ce>
 8006f24:	9906      	ldr	r1, [sp, #24]
 8006f26:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006f2a:	9106      	str	r1, [sp, #24]
 8006f2c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006f30:	f7f9 fb62 	bl	80005f8 <__aeabi_dmul>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	4650      	mov	r0, sl
 8006f3a:	4659      	mov	r1, fp
 8006f3c:	f7f9 f9a6 	bl	800028c <__adddf3>
 8006f40:	3601      	adds	r6, #1
 8006f42:	4682      	mov	sl, r0
 8006f44:	468b      	mov	fp, r1
 8006f46:	9b00      	ldr	r3, [sp, #0]
 8006f48:	429e      	cmp	r6, r3
 8006f4a:	dc01      	bgt.n	8006f50 <__kernel_rem_pio2+0x4c8>
 8006f4c:	42b5      	cmp	r5, r6
 8006f4e:	dae9      	bge.n	8006f24 <__kernel_rem_pio2+0x49c>
 8006f50:	ab48      	add	r3, sp, #288	@ 0x120
 8006f52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006f56:	e9c5 ab00 	strd	sl, fp, [r5]
 8006f5a:	3c01      	subs	r4, #1
 8006f5c:	e6ff      	b.n	8006d5e <__kernel_rem_pio2+0x2d6>
 8006f5e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	dc0b      	bgt.n	8006f7c <__kernel_rem_pio2+0x4f4>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dc39      	bgt.n	8006fdc <__kernel_rem_pio2+0x554>
 8006f68:	d05d      	beq.n	8007026 <__kernel_rem_pio2+0x59e>
 8006f6a:	9b02      	ldr	r3, [sp, #8]
 8006f6c:	f003 0007 	and.w	r0, r3, #7
 8006f70:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006f74:	ecbd 8b02 	vpop	{d8}
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d1f3      	bne.n	8006f6a <__kernel_rem_pio2+0x4e2>
 8006f82:	9b05      	ldr	r3, [sp, #20]
 8006f84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f88:	eb0d 0403 	add.w	r4, sp, r3
 8006f8c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006f90:	4625      	mov	r5, r4
 8006f92:	46c2      	mov	sl, r8
 8006f94:	f1ba 0f00 	cmp.w	sl, #0
 8006f98:	f1a5 0508 	sub.w	r5, r5, #8
 8006f9c:	dc6b      	bgt.n	8007076 <__kernel_rem_pio2+0x5ee>
 8006f9e:	4645      	mov	r5, r8
 8006fa0:	2d01      	cmp	r5, #1
 8006fa2:	f1a4 0408 	sub.w	r4, r4, #8
 8006fa6:	f300 8087 	bgt.w	80070b8 <__kernel_rem_pio2+0x630>
 8006faa:	9c05      	ldr	r4, [sp, #20]
 8006fac:	ab48      	add	r3, sp, #288	@ 0x120
 8006fae:	441c      	add	r4, r3
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	f1b8 0f01 	cmp.w	r8, #1
 8006fb8:	f300 809c 	bgt.w	80070f4 <__kernel_rem_pio2+0x66c>
 8006fbc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006fc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006fc4:	f1b9 0f00 	cmp.w	r9, #0
 8006fc8:	f040 80a6 	bne.w	8007118 <__kernel_rem_pio2+0x690>
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	e9c3 7800 	strd	r7, r8, [r3]
 8006fd2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006fd6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006fda:	e7c6      	b.n	8006f6a <__kernel_rem_pio2+0x4e2>
 8006fdc:	9d05      	ldr	r5, [sp, #20]
 8006fde:	ab48      	add	r3, sp, #288	@ 0x120
 8006fe0:	441d      	add	r5, r3
 8006fe2:	4644      	mov	r4, r8
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	2c00      	cmp	r4, #0
 8006fea:	da35      	bge.n	8007058 <__kernel_rem_pio2+0x5d0>
 8006fec:	f1b9 0f00 	cmp.w	r9, #0
 8006ff0:	d038      	beq.n	8007064 <__kernel_rem_pio2+0x5dc>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ff8:	9c04      	ldr	r4, [sp, #16]
 8006ffa:	e9c4 2300 	strd	r2, r3, [r4]
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007006:	f7f9 f93f 	bl	8000288 <__aeabi_dsub>
 800700a:	ad4a      	add	r5, sp, #296	@ 0x128
 800700c:	2401      	movs	r4, #1
 800700e:	45a0      	cmp	r8, r4
 8007010:	da2b      	bge.n	800706a <__kernel_rem_pio2+0x5e2>
 8007012:	f1b9 0f00 	cmp.w	r9, #0
 8007016:	d002      	beq.n	800701e <__kernel_rem_pio2+0x596>
 8007018:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800701c:	4619      	mov	r1, r3
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007024:	e7a1      	b.n	8006f6a <__kernel_rem_pio2+0x4e2>
 8007026:	9c05      	ldr	r4, [sp, #20]
 8007028:	ab48      	add	r3, sp, #288	@ 0x120
 800702a:	441c      	add	r4, r3
 800702c:	2000      	movs	r0, #0
 800702e:	2100      	movs	r1, #0
 8007030:	f1b8 0f00 	cmp.w	r8, #0
 8007034:	da09      	bge.n	800704a <__kernel_rem_pio2+0x5c2>
 8007036:	f1b9 0f00 	cmp.w	r9, #0
 800703a:	d002      	beq.n	8007042 <__kernel_rem_pio2+0x5ba>
 800703c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007040:	4619      	mov	r1, r3
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	e9c3 0100 	strd	r0, r1, [r3]
 8007048:	e78f      	b.n	8006f6a <__kernel_rem_pio2+0x4e2>
 800704a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800704e:	f7f9 f91d 	bl	800028c <__adddf3>
 8007052:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007056:	e7eb      	b.n	8007030 <__kernel_rem_pio2+0x5a8>
 8007058:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800705c:	f7f9 f916 	bl	800028c <__adddf3>
 8007060:	3c01      	subs	r4, #1
 8007062:	e7c1      	b.n	8006fe8 <__kernel_rem_pio2+0x560>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	e7c6      	b.n	8006ff8 <__kernel_rem_pio2+0x570>
 800706a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800706e:	f7f9 f90d 	bl	800028c <__adddf3>
 8007072:	3401      	adds	r4, #1
 8007074:	e7cb      	b.n	800700e <__kernel_rem_pio2+0x586>
 8007076:	ed95 7b00 	vldr	d7, [r5]
 800707a:	ed8d 7b00 	vstr	d7, [sp]
 800707e:	ed95 7b02 	vldr	d7, [r5, #8]
 8007082:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007086:	ec53 2b17 	vmov	r2, r3, d7
 800708a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800708e:	f7f9 f8fd 	bl	800028c <__adddf3>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4606      	mov	r6, r0
 8007098:	460f      	mov	r7, r1
 800709a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800709e:	f7f9 f8f3 	bl	8000288 <__aeabi_dsub>
 80070a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070a6:	f7f9 f8f1 	bl	800028c <__adddf3>
 80070aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80070ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80070b2:	e9c5 6700 	strd	r6, r7, [r5]
 80070b6:	e76d      	b.n	8006f94 <__kernel_rem_pio2+0x50c>
 80070b8:	ed94 7b00 	vldr	d7, [r4]
 80070bc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80070c0:	ec51 0b17 	vmov	r0, r1, d7
 80070c4:	4652      	mov	r2, sl
 80070c6:	465b      	mov	r3, fp
 80070c8:	ed8d 7b00 	vstr	d7, [sp]
 80070cc:	f7f9 f8de 	bl	800028c <__adddf3>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4606      	mov	r6, r0
 80070d6:	460f      	mov	r7, r1
 80070d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070dc:	f7f9 f8d4 	bl	8000288 <__aeabi_dsub>
 80070e0:	4652      	mov	r2, sl
 80070e2:	465b      	mov	r3, fp
 80070e4:	f7f9 f8d2 	bl	800028c <__adddf3>
 80070e8:	3d01      	subs	r5, #1
 80070ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80070ee:	e9c4 6700 	strd	r6, r7, [r4]
 80070f2:	e755      	b.n	8006fa0 <__kernel_rem_pio2+0x518>
 80070f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80070f8:	f7f9 f8c8 	bl	800028c <__adddf3>
 80070fc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007100:	e758      	b.n	8006fb4 <__kernel_rem_pio2+0x52c>
 8007102:	bf00      	nop
 8007104:	f3af 8000 	nop.w
	...
 8007110:	41700000 	.word	0x41700000
 8007114:	3e700000 	.word	0x3e700000
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	9a04      	ldr	r2, [sp, #16]
 800711c:	601f      	str	r7, [r3, #0]
 800711e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007122:	605c      	str	r4, [r3, #4]
 8007124:	609d      	str	r5, [r3, #8]
 8007126:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800712a:	60d3      	str	r3, [r2, #12]
 800712c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007130:	6110      	str	r0, [r2, #16]
 8007132:	6153      	str	r3, [r2, #20]
 8007134:	e719      	b.n	8006f6a <__kernel_rem_pio2+0x4e2>
 8007136:	bf00      	nop

08007138 <__kernel_cos>:
 8007138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	ec57 6b10 	vmov	r6, r7, d0
 8007140:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007144:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007148:	ed8d 1b00 	vstr	d1, [sp]
 800714c:	d206      	bcs.n	800715c <__kernel_cos+0x24>
 800714e:	4630      	mov	r0, r6
 8007150:	4639      	mov	r1, r7
 8007152:	f7f9 fd01 	bl	8000b58 <__aeabi_d2iz>
 8007156:	2800      	cmp	r0, #0
 8007158:	f000 8088 	beq.w	800726c <__kernel_cos+0x134>
 800715c:	4632      	mov	r2, r6
 800715e:	463b      	mov	r3, r7
 8007160:	4630      	mov	r0, r6
 8007162:	4639      	mov	r1, r7
 8007164:	f7f9 fa48 	bl	80005f8 <__aeabi_dmul>
 8007168:	4b51      	ldr	r3, [pc, #324]	@ (80072b0 <__kernel_cos+0x178>)
 800716a:	2200      	movs	r2, #0
 800716c:	4604      	mov	r4, r0
 800716e:	460d      	mov	r5, r1
 8007170:	f7f9 fa42 	bl	80005f8 <__aeabi_dmul>
 8007174:	a340      	add	r3, pc, #256	@ (adr r3, 8007278 <__kernel_cos+0x140>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	4682      	mov	sl, r0
 800717c:	468b      	mov	fp, r1
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 fa39 	bl	80005f8 <__aeabi_dmul>
 8007186:	a33e      	add	r3, pc, #248	@ (adr r3, 8007280 <__kernel_cos+0x148>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f7f9 f87e 	bl	800028c <__adddf3>
 8007190:	4622      	mov	r2, r4
 8007192:	462b      	mov	r3, r5
 8007194:	f7f9 fa30 	bl	80005f8 <__aeabi_dmul>
 8007198:	a33b      	add	r3, pc, #236	@ (adr r3, 8007288 <__kernel_cos+0x150>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 f873 	bl	8000288 <__aeabi_dsub>
 80071a2:	4622      	mov	r2, r4
 80071a4:	462b      	mov	r3, r5
 80071a6:	f7f9 fa27 	bl	80005f8 <__aeabi_dmul>
 80071aa:	a339      	add	r3, pc, #228	@ (adr r3, 8007290 <__kernel_cos+0x158>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f7f9 f86c 	bl	800028c <__adddf3>
 80071b4:	4622      	mov	r2, r4
 80071b6:	462b      	mov	r3, r5
 80071b8:	f7f9 fa1e 	bl	80005f8 <__aeabi_dmul>
 80071bc:	a336      	add	r3, pc, #216	@ (adr r3, 8007298 <__kernel_cos+0x160>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f7f9 f861 	bl	8000288 <__aeabi_dsub>
 80071c6:	4622      	mov	r2, r4
 80071c8:	462b      	mov	r3, r5
 80071ca:	f7f9 fa15 	bl	80005f8 <__aeabi_dmul>
 80071ce:	a334      	add	r3, pc, #208	@ (adr r3, 80072a0 <__kernel_cos+0x168>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f7f9 f85a 	bl	800028c <__adddf3>
 80071d8:	4622      	mov	r2, r4
 80071da:	462b      	mov	r3, r5
 80071dc:	f7f9 fa0c 	bl	80005f8 <__aeabi_dmul>
 80071e0:	4622      	mov	r2, r4
 80071e2:	462b      	mov	r3, r5
 80071e4:	f7f9 fa08 	bl	80005f8 <__aeabi_dmul>
 80071e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071ec:	4604      	mov	r4, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f9 fa00 	bl	80005f8 <__aeabi_dmul>
 80071f8:	460b      	mov	r3, r1
 80071fa:	4602      	mov	r2, r0
 80071fc:	4629      	mov	r1, r5
 80071fe:	4620      	mov	r0, r4
 8007200:	f7f9 f842 	bl	8000288 <__aeabi_dsub>
 8007204:	4b2b      	ldr	r3, [pc, #172]	@ (80072b4 <__kernel_cos+0x17c>)
 8007206:	4598      	cmp	r8, r3
 8007208:	4606      	mov	r6, r0
 800720a:	460f      	mov	r7, r1
 800720c:	d810      	bhi.n	8007230 <__kernel_cos+0xf8>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4650      	mov	r0, sl
 8007214:	4659      	mov	r1, fp
 8007216:	f7f9 f837 	bl	8000288 <__aeabi_dsub>
 800721a:	460b      	mov	r3, r1
 800721c:	4926      	ldr	r1, [pc, #152]	@ (80072b8 <__kernel_cos+0x180>)
 800721e:	4602      	mov	r2, r0
 8007220:	2000      	movs	r0, #0
 8007222:	f7f9 f831 	bl	8000288 <__aeabi_dsub>
 8007226:	ec41 0b10 	vmov	d0, r0, r1
 800722a:	b003      	add	sp, #12
 800722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007230:	4b22      	ldr	r3, [pc, #136]	@ (80072bc <__kernel_cos+0x184>)
 8007232:	4921      	ldr	r1, [pc, #132]	@ (80072b8 <__kernel_cos+0x180>)
 8007234:	4598      	cmp	r8, r3
 8007236:	bf8c      	ite	hi
 8007238:	4d21      	ldrhi	r5, [pc, #132]	@ (80072c0 <__kernel_cos+0x188>)
 800723a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800723e:	2400      	movs	r4, #0
 8007240:	4622      	mov	r2, r4
 8007242:	462b      	mov	r3, r5
 8007244:	2000      	movs	r0, #0
 8007246:	f7f9 f81f 	bl	8000288 <__aeabi_dsub>
 800724a:	4622      	mov	r2, r4
 800724c:	4680      	mov	r8, r0
 800724e:	4689      	mov	r9, r1
 8007250:	462b      	mov	r3, r5
 8007252:	4650      	mov	r0, sl
 8007254:	4659      	mov	r1, fp
 8007256:	f7f9 f817 	bl	8000288 <__aeabi_dsub>
 800725a:	4632      	mov	r2, r6
 800725c:	463b      	mov	r3, r7
 800725e:	f7f9 f813 	bl	8000288 <__aeabi_dsub>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4640      	mov	r0, r8
 8007268:	4649      	mov	r1, r9
 800726a:	e7da      	b.n	8007222 <__kernel_cos+0xea>
 800726c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80072a8 <__kernel_cos+0x170>
 8007270:	e7db      	b.n	800722a <__kernel_cos+0xf2>
 8007272:	bf00      	nop
 8007274:	f3af 8000 	nop.w
 8007278:	be8838d4 	.word	0xbe8838d4
 800727c:	bda8fae9 	.word	0xbda8fae9
 8007280:	bdb4b1c4 	.word	0xbdb4b1c4
 8007284:	3e21ee9e 	.word	0x3e21ee9e
 8007288:	809c52ad 	.word	0x809c52ad
 800728c:	3e927e4f 	.word	0x3e927e4f
 8007290:	19cb1590 	.word	0x19cb1590
 8007294:	3efa01a0 	.word	0x3efa01a0
 8007298:	16c15177 	.word	0x16c15177
 800729c:	3f56c16c 	.word	0x3f56c16c
 80072a0:	5555554c 	.word	0x5555554c
 80072a4:	3fa55555 	.word	0x3fa55555
 80072a8:	00000000 	.word	0x00000000
 80072ac:	3ff00000 	.word	0x3ff00000
 80072b0:	3fe00000 	.word	0x3fe00000
 80072b4:	3fd33332 	.word	0x3fd33332
 80072b8:	3ff00000 	.word	0x3ff00000
 80072bc:	3fe90000 	.word	0x3fe90000
 80072c0:	3fd20000 	.word	0x3fd20000
 80072c4:	00000000 	.word	0x00000000

080072c8 <__kernel_sin>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	ec55 4b10 	vmov	r4, r5, d0
 80072d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80072d4:	b085      	sub	sp, #20
 80072d6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80072da:	ed8d 1b02 	vstr	d1, [sp, #8]
 80072de:	4680      	mov	r8, r0
 80072e0:	d205      	bcs.n	80072ee <__kernel_sin+0x26>
 80072e2:	4620      	mov	r0, r4
 80072e4:	4629      	mov	r1, r5
 80072e6:	f7f9 fc37 	bl	8000b58 <__aeabi_d2iz>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d052      	beq.n	8007394 <__kernel_sin+0xcc>
 80072ee:	4622      	mov	r2, r4
 80072f0:	462b      	mov	r3, r5
 80072f2:	4620      	mov	r0, r4
 80072f4:	4629      	mov	r1, r5
 80072f6:	f7f9 f97f 	bl	80005f8 <__aeabi_dmul>
 80072fa:	4682      	mov	sl, r0
 80072fc:	468b      	mov	fp, r1
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4620      	mov	r0, r4
 8007304:	4629      	mov	r1, r5
 8007306:	f7f9 f977 	bl	80005f8 <__aeabi_dmul>
 800730a:	a342      	add	r3, pc, #264	@ (adr r3, 8007414 <__kernel_sin+0x14c>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	e9cd 0100 	strd	r0, r1, [sp]
 8007314:	4650      	mov	r0, sl
 8007316:	4659      	mov	r1, fp
 8007318:	f7f9 f96e 	bl	80005f8 <__aeabi_dmul>
 800731c:	a33f      	add	r3, pc, #252	@ (adr r3, 800741c <__kernel_sin+0x154>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f7f8 ffb1 	bl	8000288 <__aeabi_dsub>
 8007326:	4652      	mov	r2, sl
 8007328:	465b      	mov	r3, fp
 800732a:	f7f9 f965 	bl	80005f8 <__aeabi_dmul>
 800732e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007424 <__kernel_sin+0x15c>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f7f8 ffaa 	bl	800028c <__adddf3>
 8007338:	4652      	mov	r2, sl
 800733a:	465b      	mov	r3, fp
 800733c:	f7f9 f95c 	bl	80005f8 <__aeabi_dmul>
 8007340:	a33a      	add	r3, pc, #232	@ (adr r3, 800742c <__kernel_sin+0x164>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f8 ff9f 	bl	8000288 <__aeabi_dsub>
 800734a:	4652      	mov	r2, sl
 800734c:	465b      	mov	r3, fp
 800734e:	f7f9 f953 	bl	80005f8 <__aeabi_dmul>
 8007352:	a338      	add	r3, pc, #224	@ (adr r3, 8007434 <__kernel_sin+0x16c>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f7f8 ff98 	bl	800028c <__adddf3>
 800735c:	4606      	mov	r6, r0
 800735e:	460f      	mov	r7, r1
 8007360:	f1b8 0f00 	cmp.w	r8, #0
 8007364:	d11b      	bne.n	800739e <__kernel_sin+0xd6>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4650      	mov	r0, sl
 800736c:	4659      	mov	r1, fp
 800736e:	f7f9 f943 	bl	80005f8 <__aeabi_dmul>
 8007372:	a325      	add	r3, pc, #148	@ (adr r3, 8007408 <__kernel_sin+0x140>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ff86 	bl	8000288 <__aeabi_dsub>
 800737c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007380:	f7f9 f93a 	bl	80005f8 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4620      	mov	r0, r4
 800738a:	4629      	mov	r1, r5
 800738c:	f7f8 ff7e 	bl	800028c <__adddf3>
 8007390:	4604      	mov	r4, r0
 8007392:	460d      	mov	r5, r1
 8007394:	ec45 4b10 	vmov	d0, r4, r5
 8007398:	b005      	add	sp, #20
 800739a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007410 <__kernel_sin+0x148>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	f7f9 f927 	bl	80005f8 <__aeabi_dmul>
 80073aa:	4632      	mov	r2, r6
 80073ac:	4680      	mov	r8, r0
 80073ae:	4689      	mov	r9, r1
 80073b0:	463b      	mov	r3, r7
 80073b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073b6:	f7f9 f91f 	bl	80005f8 <__aeabi_dmul>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4640      	mov	r0, r8
 80073c0:	4649      	mov	r1, r9
 80073c2:	f7f8 ff61 	bl	8000288 <__aeabi_dsub>
 80073c6:	4652      	mov	r2, sl
 80073c8:	465b      	mov	r3, fp
 80073ca:	f7f9 f915 	bl	80005f8 <__aeabi_dmul>
 80073ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073d2:	f7f8 ff59 	bl	8000288 <__aeabi_dsub>
 80073d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007408 <__kernel_sin+0x140>)
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	4606      	mov	r6, r0
 80073de:	460f      	mov	r7, r1
 80073e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073e4:	f7f9 f908 	bl	80005f8 <__aeabi_dmul>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4630      	mov	r0, r6
 80073ee:	4639      	mov	r1, r7
 80073f0:	f7f8 ff4c 	bl	800028c <__adddf3>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4620      	mov	r0, r4
 80073fa:	4629      	mov	r1, r5
 80073fc:	f7f8 ff44 	bl	8000288 <__aeabi_dsub>
 8007400:	e7c6      	b.n	8007390 <__kernel_sin+0xc8>
 8007402:	bf00      	nop
 8007404:	f3af 8000 	nop.w
 8007408:	55555549 	.word	0x55555549
 800740c:	3fc55555 	.word	0x3fc55555
 8007410:	3fe00000 	.word	0x3fe00000
 8007414:	5acfd57c 	.word	0x5acfd57c
 8007418:	3de5d93a 	.word	0x3de5d93a
 800741c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007420:	3e5ae5e6 	.word	0x3e5ae5e6
 8007424:	57b1fe7d 	.word	0x57b1fe7d
 8007428:	3ec71de3 	.word	0x3ec71de3
 800742c:	19c161d5 	.word	0x19c161d5
 8007430:	3f2a01a0 	.word	0x3f2a01a0
 8007434:	1110f8a6 	.word	0x1110f8a6
 8007438:	3f811111 	.word	0x3f811111
 800743c:	00000000 	.word	0x00000000

08007440 <scalbn>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	ec55 4b10 	vmov	r4, r5, d0
 8007446:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800744a:	4606      	mov	r6, r0
 800744c:	462b      	mov	r3, r5
 800744e:	b991      	cbnz	r1, 8007476 <scalbn+0x36>
 8007450:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007454:	4323      	orrs	r3, r4
 8007456:	d03d      	beq.n	80074d4 <scalbn+0x94>
 8007458:	4b35      	ldr	r3, [pc, #212]	@ (8007530 <scalbn+0xf0>)
 800745a:	4620      	mov	r0, r4
 800745c:	4629      	mov	r1, r5
 800745e:	2200      	movs	r2, #0
 8007460:	f7f9 f8ca 	bl	80005f8 <__aeabi_dmul>
 8007464:	4b33      	ldr	r3, [pc, #204]	@ (8007534 <scalbn+0xf4>)
 8007466:	429e      	cmp	r6, r3
 8007468:	4604      	mov	r4, r0
 800746a:	460d      	mov	r5, r1
 800746c:	da0f      	bge.n	800748e <scalbn+0x4e>
 800746e:	a328      	add	r3, pc, #160	@ (adr r3, 8007510 <scalbn+0xd0>)
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	e01e      	b.n	80074b4 <scalbn+0x74>
 8007476:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800747a:	4291      	cmp	r1, r2
 800747c:	d10b      	bne.n	8007496 <scalbn+0x56>
 800747e:	4622      	mov	r2, r4
 8007480:	4620      	mov	r0, r4
 8007482:	4629      	mov	r1, r5
 8007484:	f7f8 ff02 	bl	800028c <__adddf3>
 8007488:	4604      	mov	r4, r0
 800748a:	460d      	mov	r5, r1
 800748c:	e022      	b.n	80074d4 <scalbn+0x94>
 800748e:	460b      	mov	r3, r1
 8007490:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007494:	3936      	subs	r1, #54	@ 0x36
 8007496:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800749a:	4296      	cmp	r6, r2
 800749c:	dd0d      	ble.n	80074ba <scalbn+0x7a>
 800749e:	2d00      	cmp	r5, #0
 80074a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007518 <scalbn+0xd8>)
 80074a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a6:	da02      	bge.n	80074ae <scalbn+0x6e>
 80074a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007520 <scalbn+0xe0>)
 80074aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ae:	a31a      	add	r3, pc, #104	@ (adr r3, 8007518 <scalbn+0xd8>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f9 f8a0 	bl	80005f8 <__aeabi_dmul>
 80074b8:	e7e6      	b.n	8007488 <scalbn+0x48>
 80074ba:	1872      	adds	r2, r6, r1
 80074bc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80074c0:	428a      	cmp	r2, r1
 80074c2:	dcec      	bgt.n	800749e <scalbn+0x5e>
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	dd08      	ble.n	80074da <scalbn+0x9a>
 80074c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80074cc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80074d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80074d4:	ec45 4b10 	vmov	d0, r4, r5
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80074de:	da08      	bge.n	80074f2 <scalbn+0xb2>
 80074e0:	2d00      	cmp	r5, #0
 80074e2:	a10b      	add	r1, pc, #44	@ (adr r1, 8007510 <scalbn+0xd0>)
 80074e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074e8:	dac1      	bge.n	800746e <scalbn+0x2e>
 80074ea:	a10f      	add	r1, pc, #60	@ (adr r1, 8007528 <scalbn+0xe8>)
 80074ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f0:	e7bd      	b.n	800746e <scalbn+0x2e>
 80074f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80074f6:	3236      	adds	r2, #54	@ 0x36
 80074f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80074fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007500:	4620      	mov	r0, r4
 8007502:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <scalbn+0xf8>)
 8007504:	4629      	mov	r1, r5
 8007506:	2200      	movs	r2, #0
 8007508:	e7d4      	b.n	80074b4 <scalbn+0x74>
 800750a:	bf00      	nop
 800750c:	f3af 8000 	nop.w
 8007510:	c2f8f359 	.word	0xc2f8f359
 8007514:	01a56e1f 	.word	0x01a56e1f
 8007518:	8800759c 	.word	0x8800759c
 800751c:	7e37e43c 	.word	0x7e37e43c
 8007520:	8800759c 	.word	0x8800759c
 8007524:	fe37e43c 	.word	0xfe37e43c
 8007528:	c2f8f359 	.word	0xc2f8f359
 800752c:	81a56e1f 	.word	0x81a56e1f
 8007530:	43500000 	.word	0x43500000
 8007534:	ffff3cb0 	.word	0xffff3cb0
 8007538:	3c900000 	.word	0x3c900000
 800753c:	00000000 	.word	0x00000000

08007540 <floor>:
 8007540:	ec51 0b10 	vmov	r0, r1, d0
 8007544:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007550:	2e13      	cmp	r6, #19
 8007552:	460c      	mov	r4, r1
 8007554:	4605      	mov	r5, r0
 8007556:	4680      	mov	r8, r0
 8007558:	dc34      	bgt.n	80075c4 <floor+0x84>
 800755a:	2e00      	cmp	r6, #0
 800755c:	da17      	bge.n	800758e <floor+0x4e>
 800755e:	a332      	add	r3, pc, #200	@ (adr r3, 8007628 <floor+0xe8>)
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f7f8 fe92 	bl	800028c <__adddf3>
 8007568:	2200      	movs	r2, #0
 800756a:	2300      	movs	r3, #0
 800756c:	f7f9 fad4 	bl	8000b18 <__aeabi_dcmpgt>
 8007570:	b150      	cbz	r0, 8007588 <floor+0x48>
 8007572:	2c00      	cmp	r4, #0
 8007574:	da55      	bge.n	8007622 <floor+0xe2>
 8007576:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800757a:	432c      	orrs	r4, r5
 800757c:	2500      	movs	r5, #0
 800757e:	42ac      	cmp	r4, r5
 8007580:	4c2b      	ldr	r4, [pc, #172]	@ (8007630 <floor+0xf0>)
 8007582:	bf08      	it	eq
 8007584:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	e023      	b.n	80075d6 <floor+0x96>
 800758e:	4f29      	ldr	r7, [pc, #164]	@ (8007634 <floor+0xf4>)
 8007590:	4137      	asrs	r7, r6
 8007592:	ea01 0307 	and.w	r3, r1, r7
 8007596:	4303      	orrs	r3, r0
 8007598:	d01d      	beq.n	80075d6 <floor+0x96>
 800759a:	a323      	add	r3, pc, #140	@ (adr r3, 8007628 <floor+0xe8>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f7f8 fe74 	bl	800028c <__adddf3>
 80075a4:	2200      	movs	r2, #0
 80075a6:	2300      	movs	r3, #0
 80075a8:	f7f9 fab6 	bl	8000b18 <__aeabi_dcmpgt>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d0eb      	beq.n	8007588 <floor+0x48>
 80075b0:	2c00      	cmp	r4, #0
 80075b2:	bfbe      	ittt	lt
 80075b4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80075b8:	4133      	asrlt	r3, r6
 80075ba:	18e4      	addlt	r4, r4, r3
 80075bc:	ea24 0407 	bic.w	r4, r4, r7
 80075c0:	2500      	movs	r5, #0
 80075c2:	e7e1      	b.n	8007588 <floor+0x48>
 80075c4:	2e33      	cmp	r6, #51	@ 0x33
 80075c6:	dd0a      	ble.n	80075de <floor+0x9e>
 80075c8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80075cc:	d103      	bne.n	80075d6 <floor+0x96>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	f7f8 fe5b 	bl	800028c <__adddf3>
 80075d6:	ec41 0b10 	vmov	d0, r0, r1
 80075da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075de:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80075e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80075e6:	40df      	lsrs	r7, r3
 80075e8:	4207      	tst	r7, r0
 80075ea:	d0f4      	beq.n	80075d6 <floor+0x96>
 80075ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8007628 <floor+0xe8>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 fe4b 	bl	800028c <__adddf3>
 80075f6:	2200      	movs	r2, #0
 80075f8:	2300      	movs	r3, #0
 80075fa:	f7f9 fa8d 	bl	8000b18 <__aeabi_dcmpgt>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d0c2      	beq.n	8007588 <floor+0x48>
 8007602:	2c00      	cmp	r4, #0
 8007604:	da0a      	bge.n	800761c <floor+0xdc>
 8007606:	2e14      	cmp	r6, #20
 8007608:	d101      	bne.n	800760e <floor+0xce>
 800760a:	3401      	adds	r4, #1
 800760c:	e006      	b.n	800761c <floor+0xdc>
 800760e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007612:	2301      	movs	r3, #1
 8007614:	40b3      	lsls	r3, r6
 8007616:	441d      	add	r5, r3
 8007618:	4545      	cmp	r5, r8
 800761a:	d3f6      	bcc.n	800760a <floor+0xca>
 800761c:	ea25 0507 	bic.w	r5, r5, r7
 8007620:	e7b2      	b.n	8007588 <floor+0x48>
 8007622:	2500      	movs	r5, #0
 8007624:	462c      	mov	r4, r5
 8007626:	e7af      	b.n	8007588 <floor+0x48>
 8007628:	8800759c 	.word	0x8800759c
 800762c:	7e37e43c 	.word	0x7e37e43c
 8007630:	bff00000 	.word	0xbff00000
 8007634:	000fffff 	.word	0x000fffff

08007638 <__cvt>:
 8007638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800763c:	ec57 6b10 	vmov	r6, r7, d0
 8007640:	2f00      	cmp	r7, #0
 8007642:	460c      	mov	r4, r1
 8007644:	4619      	mov	r1, r3
 8007646:	463b      	mov	r3, r7
 8007648:	bfbb      	ittet	lt
 800764a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800764e:	461f      	movlt	r7, r3
 8007650:	2300      	movge	r3, #0
 8007652:	232d      	movlt	r3, #45	@ 0x2d
 8007654:	700b      	strb	r3, [r1, #0]
 8007656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007658:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800765c:	4691      	mov	r9, r2
 800765e:	f023 0820 	bic.w	r8, r3, #32
 8007662:	bfbc      	itt	lt
 8007664:	4632      	movlt	r2, r6
 8007666:	4616      	movlt	r6, r2
 8007668:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800766c:	d005      	beq.n	800767a <__cvt+0x42>
 800766e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007672:	d100      	bne.n	8007676 <__cvt+0x3e>
 8007674:	3401      	adds	r4, #1
 8007676:	2102      	movs	r1, #2
 8007678:	e000      	b.n	800767c <__cvt+0x44>
 800767a:	2103      	movs	r1, #3
 800767c:	ab03      	add	r3, sp, #12
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	ab02      	add	r3, sp, #8
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	ec47 6b10 	vmov	d0, r6, r7
 8007688:	4653      	mov	r3, sl
 800768a:	4622      	mov	r2, r4
 800768c:	f000 fdc4 	bl	8008218 <_dtoa_r>
 8007690:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007694:	4605      	mov	r5, r0
 8007696:	d119      	bne.n	80076cc <__cvt+0x94>
 8007698:	f019 0f01 	tst.w	r9, #1
 800769c:	d00e      	beq.n	80076bc <__cvt+0x84>
 800769e:	eb00 0904 	add.w	r9, r0, r4
 80076a2:	2200      	movs	r2, #0
 80076a4:	2300      	movs	r3, #0
 80076a6:	4630      	mov	r0, r6
 80076a8:	4639      	mov	r1, r7
 80076aa:	f7f9 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ae:	b108      	cbz	r0, 80076b4 <__cvt+0x7c>
 80076b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80076b4:	2230      	movs	r2, #48	@ 0x30
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	454b      	cmp	r3, r9
 80076ba:	d31e      	bcc.n	80076fa <__cvt+0xc2>
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076c0:	1b5b      	subs	r3, r3, r5
 80076c2:	4628      	mov	r0, r5
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	b004      	add	sp, #16
 80076c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076d0:	eb00 0904 	add.w	r9, r0, r4
 80076d4:	d1e5      	bne.n	80076a2 <__cvt+0x6a>
 80076d6:	7803      	ldrb	r3, [r0, #0]
 80076d8:	2b30      	cmp	r3, #48	@ 0x30
 80076da:	d10a      	bne.n	80076f2 <__cvt+0xba>
 80076dc:	2200      	movs	r2, #0
 80076de:	2300      	movs	r3, #0
 80076e0:	4630      	mov	r0, r6
 80076e2:	4639      	mov	r1, r7
 80076e4:	f7f9 f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80076e8:	b918      	cbnz	r0, 80076f2 <__cvt+0xba>
 80076ea:	f1c4 0401 	rsb	r4, r4, #1
 80076ee:	f8ca 4000 	str.w	r4, [sl]
 80076f2:	f8da 3000 	ldr.w	r3, [sl]
 80076f6:	4499      	add	r9, r3
 80076f8:	e7d3      	b.n	80076a2 <__cvt+0x6a>
 80076fa:	1c59      	adds	r1, r3, #1
 80076fc:	9103      	str	r1, [sp, #12]
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e7d9      	b.n	80076b6 <__cvt+0x7e>

08007702 <__exponent>:
 8007702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007704:	2900      	cmp	r1, #0
 8007706:	bfba      	itte	lt
 8007708:	4249      	neglt	r1, r1
 800770a:	232d      	movlt	r3, #45	@ 0x2d
 800770c:	232b      	movge	r3, #43	@ 0x2b
 800770e:	2909      	cmp	r1, #9
 8007710:	7002      	strb	r2, [r0, #0]
 8007712:	7043      	strb	r3, [r0, #1]
 8007714:	dd29      	ble.n	800776a <__exponent+0x68>
 8007716:	f10d 0307 	add.w	r3, sp, #7
 800771a:	461d      	mov	r5, r3
 800771c:	270a      	movs	r7, #10
 800771e:	461a      	mov	r2, r3
 8007720:	fbb1 f6f7 	udiv	r6, r1, r7
 8007724:	fb07 1416 	mls	r4, r7, r6, r1
 8007728:	3430      	adds	r4, #48	@ 0x30
 800772a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800772e:	460c      	mov	r4, r1
 8007730:	2c63      	cmp	r4, #99	@ 0x63
 8007732:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007736:	4631      	mov	r1, r6
 8007738:	dcf1      	bgt.n	800771e <__exponent+0x1c>
 800773a:	3130      	adds	r1, #48	@ 0x30
 800773c:	1e94      	subs	r4, r2, #2
 800773e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007742:	1c41      	adds	r1, r0, #1
 8007744:	4623      	mov	r3, r4
 8007746:	42ab      	cmp	r3, r5
 8007748:	d30a      	bcc.n	8007760 <__exponent+0x5e>
 800774a:	f10d 0309 	add.w	r3, sp, #9
 800774e:	1a9b      	subs	r3, r3, r2
 8007750:	42ac      	cmp	r4, r5
 8007752:	bf88      	it	hi
 8007754:	2300      	movhi	r3, #0
 8007756:	3302      	adds	r3, #2
 8007758:	4403      	add	r3, r0
 800775a:	1a18      	subs	r0, r3, r0
 800775c:	b003      	add	sp, #12
 800775e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007760:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007764:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007768:	e7ed      	b.n	8007746 <__exponent+0x44>
 800776a:	2330      	movs	r3, #48	@ 0x30
 800776c:	3130      	adds	r1, #48	@ 0x30
 800776e:	7083      	strb	r3, [r0, #2]
 8007770:	70c1      	strb	r1, [r0, #3]
 8007772:	1d03      	adds	r3, r0, #4
 8007774:	e7f1      	b.n	800775a <__exponent+0x58>
	...

08007778 <_printf_float>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	b08d      	sub	sp, #52	@ 0x34
 800777e:	460c      	mov	r4, r1
 8007780:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007784:	4616      	mov	r6, r2
 8007786:	461f      	mov	r7, r3
 8007788:	4605      	mov	r5, r0
 800778a:	f000 fc89 	bl	80080a0 <_localeconv_r>
 800778e:	6803      	ldr	r3, [r0, #0]
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	4618      	mov	r0, r3
 8007794:	f7f8 fd6c 	bl	8000270 <strlen>
 8007798:	2300      	movs	r3, #0
 800779a:	930a      	str	r3, [sp, #40]	@ 0x28
 800779c:	f8d8 3000 	ldr.w	r3, [r8]
 80077a0:	9005      	str	r0, [sp, #20]
 80077a2:	3307      	adds	r3, #7
 80077a4:	f023 0307 	bic.w	r3, r3, #7
 80077a8:	f103 0208 	add.w	r2, r3, #8
 80077ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80077b0:	f8d4 b000 	ldr.w	fp, [r4]
 80077b4:	f8c8 2000 	str.w	r2, [r8]
 80077b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80077c0:	9307      	str	r3, [sp, #28]
 80077c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80077c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80077ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007a40 <_printf_float+0x2c8>)
 80077d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077d4:	f7f9 f9aa 	bl	8000b2c <__aeabi_dcmpun>
 80077d8:	bb70      	cbnz	r0, 8007838 <_printf_float+0xc0>
 80077da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077de:	4b98      	ldr	r3, [pc, #608]	@ (8007a40 <_printf_float+0x2c8>)
 80077e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077e4:	f7f9 f984 	bl	8000af0 <__aeabi_dcmple>
 80077e8:	bb30      	cbnz	r0, 8007838 <_printf_float+0xc0>
 80077ea:	2200      	movs	r2, #0
 80077ec:	2300      	movs	r3, #0
 80077ee:	4640      	mov	r0, r8
 80077f0:	4649      	mov	r1, r9
 80077f2:	f7f9 f973 	bl	8000adc <__aeabi_dcmplt>
 80077f6:	b110      	cbz	r0, 80077fe <_printf_float+0x86>
 80077f8:	232d      	movs	r3, #45	@ 0x2d
 80077fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077fe:	4a91      	ldr	r2, [pc, #580]	@ (8007a44 <_printf_float+0x2cc>)
 8007800:	4b91      	ldr	r3, [pc, #580]	@ (8007a48 <_printf_float+0x2d0>)
 8007802:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007806:	bf94      	ite	ls
 8007808:	4690      	movls	r8, r2
 800780a:	4698      	movhi	r8, r3
 800780c:	2303      	movs	r3, #3
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	f02b 0304 	bic.w	r3, fp, #4
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	f04f 0900 	mov.w	r9, #0
 800781a:	9700      	str	r7, [sp, #0]
 800781c:	4633      	mov	r3, r6
 800781e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007820:	4621      	mov	r1, r4
 8007822:	4628      	mov	r0, r5
 8007824:	f000 f9d2 	bl	8007bcc <_printf_common>
 8007828:	3001      	adds	r0, #1
 800782a:	f040 808d 	bne.w	8007948 <_printf_float+0x1d0>
 800782e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007832:	b00d      	add	sp, #52	@ 0x34
 8007834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007838:	4642      	mov	r2, r8
 800783a:	464b      	mov	r3, r9
 800783c:	4640      	mov	r0, r8
 800783e:	4649      	mov	r1, r9
 8007840:	f7f9 f974 	bl	8000b2c <__aeabi_dcmpun>
 8007844:	b140      	cbz	r0, 8007858 <_printf_float+0xe0>
 8007846:	464b      	mov	r3, r9
 8007848:	2b00      	cmp	r3, #0
 800784a:	bfbc      	itt	lt
 800784c:	232d      	movlt	r3, #45	@ 0x2d
 800784e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007852:	4a7e      	ldr	r2, [pc, #504]	@ (8007a4c <_printf_float+0x2d4>)
 8007854:	4b7e      	ldr	r3, [pc, #504]	@ (8007a50 <_printf_float+0x2d8>)
 8007856:	e7d4      	b.n	8007802 <_printf_float+0x8a>
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800785e:	9206      	str	r2, [sp, #24]
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	d13b      	bne.n	80078dc <_printf_float+0x164>
 8007864:	2306      	movs	r3, #6
 8007866:	6063      	str	r3, [r4, #4]
 8007868:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800786c:	2300      	movs	r3, #0
 800786e:	6022      	str	r2, [r4, #0]
 8007870:	9303      	str	r3, [sp, #12]
 8007872:	ab0a      	add	r3, sp, #40	@ 0x28
 8007874:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007878:	ab09      	add	r3, sp, #36	@ 0x24
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	6861      	ldr	r1, [r4, #4]
 800787e:	ec49 8b10 	vmov	d0, r8, r9
 8007882:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007886:	4628      	mov	r0, r5
 8007888:	f7ff fed6 	bl	8007638 <__cvt>
 800788c:	9b06      	ldr	r3, [sp, #24]
 800788e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007890:	2b47      	cmp	r3, #71	@ 0x47
 8007892:	4680      	mov	r8, r0
 8007894:	d129      	bne.n	80078ea <_printf_float+0x172>
 8007896:	1cc8      	adds	r0, r1, #3
 8007898:	db02      	blt.n	80078a0 <_printf_float+0x128>
 800789a:	6863      	ldr	r3, [r4, #4]
 800789c:	4299      	cmp	r1, r3
 800789e:	dd41      	ble.n	8007924 <_printf_float+0x1ac>
 80078a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80078a4:	fa5f fa8a 	uxtb.w	sl, sl
 80078a8:	3901      	subs	r1, #1
 80078aa:	4652      	mov	r2, sl
 80078ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80078b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80078b2:	f7ff ff26 	bl	8007702 <__exponent>
 80078b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078b8:	1813      	adds	r3, r2, r0
 80078ba:	2a01      	cmp	r2, #1
 80078bc:	4681      	mov	r9, r0
 80078be:	6123      	str	r3, [r4, #16]
 80078c0:	dc02      	bgt.n	80078c8 <_printf_float+0x150>
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	07d2      	lsls	r2, r2, #31
 80078c6:	d501      	bpl.n	80078cc <_printf_float+0x154>
 80078c8:	3301      	adds	r3, #1
 80078ca:	6123      	str	r3, [r4, #16]
 80078cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0a2      	beq.n	800781a <_printf_float+0xa2>
 80078d4:	232d      	movs	r3, #45	@ 0x2d
 80078d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078da:	e79e      	b.n	800781a <_printf_float+0xa2>
 80078dc:	9a06      	ldr	r2, [sp, #24]
 80078de:	2a47      	cmp	r2, #71	@ 0x47
 80078e0:	d1c2      	bne.n	8007868 <_printf_float+0xf0>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1c0      	bne.n	8007868 <_printf_float+0xf0>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e7bd      	b.n	8007866 <_printf_float+0xee>
 80078ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078ee:	d9db      	bls.n	80078a8 <_printf_float+0x130>
 80078f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80078f4:	d118      	bne.n	8007928 <_printf_float+0x1b0>
 80078f6:	2900      	cmp	r1, #0
 80078f8:	6863      	ldr	r3, [r4, #4]
 80078fa:	dd0b      	ble.n	8007914 <_printf_float+0x19c>
 80078fc:	6121      	str	r1, [r4, #16]
 80078fe:	b913      	cbnz	r3, 8007906 <_printf_float+0x18e>
 8007900:	6822      	ldr	r2, [r4, #0]
 8007902:	07d0      	lsls	r0, r2, #31
 8007904:	d502      	bpl.n	800790c <_printf_float+0x194>
 8007906:	3301      	adds	r3, #1
 8007908:	440b      	add	r3, r1
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800790e:	f04f 0900 	mov.w	r9, #0
 8007912:	e7db      	b.n	80078cc <_printf_float+0x154>
 8007914:	b913      	cbnz	r3, 800791c <_printf_float+0x1a4>
 8007916:	6822      	ldr	r2, [r4, #0]
 8007918:	07d2      	lsls	r2, r2, #31
 800791a:	d501      	bpl.n	8007920 <_printf_float+0x1a8>
 800791c:	3302      	adds	r3, #2
 800791e:	e7f4      	b.n	800790a <_printf_float+0x192>
 8007920:	2301      	movs	r3, #1
 8007922:	e7f2      	b.n	800790a <_printf_float+0x192>
 8007924:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800792a:	4299      	cmp	r1, r3
 800792c:	db05      	blt.n	800793a <_printf_float+0x1c2>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	6121      	str	r1, [r4, #16]
 8007932:	07d8      	lsls	r0, r3, #31
 8007934:	d5ea      	bpl.n	800790c <_printf_float+0x194>
 8007936:	1c4b      	adds	r3, r1, #1
 8007938:	e7e7      	b.n	800790a <_printf_float+0x192>
 800793a:	2900      	cmp	r1, #0
 800793c:	bfd4      	ite	le
 800793e:	f1c1 0202 	rsble	r2, r1, #2
 8007942:	2201      	movgt	r2, #1
 8007944:	4413      	add	r3, r2
 8007946:	e7e0      	b.n	800790a <_printf_float+0x192>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	055a      	lsls	r2, r3, #21
 800794c:	d407      	bmi.n	800795e <_printf_float+0x1e6>
 800794e:	6923      	ldr	r3, [r4, #16]
 8007950:	4642      	mov	r2, r8
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	d12b      	bne.n	80079b4 <_printf_float+0x23c>
 800795c:	e767      	b.n	800782e <_printf_float+0xb6>
 800795e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007962:	f240 80dd 	bls.w	8007b20 <_printf_float+0x3a8>
 8007966:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800796a:	2200      	movs	r2, #0
 800796c:	2300      	movs	r3, #0
 800796e:	f7f9 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8007972:	2800      	cmp	r0, #0
 8007974:	d033      	beq.n	80079de <_printf_float+0x266>
 8007976:	4a37      	ldr	r2, [pc, #220]	@ (8007a54 <_printf_float+0x2dc>)
 8007978:	2301      	movs	r3, #1
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	f43f af54 	beq.w	800782e <_printf_float+0xb6>
 8007986:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800798a:	4543      	cmp	r3, r8
 800798c:	db02      	blt.n	8007994 <_printf_float+0x21c>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	07d8      	lsls	r0, r3, #31
 8007992:	d50f      	bpl.n	80079b4 <_printf_float+0x23c>
 8007994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f af45 	beq.w	800782e <_printf_float+0xb6>
 80079a4:	f04f 0900 	mov.w	r9, #0
 80079a8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80079ac:	f104 0a1a 	add.w	sl, r4, #26
 80079b0:	45c8      	cmp	r8, r9
 80079b2:	dc09      	bgt.n	80079c8 <_printf_float+0x250>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	079b      	lsls	r3, r3, #30
 80079b8:	f100 8103 	bmi.w	8007bc2 <_printf_float+0x44a>
 80079bc:	68e0      	ldr	r0, [r4, #12]
 80079be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079c0:	4298      	cmp	r0, r3
 80079c2:	bfb8      	it	lt
 80079c4:	4618      	movlt	r0, r3
 80079c6:	e734      	b.n	8007832 <_printf_float+0xba>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4652      	mov	r2, sl
 80079cc:	4631      	mov	r1, r6
 80079ce:	4628      	mov	r0, r5
 80079d0:	47b8      	blx	r7
 80079d2:	3001      	adds	r0, #1
 80079d4:	f43f af2b 	beq.w	800782e <_printf_float+0xb6>
 80079d8:	f109 0901 	add.w	r9, r9, #1
 80079dc:	e7e8      	b.n	80079b0 <_printf_float+0x238>
 80079de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	dc39      	bgt.n	8007a58 <_printf_float+0x2e0>
 80079e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007a54 <_printf_float+0x2dc>)
 80079e6:	2301      	movs	r3, #1
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	f43f af1d 	beq.w	800782e <_printf_float+0xb6>
 80079f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80079f8:	ea59 0303 	orrs.w	r3, r9, r3
 80079fc:	d102      	bne.n	8007a04 <_printf_float+0x28c>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	07d9      	lsls	r1, r3, #31
 8007a02:	d5d7      	bpl.n	80079b4 <_printf_float+0x23c>
 8007a04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f af0d 	beq.w	800782e <_printf_float+0xb6>
 8007a14:	f04f 0a00 	mov.w	sl, #0
 8007a18:	f104 0b1a 	add.w	fp, r4, #26
 8007a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1e:	425b      	negs	r3, r3
 8007a20:	4553      	cmp	r3, sl
 8007a22:	dc01      	bgt.n	8007a28 <_printf_float+0x2b0>
 8007a24:	464b      	mov	r3, r9
 8007a26:	e793      	b.n	8007950 <_printf_float+0x1d8>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	465a      	mov	r2, fp
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	f43f aefb 	beq.w	800782e <_printf_float+0xb6>
 8007a38:	f10a 0a01 	add.w	sl, sl, #1
 8007a3c:	e7ee      	b.n	8007a1c <_printf_float+0x2a4>
 8007a3e:	bf00      	nop
 8007a40:	7fefffff 	.word	0x7fefffff
 8007a44:	0800a308 	.word	0x0800a308
 8007a48:	0800a30c 	.word	0x0800a30c
 8007a4c:	0800a310 	.word	0x0800a310
 8007a50:	0800a314 	.word	0x0800a314
 8007a54:	0800a318 	.word	0x0800a318
 8007a58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a5e:	4553      	cmp	r3, sl
 8007a60:	bfa8      	it	ge
 8007a62:	4653      	movge	r3, sl
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	4699      	mov	r9, r3
 8007a68:	dc36      	bgt.n	8007ad8 <_printf_float+0x360>
 8007a6a:	f04f 0b00 	mov.w	fp, #0
 8007a6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a72:	f104 021a 	add.w	r2, r4, #26
 8007a76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a78:	9306      	str	r3, [sp, #24]
 8007a7a:	eba3 0309 	sub.w	r3, r3, r9
 8007a7e:	455b      	cmp	r3, fp
 8007a80:	dc31      	bgt.n	8007ae6 <_printf_float+0x36e>
 8007a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a84:	459a      	cmp	sl, r3
 8007a86:	dc3a      	bgt.n	8007afe <_printf_float+0x386>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	07da      	lsls	r2, r3, #31
 8007a8c:	d437      	bmi.n	8007afe <_printf_float+0x386>
 8007a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a90:	ebaa 0903 	sub.w	r9, sl, r3
 8007a94:	9b06      	ldr	r3, [sp, #24]
 8007a96:	ebaa 0303 	sub.w	r3, sl, r3
 8007a9a:	4599      	cmp	r9, r3
 8007a9c:	bfa8      	it	ge
 8007a9e:	4699      	movge	r9, r3
 8007aa0:	f1b9 0f00 	cmp.w	r9, #0
 8007aa4:	dc33      	bgt.n	8007b0e <_printf_float+0x396>
 8007aa6:	f04f 0800 	mov.w	r8, #0
 8007aaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aae:	f104 0b1a 	add.w	fp, r4, #26
 8007ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ab8:	eba3 0309 	sub.w	r3, r3, r9
 8007abc:	4543      	cmp	r3, r8
 8007abe:	f77f af79 	ble.w	80079b4 <_printf_float+0x23c>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	465a      	mov	r2, fp
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b8      	blx	r7
 8007acc:	3001      	adds	r0, #1
 8007ace:	f43f aeae 	beq.w	800782e <_printf_float+0xb6>
 8007ad2:	f108 0801 	add.w	r8, r8, #1
 8007ad6:	e7ec      	b.n	8007ab2 <_printf_float+0x33a>
 8007ad8:	4642      	mov	r2, r8
 8007ada:	4631      	mov	r1, r6
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b8      	blx	r7
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d1c2      	bne.n	8007a6a <_printf_float+0x2f2>
 8007ae4:	e6a3      	b.n	800782e <_printf_float+0xb6>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	9206      	str	r2, [sp, #24]
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	f43f ae9c 	beq.w	800782e <_printf_float+0xb6>
 8007af6:	9a06      	ldr	r2, [sp, #24]
 8007af8:	f10b 0b01 	add.w	fp, fp, #1
 8007afc:	e7bb      	b.n	8007a76 <_printf_float+0x2fe>
 8007afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b02:	4631      	mov	r1, r6
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b8      	blx	r7
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d1c0      	bne.n	8007a8e <_printf_float+0x316>
 8007b0c:	e68f      	b.n	800782e <_printf_float+0xb6>
 8007b0e:	9a06      	ldr	r2, [sp, #24]
 8007b10:	464b      	mov	r3, r9
 8007b12:	4442      	add	r2, r8
 8007b14:	4631      	mov	r1, r6
 8007b16:	4628      	mov	r0, r5
 8007b18:	47b8      	blx	r7
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d1c3      	bne.n	8007aa6 <_printf_float+0x32e>
 8007b1e:	e686      	b.n	800782e <_printf_float+0xb6>
 8007b20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b24:	f1ba 0f01 	cmp.w	sl, #1
 8007b28:	dc01      	bgt.n	8007b2e <_printf_float+0x3b6>
 8007b2a:	07db      	lsls	r3, r3, #31
 8007b2c:	d536      	bpl.n	8007b9c <_printf_float+0x424>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4642      	mov	r2, r8
 8007b32:	4631      	mov	r1, r6
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b8      	blx	r7
 8007b38:	3001      	adds	r0, #1
 8007b3a:	f43f ae78 	beq.w	800782e <_printf_float+0xb6>
 8007b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f43f ae70 	beq.w	800782e <_printf_float+0xb6>
 8007b4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b52:	2200      	movs	r2, #0
 8007b54:	2300      	movs	r3, #0
 8007b56:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007b5a:	f7f8 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b5e:	b9c0      	cbnz	r0, 8007b92 <_printf_float+0x41a>
 8007b60:	4653      	mov	r3, sl
 8007b62:	f108 0201 	add.w	r2, r8, #1
 8007b66:	4631      	mov	r1, r6
 8007b68:	4628      	mov	r0, r5
 8007b6a:	47b8      	blx	r7
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d10c      	bne.n	8007b8a <_printf_float+0x412>
 8007b70:	e65d      	b.n	800782e <_printf_float+0xb6>
 8007b72:	2301      	movs	r3, #1
 8007b74:	465a      	mov	r2, fp
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	f43f ae56 	beq.w	800782e <_printf_float+0xb6>
 8007b82:	f108 0801 	add.w	r8, r8, #1
 8007b86:	45d0      	cmp	r8, sl
 8007b88:	dbf3      	blt.n	8007b72 <_printf_float+0x3fa>
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b90:	e6df      	b.n	8007952 <_printf_float+0x1da>
 8007b92:	f04f 0800 	mov.w	r8, #0
 8007b96:	f104 0b1a 	add.w	fp, r4, #26
 8007b9a:	e7f4      	b.n	8007b86 <_printf_float+0x40e>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4642      	mov	r2, r8
 8007ba0:	e7e1      	b.n	8007b66 <_printf_float+0x3ee>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	464a      	mov	r2, r9
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f ae3e 	beq.w	800782e <_printf_float+0xb6>
 8007bb2:	f108 0801 	add.w	r8, r8, #1
 8007bb6:	68e3      	ldr	r3, [r4, #12]
 8007bb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bba:	1a5b      	subs	r3, r3, r1
 8007bbc:	4543      	cmp	r3, r8
 8007bbe:	dcf0      	bgt.n	8007ba2 <_printf_float+0x42a>
 8007bc0:	e6fc      	b.n	80079bc <_printf_float+0x244>
 8007bc2:	f04f 0800 	mov.w	r8, #0
 8007bc6:	f104 0919 	add.w	r9, r4, #25
 8007bca:	e7f4      	b.n	8007bb6 <_printf_float+0x43e>

08007bcc <_printf_common>:
 8007bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd0:	4616      	mov	r6, r2
 8007bd2:	4698      	mov	r8, r3
 8007bd4:	688a      	ldr	r2, [r1, #8]
 8007bd6:	690b      	ldr	r3, [r1, #16]
 8007bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	bfb8      	it	lt
 8007be0:	4613      	movlt	r3, r2
 8007be2:	6033      	str	r3, [r6, #0]
 8007be4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007be8:	4607      	mov	r7, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	b10a      	cbz	r2, 8007bf2 <_printf_common+0x26>
 8007bee:	3301      	adds	r3, #1
 8007bf0:	6033      	str	r3, [r6, #0]
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	0699      	lsls	r1, r3, #26
 8007bf6:	bf42      	ittt	mi
 8007bf8:	6833      	ldrmi	r3, [r6, #0]
 8007bfa:	3302      	addmi	r3, #2
 8007bfc:	6033      	strmi	r3, [r6, #0]
 8007bfe:	6825      	ldr	r5, [r4, #0]
 8007c00:	f015 0506 	ands.w	r5, r5, #6
 8007c04:	d106      	bne.n	8007c14 <_printf_common+0x48>
 8007c06:	f104 0a19 	add.w	sl, r4, #25
 8007c0a:	68e3      	ldr	r3, [r4, #12]
 8007c0c:	6832      	ldr	r2, [r6, #0]
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	dc26      	bgt.n	8007c62 <_printf_common+0x96>
 8007c14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c18:	6822      	ldr	r2, [r4, #0]
 8007c1a:	3b00      	subs	r3, #0
 8007c1c:	bf18      	it	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	0692      	lsls	r2, r2, #26
 8007c22:	d42b      	bmi.n	8007c7c <_printf_common+0xb0>
 8007c24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c28:	4641      	mov	r1, r8
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	47c8      	blx	r9
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d01e      	beq.n	8007c70 <_printf_common+0xa4>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	6922      	ldr	r2, [r4, #16]
 8007c36:	f003 0306 	and.w	r3, r3, #6
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	bf02      	ittt	eq
 8007c3e:	68e5      	ldreq	r5, [r4, #12]
 8007c40:	6833      	ldreq	r3, [r6, #0]
 8007c42:	1aed      	subeq	r5, r5, r3
 8007c44:	68a3      	ldr	r3, [r4, #8]
 8007c46:	bf0c      	ite	eq
 8007c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c4c:	2500      	movne	r5, #0
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	bfc4      	itt	gt
 8007c52:	1a9b      	subgt	r3, r3, r2
 8007c54:	18ed      	addgt	r5, r5, r3
 8007c56:	2600      	movs	r6, #0
 8007c58:	341a      	adds	r4, #26
 8007c5a:	42b5      	cmp	r5, r6
 8007c5c:	d11a      	bne.n	8007c94 <_printf_common+0xc8>
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e008      	b.n	8007c74 <_printf_common+0xa8>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4652      	mov	r2, sl
 8007c66:	4641      	mov	r1, r8
 8007c68:	4638      	mov	r0, r7
 8007c6a:	47c8      	blx	r9
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d103      	bne.n	8007c78 <_printf_common+0xac>
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c78:	3501      	adds	r5, #1
 8007c7a:	e7c6      	b.n	8007c0a <_printf_common+0x3e>
 8007c7c:	18e1      	adds	r1, r4, r3
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	2030      	movs	r0, #48	@ 0x30
 8007c82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c86:	4422      	add	r2, r4
 8007c88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c90:	3302      	adds	r3, #2
 8007c92:	e7c7      	b.n	8007c24 <_printf_common+0x58>
 8007c94:	2301      	movs	r3, #1
 8007c96:	4622      	mov	r2, r4
 8007c98:	4641      	mov	r1, r8
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	47c8      	blx	r9
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d0e6      	beq.n	8007c70 <_printf_common+0xa4>
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7d9      	b.n	8007c5a <_printf_common+0x8e>
	...

08007ca8 <_printf_i>:
 8007ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	7e0f      	ldrb	r7, [r1, #24]
 8007cae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cb0:	2f78      	cmp	r7, #120	@ 0x78
 8007cb2:	4691      	mov	r9, r2
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	469a      	mov	sl, r3
 8007cba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cbe:	d807      	bhi.n	8007cd0 <_printf_i+0x28>
 8007cc0:	2f62      	cmp	r7, #98	@ 0x62
 8007cc2:	d80a      	bhi.n	8007cda <_printf_i+0x32>
 8007cc4:	2f00      	cmp	r7, #0
 8007cc6:	f000 80d2 	beq.w	8007e6e <_printf_i+0x1c6>
 8007cca:	2f58      	cmp	r7, #88	@ 0x58
 8007ccc:	f000 80b9 	beq.w	8007e42 <_printf_i+0x19a>
 8007cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cd8:	e03a      	b.n	8007d50 <_printf_i+0xa8>
 8007cda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cde:	2b15      	cmp	r3, #21
 8007ce0:	d8f6      	bhi.n	8007cd0 <_printf_i+0x28>
 8007ce2:	a101      	add	r1, pc, #4	@ (adr r1, 8007ce8 <_printf_i+0x40>)
 8007ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ce8:	08007d41 	.word	0x08007d41
 8007cec:	08007d55 	.word	0x08007d55
 8007cf0:	08007cd1 	.word	0x08007cd1
 8007cf4:	08007cd1 	.word	0x08007cd1
 8007cf8:	08007cd1 	.word	0x08007cd1
 8007cfc:	08007cd1 	.word	0x08007cd1
 8007d00:	08007d55 	.word	0x08007d55
 8007d04:	08007cd1 	.word	0x08007cd1
 8007d08:	08007cd1 	.word	0x08007cd1
 8007d0c:	08007cd1 	.word	0x08007cd1
 8007d10:	08007cd1 	.word	0x08007cd1
 8007d14:	08007e55 	.word	0x08007e55
 8007d18:	08007d7f 	.word	0x08007d7f
 8007d1c:	08007e0f 	.word	0x08007e0f
 8007d20:	08007cd1 	.word	0x08007cd1
 8007d24:	08007cd1 	.word	0x08007cd1
 8007d28:	08007e77 	.word	0x08007e77
 8007d2c:	08007cd1 	.word	0x08007cd1
 8007d30:	08007d7f 	.word	0x08007d7f
 8007d34:	08007cd1 	.word	0x08007cd1
 8007d38:	08007cd1 	.word	0x08007cd1
 8007d3c:	08007e17 	.word	0x08007e17
 8007d40:	6833      	ldr	r3, [r6, #0]
 8007d42:	1d1a      	adds	r2, r3, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6032      	str	r2, [r6, #0]
 8007d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d50:	2301      	movs	r3, #1
 8007d52:	e09d      	b.n	8007e90 <_printf_i+0x1e8>
 8007d54:	6833      	ldr	r3, [r6, #0]
 8007d56:	6820      	ldr	r0, [r4, #0]
 8007d58:	1d19      	adds	r1, r3, #4
 8007d5a:	6031      	str	r1, [r6, #0]
 8007d5c:	0606      	lsls	r6, r0, #24
 8007d5e:	d501      	bpl.n	8007d64 <_printf_i+0xbc>
 8007d60:	681d      	ldr	r5, [r3, #0]
 8007d62:	e003      	b.n	8007d6c <_printf_i+0xc4>
 8007d64:	0645      	lsls	r5, r0, #25
 8007d66:	d5fb      	bpl.n	8007d60 <_printf_i+0xb8>
 8007d68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	da03      	bge.n	8007d78 <_printf_i+0xd0>
 8007d70:	232d      	movs	r3, #45	@ 0x2d
 8007d72:	426d      	negs	r5, r5
 8007d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d78:	4859      	ldr	r0, [pc, #356]	@ (8007ee0 <_printf_i+0x238>)
 8007d7a:	230a      	movs	r3, #10
 8007d7c:	e011      	b.n	8007da2 <_printf_i+0xfa>
 8007d7e:	6821      	ldr	r1, [r4, #0]
 8007d80:	6833      	ldr	r3, [r6, #0]
 8007d82:	0608      	lsls	r0, r1, #24
 8007d84:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d88:	d402      	bmi.n	8007d90 <_printf_i+0xe8>
 8007d8a:	0649      	lsls	r1, r1, #25
 8007d8c:	bf48      	it	mi
 8007d8e:	b2ad      	uxthmi	r5, r5
 8007d90:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d92:	4853      	ldr	r0, [pc, #332]	@ (8007ee0 <_printf_i+0x238>)
 8007d94:	6033      	str	r3, [r6, #0]
 8007d96:	bf14      	ite	ne
 8007d98:	230a      	movne	r3, #10
 8007d9a:	2308      	moveq	r3, #8
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007da2:	6866      	ldr	r6, [r4, #4]
 8007da4:	60a6      	str	r6, [r4, #8]
 8007da6:	2e00      	cmp	r6, #0
 8007da8:	bfa2      	ittt	ge
 8007daa:	6821      	ldrge	r1, [r4, #0]
 8007dac:	f021 0104 	bicge.w	r1, r1, #4
 8007db0:	6021      	strge	r1, [r4, #0]
 8007db2:	b90d      	cbnz	r5, 8007db8 <_printf_i+0x110>
 8007db4:	2e00      	cmp	r6, #0
 8007db6:	d04b      	beq.n	8007e50 <_printf_i+0x1a8>
 8007db8:	4616      	mov	r6, r2
 8007dba:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dbe:	fb03 5711 	mls	r7, r3, r1, r5
 8007dc2:	5dc7      	ldrb	r7, [r0, r7]
 8007dc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dc8:	462f      	mov	r7, r5
 8007dca:	42bb      	cmp	r3, r7
 8007dcc:	460d      	mov	r5, r1
 8007dce:	d9f4      	bls.n	8007dba <_printf_i+0x112>
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d10b      	bne.n	8007dec <_printf_i+0x144>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	07df      	lsls	r7, r3, #31
 8007dd8:	d508      	bpl.n	8007dec <_printf_i+0x144>
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	6861      	ldr	r1, [r4, #4]
 8007dde:	4299      	cmp	r1, r3
 8007de0:	bfde      	ittt	le
 8007de2:	2330      	movle	r3, #48	@ 0x30
 8007de4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007de8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007dec:	1b92      	subs	r2, r2, r6
 8007dee:	6122      	str	r2, [r4, #16]
 8007df0:	f8cd a000 	str.w	sl, [sp]
 8007df4:	464b      	mov	r3, r9
 8007df6:	aa03      	add	r2, sp, #12
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f7ff fee6 	bl	8007bcc <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d14a      	bne.n	8007e9a <_printf_i+0x1f2>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e08:	b004      	add	sp, #16
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	f043 0320 	orr.w	r3, r3, #32
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	4833      	ldr	r0, [pc, #204]	@ (8007ee4 <_printf_i+0x23c>)
 8007e18:	2778      	movs	r7, #120	@ 0x78
 8007e1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	6831      	ldr	r1, [r6, #0]
 8007e22:	061f      	lsls	r7, r3, #24
 8007e24:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e28:	d402      	bmi.n	8007e30 <_printf_i+0x188>
 8007e2a:	065f      	lsls	r7, r3, #25
 8007e2c:	bf48      	it	mi
 8007e2e:	b2ad      	uxthmi	r5, r5
 8007e30:	6031      	str	r1, [r6, #0]
 8007e32:	07d9      	lsls	r1, r3, #31
 8007e34:	bf44      	itt	mi
 8007e36:	f043 0320 	orrmi.w	r3, r3, #32
 8007e3a:	6023      	strmi	r3, [r4, #0]
 8007e3c:	b11d      	cbz	r5, 8007e46 <_printf_i+0x19e>
 8007e3e:	2310      	movs	r3, #16
 8007e40:	e7ac      	b.n	8007d9c <_printf_i+0xf4>
 8007e42:	4827      	ldr	r0, [pc, #156]	@ (8007ee0 <_printf_i+0x238>)
 8007e44:	e7e9      	b.n	8007e1a <_printf_i+0x172>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	f023 0320 	bic.w	r3, r3, #32
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	e7f6      	b.n	8007e3e <_printf_i+0x196>
 8007e50:	4616      	mov	r6, r2
 8007e52:	e7bd      	b.n	8007dd0 <_printf_i+0x128>
 8007e54:	6833      	ldr	r3, [r6, #0]
 8007e56:	6825      	ldr	r5, [r4, #0]
 8007e58:	6961      	ldr	r1, [r4, #20]
 8007e5a:	1d18      	adds	r0, r3, #4
 8007e5c:	6030      	str	r0, [r6, #0]
 8007e5e:	062e      	lsls	r6, r5, #24
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	d501      	bpl.n	8007e68 <_printf_i+0x1c0>
 8007e64:	6019      	str	r1, [r3, #0]
 8007e66:	e002      	b.n	8007e6e <_printf_i+0x1c6>
 8007e68:	0668      	lsls	r0, r5, #25
 8007e6a:	d5fb      	bpl.n	8007e64 <_printf_i+0x1bc>
 8007e6c:	8019      	strh	r1, [r3, #0]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6123      	str	r3, [r4, #16]
 8007e72:	4616      	mov	r6, r2
 8007e74:	e7bc      	b.n	8007df0 <_printf_i+0x148>
 8007e76:	6833      	ldr	r3, [r6, #0]
 8007e78:	1d1a      	adds	r2, r3, #4
 8007e7a:	6032      	str	r2, [r6, #0]
 8007e7c:	681e      	ldr	r6, [r3, #0]
 8007e7e:	6862      	ldr	r2, [r4, #4]
 8007e80:	2100      	movs	r1, #0
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7f8 f9a4 	bl	80001d0 <memchr>
 8007e88:	b108      	cbz	r0, 8007e8e <_printf_i+0x1e6>
 8007e8a:	1b80      	subs	r0, r0, r6
 8007e8c:	6060      	str	r0, [r4, #4]
 8007e8e:	6863      	ldr	r3, [r4, #4]
 8007e90:	6123      	str	r3, [r4, #16]
 8007e92:	2300      	movs	r3, #0
 8007e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e98:	e7aa      	b.n	8007df0 <_printf_i+0x148>
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	47d0      	blx	sl
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d0ad      	beq.n	8007e04 <_printf_i+0x15c>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	079b      	lsls	r3, r3, #30
 8007eac:	d413      	bmi.n	8007ed6 <_printf_i+0x22e>
 8007eae:	68e0      	ldr	r0, [r4, #12]
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	4298      	cmp	r0, r3
 8007eb4:	bfb8      	it	lt
 8007eb6:	4618      	movlt	r0, r3
 8007eb8:	e7a6      	b.n	8007e08 <_printf_i+0x160>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	47d0      	blx	sl
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d09d      	beq.n	8007e04 <_printf_i+0x15c>
 8007ec8:	3501      	adds	r5, #1
 8007eca:	68e3      	ldr	r3, [r4, #12]
 8007ecc:	9903      	ldr	r1, [sp, #12]
 8007ece:	1a5b      	subs	r3, r3, r1
 8007ed0:	42ab      	cmp	r3, r5
 8007ed2:	dcf2      	bgt.n	8007eba <_printf_i+0x212>
 8007ed4:	e7eb      	b.n	8007eae <_printf_i+0x206>
 8007ed6:	2500      	movs	r5, #0
 8007ed8:	f104 0619 	add.w	r6, r4, #25
 8007edc:	e7f5      	b.n	8007eca <_printf_i+0x222>
 8007ede:	bf00      	nop
 8007ee0:	0800a31a 	.word	0x0800a31a
 8007ee4:	0800a32b 	.word	0x0800a32b

08007ee8 <std>:
 8007ee8:	2300      	movs	r3, #0
 8007eea:	b510      	push	{r4, lr}
 8007eec:	4604      	mov	r4, r0
 8007eee:	e9c0 3300 	strd	r3, r3, [r0]
 8007ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ef6:	6083      	str	r3, [r0, #8]
 8007ef8:	8181      	strh	r1, [r0, #12]
 8007efa:	6643      	str	r3, [r0, #100]	@ 0x64
 8007efc:	81c2      	strh	r2, [r0, #14]
 8007efe:	6183      	str	r3, [r0, #24]
 8007f00:	4619      	mov	r1, r3
 8007f02:	2208      	movs	r2, #8
 8007f04:	305c      	adds	r0, #92	@ 0x5c
 8007f06:	f000 f8c3 	bl	8008090 <memset>
 8007f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f40 <std+0x58>)
 8007f0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f44 <std+0x5c>)
 8007f10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f12:	4b0d      	ldr	r3, [pc, #52]	@ (8007f48 <std+0x60>)
 8007f14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f16:	4b0d      	ldr	r3, [pc, #52]	@ (8007f4c <std+0x64>)
 8007f18:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f50 <std+0x68>)
 8007f1c:	6224      	str	r4, [r4, #32]
 8007f1e:	429c      	cmp	r4, r3
 8007f20:	d006      	beq.n	8007f30 <std+0x48>
 8007f22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f26:	4294      	cmp	r4, r2
 8007f28:	d002      	beq.n	8007f30 <std+0x48>
 8007f2a:	33d0      	adds	r3, #208	@ 0xd0
 8007f2c:	429c      	cmp	r4, r3
 8007f2e:	d105      	bne.n	8007f3c <std+0x54>
 8007f30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f38:	f000 b8e0 	b.w	80080fc <__retarget_lock_init_recursive>
 8007f3c:	bd10      	pop	{r4, pc}
 8007f3e:	bf00      	nop
 8007f40:	080099ed 	.word	0x080099ed
 8007f44:	08009a0f 	.word	0x08009a0f
 8007f48:	08009a47 	.word	0x08009a47
 8007f4c:	08009a6b 	.word	0x08009a6b
 8007f50:	20000420 	.word	0x20000420

08007f54 <stdio_exit_handler>:
 8007f54:	4a02      	ldr	r2, [pc, #8]	@ (8007f60 <stdio_exit_handler+0xc>)
 8007f56:	4903      	ldr	r1, [pc, #12]	@ (8007f64 <stdio_exit_handler+0x10>)
 8007f58:	4803      	ldr	r0, [pc, #12]	@ (8007f68 <stdio_exit_handler+0x14>)
 8007f5a:	f000 b869 	b.w	8008030 <_fwalk_sglue>
 8007f5e:	bf00      	nop
 8007f60:	20000020 	.word	0x20000020
 8007f64:	08009281 	.word	0x08009281
 8007f68:	20000030 	.word	0x20000030

08007f6c <cleanup_stdio>:
 8007f6c:	6841      	ldr	r1, [r0, #4]
 8007f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa0 <cleanup_stdio+0x34>)
 8007f70:	4299      	cmp	r1, r3
 8007f72:	b510      	push	{r4, lr}
 8007f74:	4604      	mov	r4, r0
 8007f76:	d001      	beq.n	8007f7c <cleanup_stdio+0x10>
 8007f78:	f001 f982 	bl	8009280 <_fflush_r>
 8007f7c:	68a1      	ldr	r1, [r4, #8]
 8007f7e:	4b09      	ldr	r3, [pc, #36]	@ (8007fa4 <cleanup_stdio+0x38>)
 8007f80:	4299      	cmp	r1, r3
 8007f82:	d002      	beq.n	8007f8a <cleanup_stdio+0x1e>
 8007f84:	4620      	mov	r0, r4
 8007f86:	f001 f97b 	bl	8009280 <_fflush_r>
 8007f8a:	68e1      	ldr	r1, [r4, #12]
 8007f8c:	4b06      	ldr	r3, [pc, #24]	@ (8007fa8 <cleanup_stdio+0x3c>)
 8007f8e:	4299      	cmp	r1, r3
 8007f90:	d004      	beq.n	8007f9c <cleanup_stdio+0x30>
 8007f92:	4620      	mov	r0, r4
 8007f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f98:	f001 b972 	b.w	8009280 <_fflush_r>
 8007f9c:	bd10      	pop	{r4, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000420 	.word	0x20000420
 8007fa4:	20000488 	.word	0x20000488
 8007fa8:	200004f0 	.word	0x200004f0

08007fac <global_stdio_init.part.0>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <global_stdio_init.part.0+0x30>)
 8007fb0:	4c0b      	ldr	r4, [pc, #44]	@ (8007fe0 <global_stdio_init.part.0+0x34>)
 8007fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8007fe4 <global_stdio_init.part.0+0x38>)
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2104      	movs	r1, #4
 8007fbc:	f7ff ff94 	bl	8007ee8 <std>
 8007fc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	2109      	movs	r1, #9
 8007fc8:	f7ff ff8e 	bl	8007ee8 <std>
 8007fcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd6:	2112      	movs	r1, #18
 8007fd8:	f7ff bf86 	b.w	8007ee8 <std>
 8007fdc:	20000558 	.word	0x20000558
 8007fe0:	20000420 	.word	0x20000420
 8007fe4:	08007f55 	.word	0x08007f55

08007fe8 <__sfp_lock_acquire>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	@ (8007ff0 <__sfp_lock_acquire+0x8>)
 8007fea:	f000 b888 	b.w	80080fe <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	2000055d 	.word	0x2000055d

08007ff4 <__sfp_lock_release>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	@ (8007ffc <__sfp_lock_release+0x8>)
 8007ff6:	f000 b883 	b.w	8008100 <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	2000055d 	.word	0x2000055d

08008000 <__sinit>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4604      	mov	r4, r0
 8008004:	f7ff fff0 	bl	8007fe8 <__sfp_lock_acquire>
 8008008:	6a23      	ldr	r3, [r4, #32]
 800800a:	b11b      	cbz	r3, 8008014 <__sinit+0x14>
 800800c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008010:	f7ff bff0 	b.w	8007ff4 <__sfp_lock_release>
 8008014:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <__sinit+0x28>)
 8008016:	6223      	str	r3, [r4, #32]
 8008018:	4b04      	ldr	r3, [pc, #16]	@ (800802c <__sinit+0x2c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f5      	bne.n	800800c <__sinit+0xc>
 8008020:	f7ff ffc4 	bl	8007fac <global_stdio_init.part.0>
 8008024:	e7f2      	b.n	800800c <__sinit+0xc>
 8008026:	bf00      	nop
 8008028:	08007f6d 	.word	0x08007f6d
 800802c:	20000558 	.word	0x20000558

08008030 <_fwalk_sglue>:
 8008030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008034:	4607      	mov	r7, r0
 8008036:	4688      	mov	r8, r1
 8008038:	4614      	mov	r4, r2
 800803a:	2600      	movs	r6, #0
 800803c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008040:	f1b9 0901 	subs.w	r9, r9, #1
 8008044:	d505      	bpl.n	8008052 <_fwalk_sglue+0x22>
 8008046:	6824      	ldr	r4, [r4, #0]
 8008048:	2c00      	cmp	r4, #0
 800804a:	d1f7      	bne.n	800803c <_fwalk_sglue+0xc>
 800804c:	4630      	mov	r0, r6
 800804e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008052:	89ab      	ldrh	r3, [r5, #12]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d907      	bls.n	8008068 <_fwalk_sglue+0x38>
 8008058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800805c:	3301      	adds	r3, #1
 800805e:	d003      	beq.n	8008068 <_fwalk_sglue+0x38>
 8008060:	4629      	mov	r1, r5
 8008062:	4638      	mov	r0, r7
 8008064:	47c0      	blx	r8
 8008066:	4306      	orrs	r6, r0
 8008068:	3568      	adds	r5, #104	@ 0x68
 800806a:	e7e9      	b.n	8008040 <_fwalk_sglue+0x10>

0800806c <iprintf>:
 800806c:	b40f      	push	{r0, r1, r2, r3}
 800806e:	b507      	push	{r0, r1, r2, lr}
 8008070:	4906      	ldr	r1, [pc, #24]	@ (800808c <iprintf+0x20>)
 8008072:	ab04      	add	r3, sp, #16
 8008074:	6808      	ldr	r0, [r1, #0]
 8008076:	f853 2b04 	ldr.w	r2, [r3], #4
 800807a:	6881      	ldr	r1, [r0, #8]
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	f000 feb9 	bl	8008df4 <_vfiprintf_r>
 8008082:	b003      	add	sp, #12
 8008084:	f85d eb04 	ldr.w	lr, [sp], #4
 8008088:	b004      	add	sp, #16
 800808a:	4770      	bx	lr
 800808c:	2000002c 	.word	0x2000002c

08008090 <memset>:
 8008090:	4402      	add	r2, r0
 8008092:	4603      	mov	r3, r0
 8008094:	4293      	cmp	r3, r2
 8008096:	d100      	bne.n	800809a <memset+0xa>
 8008098:	4770      	bx	lr
 800809a:	f803 1b01 	strb.w	r1, [r3], #1
 800809e:	e7f9      	b.n	8008094 <memset+0x4>

080080a0 <_localeconv_r>:
 80080a0:	4800      	ldr	r0, [pc, #0]	@ (80080a4 <_localeconv_r+0x4>)
 80080a2:	4770      	bx	lr
 80080a4:	2000016c 	.word	0x2000016c

080080a8 <__errno>:
 80080a8:	4b01      	ldr	r3, [pc, #4]	@ (80080b0 <__errno+0x8>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	2000002c 	.word	0x2000002c

080080b4 <__libc_init_array>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	4d0d      	ldr	r5, [pc, #52]	@ (80080ec <__libc_init_array+0x38>)
 80080b8:	4c0d      	ldr	r4, [pc, #52]	@ (80080f0 <__libc_init_array+0x3c>)
 80080ba:	1b64      	subs	r4, r4, r5
 80080bc:	10a4      	asrs	r4, r4, #2
 80080be:	2600      	movs	r6, #0
 80080c0:	42a6      	cmp	r6, r4
 80080c2:	d109      	bne.n	80080d8 <__libc_init_array+0x24>
 80080c4:	4d0b      	ldr	r5, [pc, #44]	@ (80080f4 <__libc_init_array+0x40>)
 80080c6:	4c0c      	ldr	r4, [pc, #48]	@ (80080f8 <__libc_init_array+0x44>)
 80080c8:	f001 ff48 	bl	8009f5c <_init>
 80080cc:	1b64      	subs	r4, r4, r5
 80080ce:	10a4      	asrs	r4, r4, #2
 80080d0:	2600      	movs	r6, #0
 80080d2:	42a6      	cmp	r6, r4
 80080d4:	d105      	bne.n	80080e2 <__libc_init_array+0x2e>
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080dc:	4798      	blx	r3
 80080de:	3601      	adds	r6, #1
 80080e0:	e7ee      	b.n	80080c0 <__libc_init_array+0xc>
 80080e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e6:	4798      	blx	r3
 80080e8:	3601      	adds	r6, #1
 80080ea:	e7f2      	b.n	80080d2 <__libc_init_array+0x1e>
 80080ec:	0800a680 	.word	0x0800a680
 80080f0:	0800a680 	.word	0x0800a680
 80080f4:	0800a680 	.word	0x0800a680
 80080f8:	0800a684 	.word	0x0800a684

080080fc <__retarget_lock_init_recursive>:
 80080fc:	4770      	bx	lr

080080fe <__retarget_lock_acquire_recursive>:
 80080fe:	4770      	bx	lr

08008100 <__retarget_lock_release_recursive>:
 8008100:	4770      	bx	lr

08008102 <quorem>:
 8008102:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008106:	6903      	ldr	r3, [r0, #16]
 8008108:	690c      	ldr	r4, [r1, #16]
 800810a:	42a3      	cmp	r3, r4
 800810c:	4607      	mov	r7, r0
 800810e:	db7e      	blt.n	800820e <quorem+0x10c>
 8008110:	3c01      	subs	r4, #1
 8008112:	f101 0814 	add.w	r8, r1, #20
 8008116:	00a3      	lsls	r3, r4, #2
 8008118:	f100 0514 	add.w	r5, r0, #20
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800812c:	3301      	adds	r3, #1
 800812e:	429a      	cmp	r2, r3
 8008130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008134:	fbb2 f6f3 	udiv	r6, r2, r3
 8008138:	d32e      	bcc.n	8008198 <quorem+0x96>
 800813a:	f04f 0a00 	mov.w	sl, #0
 800813e:	46c4      	mov	ip, r8
 8008140:	46ae      	mov	lr, r5
 8008142:	46d3      	mov	fp, sl
 8008144:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008148:	b298      	uxth	r0, r3
 800814a:	fb06 a000 	mla	r0, r6, r0, sl
 800814e:	0c02      	lsrs	r2, r0, #16
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	fb06 2303 	mla	r3, r6, r3, r2
 8008156:	f8de 2000 	ldr.w	r2, [lr]
 800815a:	b280      	uxth	r0, r0
 800815c:	b292      	uxth	r2, r2
 800815e:	1a12      	subs	r2, r2, r0
 8008160:	445a      	add	r2, fp
 8008162:	f8de 0000 	ldr.w	r0, [lr]
 8008166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800816a:	b29b      	uxth	r3, r3
 800816c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008170:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008174:	b292      	uxth	r2, r2
 8008176:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800817a:	45e1      	cmp	r9, ip
 800817c:	f84e 2b04 	str.w	r2, [lr], #4
 8008180:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008184:	d2de      	bcs.n	8008144 <quorem+0x42>
 8008186:	9b00      	ldr	r3, [sp, #0]
 8008188:	58eb      	ldr	r3, [r5, r3]
 800818a:	b92b      	cbnz	r3, 8008198 <quorem+0x96>
 800818c:	9b01      	ldr	r3, [sp, #4]
 800818e:	3b04      	subs	r3, #4
 8008190:	429d      	cmp	r5, r3
 8008192:	461a      	mov	r2, r3
 8008194:	d32f      	bcc.n	80081f6 <quorem+0xf4>
 8008196:	613c      	str	r4, [r7, #16]
 8008198:	4638      	mov	r0, r7
 800819a:	f001 fb1f 	bl	80097dc <__mcmp>
 800819e:	2800      	cmp	r0, #0
 80081a0:	db25      	blt.n	80081ee <quorem+0xec>
 80081a2:	4629      	mov	r1, r5
 80081a4:	2000      	movs	r0, #0
 80081a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80081aa:	f8d1 c000 	ldr.w	ip, [r1]
 80081ae:	fa1f fe82 	uxth.w	lr, r2
 80081b2:	fa1f f38c 	uxth.w	r3, ip
 80081b6:	eba3 030e 	sub.w	r3, r3, lr
 80081ba:	4403      	add	r3, r0
 80081bc:	0c12      	lsrs	r2, r2, #16
 80081be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081cc:	45c1      	cmp	r9, r8
 80081ce:	f841 3b04 	str.w	r3, [r1], #4
 80081d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081d6:	d2e6      	bcs.n	80081a6 <quorem+0xa4>
 80081d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081e0:	b922      	cbnz	r2, 80081ec <quorem+0xea>
 80081e2:	3b04      	subs	r3, #4
 80081e4:	429d      	cmp	r5, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	d30b      	bcc.n	8008202 <quorem+0x100>
 80081ea:	613c      	str	r4, [r7, #16]
 80081ec:	3601      	adds	r6, #1
 80081ee:	4630      	mov	r0, r6
 80081f0:	b003      	add	sp, #12
 80081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f6:	6812      	ldr	r2, [r2, #0]
 80081f8:	3b04      	subs	r3, #4
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	d1cb      	bne.n	8008196 <quorem+0x94>
 80081fe:	3c01      	subs	r4, #1
 8008200:	e7c6      	b.n	8008190 <quorem+0x8e>
 8008202:	6812      	ldr	r2, [r2, #0]
 8008204:	3b04      	subs	r3, #4
 8008206:	2a00      	cmp	r2, #0
 8008208:	d1ef      	bne.n	80081ea <quorem+0xe8>
 800820a:	3c01      	subs	r4, #1
 800820c:	e7ea      	b.n	80081e4 <quorem+0xe2>
 800820e:	2000      	movs	r0, #0
 8008210:	e7ee      	b.n	80081f0 <quorem+0xee>
 8008212:	0000      	movs	r0, r0
 8008214:	0000      	movs	r0, r0
	...

08008218 <_dtoa_r>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	69c7      	ldr	r7, [r0, #28]
 800821e:	b099      	sub	sp, #100	@ 0x64
 8008220:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008224:	ec55 4b10 	vmov	r4, r5, d0
 8008228:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800822a:	9109      	str	r1, [sp, #36]	@ 0x24
 800822c:	4683      	mov	fp, r0
 800822e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008230:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008232:	b97f      	cbnz	r7, 8008254 <_dtoa_r+0x3c>
 8008234:	2010      	movs	r0, #16
 8008236:	f000 fef5 	bl	8009024 <malloc>
 800823a:	4602      	mov	r2, r0
 800823c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008240:	b920      	cbnz	r0, 800824c <_dtoa_r+0x34>
 8008242:	4ba7      	ldr	r3, [pc, #668]	@ (80084e0 <_dtoa_r+0x2c8>)
 8008244:	21ef      	movs	r1, #239	@ 0xef
 8008246:	48a7      	ldr	r0, [pc, #668]	@ (80084e4 <_dtoa_r+0x2cc>)
 8008248:	f001 fd90 	bl	8009d6c <__assert_func>
 800824c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008250:	6007      	str	r7, [r0, #0]
 8008252:	60c7      	str	r7, [r0, #12]
 8008254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008258:	6819      	ldr	r1, [r3, #0]
 800825a:	b159      	cbz	r1, 8008274 <_dtoa_r+0x5c>
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	604a      	str	r2, [r1, #4]
 8008260:	2301      	movs	r3, #1
 8008262:	4093      	lsls	r3, r2
 8008264:	608b      	str	r3, [r1, #8]
 8008266:	4658      	mov	r0, fp
 8008268:	f001 f87e 	bl	8009368 <_Bfree>
 800826c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	1e2b      	subs	r3, r5, #0
 8008276:	bfb9      	ittee	lt
 8008278:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800827c:	9303      	strlt	r3, [sp, #12]
 800827e:	2300      	movge	r3, #0
 8008280:	6033      	strge	r3, [r6, #0]
 8008282:	9f03      	ldr	r7, [sp, #12]
 8008284:	4b98      	ldr	r3, [pc, #608]	@ (80084e8 <_dtoa_r+0x2d0>)
 8008286:	bfbc      	itt	lt
 8008288:	2201      	movlt	r2, #1
 800828a:	6032      	strlt	r2, [r6, #0]
 800828c:	43bb      	bics	r3, r7
 800828e:	d112      	bne.n	80082b6 <_dtoa_r+0x9e>
 8008290:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008292:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800829c:	4323      	orrs	r3, r4
 800829e:	f000 854d 	beq.w	8008d3c <_dtoa_r+0xb24>
 80082a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80084fc <_dtoa_r+0x2e4>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 854f 	beq.w	8008d4c <_dtoa_r+0xb34>
 80082ae:	f10a 0303 	add.w	r3, sl, #3
 80082b2:	f000 bd49 	b.w	8008d48 <_dtoa_r+0xb30>
 80082b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082ba:	2200      	movs	r2, #0
 80082bc:	ec51 0b17 	vmov	r0, r1, d7
 80082c0:	2300      	movs	r3, #0
 80082c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80082c6:	f7f8 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 80082ca:	4680      	mov	r8, r0
 80082cc:	b158      	cbz	r0, 80082e6 <_dtoa_r+0xce>
 80082ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082d0:	2301      	movs	r3, #1
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082d6:	b113      	cbz	r3, 80082de <_dtoa_r+0xc6>
 80082d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082da:	4b84      	ldr	r3, [pc, #528]	@ (80084ec <_dtoa_r+0x2d4>)
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008500 <_dtoa_r+0x2e8>
 80082e2:	f000 bd33 	b.w	8008d4c <_dtoa_r+0xb34>
 80082e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082ea:	aa16      	add	r2, sp, #88	@ 0x58
 80082ec:	a917      	add	r1, sp, #92	@ 0x5c
 80082ee:	4658      	mov	r0, fp
 80082f0:	f001 fb24 	bl	800993c <__d2b>
 80082f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80082f8:	4681      	mov	r9, r0
 80082fa:	2e00      	cmp	r6, #0
 80082fc:	d077      	beq.n	80083ee <_dtoa_r+0x1d6>
 80082fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008300:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800830c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008310:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008314:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008318:	4619      	mov	r1, r3
 800831a:	2200      	movs	r2, #0
 800831c:	4b74      	ldr	r3, [pc, #464]	@ (80084f0 <_dtoa_r+0x2d8>)
 800831e:	f7f7 ffb3 	bl	8000288 <__aeabi_dsub>
 8008322:	a369      	add	r3, pc, #420	@ (adr r3, 80084c8 <_dtoa_r+0x2b0>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f8 f966 	bl	80005f8 <__aeabi_dmul>
 800832c:	a368      	add	r3, pc, #416	@ (adr r3, 80084d0 <_dtoa_r+0x2b8>)
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	f7f7 ffab 	bl	800028c <__adddf3>
 8008336:	4604      	mov	r4, r0
 8008338:	4630      	mov	r0, r6
 800833a:	460d      	mov	r5, r1
 800833c:	f7f8 f8f2 	bl	8000524 <__aeabi_i2d>
 8008340:	a365      	add	r3, pc, #404	@ (adr r3, 80084d8 <_dtoa_r+0x2c0>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	f7f8 f957 	bl	80005f8 <__aeabi_dmul>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	4620      	mov	r0, r4
 8008350:	4629      	mov	r1, r5
 8008352:	f7f7 ff9b 	bl	800028c <__adddf3>
 8008356:	4604      	mov	r4, r0
 8008358:	460d      	mov	r5, r1
 800835a:	f7f8 fbfd 	bl	8000b58 <__aeabi_d2iz>
 800835e:	2200      	movs	r2, #0
 8008360:	4607      	mov	r7, r0
 8008362:	2300      	movs	r3, #0
 8008364:	4620      	mov	r0, r4
 8008366:	4629      	mov	r1, r5
 8008368:	f7f8 fbb8 	bl	8000adc <__aeabi_dcmplt>
 800836c:	b140      	cbz	r0, 8008380 <_dtoa_r+0x168>
 800836e:	4638      	mov	r0, r7
 8008370:	f7f8 f8d8 	bl	8000524 <__aeabi_i2d>
 8008374:	4622      	mov	r2, r4
 8008376:	462b      	mov	r3, r5
 8008378:	f7f8 fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800837c:	b900      	cbnz	r0, 8008380 <_dtoa_r+0x168>
 800837e:	3f01      	subs	r7, #1
 8008380:	2f16      	cmp	r7, #22
 8008382:	d851      	bhi.n	8008428 <_dtoa_r+0x210>
 8008384:	4b5b      	ldr	r3, [pc, #364]	@ (80084f4 <_dtoa_r+0x2dc>)
 8008386:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008392:	f7f8 fba3 	bl	8000adc <__aeabi_dcmplt>
 8008396:	2800      	cmp	r0, #0
 8008398:	d048      	beq.n	800842c <_dtoa_r+0x214>
 800839a:	3f01      	subs	r7, #1
 800839c:	2300      	movs	r3, #0
 800839e:	9312      	str	r3, [sp, #72]	@ 0x48
 80083a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083a2:	1b9b      	subs	r3, r3, r6
 80083a4:	1e5a      	subs	r2, r3, #1
 80083a6:	bf44      	itt	mi
 80083a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80083ac:	2300      	movmi	r3, #0
 80083ae:	9208      	str	r2, [sp, #32]
 80083b0:	bf54      	ite	pl
 80083b2:	f04f 0800 	movpl.w	r8, #0
 80083b6:	9308      	strmi	r3, [sp, #32]
 80083b8:	2f00      	cmp	r7, #0
 80083ba:	db39      	blt.n	8008430 <_dtoa_r+0x218>
 80083bc:	9b08      	ldr	r3, [sp, #32]
 80083be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80083c0:	443b      	add	r3, r7
 80083c2:	9308      	str	r3, [sp, #32]
 80083c4:	2300      	movs	r3, #0
 80083c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ca:	2b09      	cmp	r3, #9
 80083cc:	d864      	bhi.n	8008498 <_dtoa_r+0x280>
 80083ce:	2b05      	cmp	r3, #5
 80083d0:	bfc4      	itt	gt
 80083d2:	3b04      	subgt	r3, #4
 80083d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80083d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d8:	f1a3 0302 	sub.w	r3, r3, #2
 80083dc:	bfcc      	ite	gt
 80083de:	2400      	movgt	r4, #0
 80083e0:	2401      	movle	r4, #1
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d863      	bhi.n	80084ae <_dtoa_r+0x296>
 80083e6:	e8df f003 	tbb	[pc, r3]
 80083ea:	372a      	.short	0x372a
 80083ec:	5535      	.short	0x5535
 80083ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80083f2:	441e      	add	r6, r3
 80083f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	bfc1      	itttt	gt
 80083fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008400:	409f      	lslgt	r7, r3
 8008402:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008406:	fa24 f303 	lsrgt.w	r3, r4, r3
 800840a:	bfd6      	itet	le
 800840c:	f1c3 0320 	rsble	r3, r3, #32
 8008410:	ea47 0003 	orrgt.w	r0, r7, r3
 8008414:	fa04 f003 	lslle.w	r0, r4, r3
 8008418:	f7f8 f874 	bl	8000504 <__aeabi_ui2d>
 800841c:	2201      	movs	r2, #1
 800841e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008422:	3e01      	subs	r6, #1
 8008424:	9214      	str	r2, [sp, #80]	@ 0x50
 8008426:	e777      	b.n	8008318 <_dtoa_r+0x100>
 8008428:	2301      	movs	r3, #1
 800842a:	e7b8      	b.n	800839e <_dtoa_r+0x186>
 800842c:	9012      	str	r0, [sp, #72]	@ 0x48
 800842e:	e7b7      	b.n	80083a0 <_dtoa_r+0x188>
 8008430:	427b      	negs	r3, r7
 8008432:	930a      	str	r3, [sp, #40]	@ 0x28
 8008434:	2300      	movs	r3, #0
 8008436:	eba8 0807 	sub.w	r8, r8, r7
 800843a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800843c:	e7c4      	b.n	80083c8 <_dtoa_r+0x1b0>
 800843e:	2300      	movs	r3, #0
 8008440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008444:	2b00      	cmp	r3, #0
 8008446:	dc35      	bgt.n	80084b4 <_dtoa_r+0x29c>
 8008448:	2301      	movs	r3, #1
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	9307      	str	r3, [sp, #28]
 800844e:	461a      	mov	r2, r3
 8008450:	920e      	str	r2, [sp, #56]	@ 0x38
 8008452:	e00b      	b.n	800846c <_dtoa_r+0x254>
 8008454:	2301      	movs	r3, #1
 8008456:	e7f3      	b.n	8008440 <_dtoa_r+0x228>
 8008458:	2300      	movs	r3, #0
 800845a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800845c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800845e:	18fb      	adds	r3, r7, r3
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	2b01      	cmp	r3, #1
 8008466:	9307      	str	r3, [sp, #28]
 8008468:	bfb8      	it	lt
 800846a:	2301      	movlt	r3, #1
 800846c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008470:	2100      	movs	r1, #0
 8008472:	2204      	movs	r2, #4
 8008474:	f102 0514 	add.w	r5, r2, #20
 8008478:	429d      	cmp	r5, r3
 800847a:	d91f      	bls.n	80084bc <_dtoa_r+0x2a4>
 800847c:	6041      	str	r1, [r0, #4]
 800847e:	4658      	mov	r0, fp
 8008480:	f000 ff32 	bl	80092e8 <_Balloc>
 8008484:	4682      	mov	sl, r0
 8008486:	2800      	cmp	r0, #0
 8008488:	d13c      	bne.n	8008504 <_dtoa_r+0x2ec>
 800848a:	4b1b      	ldr	r3, [pc, #108]	@ (80084f8 <_dtoa_r+0x2e0>)
 800848c:	4602      	mov	r2, r0
 800848e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008492:	e6d8      	b.n	8008246 <_dtoa_r+0x2e>
 8008494:	2301      	movs	r3, #1
 8008496:	e7e0      	b.n	800845a <_dtoa_r+0x242>
 8008498:	2401      	movs	r4, #1
 800849a:	2300      	movs	r3, #0
 800849c:	9309      	str	r3, [sp, #36]	@ 0x24
 800849e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	9307      	str	r3, [sp, #28]
 80084a8:	2200      	movs	r2, #0
 80084aa:	2312      	movs	r3, #18
 80084ac:	e7d0      	b.n	8008450 <_dtoa_r+0x238>
 80084ae:	2301      	movs	r3, #1
 80084b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084b2:	e7f5      	b.n	80084a0 <_dtoa_r+0x288>
 80084b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	9307      	str	r3, [sp, #28]
 80084ba:	e7d7      	b.n	800846c <_dtoa_r+0x254>
 80084bc:	3101      	adds	r1, #1
 80084be:	0052      	lsls	r2, r2, #1
 80084c0:	e7d8      	b.n	8008474 <_dtoa_r+0x25c>
 80084c2:	bf00      	nop
 80084c4:	f3af 8000 	nop.w
 80084c8:	636f4361 	.word	0x636f4361
 80084cc:	3fd287a7 	.word	0x3fd287a7
 80084d0:	8b60c8b3 	.word	0x8b60c8b3
 80084d4:	3fc68a28 	.word	0x3fc68a28
 80084d8:	509f79fb 	.word	0x509f79fb
 80084dc:	3fd34413 	.word	0x3fd34413
 80084e0:	0800a349 	.word	0x0800a349
 80084e4:	0800a360 	.word	0x0800a360
 80084e8:	7ff00000 	.word	0x7ff00000
 80084ec:	0800a319 	.word	0x0800a319
 80084f0:	3ff80000 	.word	0x3ff80000
 80084f4:	0800a468 	.word	0x0800a468
 80084f8:	0800a3b8 	.word	0x0800a3b8
 80084fc:	0800a345 	.word	0x0800a345
 8008500:	0800a318 	.word	0x0800a318
 8008504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008508:	6018      	str	r0, [r3, #0]
 800850a:	9b07      	ldr	r3, [sp, #28]
 800850c:	2b0e      	cmp	r3, #14
 800850e:	f200 80a4 	bhi.w	800865a <_dtoa_r+0x442>
 8008512:	2c00      	cmp	r4, #0
 8008514:	f000 80a1 	beq.w	800865a <_dtoa_r+0x442>
 8008518:	2f00      	cmp	r7, #0
 800851a:	dd33      	ble.n	8008584 <_dtoa_r+0x36c>
 800851c:	4bad      	ldr	r3, [pc, #692]	@ (80087d4 <_dtoa_r+0x5bc>)
 800851e:	f007 020f 	and.w	r2, r7, #15
 8008522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008526:	ed93 7b00 	vldr	d7, [r3]
 800852a:	05f8      	lsls	r0, r7, #23
 800852c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008530:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008534:	d516      	bpl.n	8008564 <_dtoa_r+0x34c>
 8008536:	4ba8      	ldr	r3, [pc, #672]	@ (80087d8 <_dtoa_r+0x5c0>)
 8008538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800853c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008540:	f7f8 f984 	bl	800084c <__aeabi_ddiv>
 8008544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008548:	f004 040f 	and.w	r4, r4, #15
 800854c:	2603      	movs	r6, #3
 800854e:	4da2      	ldr	r5, [pc, #648]	@ (80087d8 <_dtoa_r+0x5c0>)
 8008550:	b954      	cbnz	r4, 8008568 <_dtoa_r+0x350>
 8008552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800855a:	f7f8 f977 	bl	800084c <__aeabi_ddiv>
 800855e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008562:	e028      	b.n	80085b6 <_dtoa_r+0x39e>
 8008564:	2602      	movs	r6, #2
 8008566:	e7f2      	b.n	800854e <_dtoa_r+0x336>
 8008568:	07e1      	lsls	r1, r4, #31
 800856a:	d508      	bpl.n	800857e <_dtoa_r+0x366>
 800856c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008570:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008574:	f7f8 f840 	bl	80005f8 <__aeabi_dmul>
 8008578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800857c:	3601      	adds	r6, #1
 800857e:	1064      	asrs	r4, r4, #1
 8008580:	3508      	adds	r5, #8
 8008582:	e7e5      	b.n	8008550 <_dtoa_r+0x338>
 8008584:	f000 80d2 	beq.w	800872c <_dtoa_r+0x514>
 8008588:	427c      	negs	r4, r7
 800858a:	4b92      	ldr	r3, [pc, #584]	@ (80087d4 <_dtoa_r+0x5bc>)
 800858c:	4d92      	ldr	r5, [pc, #584]	@ (80087d8 <_dtoa_r+0x5c0>)
 800858e:	f004 020f 	and.w	r2, r4, #15
 8008592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800859e:	f7f8 f82b 	bl	80005f8 <__aeabi_dmul>
 80085a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085a6:	1124      	asrs	r4, r4, #4
 80085a8:	2300      	movs	r3, #0
 80085aa:	2602      	movs	r6, #2
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	f040 80b2 	bne.w	8008716 <_dtoa_r+0x4fe>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1d3      	bne.n	800855e <_dtoa_r+0x346>
 80085b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80b7 	beq.w	8008730 <_dtoa_r+0x518>
 80085c2:	4b86      	ldr	r3, [pc, #536]	@ (80087dc <_dtoa_r+0x5c4>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	4620      	mov	r0, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	f7f8 fa87 	bl	8000adc <__aeabi_dcmplt>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f000 80ae 	beq.w	8008730 <_dtoa_r+0x518>
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 80aa 	beq.w	8008730 <_dtoa_r+0x518>
 80085dc:	9b00      	ldr	r3, [sp, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	dd37      	ble.n	8008652 <_dtoa_r+0x43a>
 80085e2:	1e7b      	subs	r3, r7, #1
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	4620      	mov	r0, r4
 80085e8:	4b7d      	ldr	r3, [pc, #500]	@ (80087e0 <_dtoa_r+0x5c8>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7f8 f803 	bl	80005f8 <__aeabi_dmul>
 80085f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f6:	9c00      	ldr	r4, [sp, #0]
 80085f8:	3601      	adds	r6, #1
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7f7 ff92 	bl	8000524 <__aeabi_i2d>
 8008600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008604:	f7f7 fff8 	bl	80005f8 <__aeabi_dmul>
 8008608:	4b76      	ldr	r3, [pc, #472]	@ (80087e4 <_dtoa_r+0x5cc>)
 800860a:	2200      	movs	r2, #0
 800860c:	f7f7 fe3e 	bl	800028c <__adddf3>
 8008610:	4605      	mov	r5, r0
 8008612:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008616:	2c00      	cmp	r4, #0
 8008618:	f040 808d 	bne.w	8008736 <_dtoa_r+0x51e>
 800861c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008620:	4b71      	ldr	r3, [pc, #452]	@ (80087e8 <_dtoa_r+0x5d0>)
 8008622:	2200      	movs	r2, #0
 8008624:	f7f7 fe30 	bl	8000288 <__aeabi_dsub>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008630:	462a      	mov	r2, r5
 8008632:	4633      	mov	r3, r6
 8008634:	f7f8 fa70 	bl	8000b18 <__aeabi_dcmpgt>
 8008638:	2800      	cmp	r0, #0
 800863a:	f040 828b 	bne.w	8008b54 <_dtoa_r+0x93c>
 800863e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008642:	462a      	mov	r2, r5
 8008644:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008648:	f7f8 fa48 	bl	8000adc <__aeabi_dcmplt>
 800864c:	2800      	cmp	r0, #0
 800864e:	f040 8128 	bne.w	80088a2 <_dtoa_r+0x68a>
 8008652:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008656:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800865a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800865c:	2b00      	cmp	r3, #0
 800865e:	f2c0 815a 	blt.w	8008916 <_dtoa_r+0x6fe>
 8008662:	2f0e      	cmp	r7, #14
 8008664:	f300 8157 	bgt.w	8008916 <_dtoa_r+0x6fe>
 8008668:	4b5a      	ldr	r3, [pc, #360]	@ (80087d4 <_dtoa_r+0x5bc>)
 800866a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800866e:	ed93 7b00 	vldr	d7, [r3]
 8008672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008674:	2b00      	cmp	r3, #0
 8008676:	ed8d 7b00 	vstr	d7, [sp]
 800867a:	da03      	bge.n	8008684 <_dtoa_r+0x46c>
 800867c:	9b07      	ldr	r3, [sp, #28]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f340 8101 	ble.w	8008886 <_dtoa_r+0x66e>
 8008684:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008688:	4656      	mov	r6, sl
 800868a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	f7f8 f8db 	bl	800084c <__aeabi_ddiv>
 8008696:	f7f8 fa5f 	bl	8000b58 <__aeabi_d2iz>
 800869a:	4680      	mov	r8, r0
 800869c:	f7f7 ff42 	bl	8000524 <__aeabi_i2d>
 80086a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086a4:	f7f7 ffa8 	bl	80005f8 <__aeabi_dmul>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4620      	mov	r0, r4
 80086ae:	4629      	mov	r1, r5
 80086b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086b4:	f7f7 fde8 	bl	8000288 <__aeabi_dsub>
 80086b8:	f806 4b01 	strb.w	r4, [r6], #1
 80086bc:	9d07      	ldr	r5, [sp, #28]
 80086be:	eba6 040a 	sub.w	r4, r6, sl
 80086c2:	42a5      	cmp	r5, r4
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	f040 8117 	bne.w	80088fa <_dtoa_r+0x6e2>
 80086cc:	f7f7 fdde 	bl	800028c <__adddf3>
 80086d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086d4:	4604      	mov	r4, r0
 80086d6:	460d      	mov	r5, r1
 80086d8:	f7f8 fa1e 	bl	8000b18 <__aeabi_dcmpgt>
 80086dc:	2800      	cmp	r0, #0
 80086de:	f040 80f9 	bne.w	80088d4 <_dtoa_r+0x6bc>
 80086e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086e6:	4620      	mov	r0, r4
 80086e8:	4629      	mov	r1, r5
 80086ea:	f7f8 f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80086ee:	b118      	cbz	r0, 80086f8 <_dtoa_r+0x4e0>
 80086f0:	f018 0f01 	tst.w	r8, #1
 80086f4:	f040 80ee 	bne.w	80088d4 <_dtoa_r+0x6bc>
 80086f8:	4649      	mov	r1, r9
 80086fa:	4658      	mov	r0, fp
 80086fc:	f000 fe34 	bl	8009368 <_Bfree>
 8008700:	2300      	movs	r3, #0
 8008702:	7033      	strb	r3, [r6, #0]
 8008704:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008706:	3701      	adds	r7, #1
 8008708:	601f      	str	r7, [r3, #0]
 800870a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 831d 	beq.w	8008d4c <_dtoa_r+0xb34>
 8008712:	601e      	str	r6, [r3, #0]
 8008714:	e31a      	b.n	8008d4c <_dtoa_r+0xb34>
 8008716:	07e2      	lsls	r2, r4, #31
 8008718:	d505      	bpl.n	8008726 <_dtoa_r+0x50e>
 800871a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800871e:	f7f7 ff6b 	bl	80005f8 <__aeabi_dmul>
 8008722:	3601      	adds	r6, #1
 8008724:	2301      	movs	r3, #1
 8008726:	1064      	asrs	r4, r4, #1
 8008728:	3508      	adds	r5, #8
 800872a:	e73f      	b.n	80085ac <_dtoa_r+0x394>
 800872c:	2602      	movs	r6, #2
 800872e:	e742      	b.n	80085b6 <_dtoa_r+0x39e>
 8008730:	9c07      	ldr	r4, [sp, #28]
 8008732:	9704      	str	r7, [sp, #16]
 8008734:	e761      	b.n	80085fa <_dtoa_r+0x3e2>
 8008736:	4b27      	ldr	r3, [pc, #156]	@ (80087d4 <_dtoa_r+0x5bc>)
 8008738:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800873a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800873e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008742:	4454      	add	r4, sl
 8008744:	2900      	cmp	r1, #0
 8008746:	d053      	beq.n	80087f0 <_dtoa_r+0x5d8>
 8008748:	4928      	ldr	r1, [pc, #160]	@ (80087ec <_dtoa_r+0x5d4>)
 800874a:	2000      	movs	r0, #0
 800874c:	f7f8 f87e 	bl	800084c <__aeabi_ddiv>
 8008750:	4633      	mov	r3, r6
 8008752:	462a      	mov	r2, r5
 8008754:	f7f7 fd98 	bl	8000288 <__aeabi_dsub>
 8008758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800875c:	4656      	mov	r6, sl
 800875e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008762:	f7f8 f9f9 	bl	8000b58 <__aeabi_d2iz>
 8008766:	4605      	mov	r5, r0
 8008768:	f7f7 fedc 	bl	8000524 <__aeabi_i2d>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008774:	f7f7 fd88 	bl	8000288 <__aeabi_dsub>
 8008778:	3530      	adds	r5, #48	@ 0x30
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008782:	f806 5b01 	strb.w	r5, [r6], #1
 8008786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800878a:	f7f8 f9a7 	bl	8000adc <__aeabi_dcmplt>
 800878e:	2800      	cmp	r0, #0
 8008790:	d171      	bne.n	8008876 <_dtoa_r+0x65e>
 8008792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008796:	4911      	ldr	r1, [pc, #68]	@ (80087dc <_dtoa_r+0x5c4>)
 8008798:	2000      	movs	r0, #0
 800879a:	f7f7 fd75 	bl	8000288 <__aeabi_dsub>
 800879e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087a2:	f7f8 f99b 	bl	8000adc <__aeabi_dcmplt>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f040 8095 	bne.w	80088d6 <_dtoa_r+0x6be>
 80087ac:	42a6      	cmp	r6, r4
 80087ae:	f43f af50 	beq.w	8008652 <_dtoa_r+0x43a>
 80087b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087b6:	4b0a      	ldr	r3, [pc, #40]	@ (80087e0 <_dtoa_r+0x5c8>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	f7f7 ff1d 	bl	80005f8 <__aeabi_dmul>
 80087be:	4b08      	ldr	r3, [pc, #32]	@ (80087e0 <_dtoa_r+0x5c8>)
 80087c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087c4:	2200      	movs	r2, #0
 80087c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ca:	f7f7 ff15 	bl	80005f8 <__aeabi_dmul>
 80087ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087d2:	e7c4      	b.n	800875e <_dtoa_r+0x546>
 80087d4:	0800a468 	.word	0x0800a468
 80087d8:	0800a440 	.word	0x0800a440
 80087dc:	3ff00000 	.word	0x3ff00000
 80087e0:	40240000 	.word	0x40240000
 80087e4:	401c0000 	.word	0x401c0000
 80087e8:	40140000 	.word	0x40140000
 80087ec:	3fe00000 	.word	0x3fe00000
 80087f0:	4631      	mov	r1, r6
 80087f2:	4628      	mov	r0, r5
 80087f4:	f7f7 ff00 	bl	80005f8 <__aeabi_dmul>
 80087f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80087fe:	4656      	mov	r6, sl
 8008800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008804:	f7f8 f9a8 	bl	8000b58 <__aeabi_d2iz>
 8008808:	4605      	mov	r5, r0
 800880a:	f7f7 fe8b 	bl	8000524 <__aeabi_i2d>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008816:	f7f7 fd37 	bl	8000288 <__aeabi_dsub>
 800881a:	3530      	adds	r5, #48	@ 0x30
 800881c:	f806 5b01 	strb.w	r5, [r6], #1
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	42a6      	cmp	r6, r4
 8008826:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	d124      	bne.n	800887a <_dtoa_r+0x662>
 8008830:	4bac      	ldr	r3, [pc, #688]	@ (8008ae4 <_dtoa_r+0x8cc>)
 8008832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008836:	f7f7 fd29 	bl	800028c <__adddf3>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008842:	f7f8 f969 	bl	8000b18 <__aeabi_dcmpgt>
 8008846:	2800      	cmp	r0, #0
 8008848:	d145      	bne.n	80088d6 <_dtoa_r+0x6be>
 800884a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800884e:	49a5      	ldr	r1, [pc, #660]	@ (8008ae4 <_dtoa_r+0x8cc>)
 8008850:	2000      	movs	r0, #0
 8008852:	f7f7 fd19 	bl	8000288 <__aeabi_dsub>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800885e:	f7f8 f93d 	bl	8000adc <__aeabi_dcmplt>
 8008862:	2800      	cmp	r0, #0
 8008864:	f43f aef5 	beq.w	8008652 <_dtoa_r+0x43a>
 8008868:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800886a:	1e73      	subs	r3, r6, #1
 800886c:	9315      	str	r3, [sp, #84]	@ 0x54
 800886e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008872:	2b30      	cmp	r3, #48	@ 0x30
 8008874:	d0f8      	beq.n	8008868 <_dtoa_r+0x650>
 8008876:	9f04      	ldr	r7, [sp, #16]
 8008878:	e73e      	b.n	80086f8 <_dtoa_r+0x4e0>
 800887a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ae8 <_dtoa_r+0x8d0>)
 800887c:	f7f7 febc 	bl	80005f8 <__aeabi_dmul>
 8008880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008884:	e7bc      	b.n	8008800 <_dtoa_r+0x5e8>
 8008886:	d10c      	bne.n	80088a2 <_dtoa_r+0x68a>
 8008888:	4b98      	ldr	r3, [pc, #608]	@ (8008aec <_dtoa_r+0x8d4>)
 800888a:	2200      	movs	r2, #0
 800888c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008890:	f7f7 feb2 	bl	80005f8 <__aeabi_dmul>
 8008894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008898:	f7f8 f934 	bl	8000b04 <__aeabi_dcmpge>
 800889c:	2800      	cmp	r0, #0
 800889e:	f000 8157 	beq.w	8008b50 <_dtoa_r+0x938>
 80088a2:	2400      	movs	r4, #0
 80088a4:	4625      	mov	r5, r4
 80088a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088a8:	43db      	mvns	r3, r3
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	4656      	mov	r6, sl
 80088ae:	2700      	movs	r7, #0
 80088b0:	4621      	mov	r1, r4
 80088b2:	4658      	mov	r0, fp
 80088b4:	f000 fd58 	bl	8009368 <_Bfree>
 80088b8:	2d00      	cmp	r5, #0
 80088ba:	d0dc      	beq.n	8008876 <_dtoa_r+0x65e>
 80088bc:	b12f      	cbz	r7, 80088ca <_dtoa_r+0x6b2>
 80088be:	42af      	cmp	r7, r5
 80088c0:	d003      	beq.n	80088ca <_dtoa_r+0x6b2>
 80088c2:	4639      	mov	r1, r7
 80088c4:	4658      	mov	r0, fp
 80088c6:	f000 fd4f 	bl	8009368 <_Bfree>
 80088ca:	4629      	mov	r1, r5
 80088cc:	4658      	mov	r0, fp
 80088ce:	f000 fd4b 	bl	8009368 <_Bfree>
 80088d2:	e7d0      	b.n	8008876 <_dtoa_r+0x65e>
 80088d4:	9704      	str	r7, [sp, #16]
 80088d6:	4633      	mov	r3, r6
 80088d8:	461e      	mov	r6, r3
 80088da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088de:	2a39      	cmp	r2, #57	@ 0x39
 80088e0:	d107      	bne.n	80088f2 <_dtoa_r+0x6da>
 80088e2:	459a      	cmp	sl, r3
 80088e4:	d1f8      	bne.n	80088d8 <_dtoa_r+0x6c0>
 80088e6:	9a04      	ldr	r2, [sp, #16]
 80088e8:	3201      	adds	r2, #1
 80088ea:	9204      	str	r2, [sp, #16]
 80088ec:	2230      	movs	r2, #48	@ 0x30
 80088ee:	f88a 2000 	strb.w	r2, [sl]
 80088f2:	781a      	ldrb	r2, [r3, #0]
 80088f4:	3201      	adds	r2, #1
 80088f6:	701a      	strb	r2, [r3, #0]
 80088f8:	e7bd      	b.n	8008876 <_dtoa_r+0x65e>
 80088fa:	4b7b      	ldr	r3, [pc, #492]	@ (8008ae8 <_dtoa_r+0x8d0>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	f7f7 fe7b 	bl	80005f8 <__aeabi_dmul>
 8008902:	2200      	movs	r2, #0
 8008904:	2300      	movs	r3, #0
 8008906:	4604      	mov	r4, r0
 8008908:	460d      	mov	r5, r1
 800890a:	f7f8 f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800890e:	2800      	cmp	r0, #0
 8008910:	f43f aebb 	beq.w	800868a <_dtoa_r+0x472>
 8008914:	e6f0      	b.n	80086f8 <_dtoa_r+0x4e0>
 8008916:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008918:	2a00      	cmp	r2, #0
 800891a:	f000 80db 	beq.w	8008ad4 <_dtoa_r+0x8bc>
 800891e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008920:	2a01      	cmp	r2, #1
 8008922:	f300 80bf 	bgt.w	8008aa4 <_dtoa_r+0x88c>
 8008926:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008928:	2a00      	cmp	r2, #0
 800892a:	f000 80b7 	beq.w	8008a9c <_dtoa_r+0x884>
 800892e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008932:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008934:	4646      	mov	r6, r8
 8008936:	9a08      	ldr	r2, [sp, #32]
 8008938:	2101      	movs	r1, #1
 800893a:	441a      	add	r2, r3
 800893c:	4658      	mov	r0, fp
 800893e:	4498      	add	r8, r3
 8008940:	9208      	str	r2, [sp, #32]
 8008942:	f000 fdc5 	bl	80094d0 <__i2b>
 8008946:	4605      	mov	r5, r0
 8008948:	b15e      	cbz	r6, 8008962 <_dtoa_r+0x74a>
 800894a:	9b08      	ldr	r3, [sp, #32]
 800894c:	2b00      	cmp	r3, #0
 800894e:	dd08      	ble.n	8008962 <_dtoa_r+0x74a>
 8008950:	42b3      	cmp	r3, r6
 8008952:	9a08      	ldr	r2, [sp, #32]
 8008954:	bfa8      	it	ge
 8008956:	4633      	movge	r3, r6
 8008958:	eba8 0803 	sub.w	r8, r8, r3
 800895c:	1af6      	subs	r6, r6, r3
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	9308      	str	r3, [sp, #32]
 8008962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008964:	b1f3      	cbz	r3, 80089a4 <_dtoa_r+0x78c>
 8008966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 80b7 	beq.w	8008adc <_dtoa_r+0x8c4>
 800896e:	b18c      	cbz	r4, 8008994 <_dtoa_r+0x77c>
 8008970:	4629      	mov	r1, r5
 8008972:	4622      	mov	r2, r4
 8008974:	4658      	mov	r0, fp
 8008976:	f000 fe6b 	bl	8009650 <__pow5mult>
 800897a:	464a      	mov	r2, r9
 800897c:	4601      	mov	r1, r0
 800897e:	4605      	mov	r5, r0
 8008980:	4658      	mov	r0, fp
 8008982:	f000 fdbb 	bl	80094fc <__multiply>
 8008986:	4649      	mov	r1, r9
 8008988:	9004      	str	r0, [sp, #16]
 800898a:	4658      	mov	r0, fp
 800898c:	f000 fcec 	bl	8009368 <_Bfree>
 8008990:	9b04      	ldr	r3, [sp, #16]
 8008992:	4699      	mov	r9, r3
 8008994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008996:	1b1a      	subs	r2, r3, r4
 8008998:	d004      	beq.n	80089a4 <_dtoa_r+0x78c>
 800899a:	4649      	mov	r1, r9
 800899c:	4658      	mov	r0, fp
 800899e:	f000 fe57 	bl	8009650 <__pow5mult>
 80089a2:	4681      	mov	r9, r0
 80089a4:	2101      	movs	r1, #1
 80089a6:	4658      	mov	r0, fp
 80089a8:	f000 fd92 	bl	80094d0 <__i2b>
 80089ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ae:	4604      	mov	r4, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 81cf 	beq.w	8008d54 <_dtoa_r+0xb3c>
 80089b6:	461a      	mov	r2, r3
 80089b8:	4601      	mov	r1, r0
 80089ba:	4658      	mov	r0, fp
 80089bc:	f000 fe48 	bl	8009650 <__pow5mult>
 80089c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	4604      	mov	r4, r0
 80089c6:	f300 8095 	bgt.w	8008af4 <_dtoa_r+0x8dc>
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f040 8087 	bne.w	8008ae0 <_dtoa_r+0x8c8>
 80089d2:	9b03      	ldr	r3, [sp, #12]
 80089d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f040 8089 	bne.w	8008af0 <_dtoa_r+0x8d8>
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089e4:	0d1b      	lsrs	r3, r3, #20
 80089e6:	051b      	lsls	r3, r3, #20
 80089e8:	b12b      	cbz	r3, 80089f6 <_dtoa_r+0x7de>
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	3301      	adds	r3, #1
 80089ee:	9308      	str	r3, [sp, #32]
 80089f0:	f108 0801 	add.w	r8, r8, #1
 80089f4:	2301      	movs	r3, #1
 80089f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 81b0 	beq.w	8008d60 <_dtoa_r+0xb48>
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a06:	6918      	ldr	r0, [r3, #16]
 8008a08:	f000 fd16 	bl	8009438 <__hi0bits>
 8008a0c:	f1c0 0020 	rsb	r0, r0, #32
 8008a10:	9b08      	ldr	r3, [sp, #32]
 8008a12:	4418      	add	r0, r3
 8008a14:	f010 001f 	ands.w	r0, r0, #31
 8008a18:	d077      	beq.n	8008b0a <_dtoa_r+0x8f2>
 8008a1a:	f1c0 0320 	rsb	r3, r0, #32
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	dd6b      	ble.n	8008afa <_dtoa_r+0x8e2>
 8008a22:	9b08      	ldr	r3, [sp, #32]
 8008a24:	f1c0 001c 	rsb	r0, r0, #28
 8008a28:	4403      	add	r3, r0
 8008a2a:	4480      	add	r8, r0
 8008a2c:	4406      	add	r6, r0
 8008a2e:	9308      	str	r3, [sp, #32]
 8008a30:	f1b8 0f00 	cmp.w	r8, #0
 8008a34:	dd05      	ble.n	8008a42 <_dtoa_r+0x82a>
 8008a36:	4649      	mov	r1, r9
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4658      	mov	r0, fp
 8008a3c:	f000 fe62 	bl	8009704 <__lshift>
 8008a40:	4681      	mov	r9, r0
 8008a42:	9b08      	ldr	r3, [sp, #32]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	dd05      	ble.n	8008a54 <_dtoa_r+0x83c>
 8008a48:	4621      	mov	r1, r4
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4658      	mov	r0, fp
 8008a4e:	f000 fe59 	bl	8009704 <__lshift>
 8008a52:	4604      	mov	r4, r0
 8008a54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d059      	beq.n	8008b0e <_dtoa_r+0x8f6>
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	4648      	mov	r0, r9
 8008a5e:	f000 febd 	bl	80097dc <__mcmp>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	da53      	bge.n	8008b0e <_dtoa_r+0x8f6>
 8008a66:	1e7b      	subs	r3, r7, #1
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	220a      	movs	r2, #10
 8008a70:	4658      	mov	r0, fp
 8008a72:	f000 fc9b 	bl	80093ac <__multadd>
 8008a76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a78:	4681      	mov	r9, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 8172 	beq.w	8008d64 <_dtoa_r+0xb4c>
 8008a80:	2300      	movs	r3, #0
 8008a82:	4629      	mov	r1, r5
 8008a84:	220a      	movs	r2, #10
 8008a86:	4658      	mov	r0, fp
 8008a88:	f000 fc90 	bl	80093ac <__multadd>
 8008a8c:	9b00      	ldr	r3, [sp, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	4605      	mov	r5, r0
 8008a92:	dc67      	bgt.n	8008b64 <_dtoa_r+0x94c>
 8008a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	dc41      	bgt.n	8008b1e <_dtoa_r+0x906>
 8008a9a:	e063      	b.n	8008b64 <_dtoa_r+0x94c>
 8008a9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008aa2:	e746      	b.n	8008932 <_dtoa_r+0x71a>
 8008aa4:	9b07      	ldr	r3, [sp, #28]
 8008aa6:	1e5c      	subs	r4, r3, #1
 8008aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	bfbf      	itttt	lt
 8008aae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ab0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008ab2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008ab4:	1ae3      	sublt	r3, r4, r3
 8008ab6:	bfb4      	ite	lt
 8008ab8:	18d2      	addlt	r2, r2, r3
 8008aba:	1b1c      	subge	r4, r3, r4
 8008abc:	9b07      	ldr	r3, [sp, #28]
 8008abe:	bfbc      	itt	lt
 8008ac0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008ac2:	2400      	movlt	r4, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfb5      	itete	lt
 8008ac8:	eba8 0603 	sublt.w	r6, r8, r3
 8008acc:	9b07      	ldrge	r3, [sp, #28]
 8008ace:	2300      	movlt	r3, #0
 8008ad0:	4646      	movge	r6, r8
 8008ad2:	e730      	b.n	8008936 <_dtoa_r+0x71e>
 8008ad4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ad6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ad8:	4646      	mov	r6, r8
 8008ada:	e735      	b.n	8008948 <_dtoa_r+0x730>
 8008adc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ade:	e75c      	b.n	800899a <_dtoa_r+0x782>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e788      	b.n	80089f6 <_dtoa_r+0x7de>
 8008ae4:	3fe00000 	.word	0x3fe00000
 8008ae8:	40240000 	.word	0x40240000
 8008aec:	40140000 	.word	0x40140000
 8008af0:	9b02      	ldr	r3, [sp, #8]
 8008af2:	e780      	b.n	80089f6 <_dtoa_r+0x7de>
 8008af4:	2300      	movs	r3, #0
 8008af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008af8:	e782      	b.n	8008a00 <_dtoa_r+0x7e8>
 8008afa:	d099      	beq.n	8008a30 <_dtoa_r+0x818>
 8008afc:	9a08      	ldr	r2, [sp, #32]
 8008afe:	331c      	adds	r3, #28
 8008b00:	441a      	add	r2, r3
 8008b02:	4498      	add	r8, r3
 8008b04:	441e      	add	r6, r3
 8008b06:	9208      	str	r2, [sp, #32]
 8008b08:	e792      	b.n	8008a30 <_dtoa_r+0x818>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	e7f6      	b.n	8008afc <_dtoa_r+0x8e4>
 8008b0e:	9b07      	ldr	r3, [sp, #28]
 8008b10:	9704      	str	r7, [sp, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	dc20      	bgt.n	8008b58 <_dtoa_r+0x940>
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	dd1e      	ble.n	8008b5c <_dtoa_r+0x944>
 8008b1e:	9b00      	ldr	r3, [sp, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f47f aec0 	bne.w	80088a6 <_dtoa_r+0x68e>
 8008b26:	4621      	mov	r1, r4
 8008b28:	2205      	movs	r2, #5
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	f000 fc3e 	bl	80093ac <__multadd>
 8008b30:	4601      	mov	r1, r0
 8008b32:	4604      	mov	r4, r0
 8008b34:	4648      	mov	r0, r9
 8008b36:	f000 fe51 	bl	80097dc <__mcmp>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	f77f aeb3 	ble.w	80088a6 <_dtoa_r+0x68e>
 8008b40:	4656      	mov	r6, sl
 8008b42:	2331      	movs	r3, #49	@ 0x31
 8008b44:	f806 3b01 	strb.w	r3, [r6], #1
 8008b48:	9b04      	ldr	r3, [sp, #16]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	e6ae      	b.n	80088ae <_dtoa_r+0x696>
 8008b50:	9c07      	ldr	r4, [sp, #28]
 8008b52:	9704      	str	r7, [sp, #16]
 8008b54:	4625      	mov	r5, r4
 8008b56:	e7f3      	b.n	8008b40 <_dtoa_r+0x928>
 8008b58:	9b07      	ldr	r3, [sp, #28]
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 8104 	beq.w	8008d6c <_dtoa_r+0xb54>
 8008b64:	2e00      	cmp	r6, #0
 8008b66:	dd05      	ble.n	8008b74 <_dtoa_r+0x95c>
 8008b68:	4629      	mov	r1, r5
 8008b6a:	4632      	mov	r2, r6
 8008b6c:	4658      	mov	r0, fp
 8008b6e:	f000 fdc9 	bl	8009704 <__lshift>
 8008b72:	4605      	mov	r5, r0
 8008b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d05a      	beq.n	8008c30 <_dtoa_r+0xa18>
 8008b7a:	6869      	ldr	r1, [r5, #4]
 8008b7c:	4658      	mov	r0, fp
 8008b7e:	f000 fbb3 	bl	80092e8 <_Balloc>
 8008b82:	4606      	mov	r6, r0
 8008b84:	b928      	cbnz	r0, 8008b92 <_dtoa_r+0x97a>
 8008b86:	4b84      	ldr	r3, [pc, #528]	@ (8008d98 <_dtoa_r+0xb80>)
 8008b88:	4602      	mov	r2, r0
 8008b8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b8e:	f7ff bb5a 	b.w	8008246 <_dtoa_r+0x2e>
 8008b92:	692a      	ldr	r2, [r5, #16]
 8008b94:	3202      	adds	r2, #2
 8008b96:	0092      	lsls	r2, r2, #2
 8008b98:	f105 010c 	add.w	r1, r5, #12
 8008b9c:	300c      	adds	r0, #12
 8008b9e:	f001 f8d7 	bl	8009d50 <memcpy>
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4658      	mov	r0, fp
 8008ba8:	f000 fdac 	bl	8009704 <__lshift>
 8008bac:	f10a 0301 	add.w	r3, sl, #1
 8008bb0:	9307      	str	r3, [sp, #28]
 8008bb2:	9b00      	ldr	r3, [sp, #0]
 8008bb4:	4453      	add	r3, sl
 8008bb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bb8:	9b02      	ldr	r3, [sp, #8]
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	462f      	mov	r7, r5
 8008bc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	4648      	mov	r0, r9
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	f7ff fa98 	bl	8008102 <quorem>
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	9002      	str	r0, [sp, #8]
 8008bd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bda:	4648      	mov	r0, r9
 8008bdc:	f000 fdfe 	bl	80097dc <__mcmp>
 8008be0:	462a      	mov	r2, r5
 8008be2:	9008      	str	r0, [sp, #32]
 8008be4:	4621      	mov	r1, r4
 8008be6:	4658      	mov	r0, fp
 8008be8:	f000 fe14 	bl	8009814 <__mdiff>
 8008bec:	68c2      	ldr	r2, [r0, #12]
 8008bee:	4606      	mov	r6, r0
 8008bf0:	bb02      	cbnz	r2, 8008c34 <_dtoa_r+0xa1c>
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	4648      	mov	r0, r9
 8008bf6:	f000 fdf1 	bl	80097dc <__mcmp>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4658      	mov	r0, fp
 8008c00:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c02:	f000 fbb1 	bl	8009368 <_Bfree>
 8008c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c0a:	9e07      	ldr	r6, [sp, #28]
 8008c0c:	ea43 0102 	orr.w	r1, r3, r2
 8008c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c12:	4319      	orrs	r1, r3
 8008c14:	d110      	bne.n	8008c38 <_dtoa_r+0xa20>
 8008c16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c1a:	d029      	beq.n	8008c70 <_dtoa_r+0xa58>
 8008c1c:	9b08      	ldr	r3, [sp, #32]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dd02      	ble.n	8008c28 <_dtoa_r+0xa10>
 8008c22:	9b02      	ldr	r3, [sp, #8]
 8008c24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c28:	9b00      	ldr	r3, [sp, #0]
 8008c2a:	f883 8000 	strb.w	r8, [r3]
 8008c2e:	e63f      	b.n	80088b0 <_dtoa_r+0x698>
 8008c30:	4628      	mov	r0, r5
 8008c32:	e7bb      	b.n	8008bac <_dtoa_r+0x994>
 8008c34:	2201      	movs	r2, #1
 8008c36:	e7e1      	b.n	8008bfc <_dtoa_r+0x9e4>
 8008c38:	9b08      	ldr	r3, [sp, #32]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	db04      	blt.n	8008c48 <_dtoa_r+0xa30>
 8008c3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c40:	430b      	orrs	r3, r1
 8008c42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c44:	430b      	orrs	r3, r1
 8008c46:	d120      	bne.n	8008c8a <_dtoa_r+0xa72>
 8008c48:	2a00      	cmp	r2, #0
 8008c4a:	dded      	ble.n	8008c28 <_dtoa_r+0xa10>
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4658      	mov	r0, fp
 8008c52:	f000 fd57 	bl	8009704 <__lshift>
 8008c56:	4621      	mov	r1, r4
 8008c58:	4681      	mov	r9, r0
 8008c5a:	f000 fdbf 	bl	80097dc <__mcmp>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	dc03      	bgt.n	8008c6a <_dtoa_r+0xa52>
 8008c62:	d1e1      	bne.n	8008c28 <_dtoa_r+0xa10>
 8008c64:	f018 0f01 	tst.w	r8, #1
 8008c68:	d0de      	beq.n	8008c28 <_dtoa_r+0xa10>
 8008c6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c6e:	d1d8      	bne.n	8008c22 <_dtoa_r+0xa0a>
 8008c70:	9a00      	ldr	r2, [sp, #0]
 8008c72:	2339      	movs	r3, #57	@ 0x39
 8008c74:	7013      	strb	r3, [r2, #0]
 8008c76:	4633      	mov	r3, r6
 8008c78:	461e      	mov	r6, r3
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c80:	2a39      	cmp	r2, #57	@ 0x39
 8008c82:	d052      	beq.n	8008d2a <_dtoa_r+0xb12>
 8008c84:	3201      	adds	r2, #1
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	e612      	b.n	80088b0 <_dtoa_r+0x698>
 8008c8a:	2a00      	cmp	r2, #0
 8008c8c:	dd07      	ble.n	8008c9e <_dtoa_r+0xa86>
 8008c8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c92:	d0ed      	beq.n	8008c70 <_dtoa_r+0xa58>
 8008c94:	9a00      	ldr	r2, [sp, #0]
 8008c96:	f108 0301 	add.w	r3, r8, #1
 8008c9a:	7013      	strb	r3, [r2, #0]
 8008c9c:	e608      	b.n	80088b0 <_dtoa_r+0x698>
 8008c9e:	9b07      	ldr	r3, [sp, #28]
 8008ca0:	9a07      	ldr	r2, [sp, #28]
 8008ca2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d028      	beq.n	8008cfe <_dtoa_r+0xae6>
 8008cac:	4649      	mov	r1, r9
 8008cae:	2300      	movs	r3, #0
 8008cb0:	220a      	movs	r2, #10
 8008cb2:	4658      	mov	r0, fp
 8008cb4:	f000 fb7a 	bl	80093ac <__multadd>
 8008cb8:	42af      	cmp	r7, r5
 8008cba:	4681      	mov	r9, r0
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	f04f 020a 	mov.w	r2, #10
 8008cc4:	4639      	mov	r1, r7
 8008cc6:	4658      	mov	r0, fp
 8008cc8:	d107      	bne.n	8008cda <_dtoa_r+0xac2>
 8008cca:	f000 fb6f 	bl	80093ac <__multadd>
 8008cce:	4607      	mov	r7, r0
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	9b07      	ldr	r3, [sp, #28]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	9307      	str	r3, [sp, #28]
 8008cd8:	e774      	b.n	8008bc4 <_dtoa_r+0x9ac>
 8008cda:	f000 fb67 	bl	80093ac <__multadd>
 8008cde:	4629      	mov	r1, r5
 8008ce0:	4607      	mov	r7, r0
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	220a      	movs	r2, #10
 8008ce6:	4658      	mov	r0, fp
 8008ce8:	f000 fb60 	bl	80093ac <__multadd>
 8008cec:	4605      	mov	r5, r0
 8008cee:	e7f0      	b.n	8008cd2 <_dtoa_r+0xaba>
 8008cf0:	9b00      	ldr	r3, [sp, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfcc      	ite	gt
 8008cf6:	461e      	movgt	r6, r3
 8008cf8:	2601      	movle	r6, #1
 8008cfa:	4456      	add	r6, sl
 8008cfc:	2700      	movs	r7, #0
 8008cfe:	4649      	mov	r1, r9
 8008d00:	2201      	movs	r2, #1
 8008d02:	4658      	mov	r0, fp
 8008d04:	f000 fcfe 	bl	8009704 <__lshift>
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4681      	mov	r9, r0
 8008d0c:	f000 fd66 	bl	80097dc <__mcmp>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	dcb0      	bgt.n	8008c76 <_dtoa_r+0xa5e>
 8008d14:	d102      	bne.n	8008d1c <_dtoa_r+0xb04>
 8008d16:	f018 0f01 	tst.w	r8, #1
 8008d1a:	d1ac      	bne.n	8008c76 <_dtoa_r+0xa5e>
 8008d1c:	4633      	mov	r3, r6
 8008d1e:	461e      	mov	r6, r3
 8008d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d24:	2a30      	cmp	r2, #48	@ 0x30
 8008d26:	d0fa      	beq.n	8008d1e <_dtoa_r+0xb06>
 8008d28:	e5c2      	b.n	80088b0 <_dtoa_r+0x698>
 8008d2a:	459a      	cmp	sl, r3
 8008d2c:	d1a4      	bne.n	8008c78 <_dtoa_r+0xa60>
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	3301      	adds	r3, #1
 8008d32:	9304      	str	r3, [sp, #16]
 8008d34:	2331      	movs	r3, #49	@ 0x31
 8008d36:	f88a 3000 	strb.w	r3, [sl]
 8008d3a:	e5b9      	b.n	80088b0 <_dtoa_r+0x698>
 8008d3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d9c <_dtoa_r+0xb84>
 8008d42:	b11b      	cbz	r3, 8008d4c <_dtoa_r+0xb34>
 8008d44:	f10a 0308 	add.w	r3, sl, #8
 8008d48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d4a:	6013      	str	r3, [r2, #0]
 8008d4c:	4650      	mov	r0, sl
 8008d4e:	b019      	add	sp, #100	@ 0x64
 8008d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	f77f ae37 	ble.w	80089ca <_dtoa_r+0x7b2>
 8008d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d60:	2001      	movs	r0, #1
 8008d62:	e655      	b.n	8008a10 <_dtoa_r+0x7f8>
 8008d64:	9b00      	ldr	r3, [sp, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f77f aed6 	ble.w	8008b18 <_dtoa_r+0x900>
 8008d6c:	4656      	mov	r6, sl
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4648      	mov	r0, r9
 8008d72:	f7ff f9c6 	bl	8008102 <quorem>
 8008d76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d7a:	f806 8b01 	strb.w	r8, [r6], #1
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	eba6 020a 	sub.w	r2, r6, sl
 8008d84:	4293      	cmp	r3, r2
 8008d86:	ddb3      	ble.n	8008cf0 <_dtoa_r+0xad8>
 8008d88:	4649      	mov	r1, r9
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	220a      	movs	r2, #10
 8008d8e:	4658      	mov	r0, fp
 8008d90:	f000 fb0c 	bl	80093ac <__multadd>
 8008d94:	4681      	mov	r9, r0
 8008d96:	e7ea      	b.n	8008d6e <_dtoa_r+0xb56>
 8008d98:	0800a3b8 	.word	0x0800a3b8
 8008d9c:	0800a33c 	.word	0x0800a33c

08008da0 <__sfputc_r>:
 8008da0:	6893      	ldr	r3, [r2, #8]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	b410      	push	{r4}
 8008da8:	6093      	str	r3, [r2, #8]
 8008daa:	da08      	bge.n	8008dbe <__sfputc_r+0x1e>
 8008dac:	6994      	ldr	r4, [r2, #24]
 8008dae:	42a3      	cmp	r3, r4
 8008db0:	db01      	blt.n	8008db6 <__sfputc_r+0x16>
 8008db2:	290a      	cmp	r1, #10
 8008db4:	d103      	bne.n	8008dbe <__sfputc_r+0x1e>
 8008db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dba:	f000 be5a 	b.w	8009a72 <__swbuf_r>
 8008dbe:	6813      	ldr	r3, [r2, #0]
 8008dc0:	1c58      	adds	r0, r3, #1
 8008dc2:	6010      	str	r0, [r2, #0]
 8008dc4:	7019      	strb	r1, [r3, #0]
 8008dc6:	4608      	mov	r0, r1
 8008dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <__sfputs_r>:
 8008dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	460f      	mov	r7, r1
 8008dd4:	4614      	mov	r4, r2
 8008dd6:	18d5      	adds	r5, r2, r3
 8008dd8:	42ac      	cmp	r4, r5
 8008dda:	d101      	bne.n	8008de0 <__sfputs_r+0x12>
 8008ddc:	2000      	movs	r0, #0
 8008dde:	e007      	b.n	8008df0 <__sfputs_r+0x22>
 8008de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de4:	463a      	mov	r2, r7
 8008de6:	4630      	mov	r0, r6
 8008de8:	f7ff ffda 	bl	8008da0 <__sfputc_r>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d1f3      	bne.n	8008dd8 <__sfputs_r+0xa>
 8008df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008df4 <_vfiprintf_r>:
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	460d      	mov	r5, r1
 8008dfa:	b09d      	sub	sp, #116	@ 0x74
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	4698      	mov	r8, r3
 8008e00:	4606      	mov	r6, r0
 8008e02:	b118      	cbz	r0, 8008e0c <_vfiprintf_r+0x18>
 8008e04:	6a03      	ldr	r3, [r0, #32]
 8008e06:	b90b      	cbnz	r3, 8008e0c <_vfiprintf_r+0x18>
 8008e08:	f7ff f8fa 	bl	8008000 <__sinit>
 8008e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e0e:	07d9      	lsls	r1, r3, #31
 8008e10:	d405      	bmi.n	8008e1e <_vfiprintf_r+0x2a>
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	059a      	lsls	r2, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <_vfiprintf_r+0x2a>
 8008e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e1a:	f7ff f970 	bl	80080fe <__retarget_lock_acquire_recursive>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	071b      	lsls	r3, r3, #28
 8008e22:	d501      	bpl.n	8008e28 <_vfiprintf_r+0x34>
 8008e24:	692b      	ldr	r3, [r5, #16]
 8008e26:	b99b      	cbnz	r3, 8008e50 <_vfiprintf_r+0x5c>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f000 fe60 	bl	8009af0 <__swsetup_r>
 8008e30:	b170      	cbz	r0, 8008e50 <_vfiprintf_r+0x5c>
 8008e32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e34:	07dc      	lsls	r4, r3, #31
 8008e36:	d504      	bpl.n	8008e42 <_vfiprintf_r+0x4e>
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e3c:	b01d      	add	sp, #116	@ 0x74
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	0598      	lsls	r0, r3, #22
 8008e46:	d4f7      	bmi.n	8008e38 <_vfiprintf_r+0x44>
 8008e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e4a:	f7ff f959 	bl	8008100 <__retarget_lock_release_recursive>
 8008e4e:	e7f3      	b.n	8008e38 <_vfiprintf_r+0x44>
 8008e50:	2300      	movs	r3, #0
 8008e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e54:	2320      	movs	r3, #32
 8008e56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e5e:	2330      	movs	r3, #48	@ 0x30
 8008e60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009010 <_vfiprintf_r+0x21c>
 8008e64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e68:	f04f 0901 	mov.w	r9, #1
 8008e6c:	4623      	mov	r3, r4
 8008e6e:	469a      	mov	sl, r3
 8008e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e74:	b10a      	cbz	r2, 8008e7a <_vfiprintf_r+0x86>
 8008e76:	2a25      	cmp	r2, #37	@ 0x25
 8008e78:	d1f9      	bne.n	8008e6e <_vfiprintf_r+0x7a>
 8008e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e7e:	d00b      	beq.n	8008e98 <_vfiprintf_r+0xa4>
 8008e80:	465b      	mov	r3, fp
 8008e82:	4622      	mov	r2, r4
 8008e84:	4629      	mov	r1, r5
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7ff ffa1 	bl	8008dce <__sfputs_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	f000 80a7 	beq.w	8008fe0 <_vfiprintf_r+0x1ec>
 8008e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e94:	445a      	add	r2, fp
 8008e96:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e98:	f89a 3000 	ldrb.w	r3, [sl]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 809f 	beq.w	8008fe0 <_vfiprintf_r+0x1ec>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eac:	f10a 0a01 	add.w	sl, sl, #1
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	9307      	str	r3, [sp, #28]
 8008eb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008eb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008eba:	4654      	mov	r4, sl
 8008ebc:	2205      	movs	r2, #5
 8008ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec2:	4853      	ldr	r0, [pc, #332]	@ (8009010 <_vfiprintf_r+0x21c>)
 8008ec4:	f7f7 f984 	bl	80001d0 <memchr>
 8008ec8:	9a04      	ldr	r2, [sp, #16]
 8008eca:	b9d8      	cbnz	r0, 8008f04 <_vfiprintf_r+0x110>
 8008ecc:	06d1      	lsls	r1, r2, #27
 8008ece:	bf44      	itt	mi
 8008ed0:	2320      	movmi	r3, #32
 8008ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ed6:	0713      	lsls	r3, r2, #28
 8008ed8:	bf44      	itt	mi
 8008eda:	232b      	movmi	r3, #43	@ 0x2b
 8008edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ee6:	d015      	beq.n	8008f14 <_vfiprintf_r+0x120>
 8008ee8:	9a07      	ldr	r2, [sp, #28]
 8008eea:	4654      	mov	r4, sl
 8008eec:	2000      	movs	r0, #0
 8008eee:	f04f 0c0a 	mov.w	ip, #10
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ef8:	3b30      	subs	r3, #48	@ 0x30
 8008efa:	2b09      	cmp	r3, #9
 8008efc:	d94b      	bls.n	8008f96 <_vfiprintf_r+0x1a2>
 8008efe:	b1b0      	cbz	r0, 8008f2e <_vfiprintf_r+0x13a>
 8008f00:	9207      	str	r2, [sp, #28]
 8008f02:	e014      	b.n	8008f2e <_vfiprintf_r+0x13a>
 8008f04:	eba0 0308 	sub.w	r3, r0, r8
 8008f08:	fa09 f303 	lsl.w	r3, r9, r3
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	9304      	str	r3, [sp, #16]
 8008f10:	46a2      	mov	sl, r4
 8008f12:	e7d2      	b.n	8008eba <_vfiprintf_r+0xc6>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	1d19      	adds	r1, r3, #4
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	9103      	str	r1, [sp, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	bfbb      	ittet	lt
 8008f20:	425b      	neglt	r3, r3
 8008f22:	f042 0202 	orrlt.w	r2, r2, #2
 8008f26:	9307      	strge	r3, [sp, #28]
 8008f28:	9307      	strlt	r3, [sp, #28]
 8008f2a:	bfb8      	it	lt
 8008f2c:	9204      	strlt	r2, [sp, #16]
 8008f2e:	7823      	ldrb	r3, [r4, #0]
 8008f30:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f32:	d10a      	bne.n	8008f4a <_vfiprintf_r+0x156>
 8008f34:	7863      	ldrb	r3, [r4, #1]
 8008f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f38:	d132      	bne.n	8008fa0 <_vfiprintf_r+0x1ac>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	1d1a      	adds	r2, r3, #4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	9203      	str	r2, [sp, #12]
 8008f42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f46:	3402      	adds	r4, #2
 8008f48:	9305      	str	r3, [sp, #20]
 8008f4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009020 <_vfiprintf_r+0x22c>
 8008f4e:	7821      	ldrb	r1, [r4, #0]
 8008f50:	2203      	movs	r2, #3
 8008f52:	4650      	mov	r0, sl
 8008f54:	f7f7 f93c 	bl	80001d0 <memchr>
 8008f58:	b138      	cbz	r0, 8008f6a <_vfiprintf_r+0x176>
 8008f5a:	9b04      	ldr	r3, [sp, #16]
 8008f5c:	eba0 000a 	sub.w	r0, r0, sl
 8008f60:	2240      	movs	r2, #64	@ 0x40
 8008f62:	4082      	lsls	r2, r0
 8008f64:	4313      	orrs	r3, r2
 8008f66:	3401      	adds	r4, #1
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6e:	4829      	ldr	r0, [pc, #164]	@ (8009014 <_vfiprintf_r+0x220>)
 8008f70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f74:	2206      	movs	r2, #6
 8008f76:	f7f7 f92b 	bl	80001d0 <memchr>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d03f      	beq.n	8008ffe <_vfiprintf_r+0x20a>
 8008f7e:	4b26      	ldr	r3, [pc, #152]	@ (8009018 <_vfiprintf_r+0x224>)
 8008f80:	bb1b      	cbnz	r3, 8008fca <_vfiprintf_r+0x1d6>
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	3307      	adds	r3, #7
 8008f86:	f023 0307 	bic.w	r3, r3, #7
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f90:	443b      	add	r3, r7
 8008f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f94:	e76a      	b.n	8008e6c <_vfiprintf_r+0x78>
 8008f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	e7a8      	b.n	8008ef2 <_vfiprintf_r+0xfe>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	3401      	adds	r4, #1
 8008fa4:	9305      	str	r3, [sp, #20]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	f04f 0c0a 	mov.w	ip, #10
 8008fac:	4620      	mov	r0, r4
 8008fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fb2:	3a30      	subs	r2, #48	@ 0x30
 8008fb4:	2a09      	cmp	r2, #9
 8008fb6:	d903      	bls.n	8008fc0 <_vfiprintf_r+0x1cc>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0c6      	beq.n	8008f4a <_vfiprintf_r+0x156>
 8008fbc:	9105      	str	r1, [sp, #20]
 8008fbe:	e7c4      	b.n	8008f4a <_vfiprintf_r+0x156>
 8008fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e7f0      	b.n	8008fac <_vfiprintf_r+0x1b8>
 8008fca:	ab03      	add	r3, sp, #12
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	462a      	mov	r2, r5
 8008fd0:	4b12      	ldr	r3, [pc, #72]	@ (800901c <_vfiprintf_r+0x228>)
 8008fd2:	a904      	add	r1, sp, #16
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7fe fbcf 	bl	8007778 <_printf_float>
 8008fda:	4607      	mov	r7, r0
 8008fdc:	1c78      	adds	r0, r7, #1
 8008fde:	d1d6      	bne.n	8008f8e <_vfiprintf_r+0x19a>
 8008fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fe2:	07d9      	lsls	r1, r3, #31
 8008fe4:	d405      	bmi.n	8008ff2 <_vfiprintf_r+0x1fe>
 8008fe6:	89ab      	ldrh	r3, [r5, #12]
 8008fe8:	059a      	lsls	r2, r3, #22
 8008fea:	d402      	bmi.n	8008ff2 <_vfiprintf_r+0x1fe>
 8008fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fee:	f7ff f887 	bl	8008100 <__retarget_lock_release_recursive>
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	065b      	lsls	r3, r3, #25
 8008ff6:	f53f af1f 	bmi.w	8008e38 <_vfiprintf_r+0x44>
 8008ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ffc:	e71e      	b.n	8008e3c <_vfiprintf_r+0x48>
 8008ffe:	ab03      	add	r3, sp, #12
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	462a      	mov	r2, r5
 8009004:	4b05      	ldr	r3, [pc, #20]	@ (800901c <_vfiprintf_r+0x228>)
 8009006:	a904      	add	r1, sp, #16
 8009008:	4630      	mov	r0, r6
 800900a:	f7fe fe4d 	bl	8007ca8 <_printf_i>
 800900e:	e7e4      	b.n	8008fda <_vfiprintf_r+0x1e6>
 8009010:	0800a3c9 	.word	0x0800a3c9
 8009014:	0800a3d3 	.word	0x0800a3d3
 8009018:	08007779 	.word	0x08007779
 800901c:	08008dcf 	.word	0x08008dcf
 8009020:	0800a3cf 	.word	0x0800a3cf

08009024 <malloc>:
 8009024:	4b02      	ldr	r3, [pc, #8]	@ (8009030 <malloc+0xc>)
 8009026:	4601      	mov	r1, r0
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	f000 b825 	b.w	8009078 <_malloc_r>
 800902e:	bf00      	nop
 8009030:	2000002c 	.word	0x2000002c

08009034 <sbrk_aligned>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	4e0f      	ldr	r6, [pc, #60]	@ (8009074 <sbrk_aligned+0x40>)
 8009038:	460c      	mov	r4, r1
 800903a:	6831      	ldr	r1, [r6, #0]
 800903c:	4605      	mov	r5, r0
 800903e:	b911      	cbnz	r1, 8009046 <sbrk_aligned+0x12>
 8009040:	f000 fe64 	bl	8009d0c <_sbrk_r>
 8009044:	6030      	str	r0, [r6, #0]
 8009046:	4621      	mov	r1, r4
 8009048:	4628      	mov	r0, r5
 800904a:	f000 fe5f 	bl	8009d0c <_sbrk_r>
 800904e:	1c43      	adds	r3, r0, #1
 8009050:	d103      	bne.n	800905a <sbrk_aligned+0x26>
 8009052:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009056:	4620      	mov	r0, r4
 8009058:	bd70      	pop	{r4, r5, r6, pc}
 800905a:	1cc4      	adds	r4, r0, #3
 800905c:	f024 0403 	bic.w	r4, r4, #3
 8009060:	42a0      	cmp	r0, r4
 8009062:	d0f8      	beq.n	8009056 <sbrk_aligned+0x22>
 8009064:	1a21      	subs	r1, r4, r0
 8009066:	4628      	mov	r0, r5
 8009068:	f000 fe50 	bl	8009d0c <_sbrk_r>
 800906c:	3001      	adds	r0, #1
 800906e:	d1f2      	bne.n	8009056 <sbrk_aligned+0x22>
 8009070:	e7ef      	b.n	8009052 <sbrk_aligned+0x1e>
 8009072:	bf00      	nop
 8009074:	20000560 	.word	0x20000560

08009078 <_malloc_r>:
 8009078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800907c:	1ccd      	adds	r5, r1, #3
 800907e:	f025 0503 	bic.w	r5, r5, #3
 8009082:	3508      	adds	r5, #8
 8009084:	2d0c      	cmp	r5, #12
 8009086:	bf38      	it	cc
 8009088:	250c      	movcc	r5, #12
 800908a:	2d00      	cmp	r5, #0
 800908c:	4606      	mov	r6, r0
 800908e:	db01      	blt.n	8009094 <_malloc_r+0x1c>
 8009090:	42a9      	cmp	r1, r5
 8009092:	d904      	bls.n	800909e <_malloc_r+0x26>
 8009094:	230c      	movs	r3, #12
 8009096:	6033      	str	r3, [r6, #0]
 8009098:	2000      	movs	r0, #0
 800909a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009174 <_malloc_r+0xfc>
 80090a2:	f000 f915 	bl	80092d0 <__malloc_lock>
 80090a6:	f8d8 3000 	ldr.w	r3, [r8]
 80090aa:	461c      	mov	r4, r3
 80090ac:	bb44      	cbnz	r4, 8009100 <_malloc_r+0x88>
 80090ae:	4629      	mov	r1, r5
 80090b0:	4630      	mov	r0, r6
 80090b2:	f7ff ffbf 	bl	8009034 <sbrk_aligned>
 80090b6:	1c43      	adds	r3, r0, #1
 80090b8:	4604      	mov	r4, r0
 80090ba:	d158      	bne.n	800916e <_malloc_r+0xf6>
 80090bc:	f8d8 4000 	ldr.w	r4, [r8]
 80090c0:	4627      	mov	r7, r4
 80090c2:	2f00      	cmp	r7, #0
 80090c4:	d143      	bne.n	800914e <_malloc_r+0xd6>
 80090c6:	2c00      	cmp	r4, #0
 80090c8:	d04b      	beq.n	8009162 <_malloc_r+0xea>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	4639      	mov	r1, r7
 80090ce:	4630      	mov	r0, r6
 80090d0:	eb04 0903 	add.w	r9, r4, r3
 80090d4:	f000 fe1a 	bl	8009d0c <_sbrk_r>
 80090d8:	4581      	cmp	r9, r0
 80090da:	d142      	bne.n	8009162 <_malloc_r+0xea>
 80090dc:	6821      	ldr	r1, [r4, #0]
 80090de:	1a6d      	subs	r5, r5, r1
 80090e0:	4629      	mov	r1, r5
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7ff ffa6 	bl	8009034 <sbrk_aligned>
 80090e8:	3001      	adds	r0, #1
 80090ea:	d03a      	beq.n	8009162 <_malloc_r+0xea>
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	442b      	add	r3, r5
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	f8d8 3000 	ldr.w	r3, [r8]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	bb62      	cbnz	r2, 8009154 <_malloc_r+0xdc>
 80090fa:	f8c8 7000 	str.w	r7, [r8]
 80090fe:	e00f      	b.n	8009120 <_malloc_r+0xa8>
 8009100:	6822      	ldr	r2, [r4, #0]
 8009102:	1b52      	subs	r2, r2, r5
 8009104:	d420      	bmi.n	8009148 <_malloc_r+0xd0>
 8009106:	2a0b      	cmp	r2, #11
 8009108:	d917      	bls.n	800913a <_malloc_r+0xc2>
 800910a:	1961      	adds	r1, r4, r5
 800910c:	42a3      	cmp	r3, r4
 800910e:	6025      	str	r5, [r4, #0]
 8009110:	bf18      	it	ne
 8009112:	6059      	strne	r1, [r3, #4]
 8009114:	6863      	ldr	r3, [r4, #4]
 8009116:	bf08      	it	eq
 8009118:	f8c8 1000 	streq.w	r1, [r8]
 800911c:	5162      	str	r2, [r4, r5]
 800911e:	604b      	str	r3, [r1, #4]
 8009120:	4630      	mov	r0, r6
 8009122:	f000 f8db 	bl	80092dc <__malloc_unlock>
 8009126:	f104 000b 	add.w	r0, r4, #11
 800912a:	1d23      	adds	r3, r4, #4
 800912c:	f020 0007 	bic.w	r0, r0, #7
 8009130:	1ac2      	subs	r2, r0, r3
 8009132:	bf1c      	itt	ne
 8009134:	1a1b      	subne	r3, r3, r0
 8009136:	50a3      	strne	r3, [r4, r2]
 8009138:	e7af      	b.n	800909a <_malloc_r+0x22>
 800913a:	6862      	ldr	r2, [r4, #4]
 800913c:	42a3      	cmp	r3, r4
 800913e:	bf0c      	ite	eq
 8009140:	f8c8 2000 	streq.w	r2, [r8]
 8009144:	605a      	strne	r2, [r3, #4]
 8009146:	e7eb      	b.n	8009120 <_malloc_r+0xa8>
 8009148:	4623      	mov	r3, r4
 800914a:	6864      	ldr	r4, [r4, #4]
 800914c:	e7ae      	b.n	80090ac <_malloc_r+0x34>
 800914e:	463c      	mov	r4, r7
 8009150:	687f      	ldr	r7, [r7, #4]
 8009152:	e7b6      	b.n	80090c2 <_malloc_r+0x4a>
 8009154:	461a      	mov	r2, r3
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	42a3      	cmp	r3, r4
 800915a:	d1fb      	bne.n	8009154 <_malloc_r+0xdc>
 800915c:	2300      	movs	r3, #0
 800915e:	6053      	str	r3, [r2, #4]
 8009160:	e7de      	b.n	8009120 <_malloc_r+0xa8>
 8009162:	230c      	movs	r3, #12
 8009164:	6033      	str	r3, [r6, #0]
 8009166:	4630      	mov	r0, r6
 8009168:	f000 f8b8 	bl	80092dc <__malloc_unlock>
 800916c:	e794      	b.n	8009098 <_malloc_r+0x20>
 800916e:	6005      	str	r5, [r0, #0]
 8009170:	e7d6      	b.n	8009120 <_malloc_r+0xa8>
 8009172:	bf00      	nop
 8009174:	20000564 	.word	0x20000564

08009178 <__sflush_r>:
 8009178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	0716      	lsls	r6, r2, #28
 8009182:	4605      	mov	r5, r0
 8009184:	460c      	mov	r4, r1
 8009186:	d454      	bmi.n	8009232 <__sflush_r+0xba>
 8009188:	684b      	ldr	r3, [r1, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	dc02      	bgt.n	8009194 <__sflush_r+0x1c>
 800918e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009190:	2b00      	cmp	r3, #0
 8009192:	dd48      	ble.n	8009226 <__sflush_r+0xae>
 8009194:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009196:	2e00      	cmp	r6, #0
 8009198:	d045      	beq.n	8009226 <__sflush_r+0xae>
 800919a:	2300      	movs	r3, #0
 800919c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091a0:	682f      	ldr	r7, [r5, #0]
 80091a2:	6a21      	ldr	r1, [r4, #32]
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	d030      	beq.n	800920a <__sflush_r+0x92>
 80091a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	0759      	lsls	r1, r3, #29
 80091ae:	d505      	bpl.n	80091bc <__sflush_r+0x44>
 80091b0:	6863      	ldr	r3, [r4, #4]
 80091b2:	1ad2      	subs	r2, r2, r3
 80091b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091b6:	b10b      	cbz	r3, 80091bc <__sflush_r+0x44>
 80091b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091ba:	1ad2      	subs	r2, r2, r3
 80091bc:	2300      	movs	r3, #0
 80091be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091c0:	6a21      	ldr	r1, [r4, #32]
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b0      	blx	r6
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	d106      	bne.n	80091da <__sflush_r+0x62>
 80091cc:	6829      	ldr	r1, [r5, #0]
 80091ce:	291d      	cmp	r1, #29
 80091d0:	d82b      	bhi.n	800922a <__sflush_r+0xb2>
 80091d2:	4a2a      	ldr	r2, [pc, #168]	@ (800927c <__sflush_r+0x104>)
 80091d4:	410a      	asrs	r2, r1
 80091d6:	07d6      	lsls	r6, r2, #31
 80091d8:	d427      	bmi.n	800922a <__sflush_r+0xb2>
 80091da:	2200      	movs	r2, #0
 80091dc:	6062      	str	r2, [r4, #4]
 80091de:	04d9      	lsls	r1, r3, #19
 80091e0:	6922      	ldr	r2, [r4, #16]
 80091e2:	6022      	str	r2, [r4, #0]
 80091e4:	d504      	bpl.n	80091f0 <__sflush_r+0x78>
 80091e6:	1c42      	adds	r2, r0, #1
 80091e8:	d101      	bne.n	80091ee <__sflush_r+0x76>
 80091ea:	682b      	ldr	r3, [r5, #0]
 80091ec:	b903      	cbnz	r3, 80091f0 <__sflush_r+0x78>
 80091ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80091f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091f2:	602f      	str	r7, [r5, #0]
 80091f4:	b1b9      	cbz	r1, 8009226 <__sflush_r+0xae>
 80091f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091fa:	4299      	cmp	r1, r3
 80091fc:	d002      	beq.n	8009204 <__sflush_r+0x8c>
 80091fe:	4628      	mov	r0, r5
 8009200:	f000 fde6 	bl	8009dd0 <_free_r>
 8009204:	2300      	movs	r3, #0
 8009206:	6363      	str	r3, [r4, #52]	@ 0x34
 8009208:	e00d      	b.n	8009226 <__sflush_r+0xae>
 800920a:	2301      	movs	r3, #1
 800920c:	4628      	mov	r0, r5
 800920e:	47b0      	blx	r6
 8009210:	4602      	mov	r2, r0
 8009212:	1c50      	adds	r0, r2, #1
 8009214:	d1c9      	bne.n	80091aa <__sflush_r+0x32>
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0c6      	beq.n	80091aa <__sflush_r+0x32>
 800921c:	2b1d      	cmp	r3, #29
 800921e:	d001      	beq.n	8009224 <__sflush_r+0xac>
 8009220:	2b16      	cmp	r3, #22
 8009222:	d11e      	bne.n	8009262 <__sflush_r+0xea>
 8009224:	602f      	str	r7, [r5, #0]
 8009226:	2000      	movs	r0, #0
 8009228:	e022      	b.n	8009270 <__sflush_r+0xf8>
 800922a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800922e:	b21b      	sxth	r3, r3
 8009230:	e01b      	b.n	800926a <__sflush_r+0xf2>
 8009232:	690f      	ldr	r7, [r1, #16]
 8009234:	2f00      	cmp	r7, #0
 8009236:	d0f6      	beq.n	8009226 <__sflush_r+0xae>
 8009238:	0793      	lsls	r3, r2, #30
 800923a:	680e      	ldr	r6, [r1, #0]
 800923c:	bf08      	it	eq
 800923e:	694b      	ldreq	r3, [r1, #20]
 8009240:	600f      	str	r7, [r1, #0]
 8009242:	bf18      	it	ne
 8009244:	2300      	movne	r3, #0
 8009246:	eba6 0807 	sub.w	r8, r6, r7
 800924a:	608b      	str	r3, [r1, #8]
 800924c:	f1b8 0f00 	cmp.w	r8, #0
 8009250:	dde9      	ble.n	8009226 <__sflush_r+0xae>
 8009252:	6a21      	ldr	r1, [r4, #32]
 8009254:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009256:	4643      	mov	r3, r8
 8009258:	463a      	mov	r2, r7
 800925a:	4628      	mov	r0, r5
 800925c:	47b0      	blx	r6
 800925e:	2800      	cmp	r0, #0
 8009260:	dc08      	bgt.n	8009274 <__sflush_r+0xfc>
 8009262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009274:	4407      	add	r7, r0
 8009276:	eba8 0800 	sub.w	r8, r8, r0
 800927a:	e7e7      	b.n	800924c <__sflush_r+0xd4>
 800927c:	dfbffffe 	.word	0xdfbffffe

08009280 <_fflush_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	690b      	ldr	r3, [r1, #16]
 8009284:	4605      	mov	r5, r0
 8009286:	460c      	mov	r4, r1
 8009288:	b913      	cbnz	r3, 8009290 <_fflush_r+0x10>
 800928a:	2500      	movs	r5, #0
 800928c:	4628      	mov	r0, r5
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	b118      	cbz	r0, 800929a <_fflush_r+0x1a>
 8009292:	6a03      	ldr	r3, [r0, #32]
 8009294:	b90b      	cbnz	r3, 800929a <_fflush_r+0x1a>
 8009296:	f7fe feb3 	bl	8008000 <__sinit>
 800929a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0f3      	beq.n	800928a <_fflush_r+0xa>
 80092a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092a4:	07d0      	lsls	r0, r2, #31
 80092a6:	d404      	bmi.n	80092b2 <_fflush_r+0x32>
 80092a8:	0599      	lsls	r1, r3, #22
 80092aa:	d402      	bmi.n	80092b2 <_fflush_r+0x32>
 80092ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ae:	f7fe ff26 	bl	80080fe <__retarget_lock_acquire_recursive>
 80092b2:	4628      	mov	r0, r5
 80092b4:	4621      	mov	r1, r4
 80092b6:	f7ff ff5f 	bl	8009178 <__sflush_r>
 80092ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092bc:	07da      	lsls	r2, r3, #31
 80092be:	4605      	mov	r5, r0
 80092c0:	d4e4      	bmi.n	800928c <_fflush_r+0xc>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	059b      	lsls	r3, r3, #22
 80092c6:	d4e1      	bmi.n	800928c <_fflush_r+0xc>
 80092c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ca:	f7fe ff19 	bl	8008100 <__retarget_lock_release_recursive>
 80092ce:	e7dd      	b.n	800928c <_fflush_r+0xc>

080092d0 <__malloc_lock>:
 80092d0:	4801      	ldr	r0, [pc, #4]	@ (80092d8 <__malloc_lock+0x8>)
 80092d2:	f7fe bf14 	b.w	80080fe <__retarget_lock_acquire_recursive>
 80092d6:	bf00      	nop
 80092d8:	2000055c 	.word	0x2000055c

080092dc <__malloc_unlock>:
 80092dc:	4801      	ldr	r0, [pc, #4]	@ (80092e4 <__malloc_unlock+0x8>)
 80092de:	f7fe bf0f 	b.w	8008100 <__retarget_lock_release_recursive>
 80092e2:	bf00      	nop
 80092e4:	2000055c 	.word	0x2000055c

080092e8 <_Balloc>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	69c6      	ldr	r6, [r0, #28]
 80092ec:	4604      	mov	r4, r0
 80092ee:	460d      	mov	r5, r1
 80092f0:	b976      	cbnz	r6, 8009310 <_Balloc+0x28>
 80092f2:	2010      	movs	r0, #16
 80092f4:	f7ff fe96 	bl	8009024 <malloc>
 80092f8:	4602      	mov	r2, r0
 80092fa:	61e0      	str	r0, [r4, #28]
 80092fc:	b920      	cbnz	r0, 8009308 <_Balloc+0x20>
 80092fe:	4b18      	ldr	r3, [pc, #96]	@ (8009360 <_Balloc+0x78>)
 8009300:	4818      	ldr	r0, [pc, #96]	@ (8009364 <_Balloc+0x7c>)
 8009302:	216b      	movs	r1, #107	@ 0x6b
 8009304:	f000 fd32 	bl	8009d6c <__assert_func>
 8009308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800930c:	6006      	str	r6, [r0, #0]
 800930e:	60c6      	str	r6, [r0, #12]
 8009310:	69e6      	ldr	r6, [r4, #28]
 8009312:	68f3      	ldr	r3, [r6, #12]
 8009314:	b183      	cbz	r3, 8009338 <_Balloc+0x50>
 8009316:	69e3      	ldr	r3, [r4, #28]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800931e:	b9b8      	cbnz	r0, 8009350 <_Balloc+0x68>
 8009320:	2101      	movs	r1, #1
 8009322:	fa01 f605 	lsl.w	r6, r1, r5
 8009326:	1d72      	adds	r2, r6, #5
 8009328:	0092      	lsls	r2, r2, #2
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fd3c 	bl	8009da8 <_calloc_r>
 8009330:	b160      	cbz	r0, 800934c <_Balloc+0x64>
 8009332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009336:	e00e      	b.n	8009356 <_Balloc+0x6e>
 8009338:	2221      	movs	r2, #33	@ 0x21
 800933a:	2104      	movs	r1, #4
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fd33 	bl	8009da8 <_calloc_r>
 8009342:	69e3      	ldr	r3, [r4, #28]
 8009344:	60f0      	str	r0, [r6, #12]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e4      	bne.n	8009316 <_Balloc+0x2e>
 800934c:	2000      	movs	r0, #0
 800934e:	bd70      	pop	{r4, r5, r6, pc}
 8009350:	6802      	ldr	r2, [r0, #0]
 8009352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009356:	2300      	movs	r3, #0
 8009358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800935c:	e7f7      	b.n	800934e <_Balloc+0x66>
 800935e:	bf00      	nop
 8009360:	0800a349 	.word	0x0800a349
 8009364:	0800a3da 	.word	0x0800a3da

08009368 <_Bfree>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	69c6      	ldr	r6, [r0, #28]
 800936c:	4605      	mov	r5, r0
 800936e:	460c      	mov	r4, r1
 8009370:	b976      	cbnz	r6, 8009390 <_Bfree+0x28>
 8009372:	2010      	movs	r0, #16
 8009374:	f7ff fe56 	bl	8009024 <malloc>
 8009378:	4602      	mov	r2, r0
 800937a:	61e8      	str	r0, [r5, #28]
 800937c:	b920      	cbnz	r0, 8009388 <_Bfree+0x20>
 800937e:	4b09      	ldr	r3, [pc, #36]	@ (80093a4 <_Bfree+0x3c>)
 8009380:	4809      	ldr	r0, [pc, #36]	@ (80093a8 <_Bfree+0x40>)
 8009382:	218f      	movs	r1, #143	@ 0x8f
 8009384:	f000 fcf2 	bl	8009d6c <__assert_func>
 8009388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800938c:	6006      	str	r6, [r0, #0]
 800938e:	60c6      	str	r6, [r0, #12]
 8009390:	b13c      	cbz	r4, 80093a2 <_Bfree+0x3a>
 8009392:	69eb      	ldr	r3, [r5, #28]
 8009394:	6862      	ldr	r2, [r4, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800939c:	6021      	str	r1, [r4, #0]
 800939e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093a2:	bd70      	pop	{r4, r5, r6, pc}
 80093a4:	0800a349 	.word	0x0800a349
 80093a8:	0800a3da 	.word	0x0800a3da

080093ac <__multadd>:
 80093ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b0:	690d      	ldr	r5, [r1, #16]
 80093b2:	4607      	mov	r7, r0
 80093b4:	460c      	mov	r4, r1
 80093b6:	461e      	mov	r6, r3
 80093b8:	f101 0c14 	add.w	ip, r1, #20
 80093bc:	2000      	movs	r0, #0
 80093be:	f8dc 3000 	ldr.w	r3, [ip]
 80093c2:	b299      	uxth	r1, r3
 80093c4:	fb02 6101 	mla	r1, r2, r1, r6
 80093c8:	0c1e      	lsrs	r6, r3, #16
 80093ca:	0c0b      	lsrs	r3, r1, #16
 80093cc:	fb02 3306 	mla	r3, r2, r6, r3
 80093d0:	b289      	uxth	r1, r1
 80093d2:	3001      	adds	r0, #1
 80093d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093d8:	4285      	cmp	r5, r0
 80093da:	f84c 1b04 	str.w	r1, [ip], #4
 80093de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093e2:	dcec      	bgt.n	80093be <__multadd+0x12>
 80093e4:	b30e      	cbz	r6, 800942a <__multadd+0x7e>
 80093e6:	68a3      	ldr	r3, [r4, #8]
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	dc19      	bgt.n	8009420 <__multadd+0x74>
 80093ec:	6861      	ldr	r1, [r4, #4]
 80093ee:	4638      	mov	r0, r7
 80093f0:	3101      	adds	r1, #1
 80093f2:	f7ff ff79 	bl	80092e8 <_Balloc>
 80093f6:	4680      	mov	r8, r0
 80093f8:	b928      	cbnz	r0, 8009406 <__multadd+0x5a>
 80093fa:	4602      	mov	r2, r0
 80093fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009430 <__multadd+0x84>)
 80093fe:	480d      	ldr	r0, [pc, #52]	@ (8009434 <__multadd+0x88>)
 8009400:	21ba      	movs	r1, #186	@ 0xba
 8009402:	f000 fcb3 	bl	8009d6c <__assert_func>
 8009406:	6922      	ldr	r2, [r4, #16]
 8009408:	3202      	adds	r2, #2
 800940a:	f104 010c 	add.w	r1, r4, #12
 800940e:	0092      	lsls	r2, r2, #2
 8009410:	300c      	adds	r0, #12
 8009412:	f000 fc9d 	bl	8009d50 <memcpy>
 8009416:	4621      	mov	r1, r4
 8009418:	4638      	mov	r0, r7
 800941a:	f7ff ffa5 	bl	8009368 <_Bfree>
 800941e:	4644      	mov	r4, r8
 8009420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009424:	3501      	adds	r5, #1
 8009426:	615e      	str	r6, [r3, #20]
 8009428:	6125      	str	r5, [r4, #16]
 800942a:	4620      	mov	r0, r4
 800942c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009430:	0800a3b8 	.word	0x0800a3b8
 8009434:	0800a3da 	.word	0x0800a3da

08009438 <__hi0bits>:
 8009438:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800943c:	4603      	mov	r3, r0
 800943e:	bf36      	itet	cc
 8009440:	0403      	lslcc	r3, r0, #16
 8009442:	2000      	movcs	r0, #0
 8009444:	2010      	movcc	r0, #16
 8009446:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800944a:	bf3c      	itt	cc
 800944c:	021b      	lslcc	r3, r3, #8
 800944e:	3008      	addcc	r0, #8
 8009450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009454:	bf3c      	itt	cc
 8009456:	011b      	lslcc	r3, r3, #4
 8009458:	3004      	addcc	r0, #4
 800945a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800945e:	bf3c      	itt	cc
 8009460:	009b      	lslcc	r3, r3, #2
 8009462:	3002      	addcc	r0, #2
 8009464:	2b00      	cmp	r3, #0
 8009466:	db05      	blt.n	8009474 <__hi0bits+0x3c>
 8009468:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800946c:	f100 0001 	add.w	r0, r0, #1
 8009470:	bf08      	it	eq
 8009472:	2020      	moveq	r0, #32
 8009474:	4770      	bx	lr

08009476 <__lo0bits>:
 8009476:	6803      	ldr	r3, [r0, #0]
 8009478:	4602      	mov	r2, r0
 800947a:	f013 0007 	ands.w	r0, r3, #7
 800947e:	d00b      	beq.n	8009498 <__lo0bits+0x22>
 8009480:	07d9      	lsls	r1, r3, #31
 8009482:	d421      	bmi.n	80094c8 <__lo0bits+0x52>
 8009484:	0798      	lsls	r0, r3, #30
 8009486:	bf49      	itett	mi
 8009488:	085b      	lsrmi	r3, r3, #1
 800948a:	089b      	lsrpl	r3, r3, #2
 800948c:	2001      	movmi	r0, #1
 800948e:	6013      	strmi	r3, [r2, #0]
 8009490:	bf5c      	itt	pl
 8009492:	6013      	strpl	r3, [r2, #0]
 8009494:	2002      	movpl	r0, #2
 8009496:	4770      	bx	lr
 8009498:	b299      	uxth	r1, r3
 800949a:	b909      	cbnz	r1, 80094a0 <__lo0bits+0x2a>
 800949c:	0c1b      	lsrs	r3, r3, #16
 800949e:	2010      	movs	r0, #16
 80094a0:	b2d9      	uxtb	r1, r3
 80094a2:	b909      	cbnz	r1, 80094a8 <__lo0bits+0x32>
 80094a4:	3008      	adds	r0, #8
 80094a6:	0a1b      	lsrs	r3, r3, #8
 80094a8:	0719      	lsls	r1, r3, #28
 80094aa:	bf04      	itt	eq
 80094ac:	091b      	lsreq	r3, r3, #4
 80094ae:	3004      	addeq	r0, #4
 80094b0:	0799      	lsls	r1, r3, #30
 80094b2:	bf04      	itt	eq
 80094b4:	089b      	lsreq	r3, r3, #2
 80094b6:	3002      	addeq	r0, #2
 80094b8:	07d9      	lsls	r1, r3, #31
 80094ba:	d403      	bmi.n	80094c4 <__lo0bits+0x4e>
 80094bc:	085b      	lsrs	r3, r3, #1
 80094be:	f100 0001 	add.w	r0, r0, #1
 80094c2:	d003      	beq.n	80094cc <__lo0bits+0x56>
 80094c4:	6013      	str	r3, [r2, #0]
 80094c6:	4770      	bx	lr
 80094c8:	2000      	movs	r0, #0
 80094ca:	4770      	bx	lr
 80094cc:	2020      	movs	r0, #32
 80094ce:	4770      	bx	lr

080094d0 <__i2b>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	460c      	mov	r4, r1
 80094d4:	2101      	movs	r1, #1
 80094d6:	f7ff ff07 	bl	80092e8 <_Balloc>
 80094da:	4602      	mov	r2, r0
 80094dc:	b928      	cbnz	r0, 80094ea <__i2b+0x1a>
 80094de:	4b05      	ldr	r3, [pc, #20]	@ (80094f4 <__i2b+0x24>)
 80094e0:	4805      	ldr	r0, [pc, #20]	@ (80094f8 <__i2b+0x28>)
 80094e2:	f240 1145 	movw	r1, #325	@ 0x145
 80094e6:	f000 fc41 	bl	8009d6c <__assert_func>
 80094ea:	2301      	movs	r3, #1
 80094ec:	6144      	str	r4, [r0, #20]
 80094ee:	6103      	str	r3, [r0, #16]
 80094f0:	bd10      	pop	{r4, pc}
 80094f2:	bf00      	nop
 80094f4:	0800a3b8 	.word	0x0800a3b8
 80094f8:	0800a3da 	.word	0x0800a3da

080094fc <__multiply>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	4614      	mov	r4, r2
 8009502:	690a      	ldr	r2, [r1, #16]
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	429a      	cmp	r2, r3
 8009508:	bfa8      	it	ge
 800950a:	4623      	movge	r3, r4
 800950c:	460f      	mov	r7, r1
 800950e:	bfa4      	itt	ge
 8009510:	460c      	movge	r4, r1
 8009512:	461f      	movge	r7, r3
 8009514:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009518:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800951c:	68a3      	ldr	r3, [r4, #8]
 800951e:	6861      	ldr	r1, [r4, #4]
 8009520:	eb0a 0609 	add.w	r6, sl, r9
 8009524:	42b3      	cmp	r3, r6
 8009526:	b085      	sub	sp, #20
 8009528:	bfb8      	it	lt
 800952a:	3101      	addlt	r1, #1
 800952c:	f7ff fedc 	bl	80092e8 <_Balloc>
 8009530:	b930      	cbnz	r0, 8009540 <__multiply+0x44>
 8009532:	4602      	mov	r2, r0
 8009534:	4b44      	ldr	r3, [pc, #272]	@ (8009648 <__multiply+0x14c>)
 8009536:	4845      	ldr	r0, [pc, #276]	@ (800964c <__multiply+0x150>)
 8009538:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800953c:	f000 fc16 	bl	8009d6c <__assert_func>
 8009540:	f100 0514 	add.w	r5, r0, #20
 8009544:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009548:	462b      	mov	r3, r5
 800954a:	2200      	movs	r2, #0
 800954c:	4543      	cmp	r3, r8
 800954e:	d321      	bcc.n	8009594 <__multiply+0x98>
 8009550:	f107 0114 	add.w	r1, r7, #20
 8009554:	f104 0214 	add.w	r2, r4, #20
 8009558:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800955c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009560:	9302      	str	r3, [sp, #8]
 8009562:	1b13      	subs	r3, r2, r4
 8009564:	3b15      	subs	r3, #21
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	3304      	adds	r3, #4
 800956c:	f104 0715 	add.w	r7, r4, #21
 8009570:	42ba      	cmp	r2, r7
 8009572:	bf38      	it	cc
 8009574:	2304      	movcc	r3, #4
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	9b02      	ldr	r3, [sp, #8]
 800957a:	9103      	str	r1, [sp, #12]
 800957c:	428b      	cmp	r3, r1
 800957e:	d80c      	bhi.n	800959a <__multiply+0x9e>
 8009580:	2e00      	cmp	r6, #0
 8009582:	dd03      	ble.n	800958c <__multiply+0x90>
 8009584:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009588:	2b00      	cmp	r3, #0
 800958a:	d05b      	beq.n	8009644 <__multiply+0x148>
 800958c:	6106      	str	r6, [r0, #16]
 800958e:	b005      	add	sp, #20
 8009590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009594:	f843 2b04 	str.w	r2, [r3], #4
 8009598:	e7d8      	b.n	800954c <__multiply+0x50>
 800959a:	f8b1 a000 	ldrh.w	sl, [r1]
 800959e:	f1ba 0f00 	cmp.w	sl, #0
 80095a2:	d024      	beq.n	80095ee <__multiply+0xf2>
 80095a4:	f104 0e14 	add.w	lr, r4, #20
 80095a8:	46a9      	mov	r9, r5
 80095aa:	f04f 0c00 	mov.w	ip, #0
 80095ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095b2:	f8d9 3000 	ldr.w	r3, [r9]
 80095b6:	fa1f fb87 	uxth.w	fp, r7
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80095c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80095c4:	f8d9 7000 	ldr.w	r7, [r9]
 80095c8:	4463      	add	r3, ip
 80095ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80095d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095dc:	4572      	cmp	r2, lr
 80095de:	f849 3b04 	str.w	r3, [r9], #4
 80095e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095e6:	d8e2      	bhi.n	80095ae <__multiply+0xb2>
 80095e8:	9b01      	ldr	r3, [sp, #4]
 80095ea:	f845 c003 	str.w	ip, [r5, r3]
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80095f4:	3104      	adds	r1, #4
 80095f6:	f1b9 0f00 	cmp.w	r9, #0
 80095fa:	d021      	beq.n	8009640 <__multiply+0x144>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	f104 0c14 	add.w	ip, r4, #20
 8009602:	46ae      	mov	lr, r5
 8009604:	f04f 0a00 	mov.w	sl, #0
 8009608:	f8bc b000 	ldrh.w	fp, [ip]
 800960c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009610:	fb09 770b 	mla	r7, r9, fp, r7
 8009614:	4457      	add	r7, sl
 8009616:	b29b      	uxth	r3, r3
 8009618:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800961c:	f84e 3b04 	str.w	r3, [lr], #4
 8009620:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009624:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009628:	f8be 3000 	ldrh.w	r3, [lr]
 800962c:	fb09 330a 	mla	r3, r9, sl, r3
 8009630:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009634:	4562      	cmp	r2, ip
 8009636:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800963a:	d8e5      	bhi.n	8009608 <__multiply+0x10c>
 800963c:	9f01      	ldr	r7, [sp, #4]
 800963e:	51eb      	str	r3, [r5, r7]
 8009640:	3504      	adds	r5, #4
 8009642:	e799      	b.n	8009578 <__multiply+0x7c>
 8009644:	3e01      	subs	r6, #1
 8009646:	e79b      	b.n	8009580 <__multiply+0x84>
 8009648:	0800a3b8 	.word	0x0800a3b8
 800964c:	0800a3da 	.word	0x0800a3da

08009650 <__pow5mult>:
 8009650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009654:	4615      	mov	r5, r2
 8009656:	f012 0203 	ands.w	r2, r2, #3
 800965a:	4607      	mov	r7, r0
 800965c:	460e      	mov	r6, r1
 800965e:	d007      	beq.n	8009670 <__pow5mult+0x20>
 8009660:	4c25      	ldr	r4, [pc, #148]	@ (80096f8 <__pow5mult+0xa8>)
 8009662:	3a01      	subs	r2, #1
 8009664:	2300      	movs	r3, #0
 8009666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800966a:	f7ff fe9f 	bl	80093ac <__multadd>
 800966e:	4606      	mov	r6, r0
 8009670:	10ad      	asrs	r5, r5, #2
 8009672:	d03d      	beq.n	80096f0 <__pow5mult+0xa0>
 8009674:	69fc      	ldr	r4, [r7, #28]
 8009676:	b97c      	cbnz	r4, 8009698 <__pow5mult+0x48>
 8009678:	2010      	movs	r0, #16
 800967a:	f7ff fcd3 	bl	8009024 <malloc>
 800967e:	4602      	mov	r2, r0
 8009680:	61f8      	str	r0, [r7, #28]
 8009682:	b928      	cbnz	r0, 8009690 <__pow5mult+0x40>
 8009684:	4b1d      	ldr	r3, [pc, #116]	@ (80096fc <__pow5mult+0xac>)
 8009686:	481e      	ldr	r0, [pc, #120]	@ (8009700 <__pow5mult+0xb0>)
 8009688:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800968c:	f000 fb6e 	bl	8009d6c <__assert_func>
 8009690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009694:	6004      	str	r4, [r0, #0]
 8009696:	60c4      	str	r4, [r0, #12]
 8009698:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800969c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096a0:	b94c      	cbnz	r4, 80096b6 <__pow5mult+0x66>
 80096a2:	f240 2171 	movw	r1, #625	@ 0x271
 80096a6:	4638      	mov	r0, r7
 80096a8:	f7ff ff12 	bl	80094d0 <__i2b>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80096b2:	4604      	mov	r4, r0
 80096b4:	6003      	str	r3, [r0, #0]
 80096b6:	f04f 0900 	mov.w	r9, #0
 80096ba:	07eb      	lsls	r3, r5, #31
 80096bc:	d50a      	bpl.n	80096d4 <__pow5mult+0x84>
 80096be:	4631      	mov	r1, r6
 80096c0:	4622      	mov	r2, r4
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7ff ff1a 	bl	80094fc <__multiply>
 80096c8:	4631      	mov	r1, r6
 80096ca:	4680      	mov	r8, r0
 80096cc:	4638      	mov	r0, r7
 80096ce:	f7ff fe4b 	bl	8009368 <_Bfree>
 80096d2:	4646      	mov	r6, r8
 80096d4:	106d      	asrs	r5, r5, #1
 80096d6:	d00b      	beq.n	80096f0 <__pow5mult+0xa0>
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	b938      	cbnz	r0, 80096ec <__pow5mult+0x9c>
 80096dc:	4622      	mov	r2, r4
 80096de:	4621      	mov	r1, r4
 80096e0:	4638      	mov	r0, r7
 80096e2:	f7ff ff0b 	bl	80094fc <__multiply>
 80096e6:	6020      	str	r0, [r4, #0]
 80096e8:	f8c0 9000 	str.w	r9, [r0]
 80096ec:	4604      	mov	r4, r0
 80096ee:	e7e4      	b.n	80096ba <__pow5mult+0x6a>
 80096f0:	4630      	mov	r0, r6
 80096f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f6:	bf00      	nop
 80096f8:	0800a434 	.word	0x0800a434
 80096fc:	0800a349 	.word	0x0800a349
 8009700:	0800a3da 	.word	0x0800a3da

08009704 <__lshift>:
 8009704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	460c      	mov	r4, r1
 800970a:	6849      	ldr	r1, [r1, #4]
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009712:	68a3      	ldr	r3, [r4, #8]
 8009714:	4607      	mov	r7, r0
 8009716:	4691      	mov	r9, r2
 8009718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800971c:	f108 0601 	add.w	r6, r8, #1
 8009720:	42b3      	cmp	r3, r6
 8009722:	db0b      	blt.n	800973c <__lshift+0x38>
 8009724:	4638      	mov	r0, r7
 8009726:	f7ff fddf 	bl	80092e8 <_Balloc>
 800972a:	4605      	mov	r5, r0
 800972c:	b948      	cbnz	r0, 8009742 <__lshift+0x3e>
 800972e:	4602      	mov	r2, r0
 8009730:	4b28      	ldr	r3, [pc, #160]	@ (80097d4 <__lshift+0xd0>)
 8009732:	4829      	ldr	r0, [pc, #164]	@ (80097d8 <__lshift+0xd4>)
 8009734:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009738:	f000 fb18 	bl	8009d6c <__assert_func>
 800973c:	3101      	adds	r1, #1
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	e7ee      	b.n	8009720 <__lshift+0x1c>
 8009742:	2300      	movs	r3, #0
 8009744:	f100 0114 	add.w	r1, r0, #20
 8009748:	f100 0210 	add.w	r2, r0, #16
 800974c:	4618      	mov	r0, r3
 800974e:	4553      	cmp	r3, sl
 8009750:	db33      	blt.n	80097ba <__lshift+0xb6>
 8009752:	6920      	ldr	r0, [r4, #16]
 8009754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009758:	f104 0314 	add.w	r3, r4, #20
 800975c:	f019 091f 	ands.w	r9, r9, #31
 8009760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009768:	d02b      	beq.n	80097c2 <__lshift+0xbe>
 800976a:	f1c9 0e20 	rsb	lr, r9, #32
 800976e:	468a      	mov	sl, r1
 8009770:	2200      	movs	r2, #0
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	fa00 f009 	lsl.w	r0, r0, r9
 8009778:	4310      	orrs	r0, r2
 800977a:	f84a 0b04 	str.w	r0, [sl], #4
 800977e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009782:	459c      	cmp	ip, r3
 8009784:	fa22 f20e 	lsr.w	r2, r2, lr
 8009788:	d8f3      	bhi.n	8009772 <__lshift+0x6e>
 800978a:	ebac 0304 	sub.w	r3, ip, r4
 800978e:	3b15      	subs	r3, #21
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	3304      	adds	r3, #4
 8009796:	f104 0015 	add.w	r0, r4, #21
 800979a:	4584      	cmp	ip, r0
 800979c:	bf38      	it	cc
 800979e:	2304      	movcc	r3, #4
 80097a0:	50ca      	str	r2, [r1, r3]
 80097a2:	b10a      	cbz	r2, 80097a8 <__lshift+0xa4>
 80097a4:	f108 0602 	add.w	r6, r8, #2
 80097a8:	3e01      	subs	r6, #1
 80097aa:	4638      	mov	r0, r7
 80097ac:	612e      	str	r6, [r5, #16]
 80097ae:	4621      	mov	r1, r4
 80097b0:	f7ff fdda 	bl	8009368 <_Bfree>
 80097b4:	4628      	mov	r0, r5
 80097b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80097be:	3301      	adds	r3, #1
 80097c0:	e7c5      	b.n	800974e <__lshift+0x4a>
 80097c2:	3904      	subs	r1, #4
 80097c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80097cc:	459c      	cmp	ip, r3
 80097ce:	d8f9      	bhi.n	80097c4 <__lshift+0xc0>
 80097d0:	e7ea      	b.n	80097a8 <__lshift+0xa4>
 80097d2:	bf00      	nop
 80097d4:	0800a3b8 	.word	0x0800a3b8
 80097d8:	0800a3da 	.word	0x0800a3da

080097dc <__mcmp>:
 80097dc:	690a      	ldr	r2, [r1, #16]
 80097de:	4603      	mov	r3, r0
 80097e0:	6900      	ldr	r0, [r0, #16]
 80097e2:	1a80      	subs	r0, r0, r2
 80097e4:	b530      	push	{r4, r5, lr}
 80097e6:	d10e      	bne.n	8009806 <__mcmp+0x2a>
 80097e8:	3314      	adds	r3, #20
 80097ea:	3114      	adds	r1, #20
 80097ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80097f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097fc:	4295      	cmp	r5, r2
 80097fe:	d003      	beq.n	8009808 <__mcmp+0x2c>
 8009800:	d205      	bcs.n	800980e <__mcmp+0x32>
 8009802:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009806:	bd30      	pop	{r4, r5, pc}
 8009808:	42a3      	cmp	r3, r4
 800980a:	d3f3      	bcc.n	80097f4 <__mcmp+0x18>
 800980c:	e7fb      	b.n	8009806 <__mcmp+0x2a>
 800980e:	2001      	movs	r0, #1
 8009810:	e7f9      	b.n	8009806 <__mcmp+0x2a>
	...

08009814 <__mdiff>:
 8009814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	4689      	mov	r9, r1
 800981a:	4606      	mov	r6, r0
 800981c:	4611      	mov	r1, r2
 800981e:	4648      	mov	r0, r9
 8009820:	4614      	mov	r4, r2
 8009822:	f7ff ffdb 	bl	80097dc <__mcmp>
 8009826:	1e05      	subs	r5, r0, #0
 8009828:	d112      	bne.n	8009850 <__mdiff+0x3c>
 800982a:	4629      	mov	r1, r5
 800982c:	4630      	mov	r0, r6
 800982e:	f7ff fd5b 	bl	80092e8 <_Balloc>
 8009832:	4602      	mov	r2, r0
 8009834:	b928      	cbnz	r0, 8009842 <__mdiff+0x2e>
 8009836:	4b3f      	ldr	r3, [pc, #252]	@ (8009934 <__mdiff+0x120>)
 8009838:	f240 2137 	movw	r1, #567	@ 0x237
 800983c:	483e      	ldr	r0, [pc, #248]	@ (8009938 <__mdiff+0x124>)
 800983e:	f000 fa95 	bl	8009d6c <__assert_func>
 8009842:	2301      	movs	r3, #1
 8009844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009848:	4610      	mov	r0, r2
 800984a:	b003      	add	sp, #12
 800984c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009850:	bfbc      	itt	lt
 8009852:	464b      	movlt	r3, r9
 8009854:	46a1      	movlt	r9, r4
 8009856:	4630      	mov	r0, r6
 8009858:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800985c:	bfba      	itte	lt
 800985e:	461c      	movlt	r4, r3
 8009860:	2501      	movlt	r5, #1
 8009862:	2500      	movge	r5, #0
 8009864:	f7ff fd40 	bl	80092e8 <_Balloc>
 8009868:	4602      	mov	r2, r0
 800986a:	b918      	cbnz	r0, 8009874 <__mdiff+0x60>
 800986c:	4b31      	ldr	r3, [pc, #196]	@ (8009934 <__mdiff+0x120>)
 800986e:	f240 2145 	movw	r1, #581	@ 0x245
 8009872:	e7e3      	b.n	800983c <__mdiff+0x28>
 8009874:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009878:	6926      	ldr	r6, [r4, #16]
 800987a:	60c5      	str	r5, [r0, #12]
 800987c:	f109 0310 	add.w	r3, r9, #16
 8009880:	f109 0514 	add.w	r5, r9, #20
 8009884:	f104 0e14 	add.w	lr, r4, #20
 8009888:	f100 0b14 	add.w	fp, r0, #20
 800988c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009890:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	46d9      	mov	r9, fp
 8009898:	f04f 0c00 	mov.w	ip, #0
 800989c:	9b01      	ldr	r3, [sp, #4]
 800989e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80098a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80098a6:	9301      	str	r3, [sp, #4]
 80098a8:	fa1f f38a 	uxth.w	r3, sl
 80098ac:	4619      	mov	r1, r3
 80098ae:	b283      	uxth	r3, r0
 80098b0:	1acb      	subs	r3, r1, r3
 80098b2:	0c00      	lsrs	r0, r0, #16
 80098b4:	4463      	add	r3, ip
 80098b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80098ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80098be:	b29b      	uxth	r3, r3
 80098c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80098c4:	4576      	cmp	r6, lr
 80098c6:	f849 3b04 	str.w	r3, [r9], #4
 80098ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098ce:	d8e5      	bhi.n	800989c <__mdiff+0x88>
 80098d0:	1b33      	subs	r3, r6, r4
 80098d2:	3b15      	subs	r3, #21
 80098d4:	f023 0303 	bic.w	r3, r3, #3
 80098d8:	3415      	adds	r4, #21
 80098da:	3304      	adds	r3, #4
 80098dc:	42a6      	cmp	r6, r4
 80098de:	bf38      	it	cc
 80098e0:	2304      	movcc	r3, #4
 80098e2:	441d      	add	r5, r3
 80098e4:	445b      	add	r3, fp
 80098e6:	461e      	mov	r6, r3
 80098e8:	462c      	mov	r4, r5
 80098ea:	4544      	cmp	r4, r8
 80098ec:	d30e      	bcc.n	800990c <__mdiff+0xf8>
 80098ee:	f108 0103 	add.w	r1, r8, #3
 80098f2:	1b49      	subs	r1, r1, r5
 80098f4:	f021 0103 	bic.w	r1, r1, #3
 80098f8:	3d03      	subs	r5, #3
 80098fa:	45a8      	cmp	r8, r5
 80098fc:	bf38      	it	cc
 80098fe:	2100      	movcc	r1, #0
 8009900:	440b      	add	r3, r1
 8009902:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009906:	b191      	cbz	r1, 800992e <__mdiff+0x11a>
 8009908:	6117      	str	r7, [r2, #16]
 800990a:	e79d      	b.n	8009848 <__mdiff+0x34>
 800990c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009910:	46e6      	mov	lr, ip
 8009912:	0c08      	lsrs	r0, r1, #16
 8009914:	fa1c fc81 	uxtah	ip, ip, r1
 8009918:	4471      	add	r1, lr
 800991a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800991e:	b289      	uxth	r1, r1
 8009920:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009924:	f846 1b04 	str.w	r1, [r6], #4
 8009928:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800992c:	e7dd      	b.n	80098ea <__mdiff+0xd6>
 800992e:	3f01      	subs	r7, #1
 8009930:	e7e7      	b.n	8009902 <__mdiff+0xee>
 8009932:	bf00      	nop
 8009934:	0800a3b8 	.word	0x0800a3b8
 8009938:	0800a3da 	.word	0x0800a3da

0800993c <__d2b>:
 800993c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009940:	460f      	mov	r7, r1
 8009942:	2101      	movs	r1, #1
 8009944:	ec59 8b10 	vmov	r8, r9, d0
 8009948:	4616      	mov	r6, r2
 800994a:	f7ff fccd 	bl	80092e8 <_Balloc>
 800994e:	4604      	mov	r4, r0
 8009950:	b930      	cbnz	r0, 8009960 <__d2b+0x24>
 8009952:	4602      	mov	r2, r0
 8009954:	4b23      	ldr	r3, [pc, #140]	@ (80099e4 <__d2b+0xa8>)
 8009956:	4824      	ldr	r0, [pc, #144]	@ (80099e8 <__d2b+0xac>)
 8009958:	f240 310f 	movw	r1, #783	@ 0x30f
 800995c:	f000 fa06 	bl	8009d6c <__assert_func>
 8009960:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009968:	b10d      	cbz	r5, 800996e <__d2b+0x32>
 800996a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	f1b8 0300 	subs.w	r3, r8, #0
 8009974:	d023      	beq.n	80099be <__d2b+0x82>
 8009976:	4668      	mov	r0, sp
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	f7ff fd7c 	bl	8009476 <__lo0bits>
 800997e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009982:	b1d0      	cbz	r0, 80099ba <__d2b+0x7e>
 8009984:	f1c0 0320 	rsb	r3, r0, #32
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	430b      	orrs	r3, r1
 800998e:	40c2      	lsrs	r2, r0
 8009990:	6163      	str	r3, [r4, #20]
 8009992:	9201      	str	r2, [sp, #4]
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	61a3      	str	r3, [r4, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	bf0c      	ite	eq
 800999c:	2201      	moveq	r2, #1
 800999e:	2202      	movne	r2, #2
 80099a0:	6122      	str	r2, [r4, #16]
 80099a2:	b1a5      	cbz	r5, 80099ce <__d2b+0x92>
 80099a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80099a8:	4405      	add	r5, r0
 80099aa:	603d      	str	r5, [r7, #0]
 80099ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80099b0:	6030      	str	r0, [r6, #0]
 80099b2:	4620      	mov	r0, r4
 80099b4:	b003      	add	sp, #12
 80099b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ba:	6161      	str	r1, [r4, #20]
 80099bc:	e7ea      	b.n	8009994 <__d2b+0x58>
 80099be:	a801      	add	r0, sp, #4
 80099c0:	f7ff fd59 	bl	8009476 <__lo0bits>
 80099c4:	9b01      	ldr	r3, [sp, #4]
 80099c6:	6163      	str	r3, [r4, #20]
 80099c8:	3020      	adds	r0, #32
 80099ca:	2201      	movs	r2, #1
 80099cc:	e7e8      	b.n	80099a0 <__d2b+0x64>
 80099ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80099d6:	6038      	str	r0, [r7, #0]
 80099d8:	6918      	ldr	r0, [r3, #16]
 80099da:	f7ff fd2d 	bl	8009438 <__hi0bits>
 80099de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099e2:	e7e5      	b.n	80099b0 <__d2b+0x74>
 80099e4:	0800a3b8 	.word	0x0800a3b8
 80099e8:	0800a3da 	.word	0x0800a3da

080099ec <__sread>:
 80099ec:	b510      	push	{r4, lr}
 80099ee:	460c      	mov	r4, r1
 80099f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f4:	f000 f978 	bl	8009ce8 <_read_r>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	bfab      	itete	ge
 80099fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009a00:	181b      	addge	r3, r3, r0
 8009a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a06:	bfac      	ite	ge
 8009a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a0a:	81a3      	strhlt	r3, [r4, #12]
 8009a0c:	bd10      	pop	{r4, pc}

08009a0e <__swrite>:
 8009a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a12:	461f      	mov	r7, r3
 8009a14:	898b      	ldrh	r3, [r1, #12]
 8009a16:	05db      	lsls	r3, r3, #23
 8009a18:	4605      	mov	r5, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	4616      	mov	r6, r2
 8009a1e:	d505      	bpl.n	8009a2c <__swrite+0x1e>
 8009a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a24:	2302      	movs	r3, #2
 8009a26:	2200      	movs	r2, #0
 8009a28:	f000 f94c 	bl	8009cc4 <_lseek_r>
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	4632      	mov	r2, r6
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a42:	f000 b973 	b.w	8009d2c <_write_r>

08009a46 <__sseek>:
 8009a46:	b510      	push	{r4, lr}
 8009a48:	460c      	mov	r4, r1
 8009a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4e:	f000 f939 	bl	8009cc4 <_lseek_r>
 8009a52:	1c43      	adds	r3, r0, #1
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	bf15      	itete	ne
 8009a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a62:	81a3      	strheq	r3, [r4, #12]
 8009a64:	bf18      	it	ne
 8009a66:	81a3      	strhne	r3, [r4, #12]
 8009a68:	bd10      	pop	{r4, pc}

08009a6a <__sclose>:
 8009a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6e:	f000 b8f7 	b.w	8009c60 <_close_r>

08009a72 <__swbuf_r>:
 8009a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a74:	460e      	mov	r6, r1
 8009a76:	4614      	mov	r4, r2
 8009a78:	4605      	mov	r5, r0
 8009a7a:	b118      	cbz	r0, 8009a84 <__swbuf_r+0x12>
 8009a7c:	6a03      	ldr	r3, [r0, #32]
 8009a7e:	b90b      	cbnz	r3, 8009a84 <__swbuf_r+0x12>
 8009a80:	f7fe fabe 	bl	8008000 <__sinit>
 8009a84:	69a3      	ldr	r3, [r4, #24]
 8009a86:	60a3      	str	r3, [r4, #8]
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	071a      	lsls	r2, r3, #28
 8009a8c:	d501      	bpl.n	8009a92 <__swbuf_r+0x20>
 8009a8e:	6923      	ldr	r3, [r4, #16]
 8009a90:	b943      	cbnz	r3, 8009aa4 <__swbuf_r+0x32>
 8009a92:	4621      	mov	r1, r4
 8009a94:	4628      	mov	r0, r5
 8009a96:	f000 f82b 	bl	8009af0 <__swsetup_r>
 8009a9a:	b118      	cbz	r0, 8009aa4 <__swbuf_r+0x32>
 8009a9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	6922      	ldr	r2, [r4, #16]
 8009aa8:	1a98      	subs	r0, r3, r2
 8009aaa:	6963      	ldr	r3, [r4, #20]
 8009aac:	b2f6      	uxtb	r6, r6
 8009aae:	4283      	cmp	r3, r0
 8009ab0:	4637      	mov	r7, r6
 8009ab2:	dc05      	bgt.n	8009ac0 <__swbuf_r+0x4e>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f7ff fbe2 	bl	8009280 <_fflush_r>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d1ed      	bne.n	8009a9c <__swbuf_r+0x2a>
 8009ac0:	68a3      	ldr	r3, [r4, #8]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	60a3      	str	r3, [r4, #8]
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	6022      	str	r2, [r4, #0]
 8009acc:	701e      	strb	r6, [r3, #0]
 8009ace:	6962      	ldr	r2, [r4, #20]
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d004      	beq.n	8009ae0 <__swbuf_r+0x6e>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	07db      	lsls	r3, r3, #31
 8009ada:	d5e1      	bpl.n	8009aa0 <__swbuf_r+0x2e>
 8009adc:	2e0a      	cmp	r6, #10
 8009ade:	d1df      	bne.n	8009aa0 <__swbuf_r+0x2e>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f7ff fbcc 	bl	8009280 <_fflush_r>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d0d9      	beq.n	8009aa0 <__swbuf_r+0x2e>
 8009aec:	e7d6      	b.n	8009a9c <__swbuf_r+0x2a>
	...

08009af0 <__swsetup_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4b29      	ldr	r3, [pc, #164]	@ (8009b98 <__swsetup_r+0xa8>)
 8009af4:	4605      	mov	r5, r0
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	460c      	mov	r4, r1
 8009afa:	b118      	cbz	r0, 8009b04 <__swsetup_r+0x14>
 8009afc:	6a03      	ldr	r3, [r0, #32]
 8009afe:	b90b      	cbnz	r3, 8009b04 <__swsetup_r+0x14>
 8009b00:	f7fe fa7e 	bl	8008000 <__sinit>
 8009b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b08:	0719      	lsls	r1, r3, #28
 8009b0a:	d422      	bmi.n	8009b52 <__swsetup_r+0x62>
 8009b0c:	06da      	lsls	r2, r3, #27
 8009b0e:	d407      	bmi.n	8009b20 <__swsetup_r+0x30>
 8009b10:	2209      	movs	r2, #9
 8009b12:	602a      	str	r2, [r5, #0]
 8009b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b1e:	e033      	b.n	8009b88 <__swsetup_r+0x98>
 8009b20:	0758      	lsls	r0, r3, #29
 8009b22:	d512      	bpl.n	8009b4a <__swsetup_r+0x5a>
 8009b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b26:	b141      	cbz	r1, 8009b3a <__swsetup_r+0x4a>
 8009b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b2c:	4299      	cmp	r1, r3
 8009b2e:	d002      	beq.n	8009b36 <__swsetup_r+0x46>
 8009b30:	4628      	mov	r0, r5
 8009b32:	f000 f94d 	bl	8009dd0 <_free_r>
 8009b36:	2300      	movs	r3, #0
 8009b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	2300      	movs	r3, #0
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	f043 0308 	orr.w	r3, r3, #8
 8009b50:	81a3      	strh	r3, [r4, #12]
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	b94b      	cbnz	r3, 8009b6a <__swsetup_r+0x7a>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b60:	d003      	beq.n	8009b6a <__swsetup_r+0x7a>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 f83f 	bl	8009be8 <__smakebuf_r>
 8009b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b6e:	f013 0201 	ands.w	r2, r3, #1
 8009b72:	d00a      	beq.n	8009b8a <__swsetup_r+0x9a>
 8009b74:	2200      	movs	r2, #0
 8009b76:	60a2      	str	r2, [r4, #8]
 8009b78:	6962      	ldr	r2, [r4, #20]
 8009b7a:	4252      	negs	r2, r2
 8009b7c:	61a2      	str	r2, [r4, #24]
 8009b7e:	6922      	ldr	r2, [r4, #16]
 8009b80:	b942      	cbnz	r2, 8009b94 <__swsetup_r+0xa4>
 8009b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b86:	d1c5      	bne.n	8009b14 <__swsetup_r+0x24>
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
 8009b8a:	0799      	lsls	r1, r3, #30
 8009b8c:	bf58      	it	pl
 8009b8e:	6962      	ldrpl	r2, [r4, #20]
 8009b90:	60a2      	str	r2, [r4, #8]
 8009b92:	e7f4      	b.n	8009b7e <__swsetup_r+0x8e>
 8009b94:	2000      	movs	r0, #0
 8009b96:	e7f7      	b.n	8009b88 <__swsetup_r+0x98>
 8009b98:	2000002c 	.word	0x2000002c

08009b9c <__swhatbuf_r>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba4:	2900      	cmp	r1, #0
 8009ba6:	b096      	sub	sp, #88	@ 0x58
 8009ba8:	4615      	mov	r5, r2
 8009baa:	461e      	mov	r6, r3
 8009bac:	da0d      	bge.n	8009bca <__swhatbuf_r+0x2e>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009bb4:	f04f 0100 	mov.w	r1, #0
 8009bb8:	bf14      	ite	ne
 8009bba:	2340      	movne	r3, #64	@ 0x40
 8009bbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	6031      	str	r1, [r6, #0]
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	b016      	add	sp, #88	@ 0x58
 8009bc8:	bd70      	pop	{r4, r5, r6, pc}
 8009bca:	466a      	mov	r2, sp
 8009bcc:	f000 f858 	bl	8009c80 <_fstat_r>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	dbec      	blt.n	8009bae <__swhatbuf_r+0x12>
 8009bd4:	9901      	ldr	r1, [sp, #4]
 8009bd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009bda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009bde:	4259      	negs	r1, r3
 8009be0:	4159      	adcs	r1, r3
 8009be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009be6:	e7eb      	b.n	8009bc0 <__swhatbuf_r+0x24>

08009be8 <__smakebuf_r>:
 8009be8:	898b      	ldrh	r3, [r1, #12]
 8009bea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bec:	079d      	lsls	r5, r3, #30
 8009bee:	4606      	mov	r6, r0
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	d507      	bpl.n	8009c04 <__smakebuf_r+0x1c>
 8009bf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	6123      	str	r3, [r4, #16]
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	6163      	str	r3, [r4, #20]
 8009c00:	b003      	add	sp, #12
 8009c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c04:	ab01      	add	r3, sp, #4
 8009c06:	466a      	mov	r2, sp
 8009c08:	f7ff ffc8 	bl	8009b9c <__swhatbuf_r>
 8009c0c:	9f00      	ldr	r7, [sp, #0]
 8009c0e:	4605      	mov	r5, r0
 8009c10:	4639      	mov	r1, r7
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7ff fa30 	bl	8009078 <_malloc_r>
 8009c18:	b948      	cbnz	r0, 8009c2e <__smakebuf_r+0x46>
 8009c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c1e:	059a      	lsls	r2, r3, #22
 8009c20:	d4ee      	bmi.n	8009c00 <__smakebuf_r+0x18>
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	f043 0302 	orr.w	r3, r3, #2
 8009c2a:	81a3      	strh	r3, [r4, #12]
 8009c2c:	e7e2      	b.n	8009bf4 <__smakebuf_r+0xc>
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	6020      	str	r0, [r4, #0]
 8009c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	9b01      	ldr	r3, [sp, #4]
 8009c3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c3e:	b15b      	cbz	r3, 8009c58 <__smakebuf_r+0x70>
 8009c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c44:	4630      	mov	r0, r6
 8009c46:	f000 f82d 	bl	8009ca4 <_isatty_r>
 8009c4a:	b128      	cbz	r0, 8009c58 <__smakebuf_r+0x70>
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	f023 0303 	bic.w	r3, r3, #3
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	431d      	orrs	r5, r3
 8009c5c:	81a5      	strh	r5, [r4, #12]
 8009c5e:	e7cf      	b.n	8009c00 <__smakebuf_r+0x18>

08009c60 <_close_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d06      	ldr	r5, [pc, #24]	@ (8009c7c <_close_r+0x1c>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f7f7 feca 	bl	8001a04 <_close>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_close_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_close_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20000568 	.word	0x20000568

08009c80 <_fstat_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d07      	ldr	r5, [pc, #28]	@ (8009ca0 <_fstat_r+0x20>)
 8009c84:	2300      	movs	r3, #0
 8009c86:	4604      	mov	r4, r0
 8009c88:	4608      	mov	r0, r1
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	602b      	str	r3, [r5, #0]
 8009c8e:	f7f7 fec5 	bl	8001a1c <_fstat>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	d102      	bne.n	8009c9c <_fstat_r+0x1c>
 8009c96:	682b      	ldr	r3, [r5, #0]
 8009c98:	b103      	cbz	r3, 8009c9c <_fstat_r+0x1c>
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	bd38      	pop	{r3, r4, r5, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20000568 	.word	0x20000568

08009ca4 <_isatty_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d06      	ldr	r5, [pc, #24]	@ (8009cc0 <_isatty_r+0x1c>)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4604      	mov	r4, r0
 8009cac:	4608      	mov	r0, r1
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	f7f7 fec4 	bl	8001a3c <_isatty>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d102      	bne.n	8009cbe <_isatty_r+0x1a>
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	b103      	cbz	r3, 8009cbe <_isatty_r+0x1a>
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	20000568 	.word	0x20000568

08009cc4 <_lseek_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4d07      	ldr	r5, [pc, #28]	@ (8009ce4 <_lseek_r+0x20>)
 8009cc8:	4604      	mov	r4, r0
 8009cca:	4608      	mov	r0, r1
 8009ccc:	4611      	mov	r1, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	602a      	str	r2, [r5, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f7f7 febd 	bl	8001a52 <_lseek>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d102      	bne.n	8009ce2 <_lseek_r+0x1e>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b103      	cbz	r3, 8009ce2 <_lseek_r+0x1e>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	20000568 	.word	0x20000568

08009ce8 <_read_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d07      	ldr	r5, [pc, #28]	@ (8009d08 <_read_r+0x20>)
 8009cec:	4604      	mov	r4, r0
 8009cee:	4608      	mov	r0, r1
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	602a      	str	r2, [r5, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f7f7 fe67 	bl	80019ca <_read>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d102      	bne.n	8009d06 <_read_r+0x1e>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	b103      	cbz	r3, 8009d06 <_read_r+0x1e>
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	20000568 	.word	0x20000568

08009d0c <_sbrk_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d06      	ldr	r5, [pc, #24]	@ (8009d28 <_sbrk_r+0x1c>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	602b      	str	r3, [r5, #0]
 8009d18:	f7f7 fea8 	bl	8001a6c <_sbrk>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_sbrk_r+0x1a>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_sbrk_r+0x1a>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	20000568 	.word	0x20000568

08009d2c <_write_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d07      	ldr	r5, [pc, #28]	@ (8009d4c <_write_r+0x20>)
 8009d30:	4604      	mov	r4, r0
 8009d32:	4608      	mov	r0, r1
 8009d34:	4611      	mov	r1, r2
 8009d36:	2200      	movs	r2, #0
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f7f7 fbcc 	bl	80014d8 <_write>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_write_r+0x1e>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_write_r+0x1e>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	20000568 	.word	0x20000568

08009d50 <memcpy>:
 8009d50:	440a      	add	r2, r1
 8009d52:	4291      	cmp	r1, r2
 8009d54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009d58:	d100      	bne.n	8009d5c <memcpy+0xc>
 8009d5a:	4770      	bx	lr
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d66:	4291      	cmp	r1, r2
 8009d68:	d1f9      	bne.n	8009d5e <memcpy+0xe>
 8009d6a:	bd10      	pop	{r4, pc}

08009d6c <__assert_func>:
 8009d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d6e:	4614      	mov	r4, r2
 8009d70:	461a      	mov	r2, r3
 8009d72:	4b09      	ldr	r3, [pc, #36]	@ (8009d98 <__assert_func+0x2c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4605      	mov	r5, r0
 8009d78:	68d8      	ldr	r0, [r3, #12]
 8009d7a:	b954      	cbnz	r4, 8009d92 <__assert_func+0x26>
 8009d7c:	4b07      	ldr	r3, [pc, #28]	@ (8009d9c <__assert_func+0x30>)
 8009d7e:	461c      	mov	r4, r3
 8009d80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d84:	9100      	str	r1, [sp, #0]
 8009d86:	462b      	mov	r3, r5
 8009d88:	4905      	ldr	r1, [pc, #20]	@ (8009da0 <__assert_func+0x34>)
 8009d8a:	f000 f87d 	bl	8009e88 <fiprintf>
 8009d8e:	f000 f89a 	bl	8009ec6 <abort>
 8009d92:	4b04      	ldr	r3, [pc, #16]	@ (8009da4 <__assert_func+0x38>)
 8009d94:	e7f4      	b.n	8009d80 <__assert_func+0x14>
 8009d96:	bf00      	nop
 8009d98:	2000002c 	.word	0x2000002c
 8009d9c:	0800a676 	.word	0x0800a676
 8009da0:	0800a648 	.word	0x0800a648
 8009da4:	0800a63b 	.word	0x0800a63b

08009da8 <_calloc_r>:
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	fba1 5402 	umull	r5, r4, r1, r2
 8009dae:	b93c      	cbnz	r4, 8009dc0 <_calloc_r+0x18>
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7ff f961 	bl	8009078 <_malloc_r>
 8009db6:	4606      	mov	r6, r0
 8009db8:	b928      	cbnz	r0, 8009dc6 <_calloc_r+0x1e>
 8009dba:	2600      	movs	r6, #0
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}
 8009dc0:	220c      	movs	r2, #12
 8009dc2:	6002      	str	r2, [r0, #0]
 8009dc4:	e7f9      	b.n	8009dba <_calloc_r+0x12>
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4621      	mov	r1, r4
 8009dca:	f7fe f961 	bl	8008090 <memset>
 8009dce:	e7f5      	b.n	8009dbc <_calloc_r+0x14>

08009dd0 <_free_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	d041      	beq.n	8009e5c <_free_r+0x8c>
 8009dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ddc:	1f0c      	subs	r4, r1, #4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfb8      	it	lt
 8009de2:	18e4      	addlt	r4, r4, r3
 8009de4:	f7ff fa74 	bl	80092d0 <__malloc_lock>
 8009de8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e60 <_free_r+0x90>)
 8009dea:	6813      	ldr	r3, [r2, #0]
 8009dec:	b933      	cbnz	r3, 8009dfc <_free_r+0x2c>
 8009dee:	6063      	str	r3, [r4, #4]
 8009df0:	6014      	str	r4, [r2, #0]
 8009df2:	4628      	mov	r0, r5
 8009df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009df8:	f7ff ba70 	b.w	80092dc <__malloc_unlock>
 8009dfc:	42a3      	cmp	r3, r4
 8009dfe:	d908      	bls.n	8009e12 <_free_r+0x42>
 8009e00:	6820      	ldr	r0, [r4, #0]
 8009e02:	1821      	adds	r1, r4, r0
 8009e04:	428b      	cmp	r3, r1
 8009e06:	bf01      	itttt	eq
 8009e08:	6819      	ldreq	r1, [r3, #0]
 8009e0a:	685b      	ldreq	r3, [r3, #4]
 8009e0c:	1809      	addeq	r1, r1, r0
 8009e0e:	6021      	streq	r1, [r4, #0]
 8009e10:	e7ed      	b.n	8009dee <_free_r+0x1e>
 8009e12:	461a      	mov	r2, r3
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	b10b      	cbz	r3, 8009e1c <_free_r+0x4c>
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	d9fa      	bls.n	8009e12 <_free_r+0x42>
 8009e1c:	6811      	ldr	r1, [r2, #0]
 8009e1e:	1850      	adds	r0, r2, r1
 8009e20:	42a0      	cmp	r0, r4
 8009e22:	d10b      	bne.n	8009e3c <_free_r+0x6c>
 8009e24:	6820      	ldr	r0, [r4, #0]
 8009e26:	4401      	add	r1, r0
 8009e28:	1850      	adds	r0, r2, r1
 8009e2a:	4283      	cmp	r3, r0
 8009e2c:	6011      	str	r1, [r2, #0]
 8009e2e:	d1e0      	bne.n	8009df2 <_free_r+0x22>
 8009e30:	6818      	ldr	r0, [r3, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	6053      	str	r3, [r2, #4]
 8009e36:	4408      	add	r0, r1
 8009e38:	6010      	str	r0, [r2, #0]
 8009e3a:	e7da      	b.n	8009df2 <_free_r+0x22>
 8009e3c:	d902      	bls.n	8009e44 <_free_r+0x74>
 8009e3e:	230c      	movs	r3, #12
 8009e40:	602b      	str	r3, [r5, #0]
 8009e42:	e7d6      	b.n	8009df2 <_free_r+0x22>
 8009e44:	6820      	ldr	r0, [r4, #0]
 8009e46:	1821      	adds	r1, r4, r0
 8009e48:	428b      	cmp	r3, r1
 8009e4a:	bf04      	itt	eq
 8009e4c:	6819      	ldreq	r1, [r3, #0]
 8009e4e:	685b      	ldreq	r3, [r3, #4]
 8009e50:	6063      	str	r3, [r4, #4]
 8009e52:	bf04      	itt	eq
 8009e54:	1809      	addeq	r1, r1, r0
 8009e56:	6021      	streq	r1, [r4, #0]
 8009e58:	6054      	str	r4, [r2, #4]
 8009e5a:	e7ca      	b.n	8009df2 <_free_r+0x22>
 8009e5c:	bd38      	pop	{r3, r4, r5, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000564 	.word	0x20000564

08009e64 <__ascii_mbtowc>:
 8009e64:	b082      	sub	sp, #8
 8009e66:	b901      	cbnz	r1, 8009e6a <__ascii_mbtowc+0x6>
 8009e68:	a901      	add	r1, sp, #4
 8009e6a:	b142      	cbz	r2, 8009e7e <__ascii_mbtowc+0x1a>
 8009e6c:	b14b      	cbz	r3, 8009e82 <__ascii_mbtowc+0x1e>
 8009e6e:	7813      	ldrb	r3, [r2, #0]
 8009e70:	600b      	str	r3, [r1, #0]
 8009e72:	7812      	ldrb	r2, [r2, #0]
 8009e74:	1e10      	subs	r0, r2, #0
 8009e76:	bf18      	it	ne
 8009e78:	2001      	movne	r0, #1
 8009e7a:	b002      	add	sp, #8
 8009e7c:	4770      	bx	lr
 8009e7e:	4610      	mov	r0, r2
 8009e80:	e7fb      	b.n	8009e7a <__ascii_mbtowc+0x16>
 8009e82:	f06f 0001 	mvn.w	r0, #1
 8009e86:	e7f8      	b.n	8009e7a <__ascii_mbtowc+0x16>

08009e88 <fiprintf>:
 8009e88:	b40e      	push	{r1, r2, r3}
 8009e8a:	b503      	push	{r0, r1, lr}
 8009e8c:	4601      	mov	r1, r0
 8009e8e:	ab03      	add	r3, sp, #12
 8009e90:	4805      	ldr	r0, [pc, #20]	@ (8009ea8 <fiprintf+0x20>)
 8009e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e96:	6800      	ldr	r0, [r0, #0]
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	f7fe ffab 	bl	8008df4 <_vfiprintf_r>
 8009e9e:	b002      	add	sp, #8
 8009ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ea4:	b003      	add	sp, #12
 8009ea6:	4770      	bx	lr
 8009ea8:	2000002c 	.word	0x2000002c

08009eac <__ascii_wctomb>:
 8009eac:	4603      	mov	r3, r0
 8009eae:	4608      	mov	r0, r1
 8009eb0:	b141      	cbz	r1, 8009ec4 <__ascii_wctomb+0x18>
 8009eb2:	2aff      	cmp	r2, #255	@ 0xff
 8009eb4:	d904      	bls.n	8009ec0 <__ascii_wctomb+0x14>
 8009eb6:	228a      	movs	r2, #138	@ 0x8a
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ebe:	4770      	bx	lr
 8009ec0:	700a      	strb	r2, [r1, #0]
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	4770      	bx	lr

08009ec6 <abort>:
 8009ec6:	b508      	push	{r3, lr}
 8009ec8:	2006      	movs	r0, #6
 8009eca:	f000 f82b 	bl	8009f24 <raise>
 8009ece:	2001      	movs	r0, #1
 8009ed0:	f7f7 fd70 	bl	80019b4 <_exit>

08009ed4 <_raise_r>:
 8009ed4:	291f      	cmp	r1, #31
 8009ed6:	b538      	push	{r3, r4, r5, lr}
 8009ed8:	4605      	mov	r5, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	d904      	bls.n	8009ee8 <_raise_r+0x14>
 8009ede:	2316      	movs	r3, #22
 8009ee0:	6003      	str	r3, [r0, #0]
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009eea:	b112      	cbz	r2, 8009ef2 <_raise_r+0x1e>
 8009eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ef0:	b94b      	cbnz	r3, 8009f06 <_raise_r+0x32>
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f000 f830 	bl	8009f58 <_getpid_r>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4601      	mov	r1, r0
 8009efc:	4628      	mov	r0, r5
 8009efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f02:	f000 b817 	b.w	8009f34 <_kill_r>
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d00a      	beq.n	8009f20 <_raise_r+0x4c>
 8009f0a:	1c59      	adds	r1, r3, #1
 8009f0c:	d103      	bne.n	8009f16 <_raise_r+0x42>
 8009f0e:	2316      	movs	r3, #22
 8009f10:	6003      	str	r3, [r0, #0]
 8009f12:	2001      	movs	r0, #1
 8009f14:	e7e7      	b.n	8009ee6 <_raise_r+0x12>
 8009f16:	2100      	movs	r1, #0
 8009f18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4798      	blx	r3
 8009f20:	2000      	movs	r0, #0
 8009f22:	e7e0      	b.n	8009ee6 <_raise_r+0x12>

08009f24 <raise>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	@ (8009f30 <raise+0xc>)
 8009f26:	4601      	mov	r1, r0
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f7ff bfd3 	b.w	8009ed4 <_raise_r>
 8009f2e:	bf00      	nop
 8009f30:	2000002c 	.word	0x2000002c

08009f34 <_kill_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d07      	ldr	r5, [pc, #28]	@ (8009f54 <_kill_r+0x20>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	f7f7 fd27 	bl	8001994 <_kill>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d102      	bne.n	8009f50 <_kill_r+0x1c>
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	b103      	cbz	r3, 8009f50 <_kill_r+0x1c>
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	20000568 	.word	0x20000568

08009f58 <_getpid_r>:
 8009f58:	f7f7 bd14 	b.w	8001984 <_getpid>

08009f5c <_init>:
 8009f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5e:	bf00      	nop
 8009f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f62:	bc08      	pop	{r3}
 8009f64:	469e      	mov	lr, r3
 8009f66:	4770      	bx	lr

08009f68 <_fini>:
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	bf00      	nop
 8009f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6e:	bc08      	pop	{r3}
 8009f70:	469e      	mov	lr, r3
 8009f72:	4770      	bx	lr
