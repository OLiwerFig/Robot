
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005cd0  08005cd0  00006cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dfc  08005dfc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005dfc  08005dfc  00006dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e04  08005e04  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e04  08005e04  00006e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e08  08005e08  00006e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005e0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000068  08005e74  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08005e74  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c5f  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fd  00000000  00000000  00017cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c15  00000000  00000000  0001b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d2d  00000000  00000000  0001bd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012525  00000000  00000000  00043aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4165  00000000  00000000  00055fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  0014a198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014e9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cb8 	.word	0x08005cb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005cb8 	.word	0x08005cb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b3c      	ldr	r3, [pc, #240]	@ (8000668 <MX_GPIO_Init+0x108>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a3b      	ldr	r2, [pc, #236]	@ (8000668 <MX_GPIO_Init+0x108>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_GPIO_Init+0x108>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_GPIO_Init+0x108>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a35      	ldr	r2, [pc, #212]	@ (8000668 <MX_GPIO_Init+0x108>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_GPIO_Init+0x108>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b2a      	ldr	r3, [pc, #168]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a29      	ldr	r2, [pc, #164]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f001 f90d 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7158 	mov.w	r1, #864	@ 0x360
 80005e8:	4820      	ldr	r0, [pc, #128]	@ (800066c <MX_GPIO_Init+0x10c>)
 80005ea:	f001 f907 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4819      	ldr	r0, [pc, #100]	@ (800066c <MX_GPIO_Init+0x10c>)
 8000606:	f000 ff4f 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060a:	2320      	movs	r3, #32
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000624:	f000 ff40 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000628:	f44f 7358 	mov.w	r3, #864	@ 0x360
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	480a      	ldr	r0, [pc, #40]	@ (800066c <MX_GPIO_Init+0x10c>)
 8000642:	f000 ff31 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000646:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_GPIO_Init+0x110>)
 800065c:	f000 ff24 	bl	80014a8 <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	@ 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	48000800 	.word	0x48000800
 8000670:	48000400 	.word	0x48000400

08000674 <SetMotorDirection>:

void UART_Transmit(const char *data) {
    HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}

void SetMotorDirection(int direction_L, int direction_R) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]

    if (direction_L == 1) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10b      	bne.n	800069c <SetMotorDirection+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800068a:	4819      	ldr	r0, [pc, #100]	@ (80006f0 <SetMotorDirection+0x7c>)
 800068c:	f001 f8b6 	bl	80017fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2120      	movs	r1, #32
 8000694:	4816      	ldr	r0, [pc, #88]	@ (80006f0 <SetMotorDirection+0x7c>)
 8000696:	f001 f8b1 	bl	80017fc <HAL_GPIO_WritePin>
 800069a:	e00a      	b.n	80006b2 <SetMotorDirection+0x3e>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006a2:	4813      	ldr	r0, [pc, #76]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006a4:	f001 f8aa 	bl	80017fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2120      	movs	r1, #32
 80006ac:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006ae:	f001 f8a5 	bl	80017fc <HAL_GPIO_WritePin>
    }

    if (direction_R == 1) {
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d10b      	bne.n	80006d0 <SetMotorDirection+0x5c>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006be:	f001 f89d 	bl	80017fc <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c8:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006ca:	f001 f897 	bl	80017fc <HAL_GPIO_WritePin>
          } else {
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
          }

}
 80006ce:	e00a      	b.n	80006e6 <SetMotorDirection+0x72>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2140      	movs	r1, #64	@ 0x40
 80006d4:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006d6:	f001 f891 	bl	80017fc <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006e2:	f001 f88b 	bl	80017fc <HAL_GPIO_WritePin>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	48000800 	.word	0x48000800

080006f4 <_write>:
    } else {
        UART_Transmit("Sensor 2: No object detected\r\n");
    }
}

int _write(int file, char* ptr, int len){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	b29a      	uxth	r2, r3
 8000704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	4804      	ldr	r0, [pc, #16]	@ (800071c <_write+0x28>)
 800070c:	f003 fe4e 	bl	80043ac <HAL_UART_Transmit>
	return len;
 8000710:	687b      	ldr	r3, [r7, #4]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001c0 	.word	0x200001c0

08000720 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    if(htim == &htim6){
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a0e      	ldr	r2, [pc, #56]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d113      	bne.n	8000758 <HAL_TIM_PeriodElapsedCallback+0x38>

    	speed_L = ENCODER_MESURMENT_FREQUENCY * __HAL_TIM_GET_COUNTER(&htim2);
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4a0c      	ldr	r2, [pc, #48]	@ (800076c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800073a:	6013      	str	r3, [r2, #0]
    	htim2.Instance->CNT = 0;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24

    	speed_R = ENCODER_MESURMENT_FREQUENCY * __HAL_TIM_GET_COUNTER(&htim3);
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4a09      	ldr	r2, [pc, #36]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800074e:	6013      	str	r3, [r2, #0]
    	htim3.Instance->CNT = 0;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	@ 0x24

    }
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000174 	.word	0x20000174
 8000768:	200000dc 	.word	0x200000dc
 800076c:	20000084 	.word	0x20000084
 8000770:	20000128 	.word	0x20000128
 8000774:	20000088 	.word	0x20000088

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t count = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
	uint32_t count1 = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 fcdd 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f867 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f7ff fee7 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000792:	f000 fc21 	bl	8000fd8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000796:	f000 f9b1 	bl	8000afc <MX_TIM1_Init>
  MX_TIM2_Init();
 800079a:	f000 fa4b 	bl	8000c34 <MX_TIM2_Init>
  MX_TIM3_Init();
 800079e:	f000 fa9d 	bl	8000cdc <MX_TIM3_Init>
  MX_TIM6_Init();
 80007a2:	f000 faf1 	bl	8000d88 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007a6:	2100      	movs	r1, #0
 80007a8:	4823      	ldr	r0, [pc, #140]	@ (8000838 <main+0xc0>)
 80007aa:	f002 fc7f 	bl	80030ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007ae:	2104      	movs	r1, #4
 80007b0:	4821      	ldr	r0, [pc, #132]	@ (8000838 <main+0xc0>)
 80007b2:	f002 fc7b 	bl	80030ac <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <main+0xc0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2264      	movs	r2, #100	@ 0x64
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <main+0xc0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2264      	movs	r2, #100	@ 0x64
 80007c4:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80007c6:	213c      	movs	r1, #60	@ 0x3c
 80007c8:	481c      	ldr	r0, [pc, #112]	@ (800083c <main+0xc4>)
 80007ca:	f002 fe1b 	bl	8003404 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80007ce:	213c      	movs	r1, #60	@ 0x3c
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <main+0xc8>)
 80007d2:	f002 fe17 	bl	8003404 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 80007d6:	481b      	ldr	r0, [pc, #108]	@ (8000844 <main+0xcc>)
 80007d8:	f002 fba0 	bl	8002f1c <HAL_TIM_Base_Start_IT>


  SetMotorDirection(0,0);
 80007dc:	2100      	movs	r1, #0
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ff48 	bl	8000674 <SetMotorDirection>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count = __HAL_TIM_GET_COUNTER(&htim2);
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <main+0xc4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ea:	607b      	str	r3, [r7, #4]
	  count1 = __HAL_TIM_GET_COUNTER(&htim3);
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <main+0xc8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f2:	603b      	str	r3, [r7, #0]



		 printf("%ld\n\r", speed_L);
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <main+0xd0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	4814      	ldr	r0, [pc, #80]	@ (800084c <main+0xd4>)
 80007fc:	f004 fbf0 	bl	8004fe0 <iprintf>
		 printf("%ld\n\r", speed_R);
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <main+0xd8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	4811      	ldr	r0, [pc, #68]	@ (800084c <main+0xd4>)
 8000808:	f004 fbea 	bl	8004fe0 <iprintf>


		 printf("prawy enkoder   %ld\n\r", count);
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	4811      	ldr	r0, [pc, #68]	@ (8000854 <main+0xdc>)
 8000810:	f004 fbe6 	bl	8004fe0 <iprintf>
		 printf("lewy enkoder   %ld\n\r", count1);
 8000814:	6839      	ldr	r1, [r7, #0]
 8000816:	4810      	ldr	r0, [pc, #64]	@ (8000858 <main+0xe0>)
 8000818:	f004 fbe2 	bl	8004fe0 <iprintf>


		 HAL_Delay(5000);
 800081c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000820:	f000 fd0c 	bl	800123c <HAL_Delay>

		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <main+0xc0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	@ 0x34
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800082c:	4b02      	ldr	r3, [pc, #8]	@ (8000838 <main+0xc0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2200      	movs	r2, #0
 8000832:	639a      	str	r2, [r3, #56]	@ 0x38
	  count = __HAL_TIM_GET_COUNTER(&htim2);
 8000834:	bf00      	nop
 8000836:	e7d5      	b.n	80007e4 <main+0x6c>
 8000838:	20000090 	.word	0x20000090
 800083c:	200000dc 	.word	0x200000dc
 8000840:	20000128 	.word	0x20000128
 8000844:	20000174 	.word	0x20000174
 8000848:	20000084 	.word	0x20000084
 800084c:	08005d48 	.word	0x08005d48
 8000850:	20000088 	.word	0x20000088
 8000854:	08005d50 	.word	0x08005d50
 8000858:	08005d68 	.word	0x08005d68

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b096      	sub	sp, #88	@ 0x58
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2244      	movs	r2, #68	@ 0x44
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f004 fbca 	bl	8005004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800087e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000882:	f000 ffe1 	bl	8001848 <HAL_PWREx_ControlVoltageScaling>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800088c:	f000 f837 	bl	80008fe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000890:	2302      	movs	r3, #2
 8000892:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000898:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089a:	2310      	movs	r3, #16
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a2:	2302      	movs	r3, #2
 80008a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008aa:	230a      	movs	r3, #10
 80008ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ae:	2307      	movs	r3, #7
 80008b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 f818 	bl	80018f4 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ca:	f000 f818 	bl	80008fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2303      	movs	r3, #3
 80008d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	2104      	movs	r1, #4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fbe0 	bl	80020ac <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008f2:	f000 f804 	bl	80008fe <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3758      	adds	r7, #88	@ 0x58
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000902:	b672      	cpsid	i
}
 8000904:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000906:	bf00      	nop
 8000908:	e7fd      	b.n	8000906 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000916:	4a0e      	ldr	r2, [pc, #56]	@ (8000950 <HAL_MspInit+0x44>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6613      	str	r3, [r2, #96]	@ 0x60
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	4a08      	ldr	r2, [pc, #32]	@ (8000950 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	6593      	str	r3, [r2, #88]	@ 0x58
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 fc27 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <TIM6_DAC_IRQHandler+0x10>)
 80009ba:	f002 fdb1 	bl	8003520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000174 	.word	0x20000174

080009c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e00a      	b.n	80009f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009da:	f3af 8000 	nop.w
 80009de:	4601      	mov	r1, r0
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	60ba      	str	r2, [r7, #8]
 80009e6:	b2ca      	uxtb	r2, r1
 80009e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dbf0      	blt.n	80009da <_read+0x12>
  }

  return len;
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_isatty>:

int _isatty(int file)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a74:	4a14      	ldr	r2, [pc, #80]	@ (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a9c:	f004 faba 	bl	8005014 <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a05      	ldr	r2, [pc, #20]	@ (8000ad0 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20018000 	.word	0x20018000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	2000008c 	.word	0x2000008c
 8000ad4:	20000398 	.word	0x20000398

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b096      	sub	sp, #88	@ 0x58
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b02:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	222c      	movs	r2, #44	@ 0x2c
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 fa6b 	bl	8005004 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000b30:	4a3f      	ldr	r2, [pc, #252]	@ (8000c30 <MX_TIM1_Init+0x134>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000b34:	4b3d      	ldr	r3, [pc, #244]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000b36:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000b42:	4b3a      	ldr	r3, [pc, #232]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000b44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4a:	4b38      	ldr	r3, [pc, #224]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b50:	4b36      	ldr	r3, [pc, #216]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b35      	ldr	r3, [pc, #212]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b5c:	4833      	ldr	r0, [pc, #204]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000b5e:	f002 fa4d 	bl	8002ffc <HAL_TIM_PWM_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b68:	f7ff fec9 	bl	80008fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	482b      	ldr	r0, [pc, #172]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000b80:	f003 faa2 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b8a:	f7ff feb8 	bl	80008fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8e:	2360      	movs	r3, #96	@ 0x60
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000baa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481e      	ldr	r0, [pc, #120]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000bb4:	f002 fdb6 	bl	8003724 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000bbe:	f7ff fe9e 	bl	80008fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4818      	ldr	r0, [pc, #96]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000bcc:	f002 fdaa 	bl	8003724 <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000bd6:	f7ff fe92 	bl	80008fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4807      	ldr	r0, [pc, #28]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000c10:	f003 fae2 	bl	80041d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000c1a:	f7ff fe70 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1e:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <MX_TIM1_Init+0x130>)
 8000c20:	f000 f9a2 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000c24:	bf00      	nop
 8000c26:	3758      	adds	r7, #88	@ 0x58
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000090 	.word	0x20000090
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	@ 0x30
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	2224      	movs	r2, #36	@ 0x24
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 f9de 	bl	8005004 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c92:	2301      	movs	r3, #1
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <MX_TIM2_Init+0xa4>)
 8000ca6:	f002 fb07 	bl	80032b8 <HAL_TIM_Encoder_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cb0:	f7ff fe25 	bl	80008fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_TIM2_Init+0xa4>)
 8000cc2:	f003 fa01 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000ccc:	f7ff fe17 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3730      	adds	r7, #48	@ 0x30
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000dc 	.word	0x200000dc

08000cdc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	@ 0x30
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	2224      	movs	r2, #36	@ 0x24
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 f98a 	bl	8005004 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <MX_TIM3_Init+0xa4>)
 8000cfc:	4a21      	ldr	r2, [pc, #132]	@ (8000d84 <MX_TIM3_Init+0xa8>)
 8000cfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <MX_TIM3_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <MX_TIM3_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <MX_TIM3_Init+0xa4>)
 8000d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <MX_TIM3_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <MX_TIM3_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <MX_TIM3_Init+0xa4>)
 8000d4c:	f002 fab4 	bl	80032b8 <HAL_TIM_Encoder_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d56:	f7ff fdd2 	bl	80008fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <MX_TIM3_Init+0xa4>)
 8000d68:	f003 f9ae 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d72:	f7ff fdc4 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	3730      	adds	r7, #48	@ 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000128 	.word	0x20000128
 8000d84:	40000400 	.word	0x40000400

08000d88 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <MX_TIM6_Init+0x68>)
 8000d9a:	4a16      	ldr	r2, [pc, #88]	@ (8000df4 <MX_TIM6_Init+0x6c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_TIM6_Init+0x68>)
 8000da0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000da4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <MX_TIM6_Init+0x68>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <MX_TIM6_Init+0x68>)
 8000dae:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000db2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_TIM6_Init+0x68>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dba:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <MX_TIM6_Init+0x68>)
 8000dbc:	f002 f856 	bl	8002e6c <HAL_TIM_Base_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000dc6:	f7ff fd9a 	bl	80008fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <MX_TIM6_Init+0x68>)
 8000dd8:	f003 f976 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000de2:	f7ff fd8c 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000174 	.word	0x20000174
 8000df4:	40001000 	.word	0x40001000

08000df8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <HAL_TIM_PWM_MspInit+0x38>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d10b      	bne.n	8000e22 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0e:	4a09      	ldr	r2, [pc, #36]	@ (8000e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40012c00 	.word	0x40012c00
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	@ 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e58:	d129      	bne.n	8000eae <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e66:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	4a27      	ldr	r2, [pc, #156]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7e:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea8:	f000 fafe 	bl	80014a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000eac:	e02d      	b.n	8000f0a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a19      	ldr	r2, [pc, #100]	@ (8000f18 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d128      	bne.n	8000f0a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebc:	4a15      	ldr	r2, [pc, #84]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ee8:	23c0      	movs	r3, #192	@ 0xc0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f06:	f000 facf 	bl	80014a8 <HAL_GPIO_Init>
}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	@ 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40000400 	.word	0x40000400

08000f1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <HAL_TIM_Base_MspInit+0x44>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d113      	bne.n	8000f56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_TIM_Base_MspInit+0x48>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f32:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <HAL_TIM_Base_MspInit+0x48>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_TIM_Base_MspInit+0x48>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2036      	movs	r0, #54	@ 0x36
 8000f4c:	f000 fa75 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f50:	2036      	movs	r0, #54	@ 0x36
 8000f52:	f000 fa8e 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40001000 	.word	0x40001000
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <HAL_TIM_MspPostInit+0x68>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d11d      	bne.n	8000fc6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <HAL_TIM_MspPostInit+0x6c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <HAL_TIM_MspPostInit+0x6c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc2:	f000 fa71 	bl	80014a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40012c00 	.word	0x40012c00
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000fde:	4a15      	ldr	r2, [pc, #84]	@ (8001034 <MX_USART2_UART_Init+0x5c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000fe4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 800101c:	f003 f978 	bl	8004310 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001026:	f7ff fc6a 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001c0 	.word	0x200001c0
 8001034:	40004400 	.word	0x40004400

08001038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0ac      	sub	sp, #176	@ 0xb0
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2288      	movs	r2, #136	@ 0x88
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f003 ffd3 	bl	8005004 <memset>
  if(uartHandle->Instance==USART2)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a21      	ldr	r2, [pc, #132]	@ (80010e8 <HAL_UART_MspInit+0xb0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d13b      	bne.n	80010e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800106c:	2300      	movs	r3, #0
 800106e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fa3d 	bl	80024f4 <HAL_RCCEx_PeriphCLKConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001080:	f7ff fc3d 	bl	80008fe <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <HAL_UART_MspInit+0xb4>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001088:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <HAL_UART_MspInit+0xb4>)
 800108a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <HAL_UART_MspInit+0xb4>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <HAL_UART_MspInit+0xb4>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a0:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <HAL_UART_MspInit+0xb4>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a8:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <HAL_UART_MspInit+0xb4>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b4:	230c      	movs	r3, #12
 80010b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010cc:	2307      	movs	r3, #7
 80010ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f000 f9e4 	bl	80014a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010e0:	bf00      	nop
 80010e2:	37b0      	adds	r7, #176	@ 0xb0
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40004400 	.word	0x40004400
 80010ec:	40021000 	.word	0x40021000

080010f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f4:	f7ff fcf0 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	@ (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f003 ff7f 	bl	8005020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001122:	f7ff fb29 	bl	8000778 <main>

08001126 <LoopForever>:

LoopForever:
    b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001128:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001134:	08005e0c 	.word	0x08005e0c
  ldr r2, =_sbss
 8001138:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800113c:	20000398 	.word	0x20000398

08001140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>
	...

08001144 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_Init+0x3c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <HAL_Init+0x3c>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001158:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115a:	2003      	movs	r0, #3
 800115c:	f000 f962 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001160:	2000      	movs	r0, #0
 8001162:	f000 f80f 	bl	8001184 <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	e001      	b.n	8001176 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001172:	f7ff fbcb 	bl	800090c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001176:	79fb      	ldrb	r3, [r7, #7]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40022000 	.word	0x40022000

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_InitTick+0x6c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d023      	beq.n	80011e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <HAL_InitTick+0x70>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <HAL_InitTick+0x6c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f96d 	bl	800148e <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10f      	bne.n	80011da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d809      	bhi.n	80011d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c8:	f000 f937 	bl	800143a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011cc:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <HAL_InitTick+0x74>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e007      	b.n	80011e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e004      	b.n	80011e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e001      	b.n	80011e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000248 	.word	0x20000248

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000248 	.word	0x20000248

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	@ (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	@ (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff29 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff3e 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff31 	bl	80012e8 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa2 	bl	80013e0 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e17f      	b.n	80017b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2101      	movs	r1, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8171 	beq.w	80017b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d005      	beq.n	80014e8 <HAL_GPIO_Init+0x40>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d130      	bne.n	800154a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800151e:	2201      	movs	r2, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	f003 0201 	and.w	r2, r3, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b03      	cmp	r3, #3
 8001554:	d118      	bne.n	8001588 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	6939      	ldr	r1, [r7, #16]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80ac 	beq.w	80017b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b5f      	ldr	r3, [pc, #380]	@ (80017d8 <HAL_GPIO_Init+0x330>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800165e:	4a5e      	ldr	r2, [pc, #376]	@ (80017d8 <HAL_GPIO_Init+0x330>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6613      	str	r3, [r2, #96]	@ 0x60
 8001666:	4b5c      	ldr	r3, [pc, #368]	@ (80017d8 <HAL_GPIO_Init+0x330>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001672:	4a5a      	ldr	r2, [pc, #360]	@ (80017dc <HAL_GPIO_Init+0x334>)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800169c:	d025      	beq.n	80016ea <HAL_GPIO_Init+0x242>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	@ (80017e0 <HAL_GPIO_Init+0x338>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01f      	beq.n	80016e6 <HAL_GPIO_Init+0x23e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4e      	ldr	r2, [pc, #312]	@ (80017e4 <HAL_GPIO_Init+0x33c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x23a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4d      	ldr	r2, [pc, #308]	@ (80017e8 <HAL_GPIO_Init+0x340>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x236>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	@ (80017ec <HAL_GPIO_Init+0x344>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x232>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	@ (80017f0 <HAL_GPIO_Init+0x348>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x22e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4a      	ldr	r2, [pc, #296]	@ (80017f4 <HAL_GPIO_Init+0x34c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x22a>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016fc:	4937      	ldr	r1, [pc, #220]	@ (80017dc <HAL_GPIO_Init+0x334>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170a:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800172e:	4a32      	ldr	r2, [pc, #200]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001734:	4b30      	ldr	r3, [pc, #192]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001758:	4a27      	ldr	r2, [pc, #156]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800175e:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001782:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ac:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <HAL_GPIO_Init+0x350>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f ae78 	bne.w	80014b8 <HAL_GPIO_Init+0x10>
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	48000400 	.word	0x48000400
 80017e4:	48000800 	.word	0x48000800
 80017e8:	48000c00 	.word	0x48000c00
 80017ec:	48001000 	.word	0x48001000
 80017f0:	48001400 	.word	0x48001400
 80017f4:	48001800 	.word	0x48001800
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001818:	e002      	b.n	8001820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <HAL_PWREx_GetVoltageRange+0x18>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40007000 	.word	0x40007000

08001848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001856:	d130      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001864:	d038      	beq.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800186e:	4a1e      	ldr	r2, [pc, #120]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001870:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001876:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2232      	movs	r2, #50	@ 0x32
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	0c9b      	lsrs	r3, r3, #18
 8001888:	3301      	adds	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800188c:	e002      	b.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3b01      	subs	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a0:	d102      	bne.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f2      	bne.n	800188e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018a8:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018b4:	d110      	bne.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e00f      	b.n	80018da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018c6:	d007      	beq.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018c8:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018d0:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40007000 	.word	0x40007000
 80018ec:	20000000 	.word	0x20000000
 80018f0:	431bde83 	.word	0x431bde83

080018f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e3ca      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001906:	4b97      	ldr	r3, [pc, #604]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001910:	4b94      	ldr	r3, [pc, #592]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80e4 	beq.w	8001af0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <HAL_RCC_OscConfig+0x4a>
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b0c      	cmp	r3, #12
 8001932:	f040 808b 	bne.w	8001a4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b01      	cmp	r3, #1
 800193a:	f040 8087 	bne.w	8001a4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800193e:	4b89      	ldr	r3, [pc, #548]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_RCC_OscConfig+0x62>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e3a2      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	4b82      	ldr	r3, [pc, #520]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <HAL_RCC_OscConfig+0x7c>
 8001966:	4b7f      	ldr	r3, [pc, #508]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800196e:	e005      	b.n	800197c <HAL_RCC_OscConfig+0x88>
 8001970:	4b7c      	ldr	r3, [pc, #496]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800197c:	4293      	cmp	r3, r2
 800197e:	d223      	bcs.n	80019c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4618      	mov	r0, r3
 8001986:	f000 fd55 	bl	8002434 <RCC_SetFlashLatencyFromMSIRange>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e383      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001994:	4b73      	ldr	r3, [pc, #460]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a72      	ldr	r2, [pc, #456]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b70      	ldr	r3, [pc, #448]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	496d      	ldr	r1, [pc, #436]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	4968      	ldr	r1, [pc, #416]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
 80019c6:	e025      	b.n	8001a14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c8:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a65      	ldr	r2, [pc, #404]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b63      	ldr	r3, [pc, #396]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4960      	ldr	r1, [pc, #384]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	495b      	ldr	r1, [pc, #364]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fd15 	bl	8002434 <RCC_SetFlashLatencyFromMSIRange>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e343      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a14:	f000 fc4a 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b52      	ldr	r3, [pc, #328]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	4950      	ldr	r1, [pc, #320]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a26:	5ccb      	ldrb	r3, [r1, r3]
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	4a4e      	ldr	r2, [pc, #312]	@ (8001b6c <HAL_RCC_OscConfig+0x278>)
 8001a32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a34:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <HAL_RCC_OscConfig+0x27c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fba3 	bl	8001184 <HAL_InitTick>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d052      	beq.n	8001aee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	e327      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d032      	beq.n	8001aba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a54:	4b43      	ldr	r3, [pc, #268]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a42      	ldr	r2, [pc, #264]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fbe0 	bl	8001224 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a68:	f7ff fbdc 	bl	8001224 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e310      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a86:	4b37      	ldr	r3, [pc, #220]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a36      	ldr	r2, [pc, #216]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4931      	ldr	r1, [pc, #196]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	492c      	ldr	r1, [pc, #176]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	e01a      	b.n	8001af0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a29      	ldr	r2, [pc, #164]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fbad 	bl	8001224 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ace:	f7ff fba9 	bl	8001224 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e2dd      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ae0:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x1da>
 8001aec:	e000      	b.n	8001af0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d074      	beq.n	8001be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x21a>
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d10e      	bne.n	8001b26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d10b      	bne.n	8001b26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d064      	beq.n	8001be4 <HAL_RCC_OscConfig+0x2f0>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d160      	bne.n	8001be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e2ba      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x24a>
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e026      	b.n	8001b8c <HAL_RCC_OscConfig+0x298>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b46:	d115      	bne.n	8001b74 <HAL_RCC_OscConfig+0x280>
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a02      	ldr	r2, [pc, #8]	@ (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x298>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08005d80 	.word	0x08005d80
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004
 8001b74:	4ba0      	ldr	r3, [pc, #640]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a9f      	ldr	r2, [pc, #636]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b9d      	ldr	r3, [pc, #628]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a9c      	ldr	r2, [pc, #624]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fb46 	bl	8001224 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fb42 	bl	8001224 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	@ 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e276      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bae:	4b92      	ldr	r3, [pc, #584]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2a8>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fb32 	bl	8001224 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fb2e 	bl	8001224 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	@ 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e262      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd6:	4b88      	ldr	r3, [pc, #544]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2d0>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d060      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_OscConfig+0x310>
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d119      	bne.n	8001c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d116      	bne.n	8001c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c04:	4b7c      	ldr	r3, [pc, #496]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_OscConfig+0x328>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e23f      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b76      	ldr	r3, [pc, #472]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	4973      	ldr	r1, [pc, #460]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c30:	e040      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d023      	beq.n	8001c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff faed 	bl	8001224 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fae9 	bl	8001224 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e21d      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c60:	4b65      	ldr	r3, [pc, #404]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b62      	ldr	r3, [pc, #392]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	061b      	lsls	r3, r3, #24
 8001c7a:	495f      	ldr	r1, [pc, #380]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
 8001c80:	e018      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c82:	4b5d      	ldr	r3, [pc, #372]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a5c      	ldr	r2, [pc, #368]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fac9 	bl	8001224 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff fac5 	bl	8001224 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1f9      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca8:	4b53      	ldr	r3, [pc, #332]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d03c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01c      	beq.n	8001d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cce:	4a4a      	ldr	r2, [pc, #296]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff faa4 	bl	8001224 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff faa0 	bl	8001224 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1d4      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf2:	4b41      	ldr	r3, [pc, #260]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ef      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x3ec>
 8001d00:	e01b      	b.n	8001d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d02:	4b3d      	ldr	r3, [pc, #244]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d08:	4a3b      	ldr	r2, [pc, #236]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7ff fa87 	bl	8001224 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fa83 	bl	8001224 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1b7      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d2c:	4b32      	ldr	r3, [pc, #200]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1ef      	bne.n	8001d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80a6 	beq.w	8001e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10d      	bne.n	8001d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	4a26      	ldr	r2, [pc, #152]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d64:	4b24      	ldr	r3, [pc, #144]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d70:	2301      	movs	r3, #1
 8001d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d74:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <HAL_RCC_OscConfig+0x508>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d118      	bne.n	8001db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d80:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <HAL_RCC_OscConfig+0x508>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <HAL_RCC_OscConfig+0x508>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fa4a 	bl	8001224 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d94:	f7ff fa46 	bl	8001224 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e17a      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_RCC_OscConfig+0x508>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4d8>
 8001dba:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dca:	e029      	b.n	8001e20 <HAL_RCC_OscConfig+0x52c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d115      	bne.n	8001e00 <HAL_RCC_OscConfig+0x50c>
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dda:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dea:	4a03      	ldr	r2, [pc, #12]	@ (8001df8 <HAL_RCC_OscConfig+0x504>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df4:	e014      	b.n	8001e20 <HAL_RCC_OscConfig+0x52c>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	4b9c      	ldr	r3, [pc, #624]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e06:	4a9b      	ldr	r2, [pc, #620]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e10:	4b98      	ldr	r3, [pc, #608]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e16:	4a97      	ldr	r2, [pc, #604]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d016      	beq.n	8001e56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f9fc 	bl	8001224 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7ff f9f8 	bl	8001224 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e12a      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e46:	4b8b      	ldr	r3, [pc, #556]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ed      	beq.n	8001e30 <HAL_RCC_OscConfig+0x53c>
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff f9e5 	bl	8001224 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7ff f9e1 	bl	8001224 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e113      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e74:	4b7f      	ldr	r3, [pc, #508]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ed      	bne.n	8001e5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e82:	7ffb      	ldrb	r3, [r7, #31]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e88:	4b7a      	ldr	r3, [pc, #488]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	4a79      	ldr	r2, [pc, #484]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80fe 	beq.w	800209a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	f040 80d0 	bne.w	8002048 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ea8:	4b72      	ldr	r3, [pc, #456]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 0203 	and.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d130      	bne.n	8001f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d127      	bne.n	8001f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d11f      	bne.n	8001f1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ee8:	2a07      	cmp	r2, #7
 8001eea:	bf14      	ite	ne
 8001eec:	2201      	movne	r2, #1
 8001eee:	2200      	moveq	r2, #0
 8001ef0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d113      	bne.n	8001f1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f00:	085b      	lsrs	r3, r3, #1
 8001f02:	3b01      	subs	r3, #1
 8001f04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d109      	bne.n	8001f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	3b01      	subs	r3, #1
 8001f18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d06e      	beq.n	8001ffc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d069      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f24:	4b53      	ldr	r3, [pc, #332]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f30:	4b50      	ldr	r3, [pc, #320]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0ad      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f40:	4b4c      	ldr	r3, [pc, #304]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a4b      	ldr	r2, [pc, #300]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f4c:	f7ff f96a 	bl	8001224 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff f966 	bl	8001224 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e09a      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f66:	4b43      	ldr	r3, [pc, #268]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f72:	4b40      	ldr	r3, [pc, #256]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <HAL_RCC_OscConfig+0x784>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f82:	3a01      	subs	r2, #1
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	4311      	orrs	r1, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f8c:	0212      	lsls	r2, r2, #8
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f94:	0852      	lsrs	r2, r2, #1
 8001f96:	3a01      	subs	r2, #1
 8001f98:	0552      	lsls	r2, r2, #21
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fa0:	0852      	lsrs	r2, r2, #1
 8001fa2:	3a01      	subs	r2, #1
 8001fa4:	0652      	lsls	r2, r2, #25
 8001fa6:	4311      	orrs	r1, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fac:	0912      	lsrs	r2, r2, #4
 8001fae:	0452      	lsls	r2, r2, #17
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	4930      	ldr	r1, [pc, #192]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fd0:	f7ff f928 	bl	8001224 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff f924 	bl	8001224 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e058      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ff6:	e050      	b.n	800209a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e04f      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d148      	bne.n	800209a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002008:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002014:	4b17      	ldr	r3, [pc, #92]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a16      	ldr	r2, [pc, #88]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800201e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002020:	f7ff f900 	bl	8001224 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff f8fc 	bl	8001224 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e030      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x734>
 8002046:	e028      	b.n	800209a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d023      	beq.n	8002096 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <HAL_RCC_OscConfig+0x780>)
 8002054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7ff f8e3 	bl	8001224 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002060:	e00c      	b.n	800207c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002062:	f7ff f8df 	bl	8001224 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d905      	bls.n	800207c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e013      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
 8002074:	40021000 	.word	0x40021000
 8002078:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_RCC_OscConfig+0x7b0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ec      	bne.n	8002062 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_RCC_OscConfig+0x7b0>)
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	4905      	ldr	r1, [pc, #20]	@ (80020a4 <HAL_RCC_OscConfig+0x7b0>)
 800208e:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_RCC_OscConfig+0x7b4>)
 8002090:	4013      	ands	r3, r2
 8002092:	60cb      	str	r3, [r1, #12]
 8002094:	e001      	b.n	800209a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	feeefffc 	.word	0xfeeefffc

080020ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0e7      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <HAL_RCC_ClockConfig+0x1ec>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d910      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b72      	ldr	r3, [pc, #456]	@ (8002298 <HAL_RCC_ClockConfig+0x1ec>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	4970      	ldr	r1, [pc, #448]	@ (8002298 <HAL_RCC_ClockConfig+0x1ec>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b6e      	ldr	r3, [pc, #440]	@ (8002298 <HAL_RCC_ClockConfig+0x1ec>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0cf      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d010      	beq.n	800211e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b66      	ldr	r3, [pc, #408]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002108:	429a      	cmp	r2, r3
 800210a:	d908      	bls.n	800211e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	4b63      	ldr	r3, [pc, #396]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4960      	ldr	r1, [pc, #384]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d04c      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	4b5a      	ldr	r3, [pc, #360]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d121      	bne.n	8002182 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0a6      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214a:	4b54      	ldr	r3, [pc, #336]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d115      	bne.n	8002182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e09a      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002162:	4b4e      	ldr	r3, [pc, #312]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e08e      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002172:	4b4a      	ldr	r3, [pc, #296]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e086      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002182:	4b46      	ldr	r3, [pc, #280]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f023 0203 	bic.w	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4943      	ldr	r1, [pc, #268]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002194:	f7ff f846 	bl	8001224 <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f7ff f842 	bl	8001224 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e06e      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	4b3a      	ldr	r3, [pc, #232]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 020c 	and.w	r2, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1eb      	bne.n	800219c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	4b31      	ldr	r3, [pc, #196]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021dc:	429a      	cmp	r2, r3
 80021de:	d208      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e0:	4b2e      	ldr	r3, [pc, #184]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	492b      	ldr	r1, [pc, #172]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f2:	4b29      	ldr	r3, [pc, #164]	@ (8002298 <HAL_RCC_ClockConfig+0x1ec>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d210      	bcs.n	8002222 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002200:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <HAL_RCC_ClockConfig+0x1ec>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 0207 	bic.w	r2, r3, #7
 8002208:	4923      	ldr	r1, [pc, #140]	@ (8002298 <HAL_RCC_ClockConfig+0x1ec>)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002210:	4b21      	ldr	r3, [pc, #132]	@ (8002298 <HAL_RCC_ClockConfig+0x1ec>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d001      	beq.n	8002222 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e036      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4918      	ldr	r1, [pc, #96]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224c:	4b13      	ldr	r3, [pc, #76]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4910      	ldr	r1, [pc, #64]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	4313      	orrs	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002260:	f000 f824 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	490b      	ldr	r1, [pc, #44]	@ (80022a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	4a09      	ldr	r2, [pc, #36]	@ (80022a4 <HAL_RCC_ClockConfig+0x1f8>)
 800227e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe ff7d 	bl	8001184 <HAL_InitTick>
 800228a:	4603      	mov	r3, r0
 800228c:	72fb      	strb	r3, [r7, #11]

  return status;
 800228e:	7afb      	ldrb	r3, [r7, #11]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40022000 	.word	0x40022000
 800229c:	40021000 	.word	0x40021000
 80022a0:	08005d80 	.word	0x08005d80
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000004 	.word	0x20000004

080022ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	4b3e      	ldr	r3, [pc, #248]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c4:	4b3b      	ldr	r3, [pc, #236]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x34>
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d121      	bne.n	800231e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d11e      	bne.n	800231e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022e0:	4b34      	ldr	r3, [pc, #208]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022ec:	4b31      	ldr	r3, [pc, #196]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e005      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022fc:	4b2d      	ldr	r3, [pc, #180]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002308:	4a2b      	ldr	r2, [pc, #172]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10d      	bne.n	8002334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d102      	bne.n	800232a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002324:	4b25      	ldr	r3, [pc, #148]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	e004      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d101      	bne.n	8002334 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002330:	4b23      	ldr	r3, [pc, #140]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002332:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d134      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800233a:	4b1e      	ldr	r3, [pc, #120]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d003      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0xa6>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d003      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0xac>
 8002350:	e005      	b.n	800235e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002352:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002354:	617b      	str	r3, [r7, #20]
      break;
 8002356:	e005      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800235a:	617b      	str	r3, [r7, #20]
      break;
 800235c:	e002      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	617b      	str	r3, [r7, #20]
      break;
 8002362:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002364:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	3301      	adds	r3, #1
 8002370:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	fb03 f202 	mul.w	r2, r3, r2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	0e5b      	lsrs	r3, r3, #25
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	3301      	adds	r3, #1
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023a4:	69bb      	ldr	r3, [r7, #24]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	@ 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08005d98 	.word	0x08005d98
 80023bc:	00f42400 	.word	0x00f42400
 80023c0:	007a1200 	.word	0x007a1200

080023c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000000 	.word	0x20000000

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4904      	ldr	r1, [pc, #16]	@ (8002404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	08005d90 	.word	0x08005d90

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800240c:	f7ff ffda 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0adb      	lsrs	r3, r3, #11
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4904      	ldr	r1, [pc, #16]	@ (8002430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	08005d90 	.word	0x08005d90

08002434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002440:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800244c:	f7ff f9ee 	bl	800182c <HAL_PWREx_GetVoltageRange>
 8002450:	6178      	str	r0, [r7, #20]
 8002452:	e014      	b.n	800247e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	4a24      	ldr	r2, [pc, #144]	@ (80024ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002460:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800246c:	f7ff f9de 	bl	800182c <HAL_PWREx_GetVoltageRange>
 8002470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b1e      	ldr	r3, [pc, #120]	@ (80024ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002476:	4a1d      	ldr	r2, [pc, #116]	@ (80024ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800247c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002484:	d10b      	bne.n	800249e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b80      	cmp	r3, #128	@ 0x80
 800248a:	d919      	bls.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002490:	d902      	bls.n	8002498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002492:	2302      	movs	r3, #2
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	e013      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002498:	2301      	movs	r3, #1
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	e010      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b80      	cmp	r3, #128	@ 0x80
 80024a2:	d902      	bls.n	80024aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024a4:	2303      	movs	r3, #3
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	e00a      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b80      	cmp	r3, #128	@ 0x80
 80024ae:	d102      	bne.n	80024b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024b0:	2302      	movs	r3, #2
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	e004      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b70      	cmp	r3, #112	@ 0x70
 80024ba:	d101      	bne.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024bc:	2301      	movs	r3, #1
 80024be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 0207 	bic.w	r2, r3, #7
 80024c8:	4909      	ldr	r1, [pc, #36]	@ (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024d0:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40022000 	.word	0x40022000

080024f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024fc:	2300      	movs	r3, #0
 80024fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002500:	2300      	movs	r3, #0
 8002502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250c:	2b00      	cmp	r3, #0
 800250e:	d041      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002514:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002518:	d02a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800251a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800251e:	d824      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002520:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002524:	d008      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002526:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800252a:	d81e      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002534:	d010      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002536:	e018      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002538:	4b86      	ldr	r3, [pc, #536]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a85      	ldr	r2, [pc, #532]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002542:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002544:	e015      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3304      	adds	r3, #4
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fabb 	bl	8002ac8 <RCCEx_PLLSAI1_Config>
 8002552:	4603      	mov	r3, r0
 8002554:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002556:	e00c      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3320      	adds	r3, #32
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fba6 	bl	8002cb0 <RCCEx_PLLSAI2_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002568:	e003      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	74fb      	strb	r3, [r7, #19]
      break;
 800256e:	e000      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002578:	4b76      	ldr	r3, [pc, #472]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002586:	4973      	ldr	r1, [pc, #460]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800258e:	e001      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d041      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025a8:	d02a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025ae:	d824      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025b4:	d008      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025ba:	d81e      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c4:	d010      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025c6:	e018      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c8:	4b62      	ldr	r3, [pc, #392]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a61      	ldr	r2, [pc, #388]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d4:	e015      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fa73 	bl	8002ac8 <RCCEx_PLLSAI1_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e6:	e00c      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3320      	adds	r3, #32
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fb5e 	bl	8002cb0 <RCCEx_PLLSAI2_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f8:	e003      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	74fb      	strb	r3, [r7, #19]
      break;
 80025fe:	e000      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002602:	7cfb      	ldrb	r3, [r7, #19]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002608:	4b52      	ldr	r3, [pc, #328]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002616:	494f      	ldr	r1, [pc, #316]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800261e:	e001      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a0 	beq.w	8002772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002636:	4b47      	ldr	r3, [pc, #284]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002646:	2300      	movs	r3, #0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00d      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264c:	4b41      	ldr	r3, [pc, #260]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	4a40      	ldr	r2, [pc, #256]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002656:	6593      	str	r3, [r2, #88]	@ 0x58
 8002658:	4b3e      	ldr	r3, [pc, #248]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002664:	2301      	movs	r3, #1
 8002666:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002668:	4b3b      	ldr	r3, [pc, #236]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a3a      	ldr	r2, [pc, #232]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002674:	f7fe fdd6 	bl	8001224 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800267a:	e009      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267c:	f7fe fdd2 	bl	8001224 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d902      	bls.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	74fb      	strb	r3, [r7, #19]
        break;
 800268e:	e005      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d15c      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01f      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d019      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c0:	4b24      	ldr	r3, [pc, #144]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026cc:	4b21      	ldr	r3, [pc, #132]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	4a20      	ldr	r2, [pc, #128]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ec:	4a19      	ldr	r2, [pc, #100]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7fe fd91 	bl	8001224 <HAL_GetTick>
 8002702:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002704:	e00b      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe fd8d 	bl	8001224 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d902      	bls.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	74fb      	strb	r3, [r7, #19]
            break;
 800271c:	e006      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ec      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002732:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002742:	4904      	ldr	r1, [pc, #16]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800274a:	e009      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	74bb      	strb	r3, [r7, #18]
 8002750:	e006      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002760:	7c7b      	ldrb	r3, [r7, #17]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4b9e      	ldr	r3, [pc, #632]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	4a9d      	ldr	r2, [pc, #628]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002770:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800277e:	4b98      	ldr	r3, [pc, #608]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f023 0203 	bic.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278c:	4994      	ldr	r1, [pc, #592]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a0:	4b8f      	ldr	r3, [pc, #572]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f023 020c 	bic.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ae:	498c      	ldr	r1, [pc, #560]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027c2:	4b87      	ldr	r3, [pc, #540]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	4983      	ldr	r1, [pc, #524]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027e4:	4b7e      	ldr	r3, [pc, #504]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	497b      	ldr	r1, [pc, #492]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002806:	4b76      	ldr	r3, [pc, #472]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002814:	4972      	ldr	r1, [pc, #456]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002828:	4b6d      	ldr	r3, [pc, #436]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002836:	496a      	ldr	r1, [pc, #424]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800284a:	4b65      	ldr	r3, [pc, #404]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002850:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002858:	4961      	ldr	r1, [pc, #388]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800286c:	4b5c      	ldr	r3, [pc, #368]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287a:	4959      	ldr	r1, [pc, #356]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800288e:	4b54      	ldr	r3, [pc, #336]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002894:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289c:	4950      	ldr	r1, [pc, #320]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028b0:	4b4b      	ldr	r3, [pc, #300]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028be:	4948      	ldr	r1, [pc, #288]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d2:	4b43      	ldr	r3, [pc, #268]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e0:	493f      	ldr	r1, [pc, #252]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d028      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f4:	4b3a      	ldr	r3, [pc, #232]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002902:	4937      	ldr	r1, [pc, #220]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800290e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002912:	d106      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002914:	4b32      	ldr	r3, [pc, #200]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a31      	ldr	r2, [pc, #196]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800291e:	60d3      	str	r3, [r2, #12]
 8002920:	e011      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002926:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800292a:	d10c      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	2101      	movs	r1, #1
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f8c8 	bl	8002ac8 <RCCEx_PLLSAI1_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d028      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002952:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002958:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	491f      	ldr	r1, [pc, #124]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002970:	d106      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002972:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4a1a      	ldr	r2, [pc, #104]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800297c:	60d3      	str	r3, [r2, #12]
 800297e:	e011      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002984:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002988:	d10c      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	2101      	movs	r1, #1
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f899 	bl	8002ac8 <RCCEx_PLLSAI1_Config>
 8002996:	4603      	mov	r3, r0
 8002998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02b      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029be:	4908      	ldr	r1, [pc, #32]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029ce:	d109      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d0:	4b03      	ldr	r3, [pc, #12]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a02      	ldr	r2, [pc, #8]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029da:	60d3      	str	r3, [r2, #12]
 80029dc:	e014      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f867 	bl	8002ac8 <RCCEx_PLLSAI1_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02f      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a22:	4928      	ldr	r1, [pc, #160]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a32:	d10d      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	2102      	movs	r1, #2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f844 	bl	8002ac8 <RCCEx_PLLSAI1_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d014      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	74bb      	strb	r3, [r7, #18]
 8002a4e:	e011      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3320      	adds	r3, #32
 8002a5e:	2102      	movs	r1, #2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 f925 	bl	8002cb0 <RCCEx_PLLSAI2_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a80:	4b10      	ldr	r3, [pc, #64]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a8e:	490d      	ldr	r1, [pc, #52]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aa2:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ab2:	4904      	ldr	r1, [pc, #16]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aba:	7cbb      	ldrb	r3, [r7, #18]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ad6:	4b75      	ldr	r3, [pc, #468]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d018      	beq.n	8002b14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ae2:	4b72      	ldr	r3, [pc, #456]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0203 	and.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d10d      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
       ||
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002afa:	4b6c      	ldr	r3, [pc, #432]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
       ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d047      	beq.n	8002b9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	e044      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d018      	beq.n	8002b4e <RCCEx_PLLSAI1_Config+0x86>
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d825      	bhi.n	8002b6c <RCCEx_PLLSAI1_Config+0xa4>
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d002      	beq.n	8002b2a <RCCEx_PLLSAI1_Config+0x62>
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d009      	beq.n	8002b3c <RCCEx_PLLSAI1_Config+0x74>
 8002b28:	e020      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b2a:	4b60      	ldr	r3, [pc, #384]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d11d      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3a:	e01a      	b.n	8002b72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d116      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4c:	e013      	b.n	8002b76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b4e:	4b57      	ldr	r3, [pc, #348]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10f      	bne.n	8002b7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b5a:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b6a:	e006      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b70:	e004      	b.n	8002b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b72:	bf00      	nop
 8002b74:	e002      	b.n	8002b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10d      	bne.n	8002b9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b82:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6819      	ldr	r1, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	430b      	orrs	r3, r1
 8002b98:	4944      	ldr	r1, [pc, #272]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d17d      	bne.n	8002ca0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ba4:	4b41      	ldr	r3, [pc, #260]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a40      	ldr	r2, [pc, #256]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fb38 	bl	8001224 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bb6:	e009      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bb8:	f7fe fb34 	bl	8001224 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d902      	bls.n	8002bcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bca:	e005      	b.n	8002bd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bcc:	4b37      	ldr	r3, [pc, #220]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ef      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d160      	bne.n	8002ca0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d111      	bne.n	8002c08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be4:	4b31      	ldr	r3, [pc, #196]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6892      	ldr	r2, [r2, #8]
 8002bf4:	0211      	lsls	r1, r2, #8
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68d2      	ldr	r2, [r2, #12]
 8002bfa:	0912      	lsrs	r2, r2, #4
 8002bfc:	0452      	lsls	r2, r2, #17
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	492a      	ldr	r1, [pc, #168]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	610b      	str	r3, [r1, #16]
 8002c06:	e027      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d112      	bne.n	8002c34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c0e:	4b27      	ldr	r3, [pc, #156]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6892      	ldr	r2, [r2, #8]
 8002c1e:	0211      	lsls	r1, r2, #8
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6912      	ldr	r2, [r2, #16]
 8002c24:	0852      	lsrs	r2, r2, #1
 8002c26:	3a01      	subs	r2, #1
 8002c28:	0552      	lsls	r2, r2, #21
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	491f      	ldr	r1, [pc, #124]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	610b      	str	r3, [r1, #16]
 8002c32:	e011      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c34:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6892      	ldr	r2, [r2, #8]
 8002c44:	0211      	lsls	r1, r2, #8
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6952      	ldr	r2, [r2, #20]
 8002c4a:	0852      	lsrs	r2, r2, #1
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0652      	lsls	r2, r2, #25
 8002c50:	430a      	orrs	r2, r1
 8002c52:	4916      	ldr	r1, [pc, #88]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe fade 	bl	8001224 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c6a:	e009      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c6c:	f7fe fada 	bl	8001224 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c7e:	e005      	b.n	8002c8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c80:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ef      	beq.n	8002c6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	4904      	ldr	r1, [pc, #16]	@ (8002cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000

08002cb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d018      	beq.n	8002cfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cca:	4b67      	ldr	r3, [pc, #412]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0203 	and.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d10d      	bne.n	8002cf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ce2:	4b61      	ldr	r3, [pc, #388]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
       ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d047      	beq.n	8002d86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	e044      	b.n	8002d86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d018      	beq.n	8002d36 <RCCEx_PLLSAI2_Config+0x86>
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d825      	bhi.n	8002d54 <RCCEx_PLLSAI2_Config+0xa4>
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d002      	beq.n	8002d12 <RCCEx_PLLSAI2_Config+0x62>
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d009      	beq.n	8002d24 <RCCEx_PLLSAI2_Config+0x74>
 8002d10:	e020      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d12:	4b55      	ldr	r3, [pc, #340]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d11d      	bne.n	8002d5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d22:	e01a      	b.n	8002d5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d24:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d116      	bne.n	8002d5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d34:	e013      	b.n	8002d5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d36:	4b4c      	ldr	r3, [pc, #304]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10f      	bne.n	8002d62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d42:	4b49      	ldr	r3, [pc, #292]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d52:	e006      	b.n	8002d62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      break;
 8002d58:	e004      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	4939      	ldr	r1, [pc, #228]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d167      	bne.n	8002e5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d8c:	4b36      	ldr	r3, [pc, #216]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a35      	ldr	r2, [pc, #212]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d98:	f7fe fa44 	bl	8001224 <HAL_GetTick>
 8002d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d9e:	e009      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002da0:	f7fe fa40 	bl	8001224 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d902      	bls.n	8002db4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	73fb      	strb	r3, [r7, #15]
        break;
 8002db2:	e005      	b.n	8002dc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002db4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ef      	bne.n	8002da0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d14a      	bne.n	8002e5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d111      	bne.n	8002df0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dcc:	4b26      	ldr	r3, [pc, #152]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	0211      	lsls	r1, r2, #8
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68d2      	ldr	r2, [r2, #12]
 8002de2:	0912      	lsrs	r2, r2, #4
 8002de4:	0452      	lsls	r2, r2, #17
 8002de6:	430a      	orrs	r2, r1
 8002de8:	491f      	ldr	r1, [pc, #124]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	614b      	str	r3, [r1, #20]
 8002dee:	e011      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002df0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002df8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6892      	ldr	r2, [r2, #8]
 8002e00:	0211      	lsls	r1, r2, #8
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6912      	ldr	r2, [r2, #16]
 8002e06:	0852      	lsrs	r2, r2, #1
 8002e08:	3a01      	subs	r2, #1
 8002e0a:	0652      	lsls	r2, r2, #25
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	4916      	ldr	r1, [pc, #88]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e14:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a13      	ldr	r2, [pc, #76]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fe fa00 	bl	8001224 <HAL_GetTick>
 8002e24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e26:	e009      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e28:	f7fe f9fc 	bl	8001224 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d902      	bls.n	8002e3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	73fb      	strb	r3, [r7, #15]
          break;
 8002e3a:	e005      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ef      	beq.n	8002e28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	4904      	ldr	r1, [pc, #16]	@ (8002e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e049      	b.n	8002f12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe f842 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 fd76 	bl	800399c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e04f      	b.n	8002fd4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01d      	beq.n	8002f92 <HAL_TIM_Base_Start_IT+0x76>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5e:	d018      	beq.n	8002f92 <HAL_TIM_Base_Start_IT+0x76>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_TIM_Base_Start_IT+0x76>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIM_Base_Start_IT+0x76>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <HAL_TIM_Base_Start_IT+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIM_Base_Start_IT+0x76>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIM_Base_Start_IT+0x76>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d115      	bne.n	8002fbe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	4b17      	ldr	r3, [pc, #92]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b06      	cmp	r3, #6
 8002fa2:	d015      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0xb4>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002faa:	d011      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbc:	e008      	b.n	8002fd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e000      	b.n	8002fd2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40000c00 	.word	0x40000c00
 8002ff0:	40013400 	.word	0x40013400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	00010007 	.word	0x00010007

08002ffc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e049      	b.n	80030a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fee8 	bl	8000df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f000 fcae 	bl	800399c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_TIM_PWM_Start+0x24>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e03c      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d109      	bne.n	80030ea <HAL_TIM_PWM_Start+0x3e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e02f      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d109      	bne.n	8003104 <HAL_TIM_PWM_Start+0x58>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e022      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d109      	bne.n	800311e <HAL_TIM_PWM_Start+0x72>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	e015      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b10      	cmp	r3, #16
 8003122:	d109      	bne.n	8003138 <HAL_TIM_PWM_Start+0x8c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e008      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e09c      	b.n	800328c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Start+0xb6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003160:	e023      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xc6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003170:	e01b      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start+0xd6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003180:	e013      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start+0xe6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003190:	e00b      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b10      	cmp	r3, #16
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_PWM_Start+0xf6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031a0:	e003      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 ff62 	bl	800407c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a35      	ldr	r2, [pc, #212]	@ (8003294 <HAL_TIM_PWM_Start+0x1e8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_TIM_PWM_Start+0x13e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a34      	ldr	r2, [pc, #208]	@ (8003298 <HAL_TIM_PWM_Start+0x1ec>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIM_PWM_Start+0x13e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a32      	ldr	r2, [pc, #200]	@ (800329c <HAL_TIM_PWM_Start+0x1f0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_TIM_PWM_Start+0x13e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a31      	ldr	r2, [pc, #196]	@ (80032a0 <HAL_TIM_PWM_Start+0x1f4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIM_PWM_Start+0x13e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2f      	ldr	r2, [pc, #188]	@ (80032a4 <HAL_TIM_PWM_Start+0x1f8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_PWM_Start+0x142>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_TIM_PWM_Start+0x144>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003202:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <HAL_TIM_PWM_Start+0x1e8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01d      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003216:	d018      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a22      	ldr	r2, [pc, #136]	@ (80032a8 <HAL_TIM_PWM_Start+0x1fc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a21      	ldr	r2, [pc, #132]	@ (80032ac <HAL_TIM_PWM_Start+0x200>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00e      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1f      	ldr	r2, [pc, #124]	@ (80032b0 <HAL_TIM_PWM_Start+0x204>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_TIM_PWM_Start+0x1ec>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a15      	ldr	r2, [pc, #84]	@ (800329c <HAL_TIM_PWM_Start+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d115      	bne.n	8003276 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	4b18      	ldr	r3, [pc, #96]	@ (80032b4 <HAL_TIM_PWM_Start+0x208>)
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b06      	cmp	r3, #6
 800325a:	d015      	beq.n	8003288 <HAL_TIM_PWM_Start+0x1dc>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003262:	d011      	beq.n	8003288 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	e008      	b.n	8003288 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e000      	b.n	800328a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40013400 	.word	0x40013400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	00010007 	.word	0x00010007

080032b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e097      	b.n	80033fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7fd fda9 	bl	8000e38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80032fc:	f023 0307 	bic.w	r3, r3, #7
 8003300:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f000 fb45 	bl	800399c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	4313      	orrs	r3, r2
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003358:	f023 030c 	bic.w	r3, r3, #12
 800335c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003364:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	4313      	orrs	r3, r2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	011a      	lsls	r2, r3, #4
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	031b      	lsls	r3, r3, #12
 8003388:	4313      	orrs	r3, r2
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	4313      	orrs	r3, r2
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003414:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800341c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003424:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800342c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d110      	bne.n	8003456 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d001      	beq.n	8003444 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e069      	b.n	8003518 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003454:	e031      	b.n	80034ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d110      	bne.n	800347e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800345c:	7bbb      	ldrb	r3, [r7, #14]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003462:	7b3b      	ldrb	r3, [r7, #12]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d001      	beq.n	800346c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e055      	b.n	8003518 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800347c:	e01d      	b.n	80034ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d108      	bne.n	8003496 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003484:	7bbb      	ldrb	r3, [r7, #14]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800348a:	7b7b      	ldrb	r3, [r7, #13]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d102      	bne.n	8003496 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003490:	7b3b      	ldrb	r3, [r7, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d001      	beq.n	800349a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e03e      	b.n	8003518 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_TIM_Encoder_Start+0xc4>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d008      	beq.n	80034d8 <HAL_TIM_Encoder_Start+0xd4>
 80034c6:	e00f      	b.n	80034e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2201      	movs	r2, #1
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fdd3 	bl	800407c <TIM_CCxChannelCmd>
      break;
 80034d6:	e016      	b.n	8003506 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2201      	movs	r2, #1
 80034de:	2104      	movs	r1, #4
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fdcb 	bl	800407c <TIM_CCxChannelCmd>
      break;
 80034e6:	e00e      	b.n	8003506 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2201      	movs	r2, #1
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fdc3 	bl	800407c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2201      	movs	r2, #1
 80034fc:	2104      	movs	r1, #4
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fdbc 	bl	800407c <TIM_CCxChannelCmd>
      break;
 8003504:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d020      	beq.n	8003584 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01b      	beq.n	8003584 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0202 	mvn.w	r2, #2
 8003554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f9f8 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9ea 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f9fb 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d020      	beq.n	80035d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0204 	mvn.w	r2, #4
 80035a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f9d2 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 80035bc:	e005      	b.n	80035ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9c4 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f9d5 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d020      	beq.n	800361c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01b      	beq.n	800361c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0208 	mvn.w	r2, #8
 80035ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2204      	movs	r2, #4
 80035f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f9ac 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f99e 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f9af 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d020      	beq.n	8003668 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01b      	beq.n	8003668 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0210 	mvn.w	r2, #16
 8003638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2208      	movs	r2, #8
 800363e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f986 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f978 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f989 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0201 	mvn.w	r2, #1
 8003684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd f84a 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fe1c 	bl	80042e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00c      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fe14 	bl	80042fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f948 	bl	8003988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0220 	mvn.w	r2, #32
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fddc 	bl	80042d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800373e:	2302      	movs	r3, #2
 8003740:	e0ff      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b14      	cmp	r3, #20
 800374e:	f200 80f0 	bhi.w	8003932 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003752:	a201      	add	r2, pc, #4	@ (adr r2, 8003758 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	080037ad 	.word	0x080037ad
 800375c:	08003933 	.word	0x08003933
 8003760:	08003933 	.word	0x08003933
 8003764:	08003933 	.word	0x08003933
 8003768:	080037ed 	.word	0x080037ed
 800376c:	08003933 	.word	0x08003933
 8003770:	08003933 	.word	0x08003933
 8003774:	08003933 	.word	0x08003933
 8003778:	0800382f 	.word	0x0800382f
 800377c:	08003933 	.word	0x08003933
 8003780:	08003933 	.word	0x08003933
 8003784:	08003933 	.word	0x08003933
 8003788:	0800386f 	.word	0x0800386f
 800378c:	08003933 	.word	0x08003933
 8003790:	08003933 	.word	0x08003933
 8003794:	08003933 	.word	0x08003933
 8003798:	080038b1 	.word	0x080038b1
 800379c:	08003933 	.word	0x08003933
 80037a0:	08003933 	.word	0x08003933
 80037a4:	08003933 	.word	0x08003933
 80037a8:	080038f1 	.word	0x080038f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f98c 	bl	8003ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0208 	orr.w	r2, r2, #8
 80037c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0204 	bic.w	r2, r2, #4
 80037d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6999      	ldr	r1, [r3, #24]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	619a      	str	r2, [r3, #24]
      break;
 80037ea:	e0a5      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f9fc 	bl	8003bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6999      	ldr	r1, [r3, #24]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	619a      	str	r2, [r3, #24]
      break;
 800382c:	e084      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fa65 	bl	8003d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0208 	orr.w	r2, r2, #8
 8003848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0204 	bic.w	r2, r2, #4
 8003858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69d9      	ldr	r1, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	61da      	str	r2, [r3, #28]
      break;
 800386c:	e064      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 facd 	bl	8003e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69d9      	ldr	r1, [r3, #28]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	61da      	str	r2, [r3, #28]
      break;
 80038ae:	e043      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fb16 	bl	8003ee8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038ee:	e023      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fb5a 	bl	8003fb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800390a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	021a      	lsls	r2, r3, #8
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003930:	e002      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
      break;
 8003936:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop

0800394c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a40      	ldr	r2, [pc, #256]	@ (8003ab0 <TIM_Base_SetConfig+0x114>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ba:	d00f      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a3d      	ldr	r2, [pc, #244]	@ (8003ab4 <TIM_Base_SetConfig+0x118>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00b      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab8 <TIM_Base_SetConfig+0x11c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3b      	ldr	r2, [pc, #236]	@ (8003abc <TIM_Base_SetConfig+0x120>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ac0 <TIM_Base_SetConfig+0x124>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d108      	bne.n	80039ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2f      	ldr	r2, [pc, #188]	@ (8003ab0 <TIM_Base_SetConfig+0x114>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01f      	beq.n	8003a36 <TIM_Base_SetConfig+0x9a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fc:	d01b      	beq.n	8003a36 <TIM_Base_SetConfig+0x9a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2c      	ldr	r2, [pc, #176]	@ (8003ab4 <TIM_Base_SetConfig+0x118>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d017      	beq.n	8003a36 <TIM_Base_SetConfig+0x9a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab8 <TIM_Base_SetConfig+0x11c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <TIM_Base_SetConfig+0x9a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2a      	ldr	r2, [pc, #168]	@ (8003abc <TIM_Base_SetConfig+0x120>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00f      	beq.n	8003a36 <TIM_Base_SetConfig+0x9a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a29      	ldr	r2, [pc, #164]	@ (8003ac0 <TIM_Base_SetConfig+0x124>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <TIM_Base_SetConfig+0x9a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a28      	ldr	r2, [pc, #160]	@ (8003ac4 <TIM_Base_SetConfig+0x128>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <TIM_Base_SetConfig+0x9a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a27      	ldr	r2, [pc, #156]	@ (8003ac8 <TIM_Base_SetConfig+0x12c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_Base_SetConfig+0x9a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a26      	ldr	r2, [pc, #152]	@ (8003acc <TIM_Base_SetConfig+0x130>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d108      	bne.n	8003a48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a10      	ldr	r2, [pc, #64]	@ (8003ab0 <TIM_Base_SetConfig+0x114>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00f      	beq.n	8003a94 <TIM_Base_SetConfig+0xf8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <TIM_Base_SetConfig+0x124>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <TIM_Base_SetConfig+0xf8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a11      	ldr	r2, [pc, #68]	@ (8003ac4 <TIM_Base_SetConfig+0x128>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_Base_SetConfig+0xf8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a10      	ldr	r2, [pc, #64]	@ (8003ac8 <TIM_Base_SetConfig+0x12c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0xf8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8003acc <TIM_Base_SetConfig+0x130>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d103      	bne.n	8003a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	615a      	str	r2, [r3, #20]
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40013400 	.word	0x40013400
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	40014800 	.word	0x40014800

08003ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f023 0201 	bic.w	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 0302 	bic.w	r3, r3, #2
 8003b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bdc <TIM_OC1_SetConfig+0x10c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00f      	beq.n	8003b50 <TIM_OC1_SetConfig+0x80>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a2b      	ldr	r2, [pc, #172]	@ (8003be0 <TIM_OC1_SetConfig+0x110>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <TIM_OC1_SetConfig+0x80>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003be4 <TIM_OC1_SetConfig+0x114>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_OC1_SetConfig+0x80>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a29      	ldr	r2, [pc, #164]	@ (8003be8 <TIM_OC1_SetConfig+0x118>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_OC1_SetConfig+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a28      	ldr	r2, [pc, #160]	@ (8003bec <TIM_OC1_SetConfig+0x11c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10c      	bne.n	8003b6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0308 	bic.w	r3, r3, #8
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bdc <TIM_OC1_SetConfig+0x10c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_OC1_SetConfig+0xc2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1a      	ldr	r2, [pc, #104]	@ (8003be0 <TIM_OC1_SetConfig+0x110>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_OC1_SetConfig+0xc2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	@ (8003be4 <TIM_OC1_SetConfig+0x114>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_OC1_SetConfig+0xc2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <TIM_OC1_SetConfig+0x118>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_OC1_SetConfig+0xc2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <TIM_OC1_SetConfig+0x11c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d111      	bne.n	8003bb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	621a      	str	r2, [r3, #32]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40013400 	.word	0x40013400
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40014400 	.word	0x40014400
 8003bec:	40014800 	.word	0x40014800

08003bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f023 0210 	bic.w	r2, r3, #16
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0320 	bic.w	r3, r3, #32
 8003c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a28      	ldr	r2, [pc, #160]	@ (8003cf0 <TIM_OC2_SetConfig+0x100>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_OC2_SetConfig+0x6c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a27      	ldr	r2, [pc, #156]	@ (8003cf4 <TIM_OC2_SetConfig+0x104>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d10d      	bne.n	8003c78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <TIM_OC2_SetConfig+0x100>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00f      	beq.n	8003ca0 <TIM_OC2_SetConfig+0xb0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf4 <TIM_OC2_SetConfig+0x104>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <TIM_OC2_SetConfig+0xb0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf8 <TIM_OC2_SetConfig+0x108>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d007      	beq.n	8003ca0 <TIM_OC2_SetConfig+0xb0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1a      	ldr	r2, [pc, #104]	@ (8003cfc <TIM_OC2_SetConfig+0x10c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_OC2_SetConfig+0xb0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a19      	ldr	r2, [pc, #100]	@ (8003d00 <TIM_OC2_SetConfig+0x110>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d113      	bne.n	8003cc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40013400 	.word	0x40013400
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40014400 	.word	0x40014400
 8003d00:	40014800 	.word	0x40014800

08003d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <TIM_OC3_SetConfig+0xfc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_OC3_SetConfig+0x6a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <TIM_OC3_SetConfig+0x100>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10d      	bne.n	8003d8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <TIM_OC3_SetConfig+0xfc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00f      	beq.n	8003db2 <TIM_OC3_SetConfig+0xae>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1b      	ldr	r2, [pc, #108]	@ (8003e04 <TIM_OC3_SetConfig+0x100>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_OC3_SetConfig+0xae>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e08 <TIM_OC3_SetConfig+0x104>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_OC3_SetConfig+0xae>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a19      	ldr	r2, [pc, #100]	@ (8003e0c <TIM_OC3_SetConfig+0x108>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_OC3_SetConfig+0xae>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a18      	ldr	r2, [pc, #96]	@ (8003e10 <TIM_OC3_SetConfig+0x10c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d113      	bne.n	8003dda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40013400 	.word	0x40013400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800

08003e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a18      	ldr	r2, [pc, #96]	@ (8003ed4 <TIM_OC4_SetConfig+0xc0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00f      	beq.n	8003e98 <TIM_OC4_SetConfig+0x84>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ed8 <TIM_OC4_SetConfig+0xc4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <TIM_OC4_SetConfig+0x84>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a16      	ldr	r2, [pc, #88]	@ (8003edc <TIM_OC4_SetConfig+0xc8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_OC4_SetConfig+0x84>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ee0 <TIM_OC4_SetConfig+0xcc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC4_SetConfig+0x84>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <TIM_OC4_SetConfig+0xd0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d109      	bne.n	8003eac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	019b      	lsls	r3, r3, #6
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40013400 	.word	0x40013400
 8003edc:	40014000 	.word	0x40014000
 8003ee0:	40014400 	.word	0x40014400
 8003ee4:	40014800 	.word	0x40014800

08003ee8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <TIM_OC5_SetConfig+0xb4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00f      	beq.n	8003f62 <TIM_OC5_SetConfig+0x7a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <TIM_OC5_SetConfig+0xb8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_OC5_SetConfig+0x7a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a15      	ldr	r2, [pc, #84]	@ (8003fa4 <TIM_OC5_SetConfig+0xbc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <TIM_OC5_SetConfig+0x7a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a14      	ldr	r2, [pc, #80]	@ (8003fa8 <TIM_OC5_SetConfig+0xc0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_OC5_SetConfig+0x7a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <TIM_OC5_SetConfig+0xc4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d109      	bne.n	8003f76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	621a      	str	r2, [r3, #32]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40013400 	.word	0x40013400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800

08003fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	051b      	lsls	r3, r3, #20
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <TIM_OC6_SetConfig+0xb8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00f      	beq.n	800402c <TIM_OC6_SetConfig+0x7c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a17      	ldr	r2, [pc, #92]	@ (800406c <TIM_OC6_SetConfig+0xbc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00b      	beq.n	800402c <TIM_OC6_SetConfig+0x7c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <TIM_OC6_SetConfig+0xc0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d007      	beq.n	800402c <TIM_OC6_SetConfig+0x7c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <TIM_OC6_SetConfig+0xc4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d003      	beq.n	800402c <TIM_OC6_SetConfig+0x7c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a14      	ldr	r2, [pc, #80]	@ (8004078 <TIM_OC6_SetConfig+0xc8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d109      	bne.n	8004040 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	029b      	lsls	r3, r3, #10
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40013400 	.word	0x40013400
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800

0800407c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2201      	movs	r2, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1a      	ldr	r2, [r3, #32]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	43db      	mvns	r3, r3
 800409e:	401a      	ands	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e068      	b.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2e      	ldr	r2, [pc, #184]	@ (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2d      	ldr	r2, [pc, #180]	@ (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800411a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1e      	ldr	r2, [pc, #120]	@ (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01d      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004152:	d018      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1b      	ldr	r2, [pc, #108]	@ (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1a      	ldr	r2, [pc, #104]	@ (80041cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a18      	ldr	r2, [pc, #96]	@ (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d009      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a13      	ldr	r2, [pc, #76]	@ (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a14      	ldr	r2, [pc, #80]	@ (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d10c      	bne.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800418c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40013400 	.word	0x40013400
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40014000 	.word	0x40014000

080041d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e065      	b.n	80042c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a16      	ldr	r2, [pc, #88]	@ (80042cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d115      	bne.n	80042ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	051b      	lsls	r3, r3, #20
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40013400 	.word	0x40013400

080042d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e040      	b.n	80043a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fe80 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	@ 0x24
 800433c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fb6a 	bl	8004a30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8af 	bl	80044c0 <UART_SetConfig>
 8004362:	4603      	mov	r3, r0
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e01b      	b.n	80043a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800437a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800438a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fbe9 	bl	8004b74 <UART_CheckIdleState>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	@ 0x28
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d177      	bne.n	80044b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_UART_Transmit+0x24>
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e070      	b.n	80044b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2221      	movs	r2, #33	@ 0x21
 80043e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043e2:	f7fc ff1f 	bl	8001224 <HAL_GetTick>
 80043e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004400:	d108      	bne.n	8004414 <HAL_UART_Transmit+0x68>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	e003      	b.n	800441c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800441c:	e02f      	b.n	800447e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2200      	movs	r2, #0
 8004426:	2180      	movs	r1, #128	@ 0x80
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fc4b 	bl	8004cc4 <UART_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e03b      	b.n	80044b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004450:	b292      	uxth	r2, r2
 8004452:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	3302      	adds	r3, #2
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e007      	b.n	800446c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1c9      	bne.n	800441e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	2140      	movs	r1, #64	@ 0x40
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fc15 	bl	8004cc4 <UART_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e005      	b.n	80044b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e000      	b.n	80044b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c4:	b08a      	sub	sp, #40	@ 0x28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	431a      	orrs	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4ba4      	ldr	r3, [pc, #656]	@ (8004780 <UART_SetConfig+0x2c0>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a99      	ldr	r2, [pc, #612]	@ (8004784 <UART_SetConfig+0x2c4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004528:	4313      	orrs	r3, r2
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a90      	ldr	r2, [pc, #576]	@ (8004788 <UART_SetConfig+0x2c8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d126      	bne.n	8004598 <UART_SetConfig+0xd8>
 800454a:	4b90      	ldr	r3, [pc, #576]	@ (800478c <UART_SetConfig+0x2cc>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d81b      	bhi.n	8004590 <UART_SetConfig+0xd0>
 8004558:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <UART_SetConfig+0xa0>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004571 	.word	0x08004571
 8004564:	08004581 	.word	0x08004581
 8004568:	08004579 	.word	0x08004579
 800456c:	08004589 	.word	0x08004589
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004576:	e116      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457e:	e112      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004586:	e10e      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458e:	e10a      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004596:	e106      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a7c      	ldr	r2, [pc, #496]	@ (8004790 <UART_SetConfig+0x2d0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d138      	bne.n	8004614 <UART_SetConfig+0x154>
 80045a2:	4b7a      	ldr	r3, [pc, #488]	@ (800478c <UART_SetConfig+0x2cc>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	d82d      	bhi.n	800460c <UART_SetConfig+0x14c>
 80045b0:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <UART_SetConfig+0xf8>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	0800460d 	.word	0x0800460d
 80045c0:	0800460d 	.word	0x0800460d
 80045c4:	0800460d 	.word	0x0800460d
 80045c8:	080045fd 	.word	0x080045fd
 80045cc:	0800460d 	.word	0x0800460d
 80045d0:	0800460d 	.word	0x0800460d
 80045d4:	0800460d 	.word	0x0800460d
 80045d8:	080045f5 	.word	0x080045f5
 80045dc:	0800460d 	.word	0x0800460d
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	0800460d 	.word	0x0800460d
 80045e8:	08004605 	.word	0x08004605
 80045ec:	2300      	movs	r3, #0
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f2:	e0d8      	b.n	80047a6 <UART_SetConfig+0x2e6>
 80045f4:	2302      	movs	r3, #2
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fa:	e0d4      	b.n	80047a6 <UART_SetConfig+0x2e6>
 80045fc:	2304      	movs	r3, #4
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004602:	e0d0      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004604:	2308      	movs	r3, #8
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460a:	e0cc      	b.n	80047a6 <UART_SetConfig+0x2e6>
 800460c:	2310      	movs	r3, #16
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004612:	e0c8      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5e      	ldr	r2, [pc, #376]	@ (8004794 <UART_SetConfig+0x2d4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d125      	bne.n	800466a <UART_SetConfig+0x1aa>
 800461e:	4b5b      	ldr	r3, [pc, #364]	@ (800478c <UART_SetConfig+0x2cc>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004624:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004628:	2b30      	cmp	r3, #48	@ 0x30
 800462a:	d016      	beq.n	800465a <UART_SetConfig+0x19a>
 800462c:	2b30      	cmp	r3, #48	@ 0x30
 800462e:	d818      	bhi.n	8004662 <UART_SetConfig+0x1a2>
 8004630:	2b20      	cmp	r3, #32
 8004632:	d00a      	beq.n	800464a <UART_SetConfig+0x18a>
 8004634:	2b20      	cmp	r3, #32
 8004636:	d814      	bhi.n	8004662 <UART_SetConfig+0x1a2>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <UART_SetConfig+0x182>
 800463c:	2b10      	cmp	r3, #16
 800463e:	d008      	beq.n	8004652 <UART_SetConfig+0x192>
 8004640:	e00f      	b.n	8004662 <UART_SetConfig+0x1a2>
 8004642:	2300      	movs	r3, #0
 8004644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004648:	e0ad      	b.n	80047a6 <UART_SetConfig+0x2e6>
 800464a:	2302      	movs	r3, #2
 800464c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004650:	e0a9      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004652:	2304      	movs	r3, #4
 8004654:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004658:	e0a5      	b.n	80047a6 <UART_SetConfig+0x2e6>
 800465a:	2308      	movs	r3, #8
 800465c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004660:	e0a1      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004662:	2310      	movs	r3, #16
 8004664:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004668:	e09d      	b.n	80047a6 <UART_SetConfig+0x2e6>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a4a      	ldr	r2, [pc, #296]	@ (8004798 <UART_SetConfig+0x2d8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d125      	bne.n	80046c0 <UART_SetConfig+0x200>
 8004674:	4b45      	ldr	r3, [pc, #276]	@ (800478c <UART_SetConfig+0x2cc>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800467e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004680:	d016      	beq.n	80046b0 <UART_SetConfig+0x1f0>
 8004682:	2bc0      	cmp	r3, #192	@ 0xc0
 8004684:	d818      	bhi.n	80046b8 <UART_SetConfig+0x1f8>
 8004686:	2b80      	cmp	r3, #128	@ 0x80
 8004688:	d00a      	beq.n	80046a0 <UART_SetConfig+0x1e0>
 800468a:	2b80      	cmp	r3, #128	@ 0x80
 800468c:	d814      	bhi.n	80046b8 <UART_SetConfig+0x1f8>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <UART_SetConfig+0x1d8>
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d008      	beq.n	80046a8 <UART_SetConfig+0x1e8>
 8004696:	e00f      	b.n	80046b8 <UART_SetConfig+0x1f8>
 8004698:	2300      	movs	r3, #0
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469e:	e082      	b.n	80047a6 <UART_SetConfig+0x2e6>
 80046a0:	2302      	movs	r3, #2
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a6:	e07e      	b.n	80047a6 <UART_SetConfig+0x2e6>
 80046a8:	2304      	movs	r3, #4
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ae:	e07a      	b.n	80047a6 <UART_SetConfig+0x2e6>
 80046b0:	2308      	movs	r3, #8
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b6:	e076      	b.n	80047a6 <UART_SetConfig+0x2e6>
 80046b8:	2310      	movs	r3, #16
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046be:	e072      	b.n	80047a6 <UART_SetConfig+0x2e6>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a35      	ldr	r2, [pc, #212]	@ (800479c <UART_SetConfig+0x2dc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d12a      	bne.n	8004720 <UART_SetConfig+0x260>
 80046ca:	4b30      	ldr	r3, [pc, #192]	@ (800478c <UART_SetConfig+0x2cc>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d8:	d01a      	beq.n	8004710 <UART_SetConfig+0x250>
 80046da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046de:	d81b      	bhi.n	8004718 <UART_SetConfig+0x258>
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e4:	d00c      	beq.n	8004700 <UART_SetConfig+0x240>
 80046e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ea:	d815      	bhi.n	8004718 <UART_SetConfig+0x258>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <UART_SetConfig+0x238>
 80046f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f4:	d008      	beq.n	8004708 <UART_SetConfig+0x248>
 80046f6:	e00f      	b.n	8004718 <UART_SetConfig+0x258>
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fe:	e052      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004700:	2302      	movs	r3, #2
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004706:	e04e      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470e:	e04a      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004716:	e046      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e042      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a17      	ldr	r2, [pc, #92]	@ (8004784 <UART_SetConfig+0x2c4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d13a      	bne.n	80047a0 <UART_SetConfig+0x2e0>
 800472a:	4b18      	ldr	r3, [pc, #96]	@ (800478c <UART_SetConfig+0x2cc>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004730:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004734:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004738:	d01a      	beq.n	8004770 <UART_SetConfig+0x2b0>
 800473a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800473e:	d81b      	bhi.n	8004778 <UART_SetConfig+0x2b8>
 8004740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004744:	d00c      	beq.n	8004760 <UART_SetConfig+0x2a0>
 8004746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474a:	d815      	bhi.n	8004778 <UART_SetConfig+0x2b8>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <UART_SetConfig+0x298>
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004754:	d008      	beq.n	8004768 <UART_SetConfig+0x2a8>
 8004756:	e00f      	b.n	8004778 <UART_SetConfig+0x2b8>
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475e:	e022      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004766:	e01e      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476e:	e01a      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004776:	e016      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477e:	e012      	b.n	80047a6 <UART_SetConfig+0x2e6>
 8004780:	efff69f3 	.word	0xefff69f3
 8004784:	40008000 	.word	0x40008000
 8004788:	40013800 	.word	0x40013800
 800478c:	40021000 	.word	0x40021000
 8004790:	40004400 	.word	0x40004400
 8004794:	40004800 	.word	0x40004800
 8004798:	40004c00 	.word	0x40004c00
 800479c:	40005000 	.word	0x40005000
 80047a0:	2310      	movs	r3, #16
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a9f      	ldr	r2, [pc, #636]	@ (8004a28 <UART_SetConfig+0x568>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d17a      	bne.n	80048a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d824      	bhi.n	8004802 <UART_SetConfig+0x342>
 80047b8:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <UART_SetConfig+0x300>)
 80047ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047be:	bf00      	nop
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	08004803 	.word	0x08004803
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	08004803 	.word	0x08004803
 80047d0:	080047f3 	.word	0x080047f3
 80047d4:	08004803 	.word	0x08004803
 80047d8:	08004803 	.word	0x08004803
 80047dc:	08004803 	.word	0x08004803
 80047e0:	080047fb 	.word	0x080047fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e4:	f7fd fdfa 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 80047e8:	61f8      	str	r0, [r7, #28]
        break;
 80047ea:	e010      	b.n	800480e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ec:	4b8f      	ldr	r3, [pc, #572]	@ (8004a2c <UART_SetConfig+0x56c>)
 80047ee:	61fb      	str	r3, [r7, #28]
        break;
 80047f0:	e00d      	b.n	800480e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f2:	f7fd fd5b 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 80047f6:	61f8      	str	r0, [r7, #28]
        break;
 80047f8:	e009      	b.n	800480e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047fe:	61fb      	str	r3, [r7, #28]
        break;
 8004800:	e005      	b.n	800480e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800480c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80fb 	beq.w	8004a0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	429a      	cmp	r2, r3
 8004824:	d305      	bcc.n	8004832 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	429a      	cmp	r2, r3
 8004830:	d903      	bls.n	800483a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004838:	e0e8      	b.n	8004a0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2200      	movs	r2, #0
 800483e:	461c      	mov	r4, r3
 8004840:	4615      	mov	r5, r2
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	022b      	lsls	r3, r5, #8
 800484c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004850:	0222      	lsls	r2, r4, #8
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	6849      	ldr	r1, [r1, #4]
 8004856:	0849      	lsrs	r1, r1, #1
 8004858:	2000      	movs	r0, #0
 800485a:	4688      	mov	r8, r1
 800485c:	4681      	mov	r9, r0
 800485e:	eb12 0a08 	adds.w	sl, r2, r8
 8004862:	eb43 0b09 	adc.w	fp, r3, r9
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004874:	4650      	mov	r0, sl
 8004876:	4659      	mov	r1, fp
 8004878:	f7fb fcfa 	bl	8000270 <__aeabi_uldivmod>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4613      	mov	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800488a:	d308      	bcc.n	800489e <UART_SetConfig+0x3de>
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004892:	d204      	bcs.n	800489e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	60da      	str	r2, [r3, #12]
 800489c:	e0b6      	b.n	8004a0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048a4:	e0b2      	b.n	8004a0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ae:	d15e      	bne.n	800496e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d828      	bhi.n	800490a <UART_SetConfig+0x44a>
 80048b8:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <UART_SetConfig+0x400>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048ed 	.word	0x080048ed
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	0800490b 	.word	0x0800490b
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	0800490b 	.word	0x0800490b
 80048d8:	0800490b 	.word	0x0800490b
 80048dc:	0800490b 	.word	0x0800490b
 80048e0:	08004903 	.word	0x08004903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e4:	f7fd fd7a 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 80048e8:	61f8      	str	r0, [r7, #28]
        break;
 80048ea:	e014      	b.n	8004916 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048ec:	f7fd fd8c 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 80048f0:	61f8      	str	r0, [r7, #28]
        break;
 80048f2:	e010      	b.n	8004916 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f4:	4b4d      	ldr	r3, [pc, #308]	@ (8004a2c <UART_SetConfig+0x56c>)
 80048f6:	61fb      	str	r3, [r7, #28]
        break;
 80048f8:	e00d      	b.n	8004916 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fa:	f7fd fcd7 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 80048fe:	61f8      	str	r0, [r7, #28]
        break;
 8004900:	e009      	b.n	8004916 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004906:	61fb      	str	r3, [r7, #28]
        break;
 8004908:	e005      	b.n	8004916 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004914:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d077      	beq.n	8004a0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	005a      	lsls	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	441a      	add	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b0f      	cmp	r3, #15
 8004936:	d916      	bls.n	8004966 <UART_SetConfig+0x4a6>
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800493e:	d212      	bcs.n	8004966 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f023 030f 	bic.w	r3, r3, #15
 8004948:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	b29b      	uxth	r3, r3
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	b29a      	uxth	r2, r3
 8004956:	8afb      	ldrh	r3, [r7, #22]
 8004958:	4313      	orrs	r3, r2
 800495a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	8afa      	ldrh	r2, [r7, #22]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	e052      	b.n	8004a0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800496c:	e04e      	b.n	8004a0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800496e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004972:	2b08      	cmp	r3, #8
 8004974:	d827      	bhi.n	80049c6 <UART_SetConfig+0x506>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <UART_SetConfig+0x4bc>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049a9 	.word	0x080049a9
 8004984:	080049b1 	.word	0x080049b1
 8004988:	080049c7 	.word	0x080049c7
 800498c:	080049b7 	.word	0x080049b7
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049c7 	.word	0x080049c7
 8004998:	080049c7 	.word	0x080049c7
 800499c:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a0:	f7fd fd1c 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 80049a4:	61f8      	str	r0, [r7, #28]
        break;
 80049a6:	e014      	b.n	80049d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a8:	f7fd fd2e 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 80049ac:	61f8      	str	r0, [r7, #28]
        break;
 80049ae:	e010      	b.n	80049d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a2c <UART_SetConfig+0x56c>)
 80049b2:	61fb      	str	r3, [r7, #28]
        break;
 80049b4:	e00d      	b.n	80049d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fd fc79 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 80049ba:	61f8      	str	r0, [r7, #28]
        break;
 80049bc:	e009      	b.n	80049d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c2:	61fb      	str	r3, [r7, #28]
        break;
 80049c4:	e005      	b.n	80049d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049d0:	bf00      	nop
    }

    if (pclk != 0U)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d019      	beq.n	8004a0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	085a      	lsrs	r2, r3, #1
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	441a      	add	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b0f      	cmp	r3, #15
 80049f0:	d909      	bls.n	8004a06 <UART_SetConfig+0x546>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f8:	d205      	bcs.n	8004a06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	e002      	b.n	8004a0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3728      	adds	r7, #40	@ 0x28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a26:	bf00      	nop
 8004a28:	40008000 	.word	0x40008000
 8004a2c:	00f42400 	.word	0x00f42400

08004a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01a      	beq.n	8004b46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b2e:	d10a      	bne.n	8004b46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b098      	sub	sp, #96	@ 0x60
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b84:	f7fc fb4e 	bl	8001224 <HAL_GetTick>
 8004b88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d12e      	bne.n	8004bf6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f88c 	bl	8004cc4 <UART_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d021      	beq.n	8004bf6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e6      	bne.n	8004bb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e062      	b.n	8004cbc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d149      	bne.n	8004c98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f856 	bl	8004cc4 <UART_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d03c      	beq.n	8004c98 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e6      	bne.n	8004c1e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c70:	61fa      	str	r2, [r7, #28]
 8004c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e011      	b.n	8004cbc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3758      	adds	r7, #88	@ 0x58
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd4:	e049      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cdc:	d045      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fc faa1 	bl	8001224 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e048      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d031      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d110      	bne.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f838 	bl	8004d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2208      	movs	r2, #8
 8004d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e029      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d44:	d111      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f81e 	bl	8004d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e00f      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4013      	ands	r3, r2
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d0a6      	beq.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b095      	sub	sp, #84	@ 0x54
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e6      	bne.n	8004d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d118      	bne.n	8004e3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f023 0310 	bic.w	r3, r3, #16
 8004e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	613b      	str	r3, [r7, #16]
   return(result);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e6      	bne.n	8004e08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e4e:	bf00      	nop
 8004e50:	3754      	adds	r7, #84	@ 0x54
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <std>:
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	4604      	mov	r4, r0
 8004e62:	e9c0 3300 	strd	r3, r3, [r0]
 8004e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e6a:	6083      	str	r3, [r0, #8]
 8004e6c:	8181      	strh	r1, [r0, #12]
 8004e6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e70:	81c2      	strh	r2, [r0, #14]
 8004e72:	6183      	str	r3, [r0, #24]
 8004e74:	4619      	mov	r1, r3
 8004e76:	2208      	movs	r2, #8
 8004e78:	305c      	adds	r0, #92	@ 0x5c
 8004e7a:	f000 f8c3 	bl	8005004 <memset>
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb4 <std+0x58>)
 8004e80:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <std+0x5c>)
 8004e84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e86:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <std+0x60>)
 8004e88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <std+0x64>)
 8004e8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <std+0x68>)
 8004e90:	6224      	str	r4, [r4, #32]
 8004e92:	429c      	cmp	r4, r3
 8004e94:	d006      	beq.n	8004ea4 <std+0x48>
 8004e96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e9a:	4294      	cmp	r4, r2
 8004e9c:	d002      	beq.n	8004ea4 <std+0x48>
 8004e9e:	33d0      	adds	r3, #208	@ 0xd0
 8004ea0:	429c      	cmp	r4, r3
 8004ea2:	d105      	bne.n	8004eb0 <std+0x54>
 8004ea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eac:	f000 b8dc 	b.w	8005068 <__retarget_lock_init_recursive>
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	bf00      	nop
 8004eb4:	080058c1 	.word	0x080058c1
 8004eb8:	080058e3 	.word	0x080058e3
 8004ebc:	0800591b 	.word	0x0800591b
 8004ec0:	0800593f 	.word	0x0800593f
 8004ec4:	2000024c 	.word	0x2000024c

08004ec8 <stdio_exit_handler>:
 8004ec8:	4a02      	ldr	r2, [pc, #8]	@ (8004ed4 <stdio_exit_handler+0xc>)
 8004eca:	4903      	ldr	r1, [pc, #12]	@ (8004ed8 <stdio_exit_handler+0x10>)
 8004ecc:	4803      	ldr	r0, [pc, #12]	@ (8004edc <stdio_exit_handler+0x14>)
 8004ece:	f000 b869 	b.w	8004fa4 <_fwalk_sglue>
 8004ed2:	bf00      	nop
 8004ed4:	2000000c 	.word	0x2000000c
 8004ed8:	08005859 	.word	0x08005859
 8004edc:	2000001c 	.word	0x2000001c

08004ee0 <cleanup_stdio>:
 8004ee0:	6841      	ldr	r1, [r0, #4]
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <cleanup_stdio+0x34>)
 8004ee4:	4299      	cmp	r1, r3
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	4604      	mov	r4, r0
 8004eea:	d001      	beq.n	8004ef0 <cleanup_stdio+0x10>
 8004eec:	f000 fcb4 	bl	8005858 <_fflush_r>
 8004ef0:	68a1      	ldr	r1, [r4, #8]
 8004ef2:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <cleanup_stdio+0x38>)
 8004ef4:	4299      	cmp	r1, r3
 8004ef6:	d002      	beq.n	8004efe <cleanup_stdio+0x1e>
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f000 fcad 	bl	8005858 <_fflush_r>
 8004efe:	68e1      	ldr	r1, [r4, #12]
 8004f00:	4b06      	ldr	r3, [pc, #24]	@ (8004f1c <cleanup_stdio+0x3c>)
 8004f02:	4299      	cmp	r1, r3
 8004f04:	d004      	beq.n	8004f10 <cleanup_stdio+0x30>
 8004f06:	4620      	mov	r0, r4
 8004f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f0c:	f000 bca4 	b.w	8005858 <_fflush_r>
 8004f10:	bd10      	pop	{r4, pc}
 8004f12:	bf00      	nop
 8004f14:	2000024c 	.word	0x2000024c
 8004f18:	200002b4 	.word	0x200002b4
 8004f1c:	2000031c 	.word	0x2000031c

08004f20 <global_stdio_init.part.0>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <global_stdio_init.part.0+0x30>)
 8004f24:	4c0b      	ldr	r4, [pc, #44]	@ (8004f54 <global_stdio_init.part.0+0x34>)
 8004f26:	4a0c      	ldr	r2, [pc, #48]	@ (8004f58 <global_stdio_init.part.0+0x38>)
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2104      	movs	r1, #4
 8004f30:	f7ff ff94 	bl	8004e5c <std>
 8004f34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2109      	movs	r1, #9
 8004f3c:	f7ff ff8e 	bl	8004e5c <std>
 8004f40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f44:	2202      	movs	r2, #2
 8004f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f4a:	2112      	movs	r1, #18
 8004f4c:	f7ff bf86 	b.w	8004e5c <std>
 8004f50:	20000384 	.word	0x20000384
 8004f54:	2000024c 	.word	0x2000024c
 8004f58:	08004ec9 	.word	0x08004ec9

08004f5c <__sfp_lock_acquire>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	@ (8004f64 <__sfp_lock_acquire+0x8>)
 8004f5e:	f000 b884 	b.w	800506a <__retarget_lock_acquire_recursive>
 8004f62:	bf00      	nop
 8004f64:	20000389 	.word	0x20000389

08004f68 <__sfp_lock_release>:
 8004f68:	4801      	ldr	r0, [pc, #4]	@ (8004f70 <__sfp_lock_release+0x8>)
 8004f6a:	f000 b87f 	b.w	800506c <__retarget_lock_release_recursive>
 8004f6e:	bf00      	nop
 8004f70:	20000389 	.word	0x20000389

08004f74 <__sinit>:
 8004f74:	b510      	push	{r4, lr}
 8004f76:	4604      	mov	r4, r0
 8004f78:	f7ff fff0 	bl	8004f5c <__sfp_lock_acquire>
 8004f7c:	6a23      	ldr	r3, [r4, #32]
 8004f7e:	b11b      	cbz	r3, 8004f88 <__sinit+0x14>
 8004f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f84:	f7ff bff0 	b.w	8004f68 <__sfp_lock_release>
 8004f88:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <__sinit+0x28>)
 8004f8a:	6223      	str	r3, [r4, #32]
 8004f8c:	4b04      	ldr	r3, [pc, #16]	@ (8004fa0 <__sinit+0x2c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f5      	bne.n	8004f80 <__sinit+0xc>
 8004f94:	f7ff ffc4 	bl	8004f20 <global_stdio_init.part.0>
 8004f98:	e7f2      	b.n	8004f80 <__sinit+0xc>
 8004f9a:	bf00      	nop
 8004f9c:	08004ee1 	.word	0x08004ee1
 8004fa0:	20000384 	.word	0x20000384

08004fa4 <_fwalk_sglue>:
 8004fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	4607      	mov	r7, r0
 8004faa:	4688      	mov	r8, r1
 8004fac:	4614      	mov	r4, r2
 8004fae:	2600      	movs	r6, #0
 8004fb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fb4:	f1b9 0901 	subs.w	r9, r9, #1
 8004fb8:	d505      	bpl.n	8004fc6 <_fwalk_sglue+0x22>
 8004fba:	6824      	ldr	r4, [r4, #0]
 8004fbc:	2c00      	cmp	r4, #0
 8004fbe:	d1f7      	bne.n	8004fb0 <_fwalk_sglue+0xc>
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc6:	89ab      	ldrh	r3, [r5, #12]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d907      	bls.n	8004fdc <_fwalk_sglue+0x38>
 8004fcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	d003      	beq.n	8004fdc <_fwalk_sglue+0x38>
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	47c0      	blx	r8
 8004fda:	4306      	orrs	r6, r0
 8004fdc:	3568      	adds	r5, #104	@ 0x68
 8004fde:	e7e9      	b.n	8004fb4 <_fwalk_sglue+0x10>

08004fe0 <iprintf>:
 8004fe0:	b40f      	push	{r0, r1, r2, r3}
 8004fe2:	b507      	push	{r0, r1, r2, lr}
 8004fe4:	4906      	ldr	r1, [pc, #24]	@ (8005000 <iprintf+0x20>)
 8004fe6:	ab04      	add	r3, sp, #16
 8004fe8:	6808      	ldr	r0, [r1, #0]
 8004fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fee:	6881      	ldr	r1, [r0, #8]
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	f000 f865 	bl	80050c0 <_vfiprintf_r>
 8004ff6:	b003      	add	sp, #12
 8004ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ffc:	b004      	add	sp, #16
 8004ffe:	4770      	bx	lr
 8005000:	20000018 	.word	0x20000018

08005004 <memset>:
 8005004:	4402      	add	r2, r0
 8005006:	4603      	mov	r3, r0
 8005008:	4293      	cmp	r3, r2
 800500a:	d100      	bne.n	800500e <memset+0xa>
 800500c:	4770      	bx	lr
 800500e:	f803 1b01 	strb.w	r1, [r3], #1
 8005012:	e7f9      	b.n	8005008 <memset+0x4>

08005014 <__errno>:
 8005014:	4b01      	ldr	r3, [pc, #4]	@ (800501c <__errno+0x8>)
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000018 	.word	0x20000018

08005020 <__libc_init_array>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	4d0d      	ldr	r5, [pc, #52]	@ (8005058 <__libc_init_array+0x38>)
 8005024:	4c0d      	ldr	r4, [pc, #52]	@ (800505c <__libc_init_array+0x3c>)
 8005026:	1b64      	subs	r4, r4, r5
 8005028:	10a4      	asrs	r4, r4, #2
 800502a:	2600      	movs	r6, #0
 800502c:	42a6      	cmp	r6, r4
 800502e:	d109      	bne.n	8005044 <__libc_init_array+0x24>
 8005030:	4d0b      	ldr	r5, [pc, #44]	@ (8005060 <__libc_init_array+0x40>)
 8005032:	4c0c      	ldr	r4, [pc, #48]	@ (8005064 <__libc_init_array+0x44>)
 8005034:	f000 fe40 	bl	8005cb8 <_init>
 8005038:	1b64      	subs	r4, r4, r5
 800503a:	10a4      	asrs	r4, r4, #2
 800503c:	2600      	movs	r6, #0
 800503e:	42a6      	cmp	r6, r4
 8005040:	d105      	bne.n	800504e <__libc_init_array+0x2e>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	f855 3b04 	ldr.w	r3, [r5], #4
 8005048:	4798      	blx	r3
 800504a:	3601      	adds	r6, #1
 800504c:	e7ee      	b.n	800502c <__libc_init_array+0xc>
 800504e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005052:	4798      	blx	r3
 8005054:	3601      	adds	r6, #1
 8005056:	e7f2      	b.n	800503e <__libc_init_array+0x1e>
 8005058:	08005e04 	.word	0x08005e04
 800505c:	08005e04 	.word	0x08005e04
 8005060:	08005e04 	.word	0x08005e04
 8005064:	08005e08 	.word	0x08005e08

08005068 <__retarget_lock_init_recursive>:
 8005068:	4770      	bx	lr

0800506a <__retarget_lock_acquire_recursive>:
 800506a:	4770      	bx	lr

0800506c <__retarget_lock_release_recursive>:
 800506c:	4770      	bx	lr

0800506e <__sfputc_r>:
 800506e:	6893      	ldr	r3, [r2, #8]
 8005070:	3b01      	subs	r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	b410      	push	{r4}
 8005076:	6093      	str	r3, [r2, #8]
 8005078:	da08      	bge.n	800508c <__sfputc_r+0x1e>
 800507a:	6994      	ldr	r4, [r2, #24]
 800507c:	42a3      	cmp	r3, r4
 800507e:	db01      	blt.n	8005084 <__sfputc_r+0x16>
 8005080:	290a      	cmp	r1, #10
 8005082:	d103      	bne.n	800508c <__sfputc_r+0x1e>
 8005084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005088:	f000 bc5d 	b.w	8005946 <__swbuf_r>
 800508c:	6813      	ldr	r3, [r2, #0]
 800508e:	1c58      	adds	r0, r3, #1
 8005090:	6010      	str	r0, [r2, #0]
 8005092:	7019      	strb	r1, [r3, #0]
 8005094:	4608      	mov	r0, r1
 8005096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800509a:	4770      	bx	lr

0800509c <__sfputs_r>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	4606      	mov	r6, r0
 80050a0:	460f      	mov	r7, r1
 80050a2:	4614      	mov	r4, r2
 80050a4:	18d5      	adds	r5, r2, r3
 80050a6:	42ac      	cmp	r4, r5
 80050a8:	d101      	bne.n	80050ae <__sfputs_r+0x12>
 80050aa:	2000      	movs	r0, #0
 80050ac:	e007      	b.n	80050be <__sfputs_r+0x22>
 80050ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b2:	463a      	mov	r2, r7
 80050b4:	4630      	mov	r0, r6
 80050b6:	f7ff ffda 	bl	800506e <__sfputc_r>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	d1f3      	bne.n	80050a6 <__sfputs_r+0xa>
 80050be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050c0 <_vfiprintf_r>:
 80050c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c4:	460d      	mov	r5, r1
 80050c6:	b09d      	sub	sp, #116	@ 0x74
 80050c8:	4614      	mov	r4, r2
 80050ca:	4698      	mov	r8, r3
 80050cc:	4606      	mov	r6, r0
 80050ce:	b118      	cbz	r0, 80050d8 <_vfiprintf_r+0x18>
 80050d0:	6a03      	ldr	r3, [r0, #32]
 80050d2:	b90b      	cbnz	r3, 80050d8 <_vfiprintf_r+0x18>
 80050d4:	f7ff ff4e 	bl	8004f74 <__sinit>
 80050d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050da:	07d9      	lsls	r1, r3, #31
 80050dc:	d405      	bmi.n	80050ea <_vfiprintf_r+0x2a>
 80050de:	89ab      	ldrh	r3, [r5, #12]
 80050e0:	059a      	lsls	r2, r3, #22
 80050e2:	d402      	bmi.n	80050ea <_vfiprintf_r+0x2a>
 80050e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050e6:	f7ff ffc0 	bl	800506a <__retarget_lock_acquire_recursive>
 80050ea:	89ab      	ldrh	r3, [r5, #12]
 80050ec:	071b      	lsls	r3, r3, #28
 80050ee:	d501      	bpl.n	80050f4 <_vfiprintf_r+0x34>
 80050f0:	692b      	ldr	r3, [r5, #16]
 80050f2:	b99b      	cbnz	r3, 800511c <_vfiprintf_r+0x5c>
 80050f4:	4629      	mov	r1, r5
 80050f6:	4630      	mov	r0, r6
 80050f8:	f000 fc64 	bl	80059c4 <__swsetup_r>
 80050fc:	b170      	cbz	r0, 800511c <_vfiprintf_r+0x5c>
 80050fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005100:	07dc      	lsls	r4, r3, #31
 8005102:	d504      	bpl.n	800510e <_vfiprintf_r+0x4e>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005108:	b01d      	add	sp, #116	@ 0x74
 800510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510e:	89ab      	ldrh	r3, [r5, #12]
 8005110:	0598      	lsls	r0, r3, #22
 8005112:	d4f7      	bmi.n	8005104 <_vfiprintf_r+0x44>
 8005114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005116:	f7ff ffa9 	bl	800506c <__retarget_lock_release_recursive>
 800511a:	e7f3      	b.n	8005104 <_vfiprintf_r+0x44>
 800511c:	2300      	movs	r3, #0
 800511e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005120:	2320      	movs	r3, #32
 8005122:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005126:	f8cd 800c 	str.w	r8, [sp, #12]
 800512a:	2330      	movs	r3, #48	@ 0x30
 800512c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80052dc <_vfiprintf_r+0x21c>
 8005130:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005134:	f04f 0901 	mov.w	r9, #1
 8005138:	4623      	mov	r3, r4
 800513a:	469a      	mov	sl, r3
 800513c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005140:	b10a      	cbz	r2, 8005146 <_vfiprintf_r+0x86>
 8005142:	2a25      	cmp	r2, #37	@ 0x25
 8005144:	d1f9      	bne.n	800513a <_vfiprintf_r+0x7a>
 8005146:	ebba 0b04 	subs.w	fp, sl, r4
 800514a:	d00b      	beq.n	8005164 <_vfiprintf_r+0xa4>
 800514c:	465b      	mov	r3, fp
 800514e:	4622      	mov	r2, r4
 8005150:	4629      	mov	r1, r5
 8005152:	4630      	mov	r0, r6
 8005154:	f7ff ffa2 	bl	800509c <__sfputs_r>
 8005158:	3001      	adds	r0, #1
 800515a:	f000 80a7 	beq.w	80052ac <_vfiprintf_r+0x1ec>
 800515e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005160:	445a      	add	r2, fp
 8005162:	9209      	str	r2, [sp, #36]	@ 0x24
 8005164:	f89a 3000 	ldrb.w	r3, [sl]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 809f 	beq.w	80052ac <_vfiprintf_r+0x1ec>
 800516e:	2300      	movs	r3, #0
 8005170:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005178:	f10a 0a01 	add.w	sl, sl, #1
 800517c:	9304      	str	r3, [sp, #16]
 800517e:	9307      	str	r3, [sp, #28]
 8005180:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005184:	931a      	str	r3, [sp, #104]	@ 0x68
 8005186:	4654      	mov	r4, sl
 8005188:	2205      	movs	r2, #5
 800518a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518e:	4853      	ldr	r0, [pc, #332]	@ (80052dc <_vfiprintf_r+0x21c>)
 8005190:	f7fb f81e 	bl	80001d0 <memchr>
 8005194:	9a04      	ldr	r2, [sp, #16]
 8005196:	b9d8      	cbnz	r0, 80051d0 <_vfiprintf_r+0x110>
 8005198:	06d1      	lsls	r1, r2, #27
 800519a:	bf44      	itt	mi
 800519c:	2320      	movmi	r3, #32
 800519e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051a2:	0713      	lsls	r3, r2, #28
 80051a4:	bf44      	itt	mi
 80051a6:	232b      	movmi	r3, #43	@ 0x2b
 80051a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051ac:	f89a 3000 	ldrb.w	r3, [sl]
 80051b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051b2:	d015      	beq.n	80051e0 <_vfiprintf_r+0x120>
 80051b4:	9a07      	ldr	r2, [sp, #28]
 80051b6:	4654      	mov	r4, sl
 80051b8:	2000      	movs	r0, #0
 80051ba:	f04f 0c0a 	mov.w	ip, #10
 80051be:	4621      	mov	r1, r4
 80051c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051c4:	3b30      	subs	r3, #48	@ 0x30
 80051c6:	2b09      	cmp	r3, #9
 80051c8:	d94b      	bls.n	8005262 <_vfiprintf_r+0x1a2>
 80051ca:	b1b0      	cbz	r0, 80051fa <_vfiprintf_r+0x13a>
 80051cc:	9207      	str	r2, [sp, #28]
 80051ce:	e014      	b.n	80051fa <_vfiprintf_r+0x13a>
 80051d0:	eba0 0308 	sub.w	r3, r0, r8
 80051d4:	fa09 f303 	lsl.w	r3, r9, r3
 80051d8:	4313      	orrs	r3, r2
 80051da:	9304      	str	r3, [sp, #16]
 80051dc:	46a2      	mov	sl, r4
 80051de:	e7d2      	b.n	8005186 <_vfiprintf_r+0xc6>
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	1d19      	adds	r1, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	9103      	str	r1, [sp, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bfbb      	ittet	lt
 80051ec:	425b      	neglt	r3, r3
 80051ee:	f042 0202 	orrlt.w	r2, r2, #2
 80051f2:	9307      	strge	r3, [sp, #28]
 80051f4:	9307      	strlt	r3, [sp, #28]
 80051f6:	bfb8      	it	lt
 80051f8:	9204      	strlt	r2, [sp, #16]
 80051fa:	7823      	ldrb	r3, [r4, #0]
 80051fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80051fe:	d10a      	bne.n	8005216 <_vfiprintf_r+0x156>
 8005200:	7863      	ldrb	r3, [r4, #1]
 8005202:	2b2a      	cmp	r3, #42	@ 0x2a
 8005204:	d132      	bne.n	800526c <_vfiprintf_r+0x1ac>
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	1d1a      	adds	r2, r3, #4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	9203      	str	r2, [sp, #12]
 800520e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005212:	3402      	adds	r4, #2
 8005214:	9305      	str	r3, [sp, #20]
 8005216:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80052ec <_vfiprintf_r+0x22c>
 800521a:	7821      	ldrb	r1, [r4, #0]
 800521c:	2203      	movs	r2, #3
 800521e:	4650      	mov	r0, sl
 8005220:	f7fa ffd6 	bl	80001d0 <memchr>
 8005224:	b138      	cbz	r0, 8005236 <_vfiprintf_r+0x176>
 8005226:	9b04      	ldr	r3, [sp, #16]
 8005228:	eba0 000a 	sub.w	r0, r0, sl
 800522c:	2240      	movs	r2, #64	@ 0x40
 800522e:	4082      	lsls	r2, r0
 8005230:	4313      	orrs	r3, r2
 8005232:	3401      	adds	r4, #1
 8005234:	9304      	str	r3, [sp, #16]
 8005236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800523a:	4829      	ldr	r0, [pc, #164]	@ (80052e0 <_vfiprintf_r+0x220>)
 800523c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005240:	2206      	movs	r2, #6
 8005242:	f7fa ffc5 	bl	80001d0 <memchr>
 8005246:	2800      	cmp	r0, #0
 8005248:	d03f      	beq.n	80052ca <_vfiprintf_r+0x20a>
 800524a:	4b26      	ldr	r3, [pc, #152]	@ (80052e4 <_vfiprintf_r+0x224>)
 800524c:	bb1b      	cbnz	r3, 8005296 <_vfiprintf_r+0x1d6>
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	3307      	adds	r3, #7
 8005252:	f023 0307 	bic.w	r3, r3, #7
 8005256:	3308      	adds	r3, #8
 8005258:	9303      	str	r3, [sp, #12]
 800525a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800525c:	443b      	add	r3, r7
 800525e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005260:	e76a      	b.n	8005138 <_vfiprintf_r+0x78>
 8005262:	fb0c 3202 	mla	r2, ip, r2, r3
 8005266:	460c      	mov	r4, r1
 8005268:	2001      	movs	r0, #1
 800526a:	e7a8      	b.n	80051be <_vfiprintf_r+0xfe>
 800526c:	2300      	movs	r3, #0
 800526e:	3401      	adds	r4, #1
 8005270:	9305      	str	r3, [sp, #20]
 8005272:	4619      	mov	r1, r3
 8005274:	f04f 0c0a 	mov.w	ip, #10
 8005278:	4620      	mov	r0, r4
 800527a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800527e:	3a30      	subs	r2, #48	@ 0x30
 8005280:	2a09      	cmp	r2, #9
 8005282:	d903      	bls.n	800528c <_vfiprintf_r+0x1cc>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0c6      	beq.n	8005216 <_vfiprintf_r+0x156>
 8005288:	9105      	str	r1, [sp, #20]
 800528a:	e7c4      	b.n	8005216 <_vfiprintf_r+0x156>
 800528c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005290:	4604      	mov	r4, r0
 8005292:	2301      	movs	r3, #1
 8005294:	e7f0      	b.n	8005278 <_vfiprintf_r+0x1b8>
 8005296:	ab03      	add	r3, sp, #12
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	462a      	mov	r2, r5
 800529c:	4b12      	ldr	r3, [pc, #72]	@ (80052e8 <_vfiprintf_r+0x228>)
 800529e:	a904      	add	r1, sp, #16
 80052a0:	4630      	mov	r0, r6
 80052a2:	f3af 8000 	nop.w
 80052a6:	4607      	mov	r7, r0
 80052a8:	1c78      	adds	r0, r7, #1
 80052aa:	d1d6      	bne.n	800525a <_vfiprintf_r+0x19a>
 80052ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052ae:	07d9      	lsls	r1, r3, #31
 80052b0:	d405      	bmi.n	80052be <_vfiprintf_r+0x1fe>
 80052b2:	89ab      	ldrh	r3, [r5, #12]
 80052b4:	059a      	lsls	r2, r3, #22
 80052b6:	d402      	bmi.n	80052be <_vfiprintf_r+0x1fe>
 80052b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ba:	f7ff fed7 	bl	800506c <__retarget_lock_release_recursive>
 80052be:	89ab      	ldrh	r3, [r5, #12]
 80052c0:	065b      	lsls	r3, r3, #25
 80052c2:	f53f af1f 	bmi.w	8005104 <_vfiprintf_r+0x44>
 80052c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052c8:	e71e      	b.n	8005108 <_vfiprintf_r+0x48>
 80052ca:	ab03      	add	r3, sp, #12
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	462a      	mov	r2, r5
 80052d0:	4b05      	ldr	r3, [pc, #20]	@ (80052e8 <_vfiprintf_r+0x228>)
 80052d2:	a904      	add	r1, sp, #16
 80052d4:	4630      	mov	r0, r6
 80052d6:	f000 f91b 	bl	8005510 <_printf_i>
 80052da:	e7e4      	b.n	80052a6 <_vfiprintf_r+0x1e6>
 80052dc:	08005dc8 	.word	0x08005dc8
 80052e0:	08005dd2 	.word	0x08005dd2
 80052e4:	00000000 	.word	0x00000000
 80052e8:	0800509d 	.word	0x0800509d
 80052ec:	08005dce 	.word	0x08005dce

080052f0 <sbrk_aligned>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	4e0f      	ldr	r6, [pc, #60]	@ (8005330 <sbrk_aligned+0x40>)
 80052f4:	460c      	mov	r4, r1
 80052f6:	6831      	ldr	r1, [r6, #0]
 80052f8:	4605      	mov	r5, r0
 80052fa:	b911      	cbnz	r1, 8005302 <sbrk_aligned+0x12>
 80052fc:	f000 fc70 	bl	8005be0 <_sbrk_r>
 8005300:	6030      	str	r0, [r6, #0]
 8005302:	4621      	mov	r1, r4
 8005304:	4628      	mov	r0, r5
 8005306:	f000 fc6b 	bl	8005be0 <_sbrk_r>
 800530a:	1c43      	adds	r3, r0, #1
 800530c:	d103      	bne.n	8005316 <sbrk_aligned+0x26>
 800530e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005312:	4620      	mov	r0, r4
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	1cc4      	adds	r4, r0, #3
 8005318:	f024 0403 	bic.w	r4, r4, #3
 800531c:	42a0      	cmp	r0, r4
 800531e:	d0f8      	beq.n	8005312 <sbrk_aligned+0x22>
 8005320:	1a21      	subs	r1, r4, r0
 8005322:	4628      	mov	r0, r5
 8005324:	f000 fc5c 	bl	8005be0 <_sbrk_r>
 8005328:	3001      	adds	r0, #1
 800532a:	d1f2      	bne.n	8005312 <sbrk_aligned+0x22>
 800532c:	e7ef      	b.n	800530e <sbrk_aligned+0x1e>
 800532e:	bf00      	nop
 8005330:	2000038c 	.word	0x2000038c

08005334 <_malloc_r>:
 8005334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005338:	1ccd      	adds	r5, r1, #3
 800533a:	f025 0503 	bic.w	r5, r5, #3
 800533e:	3508      	adds	r5, #8
 8005340:	2d0c      	cmp	r5, #12
 8005342:	bf38      	it	cc
 8005344:	250c      	movcc	r5, #12
 8005346:	2d00      	cmp	r5, #0
 8005348:	4606      	mov	r6, r0
 800534a:	db01      	blt.n	8005350 <_malloc_r+0x1c>
 800534c:	42a9      	cmp	r1, r5
 800534e:	d904      	bls.n	800535a <_malloc_r+0x26>
 8005350:	230c      	movs	r3, #12
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	2000      	movs	r0, #0
 8005356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005430 <_malloc_r+0xfc>
 800535e:	f000 faa3 	bl	80058a8 <__malloc_lock>
 8005362:	f8d8 3000 	ldr.w	r3, [r8]
 8005366:	461c      	mov	r4, r3
 8005368:	bb44      	cbnz	r4, 80053bc <_malloc_r+0x88>
 800536a:	4629      	mov	r1, r5
 800536c:	4630      	mov	r0, r6
 800536e:	f7ff ffbf 	bl	80052f0 <sbrk_aligned>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	4604      	mov	r4, r0
 8005376:	d158      	bne.n	800542a <_malloc_r+0xf6>
 8005378:	f8d8 4000 	ldr.w	r4, [r8]
 800537c:	4627      	mov	r7, r4
 800537e:	2f00      	cmp	r7, #0
 8005380:	d143      	bne.n	800540a <_malloc_r+0xd6>
 8005382:	2c00      	cmp	r4, #0
 8005384:	d04b      	beq.n	800541e <_malloc_r+0xea>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	4639      	mov	r1, r7
 800538a:	4630      	mov	r0, r6
 800538c:	eb04 0903 	add.w	r9, r4, r3
 8005390:	f000 fc26 	bl	8005be0 <_sbrk_r>
 8005394:	4581      	cmp	r9, r0
 8005396:	d142      	bne.n	800541e <_malloc_r+0xea>
 8005398:	6821      	ldr	r1, [r4, #0]
 800539a:	1a6d      	subs	r5, r5, r1
 800539c:	4629      	mov	r1, r5
 800539e:	4630      	mov	r0, r6
 80053a0:	f7ff ffa6 	bl	80052f0 <sbrk_aligned>
 80053a4:	3001      	adds	r0, #1
 80053a6:	d03a      	beq.n	800541e <_malloc_r+0xea>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	442b      	add	r3, r5
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	f8d8 3000 	ldr.w	r3, [r8]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	bb62      	cbnz	r2, 8005410 <_malloc_r+0xdc>
 80053b6:	f8c8 7000 	str.w	r7, [r8]
 80053ba:	e00f      	b.n	80053dc <_malloc_r+0xa8>
 80053bc:	6822      	ldr	r2, [r4, #0]
 80053be:	1b52      	subs	r2, r2, r5
 80053c0:	d420      	bmi.n	8005404 <_malloc_r+0xd0>
 80053c2:	2a0b      	cmp	r2, #11
 80053c4:	d917      	bls.n	80053f6 <_malloc_r+0xc2>
 80053c6:	1961      	adds	r1, r4, r5
 80053c8:	42a3      	cmp	r3, r4
 80053ca:	6025      	str	r5, [r4, #0]
 80053cc:	bf18      	it	ne
 80053ce:	6059      	strne	r1, [r3, #4]
 80053d0:	6863      	ldr	r3, [r4, #4]
 80053d2:	bf08      	it	eq
 80053d4:	f8c8 1000 	streq.w	r1, [r8]
 80053d8:	5162      	str	r2, [r4, r5]
 80053da:	604b      	str	r3, [r1, #4]
 80053dc:	4630      	mov	r0, r6
 80053de:	f000 fa69 	bl	80058b4 <__malloc_unlock>
 80053e2:	f104 000b 	add.w	r0, r4, #11
 80053e6:	1d23      	adds	r3, r4, #4
 80053e8:	f020 0007 	bic.w	r0, r0, #7
 80053ec:	1ac2      	subs	r2, r0, r3
 80053ee:	bf1c      	itt	ne
 80053f0:	1a1b      	subne	r3, r3, r0
 80053f2:	50a3      	strne	r3, [r4, r2]
 80053f4:	e7af      	b.n	8005356 <_malloc_r+0x22>
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	42a3      	cmp	r3, r4
 80053fa:	bf0c      	ite	eq
 80053fc:	f8c8 2000 	streq.w	r2, [r8]
 8005400:	605a      	strne	r2, [r3, #4]
 8005402:	e7eb      	b.n	80053dc <_malloc_r+0xa8>
 8005404:	4623      	mov	r3, r4
 8005406:	6864      	ldr	r4, [r4, #4]
 8005408:	e7ae      	b.n	8005368 <_malloc_r+0x34>
 800540a:	463c      	mov	r4, r7
 800540c:	687f      	ldr	r7, [r7, #4]
 800540e:	e7b6      	b.n	800537e <_malloc_r+0x4a>
 8005410:	461a      	mov	r2, r3
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	42a3      	cmp	r3, r4
 8005416:	d1fb      	bne.n	8005410 <_malloc_r+0xdc>
 8005418:	2300      	movs	r3, #0
 800541a:	6053      	str	r3, [r2, #4]
 800541c:	e7de      	b.n	80053dc <_malloc_r+0xa8>
 800541e:	230c      	movs	r3, #12
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	4630      	mov	r0, r6
 8005424:	f000 fa46 	bl	80058b4 <__malloc_unlock>
 8005428:	e794      	b.n	8005354 <_malloc_r+0x20>
 800542a:	6005      	str	r5, [r0, #0]
 800542c:	e7d6      	b.n	80053dc <_malloc_r+0xa8>
 800542e:	bf00      	nop
 8005430:	20000390 	.word	0x20000390

08005434 <_printf_common>:
 8005434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005438:	4616      	mov	r6, r2
 800543a:	4698      	mov	r8, r3
 800543c:	688a      	ldr	r2, [r1, #8]
 800543e:	690b      	ldr	r3, [r1, #16]
 8005440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005444:	4293      	cmp	r3, r2
 8005446:	bfb8      	it	lt
 8005448:	4613      	movlt	r3, r2
 800544a:	6033      	str	r3, [r6, #0]
 800544c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005450:	4607      	mov	r7, r0
 8005452:	460c      	mov	r4, r1
 8005454:	b10a      	cbz	r2, 800545a <_printf_common+0x26>
 8005456:	3301      	adds	r3, #1
 8005458:	6033      	str	r3, [r6, #0]
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	0699      	lsls	r1, r3, #26
 800545e:	bf42      	ittt	mi
 8005460:	6833      	ldrmi	r3, [r6, #0]
 8005462:	3302      	addmi	r3, #2
 8005464:	6033      	strmi	r3, [r6, #0]
 8005466:	6825      	ldr	r5, [r4, #0]
 8005468:	f015 0506 	ands.w	r5, r5, #6
 800546c:	d106      	bne.n	800547c <_printf_common+0x48>
 800546e:	f104 0a19 	add.w	sl, r4, #25
 8005472:	68e3      	ldr	r3, [r4, #12]
 8005474:	6832      	ldr	r2, [r6, #0]
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	42ab      	cmp	r3, r5
 800547a:	dc26      	bgt.n	80054ca <_printf_common+0x96>
 800547c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	3b00      	subs	r3, #0
 8005484:	bf18      	it	ne
 8005486:	2301      	movne	r3, #1
 8005488:	0692      	lsls	r2, r2, #26
 800548a:	d42b      	bmi.n	80054e4 <_printf_common+0xb0>
 800548c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005490:	4641      	mov	r1, r8
 8005492:	4638      	mov	r0, r7
 8005494:	47c8      	blx	r9
 8005496:	3001      	adds	r0, #1
 8005498:	d01e      	beq.n	80054d8 <_printf_common+0xa4>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	6922      	ldr	r2, [r4, #16]
 800549e:	f003 0306 	and.w	r3, r3, #6
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	bf02      	ittt	eq
 80054a6:	68e5      	ldreq	r5, [r4, #12]
 80054a8:	6833      	ldreq	r3, [r6, #0]
 80054aa:	1aed      	subeq	r5, r5, r3
 80054ac:	68a3      	ldr	r3, [r4, #8]
 80054ae:	bf0c      	ite	eq
 80054b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b4:	2500      	movne	r5, #0
 80054b6:	4293      	cmp	r3, r2
 80054b8:	bfc4      	itt	gt
 80054ba:	1a9b      	subgt	r3, r3, r2
 80054bc:	18ed      	addgt	r5, r5, r3
 80054be:	2600      	movs	r6, #0
 80054c0:	341a      	adds	r4, #26
 80054c2:	42b5      	cmp	r5, r6
 80054c4:	d11a      	bne.n	80054fc <_printf_common+0xc8>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e008      	b.n	80054dc <_printf_common+0xa8>
 80054ca:	2301      	movs	r3, #1
 80054cc:	4652      	mov	r2, sl
 80054ce:	4641      	mov	r1, r8
 80054d0:	4638      	mov	r0, r7
 80054d2:	47c8      	blx	r9
 80054d4:	3001      	adds	r0, #1
 80054d6:	d103      	bne.n	80054e0 <_printf_common+0xac>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e0:	3501      	adds	r5, #1
 80054e2:	e7c6      	b.n	8005472 <_printf_common+0x3e>
 80054e4:	18e1      	adds	r1, r4, r3
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	2030      	movs	r0, #48	@ 0x30
 80054ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054ee:	4422      	add	r2, r4
 80054f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054f8:	3302      	adds	r3, #2
 80054fa:	e7c7      	b.n	800548c <_printf_common+0x58>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4622      	mov	r2, r4
 8005500:	4641      	mov	r1, r8
 8005502:	4638      	mov	r0, r7
 8005504:	47c8      	blx	r9
 8005506:	3001      	adds	r0, #1
 8005508:	d0e6      	beq.n	80054d8 <_printf_common+0xa4>
 800550a:	3601      	adds	r6, #1
 800550c:	e7d9      	b.n	80054c2 <_printf_common+0x8e>
	...

08005510 <_printf_i>:
 8005510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	7e0f      	ldrb	r7, [r1, #24]
 8005516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005518:	2f78      	cmp	r7, #120	@ 0x78
 800551a:	4691      	mov	r9, r2
 800551c:	4680      	mov	r8, r0
 800551e:	460c      	mov	r4, r1
 8005520:	469a      	mov	sl, r3
 8005522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005526:	d807      	bhi.n	8005538 <_printf_i+0x28>
 8005528:	2f62      	cmp	r7, #98	@ 0x62
 800552a:	d80a      	bhi.n	8005542 <_printf_i+0x32>
 800552c:	2f00      	cmp	r7, #0
 800552e:	f000 80d2 	beq.w	80056d6 <_printf_i+0x1c6>
 8005532:	2f58      	cmp	r7, #88	@ 0x58
 8005534:	f000 80b9 	beq.w	80056aa <_printf_i+0x19a>
 8005538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800553c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005540:	e03a      	b.n	80055b8 <_printf_i+0xa8>
 8005542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005546:	2b15      	cmp	r3, #21
 8005548:	d8f6      	bhi.n	8005538 <_printf_i+0x28>
 800554a:	a101      	add	r1, pc, #4	@ (adr r1, 8005550 <_printf_i+0x40>)
 800554c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005550:	080055a9 	.word	0x080055a9
 8005554:	080055bd 	.word	0x080055bd
 8005558:	08005539 	.word	0x08005539
 800555c:	08005539 	.word	0x08005539
 8005560:	08005539 	.word	0x08005539
 8005564:	08005539 	.word	0x08005539
 8005568:	080055bd 	.word	0x080055bd
 800556c:	08005539 	.word	0x08005539
 8005570:	08005539 	.word	0x08005539
 8005574:	08005539 	.word	0x08005539
 8005578:	08005539 	.word	0x08005539
 800557c:	080056bd 	.word	0x080056bd
 8005580:	080055e7 	.word	0x080055e7
 8005584:	08005677 	.word	0x08005677
 8005588:	08005539 	.word	0x08005539
 800558c:	08005539 	.word	0x08005539
 8005590:	080056df 	.word	0x080056df
 8005594:	08005539 	.word	0x08005539
 8005598:	080055e7 	.word	0x080055e7
 800559c:	08005539 	.word	0x08005539
 80055a0:	08005539 	.word	0x08005539
 80055a4:	0800567f 	.word	0x0800567f
 80055a8:	6833      	ldr	r3, [r6, #0]
 80055aa:	1d1a      	adds	r2, r3, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6032      	str	r2, [r6, #0]
 80055b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055b8:	2301      	movs	r3, #1
 80055ba:	e09d      	b.n	80056f8 <_printf_i+0x1e8>
 80055bc:	6833      	ldr	r3, [r6, #0]
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	1d19      	adds	r1, r3, #4
 80055c2:	6031      	str	r1, [r6, #0]
 80055c4:	0606      	lsls	r6, r0, #24
 80055c6:	d501      	bpl.n	80055cc <_printf_i+0xbc>
 80055c8:	681d      	ldr	r5, [r3, #0]
 80055ca:	e003      	b.n	80055d4 <_printf_i+0xc4>
 80055cc:	0645      	lsls	r5, r0, #25
 80055ce:	d5fb      	bpl.n	80055c8 <_printf_i+0xb8>
 80055d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055d4:	2d00      	cmp	r5, #0
 80055d6:	da03      	bge.n	80055e0 <_printf_i+0xd0>
 80055d8:	232d      	movs	r3, #45	@ 0x2d
 80055da:	426d      	negs	r5, r5
 80055dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e0:	4859      	ldr	r0, [pc, #356]	@ (8005748 <_printf_i+0x238>)
 80055e2:	230a      	movs	r3, #10
 80055e4:	e011      	b.n	800560a <_printf_i+0xfa>
 80055e6:	6821      	ldr	r1, [r4, #0]
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	0608      	lsls	r0, r1, #24
 80055ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80055f0:	d402      	bmi.n	80055f8 <_printf_i+0xe8>
 80055f2:	0649      	lsls	r1, r1, #25
 80055f4:	bf48      	it	mi
 80055f6:	b2ad      	uxthmi	r5, r5
 80055f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80055fa:	4853      	ldr	r0, [pc, #332]	@ (8005748 <_printf_i+0x238>)
 80055fc:	6033      	str	r3, [r6, #0]
 80055fe:	bf14      	ite	ne
 8005600:	230a      	movne	r3, #10
 8005602:	2308      	moveq	r3, #8
 8005604:	2100      	movs	r1, #0
 8005606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800560a:	6866      	ldr	r6, [r4, #4]
 800560c:	60a6      	str	r6, [r4, #8]
 800560e:	2e00      	cmp	r6, #0
 8005610:	bfa2      	ittt	ge
 8005612:	6821      	ldrge	r1, [r4, #0]
 8005614:	f021 0104 	bicge.w	r1, r1, #4
 8005618:	6021      	strge	r1, [r4, #0]
 800561a:	b90d      	cbnz	r5, 8005620 <_printf_i+0x110>
 800561c:	2e00      	cmp	r6, #0
 800561e:	d04b      	beq.n	80056b8 <_printf_i+0x1a8>
 8005620:	4616      	mov	r6, r2
 8005622:	fbb5 f1f3 	udiv	r1, r5, r3
 8005626:	fb03 5711 	mls	r7, r3, r1, r5
 800562a:	5dc7      	ldrb	r7, [r0, r7]
 800562c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005630:	462f      	mov	r7, r5
 8005632:	42bb      	cmp	r3, r7
 8005634:	460d      	mov	r5, r1
 8005636:	d9f4      	bls.n	8005622 <_printf_i+0x112>
 8005638:	2b08      	cmp	r3, #8
 800563a:	d10b      	bne.n	8005654 <_printf_i+0x144>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	07df      	lsls	r7, r3, #31
 8005640:	d508      	bpl.n	8005654 <_printf_i+0x144>
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	6861      	ldr	r1, [r4, #4]
 8005646:	4299      	cmp	r1, r3
 8005648:	bfde      	ittt	le
 800564a:	2330      	movle	r3, #48	@ 0x30
 800564c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005650:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005654:	1b92      	subs	r2, r2, r6
 8005656:	6122      	str	r2, [r4, #16]
 8005658:	f8cd a000 	str.w	sl, [sp]
 800565c:	464b      	mov	r3, r9
 800565e:	aa03      	add	r2, sp, #12
 8005660:	4621      	mov	r1, r4
 8005662:	4640      	mov	r0, r8
 8005664:	f7ff fee6 	bl	8005434 <_printf_common>
 8005668:	3001      	adds	r0, #1
 800566a:	d14a      	bne.n	8005702 <_printf_i+0x1f2>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005670:	b004      	add	sp, #16
 8005672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f043 0320 	orr.w	r3, r3, #32
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	4833      	ldr	r0, [pc, #204]	@ (800574c <_printf_i+0x23c>)
 8005680:	2778      	movs	r7, #120	@ 0x78
 8005682:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	6831      	ldr	r1, [r6, #0]
 800568a:	061f      	lsls	r7, r3, #24
 800568c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005690:	d402      	bmi.n	8005698 <_printf_i+0x188>
 8005692:	065f      	lsls	r7, r3, #25
 8005694:	bf48      	it	mi
 8005696:	b2ad      	uxthmi	r5, r5
 8005698:	6031      	str	r1, [r6, #0]
 800569a:	07d9      	lsls	r1, r3, #31
 800569c:	bf44      	itt	mi
 800569e:	f043 0320 	orrmi.w	r3, r3, #32
 80056a2:	6023      	strmi	r3, [r4, #0]
 80056a4:	b11d      	cbz	r5, 80056ae <_printf_i+0x19e>
 80056a6:	2310      	movs	r3, #16
 80056a8:	e7ac      	b.n	8005604 <_printf_i+0xf4>
 80056aa:	4827      	ldr	r0, [pc, #156]	@ (8005748 <_printf_i+0x238>)
 80056ac:	e7e9      	b.n	8005682 <_printf_i+0x172>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	f023 0320 	bic.w	r3, r3, #32
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	e7f6      	b.n	80056a6 <_printf_i+0x196>
 80056b8:	4616      	mov	r6, r2
 80056ba:	e7bd      	b.n	8005638 <_printf_i+0x128>
 80056bc:	6833      	ldr	r3, [r6, #0]
 80056be:	6825      	ldr	r5, [r4, #0]
 80056c0:	6961      	ldr	r1, [r4, #20]
 80056c2:	1d18      	adds	r0, r3, #4
 80056c4:	6030      	str	r0, [r6, #0]
 80056c6:	062e      	lsls	r6, r5, #24
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	d501      	bpl.n	80056d0 <_printf_i+0x1c0>
 80056cc:	6019      	str	r1, [r3, #0]
 80056ce:	e002      	b.n	80056d6 <_printf_i+0x1c6>
 80056d0:	0668      	lsls	r0, r5, #25
 80056d2:	d5fb      	bpl.n	80056cc <_printf_i+0x1bc>
 80056d4:	8019      	strh	r1, [r3, #0]
 80056d6:	2300      	movs	r3, #0
 80056d8:	6123      	str	r3, [r4, #16]
 80056da:	4616      	mov	r6, r2
 80056dc:	e7bc      	b.n	8005658 <_printf_i+0x148>
 80056de:	6833      	ldr	r3, [r6, #0]
 80056e0:	1d1a      	adds	r2, r3, #4
 80056e2:	6032      	str	r2, [r6, #0]
 80056e4:	681e      	ldr	r6, [r3, #0]
 80056e6:	6862      	ldr	r2, [r4, #4]
 80056e8:	2100      	movs	r1, #0
 80056ea:	4630      	mov	r0, r6
 80056ec:	f7fa fd70 	bl	80001d0 <memchr>
 80056f0:	b108      	cbz	r0, 80056f6 <_printf_i+0x1e6>
 80056f2:	1b80      	subs	r0, r0, r6
 80056f4:	6060      	str	r0, [r4, #4]
 80056f6:	6863      	ldr	r3, [r4, #4]
 80056f8:	6123      	str	r3, [r4, #16]
 80056fa:	2300      	movs	r3, #0
 80056fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005700:	e7aa      	b.n	8005658 <_printf_i+0x148>
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	4632      	mov	r2, r6
 8005706:	4649      	mov	r1, r9
 8005708:	4640      	mov	r0, r8
 800570a:	47d0      	blx	sl
 800570c:	3001      	adds	r0, #1
 800570e:	d0ad      	beq.n	800566c <_printf_i+0x15c>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	079b      	lsls	r3, r3, #30
 8005714:	d413      	bmi.n	800573e <_printf_i+0x22e>
 8005716:	68e0      	ldr	r0, [r4, #12]
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	4298      	cmp	r0, r3
 800571c:	bfb8      	it	lt
 800571e:	4618      	movlt	r0, r3
 8005720:	e7a6      	b.n	8005670 <_printf_i+0x160>
 8005722:	2301      	movs	r3, #1
 8005724:	4632      	mov	r2, r6
 8005726:	4649      	mov	r1, r9
 8005728:	4640      	mov	r0, r8
 800572a:	47d0      	blx	sl
 800572c:	3001      	adds	r0, #1
 800572e:	d09d      	beq.n	800566c <_printf_i+0x15c>
 8005730:	3501      	adds	r5, #1
 8005732:	68e3      	ldr	r3, [r4, #12]
 8005734:	9903      	ldr	r1, [sp, #12]
 8005736:	1a5b      	subs	r3, r3, r1
 8005738:	42ab      	cmp	r3, r5
 800573a:	dcf2      	bgt.n	8005722 <_printf_i+0x212>
 800573c:	e7eb      	b.n	8005716 <_printf_i+0x206>
 800573e:	2500      	movs	r5, #0
 8005740:	f104 0619 	add.w	r6, r4, #25
 8005744:	e7f5      	b.n	8005732 <_printf_i+0x222>
 8005746:	bf00      	nop
 8005748:	08005dd9 	.word	0x08005dd9
 800574c:	08005dea 	.word	0x08005dea

08005750 <__sflush_r>:
 8005750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	0716      	lsls	r6, r2, #28
 800575a:	4605      	mov	r5, r0
 800575c:	460c      	mov	r4, r1
 800575e:	d454      	bmi.n	800580a <__sflush_r+0xba>
 8005760:	684b      	ldr	r3, [r1, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	dc02      	bgt.n	800576c <__sflush_r+0x1c>
 8005766:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	dd48      	ble.n	80057fe <__sflush_r+0xae>
 800576c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800576e:	2e00      	cmp	r6, #0
 8005770:	d045      	beq.n	80057fe <__sflush_r+0xae>
 8005772:	2300      	movs	r3, #0
 8005774:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005778:	682f      	ldr	r7, [r5, #0]
 800577a:	6a21      	ldr	r1, [r4, #32]
 800577c:	602b      	str	r3, [r5, #0]
 800577e:	d030      	beq.n	80057e2 <__sflush_r+0x92>
 8005780:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	0759      	lsls	r1, r3, #29
 8005786:	d505      	bpl.n	8005794 <__sflush_r+0x44>
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	1ad2      	subs	r2, r2, r3
 800578c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800578e:	b10b      	cbz	r3, 8005794 <__sflush_r+0x44>
 8005790:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005792:	1ad2      	subs	r2, r2, r3
 8005794:	2300      	movs	r3, #0
 8005796:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005798:	6a21      	ldr	r1, [r4, #32]
 800579a:	4628      	mov	r0, r5
 800579c:	47b0      	blx	r6
 800579e:	1c43      	adds	r3, r0, #1
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	d106      	bne.n	80057b2 <__sflush_r+0x62>
 80057a4:	6829      	ldr	r1, [r5, #0]
 80057a6:	291d      	cmp	r1, #29
 80057a8:	d82b      	bhi.n	8005802 <__sflush_r+0xb2>
 80057aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005854 <__sflush_r+0x104>)
 80057ac:	410a      	asrs	r2, r1
 80057ae:	07d6      	lsls	r6, r2, #31
 80057b0:	d427      	bmi.n	8005802 <__sflush_r+0xb2>
 80057b2:	2200      	movs	r2, #0
 80057b4:	6062      	str	r2, [r4, #4]
 80057b6:	04d9      	lsls	r1, r3, #19
 80057b8:	6922      	ldr	r2, [r4, #16]
 80057ba:	6022      	str	r2, [r4, #0]
 80057bc:	d504      	bpl.n	80057c8 <__sflush_r+0x78>
 80057be:	1c42      	adds	r2, r0, #1
 80057c0:	d101      	bne.n	80057c6 <__sflush_r+0x76>
 80057c2:	682b      	ldr	r3, [r5, #0]
 80057c4:	b903      	cbnz	r3, 80057c8 <__sflush_r+0x78>
 80057c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80057c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057ca:	602f      	str	r7, [r5, #0]
 80057cc:	b1b9      	cbz	r1, 80057fe <__sflush_r+0xae>
 80057ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057d2:	4299      	cmp	r1, r3
 80057d4:	d002      	beq.n	80057dc <__sflush_r+0x8c>
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 fa24 	bl	8005c24 <_free_r>
 80057dc:	2300      	movs	r3, #0
 80057de:	6363      	str	r3, [r4, #52]	@ 0x34
 80057e0:	e00d      	b.n	80057fe <__sflush_r+0xae>
 80057e2:	2301      	movs	r3, #1
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b0      	blx	r6
 80057e8:	4602      	mov	r2, r0
 80057ea:	1c50      	adds	r0, r2, #1
 80057ec:	d1c9      	bne.n	8005782 <__sflush_r+0x32>
 80057ee:	682b      	ldr	r3, [r5, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0c6      	beq.n	8005782 <__sflush_r+0x32>
 80057f4:	2b1d      	cmp	r3, #29
 80057f6:	d001      	beq.n	80057fc <__sflush_r+0xac>
 80057f8:	2b16      	cmp	r3, #22
 80057fa:	d11e      	bne.n	800583a <__sflush_r+0xea>
 80057fc:	602f      	str	r7, [r5, #0]
 80057fe:	2000      	movs	r0, #0
 8005800:	e022      	b.n	8005848 <__sflush_r+0xf8>
 8005802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005806:	b21b      	sxth	r3, r3
 8005808:	e01b      	b.n	8005842 <__sflush_r+0xf2>
 800580a:	690f      	ldr	r7, [r1, #16]
 800580c:	2f00      	cmp	r7, #0
 800580e:	d0f6      	beq.n	80057fe <__sflush_r+0xae>
 8005810:	0793      	lsls	r3, r2, #30
 8005812:	680e      	ldr	r6, [r1, #0]
 8005814:	bf08      	it	eq
 8005816:	694b      	ldreq	r3, [r1, #20]
 8005818:	600f      	str	r7, [r1, #0]
 800581a:	bf18      	it	ne
 800581c:	2300      	movne	r3, #0
 800581e:	eba6 0807 	sub.w	r8, r6, r7
 8005822:	608b      	str	r3, [r1, #8]
 8005824:	f1b8 0f00 	cmp.w	r8, #0
 8005828:	dde9      	ble.n	80057fe <__sflush_r+0xae>
 800582a:	6a21      	ldr	r1, [r4, #32]
 800582c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800582e:	4643      	mov	r3, r8
 8005830:	463a      	mov	r2, r7
 8005832:	4628      	mov	r0, r5
 8005834:	47b0      	blx	r6
 8005836:	2800      	cmp	r0, #0
 8005838:	dc08      	bgt.n	800584c <__sflush_r+0xfc>
 800583a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	4407      	add	r7, r0
 800584e:	eba8 0800 	sub.w	r8, r8, r0
 8005852:	e7e7      	b.n	8005824 <__sflush_r+0xd4>
 8005854:	dfbffffe 	.word	0xdfbffffe

08005858 <_fflush_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	690b      	ldr	r3, [r1, #16]
 800585c:	4605      	mov	r5, r0
 800585e:	460c      	mov	r4, r1
 8005860:	b913      	cbnz	r3, 8005868 <_fflush_r+0x10>
 8005862:	2500      	movs	r5, #0
 8005864:	4628      	mov	r0, r5
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	b118      	cbz	r0, 8005872 <_fflush_r+0x1a>
 800586a:	6a03      	ldr	r3, [r0, #32]
 800586c:	b90b      	cbnz	r3, 8005872 <_fflush_r+0x1a>
 800586e:	f7ff fb81 	bl	8004f74 <__sinit>
 8005872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f3      	beq.n	8005862 <_fflush_r+0xa>
 800587a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800587c:	07d0      	lsls	r0, r2, #31
 800587e:	d404      	bmi.n	800588a <_fflush_r+0x32>
 8005880:	0599      	lsls	r1, r3, #22
 8005882:	d402      	bmi.n	800588a <_fflush_r+0x32>
 8005884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005886:	f7ff fbf0 	bl	800506a <__retarget_lock_acquire_recursive>
 800588a:	4628      	mov	r0, r5
 800588c:	4621      	mov	r1, r4
 800588e:	f7ff ff5f 	bl	8005750 <__sflush_r>
 8005892:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005894:	07da      	lsls	r2, r3, #31
 8005896:	4605      	mov	r5, r0
 8005898:	d4e4      	bmi.n	8005864 <_fflush_r+0xc>
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	059b      	lsls	r3, r3, #22
 800589e:	d4e1      	bmi.n	8005864 <_fflush_r+0xc>
 80058a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058a2:	f7ff fbe3 	bl	800506c <__retarget_lock_release_recursive>
 80058a6:	e7dd      	b.n	8005864 <_fflush_r+0xc>

080058a8 <__malloc_lock>:
 80058a8:	4801      	ldr	r0, [pc, #4]	@ (80058b0 <__malloc_lock+0x8>)
 80058aa:	f7ff bbde 	b.w	800506a <__retarget_lock_acquire_recursive>
 80058ae:	bf00      	nop
 80058b0:	20000388 	.word	0x20000388

080058b4 <__malloc_unlock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	@ (80058bc <__malloc_unlock+0x8>)
 80058b6:	f7ff bbd9 	b.w	800506c <__retarget_lock_release_recursive>
 80058ba:	bf00      	nop
 80058bc:	20000388 	.word	0x20000388

080058c0 <__sread>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	460c      	mov	r4, r1
 80058c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c8:	f000 f978 	bl	8005bbc <_read_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	bfab      	itete	ge
 80058d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058d2:	89a3      	ldrhlt	r3, [r4, #12]
 80058d4:	181b      	addge	r3, r3, r0
 80058d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058da:	bfac      	ite	ge
 80058dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058de:	81a3      	strhlt	r3, [r4, #12]
 80058e0:	bd10      	pop	{r4, pc}

080058e2 <__swrite>:
 80058e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e6:	461f      	mov	r7, r3
 80058e8:	898b      	ldrh	r3, [r1, #12]
 80058ea:	05db      	lsls	r3, r3, #23
 80058ec:	4605      	mov	r5, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	4616      	mov	r6, r2
 80058f2:	d505      	bpl.n	8005900 <__swrite+0x1e>
 80058f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f8:	2302      	movs	r3, #2
 80058fa:	2200      	movs	r2, #0
 80058fc:	f000 f94c 	bl	8005b98 <_lseek_r>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	4632      	mov	r2, r6
 800590e:	463b      	mov	r3, r7
 8005910:	4628      	mov	r0, r5
 8005912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005916:	f000 b973 	b.w	8005c00 <_write_r>

0800591a <__sseek>:
 800591a:	b510      	push	{r4, lr}
 800591c:	460c      	mov	r4, r1
 800591e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005922:	f000 f939 	bl	8005b98 <_lseek_r>
 8005926:	1c43      	adds	r3, r0, #1
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	bf15      	itete	ne
 800592c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800592e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005936:	81a3      	strheq	r3, [r4, #12]
 8005938:	bf18      	it	ne
 800593a:	81a3      	strhne	r3, [r4, #12]
 800593c:	bd10      	pop	{r4, pc}

0800593e <__sclose>:
 800593e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005942:	f000 b8f7 	b.w	8005b34 <_close_r>

08005946 <__swbuf_r>:
 8005946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005948:	460e      	mov	r6, r1
 800594a:	4614      	mov	r4, r2
 800594c:	4605      	mov	r5, r0
 800594e:	b118      	cbz	r0, 8005958 <__swbuf_r+0x12>
 8005950:	6a03      	ldr	r3, [r0, #32]
 8005952:	b90b      	cbnz	r3, 8005958 <__swbuf_r+0x12>
 8005954:	f7ff fb0e 	bl	8004f74 <__sinit>
 8005958:	69a3      	ldr	r3, [r4, #24]
 800595a:	60a3      	str	r3, [r4, #8]
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	071a      	lsls	r2, r3, #28
 8005960:	d501      	bpl.n	8005966 <__swbuf_r+0x20>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	b943      	cbnz	r3, 8005978 <__swbuf_r+0x32>
 8005966:	4621      	mov	r1, r4
 8005968:	4628      	mov	r0, r5
 800596a:	f000 f82b 	bl	80059c4 <__swsetup_r>
 800596e:	b118      	cbz	r0, 8005978 <__swbuf_r+0x32>
 8005970:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005974:	4638      	mov	r0, r7
 8005976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	6922      	ldr	r2, [r4, #16]
 800597c:	1a98      	subs	r0, r3, r2
 800597e:	6963      	ldr	r3, [r4, #20]
 8005980:	b2f6      	uxtb	r6, r6
 8005982:	4283      	cmp	r3, r0
 8005984:	4637      	mov	r7, r6
 8005986:	dc05      	bgt.n	8005994 <__swbuf_r+0x4e>
 8005988:	4621      	mov	r1, r4
 800598a:	4628      	mov	r0, r5
 800598c:	f7ff ff64 	bl	8005858 <_fflush_r>
 8005990:	2800      	cmp	r0, #0
 8005992:	d1ed      	bne.n	8005970 <__swbuf_r+0x2a>
 8005994:	68a3      	ldr	r3, [r4, #8]
 8005996:	3b01      	subs	r3, #1
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	701e      	strb	r6, [r3, #0]
 80059a2:	6962      	ldr	r2, [r4, #20]
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d004      	beq.n	80059b4 <__swbuf_r+0x6e>
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	07db      	lsls	r3, r3, #31
 80059ae:	d5e1      	bpl.n	8005974 <__swbuf_r+0x2e>
 80059b0:	2e0a      	cmp	r6, #10
 80059b2:	d1df      	bne.n	8005974 <__swbuf_r+0x2e>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f7ff ff4e 	bl	8005858 <_fflush_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d0d9      	beq.n	8005974 <__swbuf_r+0x2e>
 80059c0:	e7d6      	b.n	8005970 <__swbuf_r+0x2a>
	...

080059c4 <__swsetup_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4b29      	ldr	r3, [pc, #164]	@ (8005a6c <__swsetup_r+0xa8>)
 80059c8:	4605      	mov	r5, r0
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	460c      	mov	r4, r1
 80059ce:	b118      	cbz	r0, 80059d8 <__swsetup_r+0x14>
 80059d0:	6a03      	ldr	r3, [r0, #32]
 80059d2:	b90b      	cbnz	r3, 80059d8 <__swsetup_r+0x14>
 80059d4:	f7ff face 	bl	8004f74 <__sinit>
 80059d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059dc:	0719      	lsls	r1, r3, #28
 80059de:	d422      	bmi.n	8005a26 <__swsetup_r+0x62>
 80059e0:	06da      	lsls	r2, r3, #27
 80059e2:	d407      	bmi.n	80059f4 <__swsetup_r+0x30>
 80059e4:	2209      	movs	r2, #9
 80059e6:	602a      	str	r2, [r5, #0]
 80059e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ec:	81a3      	strh	r3, [r4, #12]
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059f2:	e033      	b.n	8005a5c <__swsetup_r+0x98>
 80059f4:	0758      	lsls	r0, r3, #29
 80059f6:	d512      	bpl.n	8005a1e <__swsetup_r+0x5a>
 80059f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059fa:	b141      	cbz	r1, 8005a0e <__swsetup_r+0x4a>
 80059fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d002      	beq.n	8005a0a <__swsetup_r+0x46>
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 f90d 	bl	8005c24 <_free_r>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	2300      	movs	r3, #0
 8005a18:	6063      	str	r3, [r4, #4]
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f043 0308 	orr.w	r3, r3, #8
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	b94b      	cbnz	r3, 8005a3e <__swsetup_r+0x7a>
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a34:	d003      	beq.n	8005a3e <__swsetup_r+0x7a>
 8005a36:	4621      	mov	r1, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f000 f83f 	bl	8005abc <__smakebuf_r>
 8005a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a42:	f013 0201 	ands.w	r2, r3, #1
 8005a46:	d00a      	beq.n	8005a5e <__swsetup_r+0x9a>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	60a2      	str	r2, [r4, #8]
 8005a4c:	6962      	ldr	r2, [r4, #20]
 8005a4e:	4252      	negs	r2, r2
 8005a50:	61a2      	str	r2, [r4, #24]
 8005a52:	6922      	ldr	r2, [r4, #16]
 8005a54:	b942      	cbnz	r2, 8005a68 <__swsetup_r+0xa4>
 8005a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a5a:	d1c5      	bne.n	80059e8 <__swsetup_r+0x24>
 8005a5c:	bd38      	pop	{r3, r4, r5, pc}
 8005a5e:	0799      	lsls	r1, r3, #30
 8005a60:	bf58      	it	pl
 8005a62:	6962      	ldrpl	r2, [r4, #20]
 8005a64:	60a2      	str	r2, [r4, #8]
 8005a66:	e7f4      	b.n	8005a52 <__swsetup_r+0x8e>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e7f7      	b.n	8005a5c <__swsetup_r+0x98>
 8005a6c:	20000018 	.word	0x20000018

08005a70 <__swhatbuf_r>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	460c      	mov	r4, r1
 8005a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	b096      	sub	sp, #88	@ 0x58
 8005a7c:	4615      	mov	r5, r2
 8005a7e:	461e      	mov	r6, r3
 8005a80:	da0d      	bge.n	8005a9e <__swhatbuf_r+0x2e>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a88:	f04f 0100 	mov.w	r1, #0
 8005a8c:	bf14      	ite	ne
 8005a8e:	2340      	movne	r3, #64	@ 0x40
 8005a90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a94:	2000      	movs	r0, #0
 8005a96:	6031      	str	r1, [r6, #0]
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	b016      	add	sp, #88	@ 0x58
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	466a      	mov	r2, sp
 8005aa0:	f000 f858 	bl	8005b54 <_fstat_r>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	dbec      	blt.n	8005a82 <__swhatbuf_r+0x12>
 8005aa8:	9901      	ldr	r1, [sp, #4]
 8005aaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005aae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ab2:	4259      	negs	r1, r3
 8005ab4:	4159      	adcs	r1, r3
 8005ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aba:	e7eb      	b.n	8005a94 <__swhatbuf_r+0x24>

08005abc <__smakebuf_r>:
 8005abc:	898b      	ldrh	r3, [r1, #12]
 8005abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac0:	079d      	lsls	r5, r3, #30
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	d507      	bpl.n	8005ad8 <__smakebuf_r+0x1c>
 8005ac8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	6163      	str	r3, [r4, #20]
 8005ad4:	b003      	add	sp, #12
 8005ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ad8:	ab01      	add	r3, sp, #4
 8005ada:	466a      	mov	r2, sp
 8005adc:	f7ff ffc8 	bl	8005a70 <__swhatbuf_r>
 8005ae0:	9f00      	ldr	r7, [sp, #0]
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f7ff fc24 	bl	8005334 <_malloc_r>
 8005aec:	b948      	cbnz	r0, 8005b02 <__smakebuf_r+0x46>
 8005aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af2:	059a      	lsls	r2, r3, #22
 8005af4:	d4ee      	bmi.n	8005ad4 <__smakebuf_r+0x18>
 8005af6:	f023 0303 	bic.w	r3, r3, #3
 8005afa:	f043 0302 	orr.w	r3, r3, #2
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	e7e2      	b.n	8005ac8 <__smakebuf_r+0xc>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	6020      	str	r0, [r4, #0]
 8005b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	9b01      	ldr	r3, [sp, #4]
 8005b0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b12:	b15b      	cbz	r3, 8005b2c <__smakebuf_r+0x70>
 8005b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f000 f82d 	bl	8005b78 <_isatty_r>
 8005b1e:	b128      	cbz	r0, 8005b2c <__smakebuf_r+0x70>
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	81a3      	strh	r3, [r4, #12]
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	431d      	orrs	r5, r3
 8005b30:	81a5      	strh	r5, [r4, #12]
 8005b32:	e7cf      	b.n	8005ad4 <__smakebuf_r+0x18>

08005b34 <_close_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d06      	ldr	r5, [pc, #24]	@ (8005b50 <_close_r+0x1c>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fa ff5f 	bl	8000a02 <_close>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_close_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_close_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	20000394 	.word	0x20000394

08005b54 <_fstat_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d07      	ldr	r5, [pc, #28]	@ (8005b74 <_fstat_r+0x20>)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	602b      	str	r3, [r5, #0]
 8005b62:	f7fa ff5a 	bl	8000a1a <_fstat>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	d102      	bne.n	8005b70 <_fstat_r+0x1c>
 8005b6a:	682b      	ldr	r3, [r5, #0]
 8005b6c:	b103      	cbz	r3, 8005b70 <_fstat_r+0x1c>
 8005b6e:	6023      	str	r3, [r4, #0]
 8005b70:	bd38      	pop	{r3, r4, r5, pc}
 8005b72:	bf00      	nop
 8005b74:	20000394 	.word	0x20000394

08005b78 <_isatty_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4d06      	ldr	r5, [pc, #24]	@ (8005b94 <_isatty_r+0x1c>)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	4604      	mov	r4, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	602b      	str	r3, [r5, #0]
 8005b84:	f7fa ff59 	bl	8000a3a <_isatty>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_isatty_r+0x1a>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_isatty_r+0x1a>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	20000394 	.word	0x20000394

08005b98 <_lseek_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d07      	ldr	r5, [pc, #28]	@ (8005bb8 <_lseek_r+0x20>)
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	602a      	str	r2, [r5, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f7fa ff52 	bl	8000a50 <_lseek>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_lseek_r+0x1e>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_lseek_r+0x1e>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20000394 	.word	0x20000394

08005bbc <_read_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4d07      	ldr	r5, [pc, #28]	@ (8005bdc <_read_r+0x20>)
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	4608      	mov	r0, r1
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	602a      	str	r2, [r5, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f7fa fefc 	bl	80009c8 <_read>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d102      	bne.n	8005bda <_read_r+0x1e>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	b103      	cbz	r3, 8005bda <_read_r+0x1e>
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	20000394 	.word	0x20000394

08005be0 <_sbrk_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4d06      	ldr	r5, [pc, #24]	@ (8005bfc <_sbrk_r+0x1c>)
 8005be4:	2300      	movs	r3, #0
 8005be6:	4604      	mov	r4, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	f7fa ff3e 	bl	8000a6c <_sbrk>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_sbrk_r+0x1a>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_sbrk_r+0x1a>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	20000394 	.word	0x20000394

08005c00 <_write_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4d07      	ldr	r5, [pc, #28]	@ (8005c20 <_write_r+0x20>)
 8005c04:	4604      	mov	r4, r0
 8005c06:	4608      	mov	r0, r1
 8005c08:	4611      	mov	r1, r2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	602a      	str	r2, [r5, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f7fa fd70 	bl	80006f4 <_write>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_write_r+0x1e>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_write_r+0x1e>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	20000394 	.word	0x20000394

08005c24 <_free_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4605      	mov	r5, r0
 8005c28:	2900      	cmp	r1, #0
 8005c2a:	d041      	beq.n	8005cb0 <_free_r+0x8c>
 8005c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c30:	1f0c      	subs	r4, r1, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bfb8      	it	lt
 8005c36:	18e4      	addlt	r4, r4, r3
 8005c38:	f7ff fe36 	bl	80058a8 <__malloc_lock>
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb4 <_free_r+0x90>)
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	b933      	cbnz	r3, 8005c50 <_free_r+0x2c>
 8005c42:	6063      	str	r3, [r4, #4]
 8005c44:	6014      	str	r4, [r2, #0]
 8005c46:	4628      	mov	r0, r5
 8005c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c4c:	f7ff be32 	b.w	80058b4 <__malloc_unlock>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d908      	bls.n	8005c66 <_free_r+0x42>
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	1821      	adds	r1, r4, r0
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf01      	itttt	eq
 8005c5c:	6819      	ldreq	r1, [r3, #0]
 8005c5e:	685b      	ldreq	r3, [r3, #4]
 8005c60:	1809      	addeq	r1, r1, r0
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	e7ed      	b.n	8005c42 <_free_r+0x1e>
 8005c66:	461a      	mov	r2, r3
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b10b      	cbz	r3, 8005c70 <_free_r+0x4c>
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d9fa      	bls.n	8005c66 <_free_r+0x42>
 8005c70:	6811      	ldr	r1, [r2, #0]
 8005c72:	1850      	adds	r0, r2, r1
 8005c74:	42a0      	cmp	r0, r4
 8005c76:	d10b      	bne.n	8005c90 <_free_r+0x6c>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	4401      	add	r1, r0
 8005c7c:	1850      	adds	r0, r2, r1
 8005c7e:	4283      	cmp	r3, r0
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	d1e0      	bne.n	8005c46 <_free_r+0x22>
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	6053      	str	r3, [r2, #4]
 8005c8a:	4408      	add	r0, r1
 8005c8c:	6010      	str	r0, [r2, #0]
 8005c8e:	e7da      	b.n	8005c46 <_free_r+0x22>
 8005c90:	d902      	bls.n	8005c98 <_free_r+0x74>
 8005c92:	230c      	movs	r3, #12
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	e7d6      	b.n	8005c46 <_free_r+0x22>
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	1821      	adds	r1, r4, r0
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf04      	itt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	6063      	str	r3, [r4, #4]
 8005ca6:	bf04      	itt	eq
 8005ca8:	1809      	addeq	r1, r1, r0
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	6054      	str	r4, [r2, #4]
 8005cae:	e7ca      	b.n	8005c46 <_free_r+0x22>
 8005cb0:	bd38      	pop	{r3, r4, r5, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000390 	.word	0x20000390

08005cb8 <_init>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	bf00      	nop
 8005cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cbe:	bc08      	pop	{r3}
 8005cc0:	469e      	mov	lr, r3
 8005cc2:	4770      	bx	lr

08005cc4 <_fini>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr
