
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005ce0  08005ce0  00006ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e0c  08005e0c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005e0c  08005e0c  00006e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e14  08005e14  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e14  08005e14  00006e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e18  08005e18  00006e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005e1c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000068  08005e84  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08005e84  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c5f  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fd  00000000  00000000  00017cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c15  00000000  00000000  0001b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d2d  00000000  00000000  0001bd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012530  00000000  00000000  00043aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4165  00000000  00000000  00055ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a15f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  0014a1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cc8 	.word	0x08005cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005cc8 	.word	0x08005cc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b3c      	ldr	r3, [pc, #240]	@ (8000668 <MX_GPIO_Init+0x108>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a3b      	ldr	r2, [pc, #236]	@ (8000668 <MX_GPIO_Init+0x108>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_GPIO_Init+0x108>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_GPIO_Init+0x108>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a35      	ldr	r2, [pc, #212]	@ (8000668 <MX_GPIO_Init+0x108>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_GPIO_Init+0x108>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b2a      	ldr	r3, [pc, #168]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a29      	ldr	r2, [pc, #164]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_GPIO_Init+0x108>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f001 f915 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7158 	mov.w	r1, #864	@ 0x360
 80005e8:	4820      	ldr	r0, [pc, #128]	@ (800066c <MX_GPIO_Init+0x10c>)
 80005ea:	f001 f90f 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4819      	ldr	r0, [pc, #100]	@ (800066c <MX_GPIO_Init+0x10c>)
 8000606:	f000 ff57 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060a:	2320      	movs	r3, #32
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000624:	f000 ff48 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000628:	f44f 7358 	mov.w	r3, #864	@ 0x360
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	480a      	ldr	r0, [pc, #40]	@ (800066c <MX_GPIO_Init+0x10c>)
 8000642:	f000 ff39 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000646:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_GPIO_Init+0x110>)
 800065c:	f000 ff2c 	bl	80014b8 <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	@ 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	48000800 	.word	0x48000800
 8000670:	48000400 	.word	0x48000400

08000674 <SetMotorDirection>:

void UART_Transmit(const char *data) {
    HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}

void SetMotorDirection(int direction_L, int direction_R) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]

    if (direction_L == 1) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10b      	bne.n	800069c <SetMotorDirection+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800068a:	4819      	ldr	r0, [pc, #100]	@ (80006f0 <SetMotorDirection+0x7c>)
 800068c:	f001 f8be 	bl	800180c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2120      	movs	r1, #32
 8000694:	4816      	ldr	r0, [pc, #88]	@ (80006f0 <SetMotorDirection+0x7c>)
 8000696:	f001 f8b9 	bl	800180c <HAL_GPIO_WritePin>
 800069a:	e00a      	b.n	80006b2 <SetMotorDirection+0x3e>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006a2:	4813      	ldr	r0, [pc, #76]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006a4:	f001 f8b2 	bl	800180c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2120      	movs	r1, #32
 80006ac:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006ae:	f001 f8ad 	bl	800180c <HAL_GPIO_WritePin>
    }

    if (direction_R == 1) {
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d10b      	bne.n	80006d0 <SetMotorDirection+0x5c>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006be:	f001 f8a5 	bl	800180c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c8:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006ca:	f001 f89f 	bl	800180c <HAL_GPIO_WritePin>
          } else {
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
          }

}
 80006ce:	e00a      	b.n	80006e6 <SetMotorDirection+0x72>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2140      	movs	r1, #64	@ 0x40
 80006d4:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006d6:	f001 f899 	bl	800180c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <SetMotorDirection+0x7c>)
 80006e2:	f001 f893 	bl	800180c <HAL_GPIO_WritePin>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	48000800 	.word	0x48000800

080006f4 <_write>:
    } else {
        UART_Transmit("Sensor 2: No object detected\r\n");
    }
}

int _write(int file, char* ptr, int len){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	b29a      	uxth	r2, r3
 8000704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	4804      	ldr	r0, [pc, #16]	@ (800071c <_write+0x28>)
 800070c:	f003 fe56 	bl	80043bc <HAL_UART_Transmit>
	return len;
 8000710:	687b      	ldr	r3, [r7, #4]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001c0 	.word	0x200001c0

08000720 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    if(htim == &htim6){
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a0e      	ldr	r2, [pc, #56]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d113      	bne.n	8000758 <HAL_TIM_PeriodElapsedCallback+0x38>

    	speed_L = ENCODER_MESURMENT_FREQUENCY * __HAL_TIM_GET_COUNTER(&htim2);
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4a0c      	ldr	r2, [pc, #48]	@ (800076c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800073a:	6013      	str	r3, [r2, #0]
    	htim2.Instance->CNT = 0;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24

    	speed_R = ENCODER_MESURMENT_FREQUENCY * __HAL_TIM_GET_COUNTER(&htim3);
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4a09      	ldr	r2, [pc, #36]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800074e:	6013      	str	r3, [r2, #0]
    	htim3.Instance->CNT = 0;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	@ 0x24

    }
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000174 	.word	0x20000174
 8000768:	200000dc 	.word	0x200000dc
 800076c:	20000084 	.word	0x20000084
 8000770:	20000128 	.word	0x20000128
 8000774:	20000088 	.word	0x20000088

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t count = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
	uint32_t count1 = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 fce5 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f86f 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f7ff fee7 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000792:	f000 fc29 	bl	8000fe8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000796:	f000 f9b9 	bl	8000b0c <MX_TIM1_Init>
  MX_TIM2_Init();
 800079a:	f000 fa53 	bl	8000c44 <MX_TIM2_Init>
  MX_TIM3_Init();
 800079e:	f000 faa5 	bl	8000cec <MX_TIM3_Init>
  MX_TIM6_Init();
 80007a2:	f000 faf9 	bl	8000d98 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007a6:	2100      	movs	r1, #0
 80007a8:	4827      	ldr	r0, [pc, #156]	@ (8000848 <main+0xd0>)
 80007aa:	f002 fc87 	bl	80030bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007ae:	2104      	movs	r1, #4
 80007b0:	4825      	ldr	r0, [pc, #148]	@ (8000848 <main+0xd0>)
 80007b2:	f002 fc83 	bl	80030bc <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 124);
 80007b6:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <main+0xd0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	227c      	movs	r2, #124	@ 0x7c
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <main+0xd0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2264      	movs	r2, #100	@ 0x64
 80007c4:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80007c6:	213c      	movs	r1, #60	@ 0x3c
 80007c8:	4820      	ldr	r0, [pc, #128]	@ (800084c <main+0xd4>)
 80007ca:	f002 fe23 	bl	8003414 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80007ce:	213c      	movs	r1, #60	@ 0x3c
 80007d0:	481f      	ldr	r0, [pc, #124]	@ (8000850 <main+0xd8>)
 80007d2:	f002 fe1f 	bl	8003414 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 80007d6:	481f      	ldr	r0, [pc, #124]	@ (8000854 <main+0xdc>)
 80007d8:	f002 fba8 	bl	8002f2c <HAL_TIM_Base_Start_IT>


  SetMotorDirection(0,0);
 80007dc:	2100      	movs	r1, #0
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ff48 	bl	8000674 <SetMotorDirection>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count = __HAL_TIM_GET_COUNTER(&htim2);
 80007e4:	4b19      	ldr	r3, [pc, #100]	@ (800084c <main+0xd4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ea:	607b      	str	r3, [r7, #4]
	  count1 = __HAL_TIM_GET_COUNTER(&htim3);
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <main+0xd8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f2:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 124);
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <main+0xd0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	227c      	movs	r2, #124	@ 0x7c
 80007fa:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <main+0xd0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2264      	movs	r2, #100	@ 0x64
 8000802:	639a      	str	r2, [r3, #56]	@ 0x38

		 printf("%ld\n\r", speed_L);
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <main+0xe0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	4814      	ldr	r0, [pc, #80]	@ (800085c <main+0xe4>)
 800080c:	f004 fbf0 	bl	8004ff0 <iprintf>
		 printf("%ld\n\r", speed_R);
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <main+0xe8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	4811      	ldr	r0, [pc, #68]	@ (800085c <main+0xe4>)
 8000818:	f004 fbea 	bl	8004ff0 <iprintf>


		 printf("prawy enkoder   %ld\n\r", count);
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	4811      	ldr	r0, [pc, #68]	@ (8000864 <main+0xec>)
 8000820:	f004 fbe6 	bl	8004ff0 <iprintf>
		 printf("lewy enkoder   %ld\n\r", count1);
 8000824:	6839      	ldr	r1, [r7, #0]
 8000826:	4810      	ldr	r0, [pc, #64]	@ (8000868 <main+0xf0>)
 8000828:	f004 fbe2 	bl	8004ff0 <iprintf>


		 HAL_Delay(500);
 800082c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000830:	f000 fd0c 	bl	800124c <HAL_Delay>

		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000834:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <main+0xd0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2200      	movs	r2, #0
 800083a:	635a      	str	r2, [r3, #52]	@ 0x34
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800083c:	4b02      	ldr	r3, [pc, #8]	@ (8000848 <main+0xd0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2200      	movs	r2, #0
 8000842:	639a      	str	r2, [r3, #56]	@ 0x38
	  count = __HAL_TIM_GET_COUNTER(&htim2);
 8000844:	bf00      	nop
 8000846:	e7cd      	b.n	80007e4 <main+0x6c>
 8000848:	20000090 	.word	0x20000090
 800084c:	200000dc 	.word	0x200000dc
 8000850:	20000128 	.word	0x20000128
 8000854:	20000174 	.word	0x20000174
 8000858:	20000084 	.word	0x20000084
 800085c:	08005d58 	.word	0x08005d58
 8000860:	20000088 	.word	0x20000088
 8000864:	08005d60 	.word	0x08005d60
 8000868:	08005d78 	.word	0x08005d78

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b096      	sub	sp, #88	@ 0x58
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2244      	movs	r2, #68	@ 0x44
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f004 fbca 	bl	8005014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000892:	f000 ffe1 	bl	8001858 <HAL_PWREx_ControlVoltageScaling>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800089c:	f000 f837 	bl	800090e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008aa:	2310      	movs	r3, #16
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b2:	2302      	movs	r3, #2
 80008b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ba:	230a      	movs	r3, #10
 80008bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008be:	2307      	movs	r3, #7
 80008c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 f818 	bl	8001904 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008da:	f000 f818 	bl	800090e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	230f      	movs	r3, #15
 80008e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	2104      	movs	r1, #4
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fbe0 	bl	80020bc <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000902:	f000 f804 	bl	800090e <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3758      	adds	r7, #88	@ 0x58
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000912:	b672      	cpsid	i
}
 8000914:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000916:	bf00      	nop
 8000918:	e7fd      	b.n	8000916 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6613      	str	r3, [r2, #96]	@ 0x60
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <HAL_MspInit+0x44>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000944:	6593      	str	r3, [r2, #88]	@ 0x58
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <NMI_Handler+0x4>

0800096c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <MemManage_Handler+0x4>

0800097c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <UsageFault_Handler+0x4>

0800098c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ba:	f000 fc27 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <TIM6_DAC_IRQHandler+0x10>)
 80009ca:	f002 fdb1 	bl	8003530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000174 	.word	0x20000174

080009d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
  }

  return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_isatty>:

int _isatty(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f004 faba 	bl	8005024 <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20018000 	.word	0x20018000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	2000008c 	.word	0x2000008c
 8000ae4:	20000398 	.word	0x20000398

08000ae8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	@ 0x58
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	222c      	movs	r2, #44	@ 0x2c
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 fa6b 	bl	8005014 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000b40:	4a3f      	ldr	r2, [pc, #252]	@ (8000c40 <MX_TIM1_Init+0x134>)
 8000b42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000b44:	4b3d      	ldr	r3, [pc, #244]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000b46:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000b52:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000b54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b38      	ldr	r3, [pc, #224]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b60:	4b36      	ldr	r3, [pc, #216]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b35      	ldr	r3, [pc, #212]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b6c:	4833      	ldr	r0, [pc, #204]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000b6e:	f002 fa4d 	bl	800300c <HAL_TIM_PWM_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b78:	f7ff fec9 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	482b      	ldr	r0, [pc, #172]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000b90:	f003 faa2 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b9a:	f7ff feb8 	bl	800090e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9e:	2360      	movs	r3, #96	@ 0x60
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000baa:	2300      	movs	r3, #0
 8000bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481e      	ldr	r0, [pc, #120]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000bc4:	f002 fdb6 	bl	8003734 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000bce:	f7ff fe9e 	bl	800090e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4818      	ldr	r0, [pc, #96]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000bdc:	f002 fdaa 	bl	8003734 <HAL_TIM_PWM_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000be6:	f7ff fe92 	bl	800090e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000c20:	f003 fae2 	bl	80041e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000c2a:	f7ff fe70 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c2e:	4803      	ldr	r0, [pc, #12]	@ (8000c3c <MX_TIM1_Init+0x130>)
 8000c30:	f000 f9a2 	bl	8000f78 <HAL_TIM_MspPostInit>

}
 8000c34:	bf00      	nop
 8000c36:	3758      	adds	r7, #88	@ 0x58
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000090 	.word	0x20000090
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	@ 0x30
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2224      	movs	r2, #36	@ 0x24
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 f9de 	bl	8005014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <MX_TIM2_Init+0xa4>)
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_TIM2_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <MX_TIM2_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <MX_TIM2_Init+0xa4>)
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_TIM2_Init+0xa4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_TIM2_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c92:	2301      	movs	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <MX_TIM2_Init+0xa4>)
 8000cb6:	f002 fb07 	bl	80032c8 <HAL_TIM_Encoder_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cc0:	f7ff fe25 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_TIM2_Init+0xa4>)
 8000cd2:	f003 fa01 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000cdc:	f7ff fe17 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3730      	adds	r7, #48	@ 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000dc 	.word	0x200000dc

08000cec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	@ 0x30
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2224      	movs	r2, #36	@ 0x24
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 f98a 	bl	8005014 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_TIM3_Init+0xa4>)
 8000d0c:	4a21      	ldr	r2, [pc, #132]	@ (8000d94 <MX_TIM3_Init+0xa8>)
 8000d0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_TIM3_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MX_TIM3_Init+0xa4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_TIM3_Init+0xa4>)
 8000d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_TIM3_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_TIM3_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <MX_TIM3_Init+0xa4>)
 8000d5c:	f002 fab4 	bl	80032c8 <HAL_TIM_Encoder_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d66:	f7ff fdd2 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <MX_TIM3_Init+0xa4>)
 8000d78:	f003 f9ae 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d82:	f7ff fdc4 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3730      	adds	r7, #48	@ 0x30
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000128 	.word	0x20000128
 8000d94:	40000400 	.word	0x40000400

08000d98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_TIM6_Init+0x68>)
 8000daa:	4a16      	ldr	r2, [pc, #88]	@ (8000e04 <MX_TIM6_Init+0x6c>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_TIM6_Init+0x68>)
 8000db0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000db4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_TIM6_Init+0x68>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <MX_TIM6_Init+0x68>)
 8000dbe:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000dc2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_TIM6_Init+0x68>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dca:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <MX_TIM6_Init+0x68>)
 8000dcc:	f002 f856 	bl	8002e7c <HAL_TIM_Base_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000dd6:	f7ff fd9a 	bl	800090e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <MX_TIM6_Init+0x68>)
 8000de8:	f003 f976 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000df2:	f7ff fd8c 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000174 	.word	0x20000174
 8000e04:	40001000 	.word	0x40001000

08000e08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_TIM_PWM_MspInit+0x38>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d10b      	bne.n	8000e32 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1e:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40012c00 	.word	0x40012c00
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	@ 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e68:	d129      	bne.n	8000ebe <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e76:	4b2b      	ldr	r3, [pc, #172]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b28      	ldr	r3, [pc, #160]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	4a27      	ldr	r2, [pc, #156]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8e:	4b25      	ldr	r3, [pc, #148]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb8:	f000 fafe 	bl	80014b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ebc:	e02d      	b.n	8000f1a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a19      	ldr	r2, [pc, #100]	@ (8000f28 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d128      	bne.n	8000f1a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec8:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ecc:	4a15      	ldr	r2, [pc, #84]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eec:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef8:	23c0      	movs	r3, #192	@ 0xc0
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f16:	f000 facf 	bl	80014b8 <HAL_GPIO_Init>
}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	@ 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40000400 	.word	0x40000400

08000f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d113      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <HAL_TIM_Base_MspInit+0x48>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f42:	4a0c      	ldr	r2, [pc, #48]	@ (8000f74 <HAL_TIM_Base_MspInit+0x48>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_TIM_Base_MspInit+0x48>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2036      	movs	r0, #54	@ 0x36
 8000f5c:	f000 fa75 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f60:	2036      	movs	r0, #54	@ 0x36
 8000f62:	f000 fa8e 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40001000 	.word	0x40001000
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <HAL_TIM_MspPostInit+0x68>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d11d      	bne.n	8000fd6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_TIM_MspPostInit+0x6c>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9e:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_TIM_MspPostInit+0x6c>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd2:	f000 fa71 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40012c00 	.word	0x40012c00
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fec:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8000fee:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <MX_USART2_UART_Init+0x5c>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 800102c:	f003 f978 	bl	8004320 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001036:	f7ff fc6a 	bl	800090e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001c0 	.word	0x200001c0
 8001044:	40004400 	.word	0x40004400

08001048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0ac      	sub	sp, #176	@ 0xb0
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2288      	movs	r2, #136	@ 0x88
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f003 ffd3 	bl	8005014 <memset>
  if(uartHandle->Instance==USART2)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a21      	ldr	r2, [pc, #132]	@ (80010f8 <HAL_UART_MspInit+0xb0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d13b      	bne.n	80010f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001078:	2302      	movs	r3, #2
 800107a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800107c:	2300      	movs	r3, #0
 800107e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fa3d 	bl	8002504 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001090:	f7ff fc3d 	bl	800090e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_UART_MspInit+0xb4>)
 8001096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001098:	4a18      	ldr	r2, [pc, #96]	@ (80010fc <HAL_UART_MspInit+0xb4>)
 800109a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109e:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_UART_MspInit+0xb4>)
 80010a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_UART_MspInit+0xb4>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b0:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <HAL_UART_MspInit+0xb4>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_UART_MspInit+0xb4>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010c4:	230c      	movs	r3, #12
 80010c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010dc:	2307      	movs	r3, #7
 80010de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ec:	f000 f9e4 	bl	80014b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	37b0      	adds	r7, #176	@ 0xb0
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40004400 	.word	0x40004400
 80010fc:	40021000 	.word	0x40021000

08001100 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001138 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff fcf0 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	@ (800113c <LoopForever+0x6>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	@ (8001140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <LoopForever+0xe>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	@ (800114c <LoopForever+0x16>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f003 ff7f 	bl	8005030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001132:	f7ff fb21 	bl	8000778 <main>

08001136 <LoopForever>:

LoopForever:
    b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001138:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001144:	08005e1c 	.word	0x08005e1c
  ldr r2, =_sbss
 8001148:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800114c:	20000398 	.word	0x20000398

08001150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>
	...

08001154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <HAL_Init+0x3c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <HAL_Init+0x3c>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001168:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
 800116c:	f000 f962 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001170:	2000      	movs	r0, #0
 8001172:	f000 f80f 	bl	8001194 <HAL_InitTick>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	e001      	b.n	8001186 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001182:	f7ff fbcb 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001186:	79fb      	ldrb	r3, [r7, #7]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <HAL_InitTick+0x6c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d023      	beq.n	80011f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <HAL_InitTick+0x70>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f96d 	bl	800149e <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d809      	bhi.n	80011e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011d8:	f000 f937 	bl	800144a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <HAL_InitTick+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e004      	b.n	80011f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e001      	b.n	80011f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	20000000 	.word	0x20000000
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	20000248 	.word	0x20000248

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	@ (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000248 	.word	0x20000248

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	@ (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	@ (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	@ (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff3e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff31 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e17f      	b.n	80017c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8171 	beq.w	80017c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d005      	beq.n	80014f8 <HAL_GPIO_Init+0x40>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d130      	bne.n	800155a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152e:	2201      	movs	r2, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 0201 	and.w	r2, r3, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b03      	cmp	r3, #3
 8001564:	d118      	bne.n	8001598 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800156c:	2201      	movs	r2, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f003 0201 	and.w	r2, r3, #1
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d017      	beq.n	80015d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d123      	bne.n	8001628 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	6939      	ldr	r1, [r7, #16]
 8001624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0203 	and.w	r2, r3, #3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80ac 	beq.w	80017c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b5f      	ldr	r3, [pc, #380]	@ (80017e8 <HAL_GPIO_Init+0x330>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166e:	4a5e      	ldr	r2, [pc, #376]	@ (80017e8 <HAL_GPIO_Init+0x330>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6613      	str	r3, [r2, #96]	@ 0x60
 8001676:	4b5c      	ldr	r3, [pc, #368]	@ (80017e8 <HAL_GPIO_Init+0x330>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001682:	4a5a      	ldr	r2, [pc, #360]	@ (80017ec <HAL_GPIO_Init+0x334>)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016ac:	d025      	beq.n	80016fa <HAL_GPIO_Init+0x242>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4f      	ldr	r2, [pc, #316]	@ (80017f0 <HAL_GPIO_Init+0x338>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01f      	beq.n	80016f6 <HAL_GPIO_Init+0x23e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4e      	ldr	r2, [pc, #312]	@ (80017f4 <HAL_GPIO_Init+0x33c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d019      	beq.n	80016f2 <HAL_GPIO_Init+0x23a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4d      	ldr	r2, [pc, #308]	@ (80017f8 <HAL_GPIO_Init+0x340>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0x236>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	@ (80017fc <HAL_GPIO_Init+0x344>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00d      	beq.n	80016ea <HAL_GPIO_Init+0x232>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001800 <HAL_GPIO_Init+0x348>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <HAL_GPIO_Init+0x22e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001804 <HAL_GPIO_Init+0x34c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x22a>
 80016de:	2306      	movs	r3, #6
 80016e0:	e00c      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016e2:	2307      	movs	r3, #7
 80016e4:	e00a      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x244>
 80016fa:	2300      	movs	r3, #0
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800170c:	4937      	ldr	r1, [pc, #220]	@ (80017ec <HAL_GPIO_Init+0x334>)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800171a:	4b3b      	ldr	r3, [pc, #236]	@ (8001808 <HAL_GPIO_Init+0x350>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800173e:	4a32      	ldr	r2, [pc, #200]	@ (8001808 <HAL_GPIO_Init+0x350>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001744:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <HAL_GPIO_Init+0x350>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001768:	4a27      	ldr	r2, [pc, #156]	@ (8001808 <HAL_GPIO_Init+0x350>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <HAL_GPIO_Init+0x350>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001792:	4a1d      	ldr	r2, [pc, #116]	@ (8001808 <HAL_GPIO_Init+0x350>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <HAL_GPIO_Init+0x350>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017bc:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <HAL_GPIO_Init+0x350>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f ae78 	bne.w	80014c8 <HAL_GPIO_Init+0x10>
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000
 80017f0:	48000400 	.word	0x48000400
 80017f4:	48000800 	.word	0x48000800
 80017f8:	48000c00 	.word	0x48000c00
 80017fc:	48001000 	.word	0x48001000
 8001800:	48001400 	.word	0x48001400
 8001804:	48001800 	.word	0x48001800
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001828:	e002      	b.n	8001830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <HAL_PWREx_GetVoltageRange+0x18>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40007000 	.word	0x40007000

08001858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001866:	d130      	bne.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001868:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001874:	d038      	beq.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001876:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800187e:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001880:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001886:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2232      	movs	r2, #50	@ 0x32
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	4a1b      	ldr	r2, [pc, #108]	@ (8001900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9b      	lsrs	r3, r3, #18
 8001898:	3301      	adds	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800189c:	e002      	b.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018b0:	d102      	bne.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f2      	bne.n	800189e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b8:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018c4:	d110      	bne.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e00f      	b.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018d6:	d007      	beq.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018e0:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83

08001904 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e3ca      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	4b97      	ldr	r3, [pc, #604]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001920:	4b94      	ldr	r3, [pc, #592]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80e4 	beq.w	8001b00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_RCC_OscConfig+0x4a>
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b0c      	cmp	r3, #12
 8001942:	f040 808b 	bne.w	8001a5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b01      	cmp	r3, #1
 800194a:	f040 8087 	bne.w	8001a5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194e:	4b89      	ldr	r3, [pc, #548]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x62>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e3a2      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1a      	ldr	r2, [r3, #32]
 800196a:	4b82      	ldr	r3, [pc, #520]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <HAL_RCC_OscConfig+0x7c>
 8001976:	4b7f      	ldr	r3, [pc, #508]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800197e:	e005      	b.n	800198c <HAL_RCC_OscConfig+0x88>
 8001980:	4b7c      	ldr	r3, [pc, #496]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800198c:	4293      	cmp	r3, r2
 800198e:	d223      	bcs.n	80019d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fd55 	bl	8002444 <RCC_SetFlashLatencyFromMSIRange>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e383      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	4b73      	ldr	r3, [pc, #460]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a72      	ldr	r2, [pc, #456]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b70      	ldr	r3, [pc, #448]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	496d      	ldr	r1, [pc, #436]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	4968      	ldr	r1, [pc, #416]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
 80019d6:	e025      	b.n	8001a24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d8:	4b66      	ldr	r3, [pc, #408]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a65      	ldr	r2, [pc, #404]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b63      	ldr	r3, [pc, #396]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4960      	ldr	r1, [pc, #384]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	495b      	ldr	r1, [pc, #364]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fd15 	bl	8002444 <RCC_SetFlashLatencyFromMSIRange>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e343      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a24:	f000 fc4a 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b52      	ldr	r3, [pc, #328]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	4950      	ldr	r1, [pc, #320]	@ (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	4a4e      	ldr	r2, [pc, #312]	@ (8001b7c <HAL_RCC_OscConfig+0x278>)
 8001a42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a44:	4b4e      	ldr	r3, [pc, #312]	@ (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fba3 	bl	8001194 <HAL_InitTick>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d052      	beq.n	8001afe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	e327      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d032      	beq.n	8001aca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a64:	4b43      	ldr	r3, [pc, #268]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a42      	ldr	r2, [pc, #264]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fbe0 	bl	8001234 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a78:	f7ff fbdc 	bl	8001234 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e310      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a96:	4b37      	ldr	r3, [pc, #220]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a36      	ldr	r2, [pc, #216]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b34      	ldr	r3, [pc, #208]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4931      	ldr	r1, [pc, #196]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	492c      	ldr	r1, [pc, #176]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	e01a      	b.n	8001b00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aca:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a29      	ldr	r2, [pc, #164]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fbad 	bl	8001234 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ade:	f7ff fba9 	bl	8001234 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e2dd      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af0:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x1da>
 8001afc:	e000      	b.n	8001b00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001afe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d074      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x21a>
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	d10e      	bne.n	8001b36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d10b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d064      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d160      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e2ba      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x24a>
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0b      	ldr	r2, [pc, #44]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e026      	b.n	8001b9c <HAL_RCC_OscConfig+0x298>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b56:	d115      	bne.n	8001b84 <HAL_RCC_OscConfig+0x280>
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b03      	ldr	r3, [pc, #12]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a02      	ldr	r2, [pc, #8]	@ (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e014      	b.n	8001b9c <HAL_RCC_OscConfig+0x298>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08005d90 	.word	0x08005d90
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004
 8001b84:	4ba0      	ldr	r3, [pc, #640]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a9f      	ldr	r2, [pc, #636]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b9d      	ldr	r3, [pc, #628]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a9c      	ldr	r2, [pc, #624]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb46 	bl	8001234 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fb42 	bl	8001234 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	@ 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e276      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bbe:	4b92      	ldr	r3, [pc, #584]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x2a8>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fb32 	bl	8001234 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fb2e 	bl	8001234 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	@ 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e262      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be6:	4b88      	ldr	r3, [pc, #544]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2d0>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d060      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x310>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d119      	bne.n	8001c42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d116      	bne.n	8001c42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c14:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_OscConfig+0x328>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e23f      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b76      	ldr	r3, [pc, #472]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	4973      	ldr	r1, [pc, #460]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c40:	e040      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d023      	beq.n	8001c92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff faed 	bl	8001234 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fae9 	bl	8001234 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e21d      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c70:	4b65      	ldr	r3, [pc, #404]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b62      	ldr	r3, [pc, #392]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	495f      	ldr	r1, [pc, #380]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	e018      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b5d      	ldr	r3, [pc, #372]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a5c      	ldr	r2, [pc, #368]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fac9 	bl	8001234 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fac5 	bl	8001234 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e1f9      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb8:	4b53      	ldr	r3, [pc, #332]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d03c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01c      	beq.n	8001d12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cde:	4a4a      	ldr	r2, [pc, #296]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff faa4 	bl	8001234 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff faa0 	bl	8001234 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1d4      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d02:	4b41      	ldr	r3, [pc, #260]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0ef      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x3ec>
 8001d10:	e01b      	b.n	8001d4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d18:	4a3b      	ldr	r2, [pc, #236]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff fa87 	bl	8001234 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fa83 	bl	8001234 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1b7      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d3c:	4b32      	ldr	r3, [pc, #200]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ef      	bne.n	8001d2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80a6 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10d      	bne.n	8001d84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6c:	4a26      	ldr	r2, [pc, #152]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d74:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d80:	2301      	movs	r3, #1
 8001d82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d84:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <HAL_RCC_OscConfig+0x508>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d118      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d90:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <HAL_RCC_OscConfig+0x508>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <HAL_RCC_OscConfig+0x508>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fa4a 	bl	8001234 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7ff fa46 	bl	8001234 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e17a      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_RCC_OscConfig+0x508>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d108      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4d8>
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dda:	e029      	b.n	8001e30 <HAL_RCC_OscConfig+0x52c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d115      	bne.n	8001e10 <HAL_RCC_OscConfig+0x50c>
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dea:	4a07      	ldr	r2, [pc, #28]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df4:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfa:	4a03      	ldr	r2, [pc, #12]	@ (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x52c>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	4b9c      	ldr	r3, [pc, #624]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e16:	4a9b      	ldr	r2, [pc, #620]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e20:	4b98      	ldr	r3, [pc, #608]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	4a97      	ldr	r2, [pc, #604]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d016      	beq.n	8001e66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff f9fc 	bl	8001234 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7ff f9f8 	bl	8001234 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e12a      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	4b8b      	ldr	r3, [pc, #556]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0ed      	beq.n	8001e40 <HAL_RCC_OscConfig+0x53c>
 8001e64:	e015      	b.n	8001e92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7ff f9e5 	bl	8001234 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7ff f9e1 	bl	8001234 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e113      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e84:	4b7f      	ldr	r3, [pc, #508]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ed      	bne.n	8001e6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e92:	7ffb      	ldrb	r3, [r7, #31]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e98:	4b7a      	ldr	r3, [pc, #488]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	4a79      	ldr	r2, [pc, #484]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80fe 	beq.w	80020aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	f040 80d0 	bne.w	8002058 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001eb8:	4b72      	ldr	r3, [pc, #456]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d130      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d127      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d11f      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ef8:	2a07      	cmp	r2, #7
 8001efa:	bf14      	ite	ne
 8001efc:	2201      	movne	r2, #1
 8001efe:	2200      	moveq	r2, #0
 8001f00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d113      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
 8001f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	3b01      	subs	r3, #1
 8001f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d06e      	beq.n	800200c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b0c      	cmp	r3, #12
 8001f32:	d069      	beq.n	8002008 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f34:	4b53      	ldr	r3, [pc, #332]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f40:	4b50      	ldr	r3, [pc, #320]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0ad      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f50:	4b4c      	ldr	r3, [pc, #304]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f5c:	f7ff f96a 	bl	8001234 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff f966 	bl	8001234 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e09a      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f76:	4b43      	ldr	r3, [pc, #268]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f82:	4b40      	ldr	r3, [pc, #256]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	4b40      	ldr	r3, [pc, #256]	@ (8002088 <HAL_RCC_OscConfig+0x784>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f92:	3a01      	subs	r2, #1
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f9c:	0212      	lsls	r2, r2, #8
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fa4:	0852      	lsrs	r2, r2, #1
 8001fa6:	3a01      	subs	r2, #1
 8001fa8:	0552      	lsls	r2, r2, #21
 8001faa:	4311      	orrs	r1, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fb0:	0852      	lsrs	r2, r2, #1
 8001fb2:	3a01      	subs	r2, #1
 8001fb4:	0652      	lsls	r2, r2, #25
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fbc:	0912      	lsrs	r2, r2, #4
 8001fbe:	0452      	lsls	r2, r2, #17
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	4930      	ldr	r1, [pc, #192]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe0:	f7ff f928 	bl	8001234 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7ff f924 	bl	8001234 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e058      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002006:	e050      	b.n	80020aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e04f      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200c:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d148      	bne.n	80020aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002018:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 800201e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002024:	4b17      	ldr	r3, [pc, #92]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a16      	ldr	r2, [pc, #88]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 800202a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800202e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002030:	f7ff f900 	bl	8001234 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff f8fc 	bl	8001234 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e030      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x734>
 8002056:	e028      	b.n	80020aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d023      	beq.n	80020a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a08      	ldr	r2, [pc, #32]	@ (8002084 <HAL_RCC_OscConfig+0x780>)
 8002064:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff f8e3 	bl	8001234 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002070:	e00c      	b.n	800208c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff f8df 	bl	8001234 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d905      	bls.n	800208c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
 8002084:	40021000 	.word	0x40021000
 8002088:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <HAL_RCC_OscConfig+0x7b0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ec      	bne.n	8002072 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_RCC_OscConfig+0x7b0>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4905      	ldr	r1, [pc, #20]	@ (80020b4 <HAL_RCC_OscConfig+0x7b0>)
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_RCC_OscConfig+0x7b4>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
 80020a4:	e001      	b.n	80020aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	feeefffc 	.word	0xfeeefffc

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0e7      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b75      	ldr	r3, [pc, #468]	@ (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b72      	ldr	r3, [pc, #456]	@ (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4970      	ldr	r1, [pc, #448]	@ (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b6e      	ldr	r3, [pc, #440]	@ (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0cf      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4b66      	ldr	r3, [pc, #408]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002118:	429a      	cmp	r2, r3
 800211a:	d908      	bls.n	800212e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4960      	ldr	r1, [pc, #384]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04c      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002142:	4b5a      	ldr	r3, [pc, #360]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d121      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0a6      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215a:	4b54      	ldr	r3, [pc, #336]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d115      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e09a      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002172:	4b4e      	ldr	r3, [pc, #312]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e08e      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002182:	4b4a      	ldr	r3, [pc, #296]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e086      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b46      	ldr	r3, [pc, #280]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4943      	ldr	r1, [pc, #268]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a4:	f7ff f846 	bl	8001234 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7ff f842 	bl	8001234 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e06e      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b3a      	ldr	r3, [pc, #232]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	4b31      	ldr	r3, [pc, #196]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d208      	bcs.n	8002202 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b2e      	ldr	r3, [pc, #184]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	492b      	ldr	r1, [pc, #172]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002202:	4b29      	ldr	r3, [pc, #164]	@ (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d210      	bcs.n	8002232 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002210:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 0207 	bic.w	r2, r3, #7
 8002218:	4923      	ldr	r1, [pc, #140]	@ (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002220:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e036      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	4918      	ldr	r1, [pc, #96]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225c:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4910      	ldr	r1, [pc, #64]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002270:	f000 f824 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	490b      	ldr	r1, [pc, #44]	@ (80022b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	4a09      	ldr	r2, [pc, #36]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 800228e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002290:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff7d 	bl	8001194 <HAL_InitTick>
 800229a:	4603      	mov	r3, r0
 800229c:	72fb      	strb	r3, [r7, #11]

  return status;
 800229e:	7afb      	ldrb	r3, [r7, #11]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08005d90 	.word	0x08005d90
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ca:	4b3e      	ldr	r3, [pc, #248]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d4:	4b3b      	ldr	r3, [pc, #236]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x34>
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d121      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d11e      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022f0:	4b34      	ldr	r3, [pc, #208]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022fc:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e005      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800230c:	4b2d      	ldr	r3, [pc, #180]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002318:	4a2b      	ldr	r2, [pc, #172]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d102      	bne.n	800233a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002334:	4b25      	ldr	r3, [pc, #148]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e004      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d101      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002340:	4b23      	ldr	r3, [pc, #140]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002342:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d134      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800234a:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d003      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0xa6>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d003      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0xac>
 8002360:	e005      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002364:	617b      	str	r3, [r7, #20]
      break;
 8002366:	e005      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002368:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800236a:	617b      	str	r3, [r7, #20]
      break;
 800236c:	e002      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	617b      	str	r3, [r7, #20]
      break;
 8002372:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002374:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	3301      	adds	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	fb03 f202 	mul.w	r2, r3, r2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	0e5b      	lsrs	r3, r3, #25
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	3301      	adds	r3, #1
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023b4:	69bb      	ldr	r3, [r7, #24]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	@ 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	08005da8 	.word	0x08005da8
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	007a1200 	.word	0x007a1200

080023d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d8:	4b03      	ldr	r3, [pc, #12]	@ (80023e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000000 	.word	0x20000000

080023ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023f0:	f7ff fff0 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4904      	ldr	r1, [pc, #16]	@ (8002414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08005da0 	.word	0x08005da0

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800241c:	f7ff ffda 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0adb      	lsrs	r3, r3, #11
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4904      	ldr	r1, [pc, #16]	@ (8002440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	08005da0 	.word	0x08005da0

08002444 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002450:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800245c:	f7ff f9ee 	bl	800183c <HAL_PWREx_GetVoltageRange>
 8002460:	6178      	str	r0, [r7, #20]
 8002462:	e014      	b.n	800248e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	4a24      	ldr	r2, [pc, #144]	@ (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002470:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800247c:	f7ff f9de 	bl	800183c <HAL_PWREx_GetVoltageRange>
 8002480:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800248c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002494:	d10b      	bne.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b80      	cmp	r3, #128	@ 0x80
 800249a:	d919      	bls.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2ba0      	cmp	r3, #160	@ 0xa0
 80024a0:	d902      	bls.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024a2:	2302      	movs	r3, #2
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	e013      	b.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e010      	b.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b80      	cmp	r3, #128	@ 0x80
 80024b2:	d902      	bls.n	80024ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024b4:	2303      	movs	r3, #3
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	e00a      	b.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b80      	cmp	r3, #128	@ 0x80
 80024be:	d102      	bne.n	80024c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024c0:	2302      	movs	r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	e004      	b.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b70      	cmp	r3, #112	@ 0x70
 80024ca:	d101      	bne.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024cc:	2301      	movs	r3, #1
 80024ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 0207 	bic.w	r2, r3, #7
 80024d8:	4909      	ldr	r1, [pc, #36]	@ (8002500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024e0:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d001      	beq.n	80024f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	40022000 	.word	0x40022000

08002504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800250c:	2300      	movs	r3, #0
 800250e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002510:	2300      	movs	r3, #0
 8002512:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800251c:	2b00      	cmp	r3, #0
 800251e:	d041      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002524:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002528:	d02a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800252a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800252e:	d824      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002530:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002534:	d008      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002536:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800253a:	d81e      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002540:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002544:	d010      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002546:	e018      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002548:	4b86      	ldr	r3, [pc, #536]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a85      	ldr	r2, [pc, #532]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002554:	e015      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fabb 	bl	8002ad8 <RCCEx_PLLSAI1_Config>
 8002562:	4603      	mov	r3, r0
 8002564:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002566:	e00c      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3320      	adds	r3, #32
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fba6 	bl	8002cc0 <RCCEx_PLLSAI2_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002578:	e003      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	74fb      	strb	r3, [r7, #19]
      break;
 800257e:	e000      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002588:	4b76      	ldr	r3, [pc, #472]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002596:	4973      	ldr	r1, [pc, #460]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800259e:	e001      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d041      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025b8:	d02a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025be:	d824      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025c4:	d008      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025ca:	d81e      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d4:	d010      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025d6:	e018      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025d8:	4b62      	ldr	r3, [pc, #392]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a61      	ldr	r2, [pc, #388]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e4:	e015      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fa73 	bl	8002ad8 <RCCEx_PLLSAI1_Config>
 80025f2:	4603      	mov	r3, r0
 80025f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f6:	e00c      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3320      	adds	r3, #32
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fb5e 	bl	8002cc0 <RCCEx_PLLSAI2_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002608:	e003      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	74fb      	strb	r3, [r7, #19]
      break;
 800260e:	e000      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002618:	4b52      	ldr	r3, [pc, #328]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002626:	494f      	ldr	r1, [pc, #316]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800262e:	e001      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80a0 	beq.w	8002782 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002646:	4b47      	ldr	r3, [pc, #284]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00d      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b41      	ldr	r3, [pc, #260]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	4a40      	ldr	r2, [pc, #256]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	@ 0x58
 8002668:	4b3e      	ldr	r3, [pc, #248]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002674:	2301      	movs	r3, #1
 8002676:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002678:	4b3b      	ldr	r3, [pc, #236]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a3a      	ldr	r2, [pc, #232]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002682:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002684:	f7fe fdd6 	bl	8001234 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800268a:	e009      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268c:	f7fe fdd2 	bl	8001234 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d902      	bls.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	74fb      	strb	r3, [r7, #19]
        break;
 800269e:	e005      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026a0:	4b31      	ldr	r3, [pc, #196]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ef      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d15c      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01f      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d019      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026d0:	4b24      	ldr	r3, [pc, #144]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026dc:	4b21      	ldr	r3, [pc, #132]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	4a20      	ldr	r2, [pc, #128]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026fc:	4a19      	ldr	r2, [pc, #100]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe fd91 	bl	8001234 <HAL_GetTick>
 8002712:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002714:	e00b      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe fd8d 	bl	8001234 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d902      	bls.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	74fb      	strb	r3, [r7, #19]
            break;
 800272c:	e006      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272e:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ec      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10c      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002742:	4b08      	ldr	r3, [pc, #32]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002752:	4904      	ldr	r1, [pc, #16]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800275a:	e009      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
 8002760:	e006      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002770:	7c7b      	ldrb	r3, [r7, #17]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d105      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002776:	4b9e      	ldr	r3, [pc, #632]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277a:	4a9d      	ldr	r2, [pc, #628]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002780:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800278e:	4b98      	ldr	r3, [pc, #608]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002794:	f023 0203 	bic.w	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279c:	4994      	ldr	r1, [pc, #592]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027b0:	4b8f      	ldr	r3, [pc, #572]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b6:	f023 020c 	bic.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027be:	498c      	ldr	r1, [pc, #560]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027d2:	4b87      	ldr	r3, [pc, #540]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	4983      	ldr	r1, [pc, #524]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027f4:	4b7e      	ldr	r3, [pc, #504]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	497b      	ldr	r1, [pc, #492]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002816:	4b76      	ldr	r3, [pc, #472]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002824:	4972      	ldr	r1, [pc, #456]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002838:	4b6d      	ldr	r3, [pc, #436]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002846:	496a      	ldr	r1, [pc, #424]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285a:	4b65      	ldr	r3, [pc, #404]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002860:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	4961      	ldr	r1, [pc, #388]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800287c:	4b5c      	ldr	r3, [pc, #368]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288a:	4959      	ldr	r1, [pc, #356]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800289e:	4b54      	ldr	r3, [pc, #336]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ac:	4950      	ldr	r1, [pc, #320]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028c0:	4b4b      	ldr	r3, [pc, #300]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ce:	4948      	ldr	r1, [pc, #288]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028e2:	4b43      	ldr	r3, [pc, #268]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	493f      	ldr	r1, [pc, #252]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d028      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002904:	4b3a      	ldr	r3, [pc, #232]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002912:	4937      	ldr	r1, [pc, #220]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800291e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002922:	d106      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002924:	4b32      	ldr	r3, [pc, #200]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a31      	ldr	r2, [pc, #196]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800292e:	60d3      	str	r3, [r2, #12]
 8002930:	e011      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002936:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800293a:	d10c      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f8c8 	bl	8002ad8 <RCCEx_PLLSAI1_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d028      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002962:	4b23      	ldr	r3, [pc, #140]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002968:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002970:	491f      	ldr	r1, [pc, #124]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002980:	d106      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002982:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4a1a      	ldr	r2, [pc, #104]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800298c:	60d3      	str	r3, [r2, #12]
 800298e:	e011      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002994:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	2101      	movs	r1, #1
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f899 	bl	8002ad8 <RCCEx_PLLSAI1_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d02b      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ce:	4908      	ldr	r1, [pc, #32]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029de:	d109      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e0:	4b03      	ldr	r3, [pc, #12]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a02      	ldr	r2, [pc, #8]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ea:	60d3      	str	r3, [r2, #12]
 80029ec:	e014      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f867 	bl	8002ad8 <RCCEx_PLLSAI1_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d02f      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a24:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a32:	4928      	ldr	r1, [pc, #160]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a42:	d10d      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f844 	bl	8002ad8 <RCCEx_PLLSAI1_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d014      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	74bb      	strb	r3, [r7, #18]
 8002a5e:	e011      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3320      	adds	r3, #32
 8002a6e:	2102      	movs	r1, #2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f925 	bl	8002cc0 <RCCEx_PLLSAI2_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a90:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a9e:	490d      	ldr	r1, [pc, #52]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ac2:	4904      	ldr	r1, [pc, #16]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aca:	7cbb      	ldrb	r3, [r7, #18]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ae6:	4b75      	ldr	r3, [pc, #468]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d018      	beq.n	8002b24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002af2:	4b72      	ldr	r3, [pc, #456]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10d      	bne.n	8002b1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
       ||
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
       ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d047      	beq.n	8002bae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e044      	b.n	8002bae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d018      	beq.n	8002b5e <RCCEx_PLLSAI1_Config+0x86>
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d825      	bhi.n	8002b7c <RCCEx_PLLSAI1_Config+0xa4>
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d002      	beq.n	8002b3a <RCCEx_PLLSAI1_Config+0x62>
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d009      	beq.n	8002b4c <RCCEx_PLLSAI1_Config+0x74>
 8002b38:	e020      	b.n	8002b7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b3a:	4b60      	ldr	r3, [pc, #384]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11d      	bne.n	8002b82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e01a      	b.n	8002b82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d116      	bne.n	8002b86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e013      	b.n	8002b86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b5e:	4b57      	ldr	r3, [pc, #348]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b6a:	4b54      	ldr	r3, [pc, #336]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b7a:	e006      	b.n	8002b8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e004      	b.n	8002b8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b82:	bf00      	nop
 8002b84:	e002      	b.n	8002b8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b92:	4b4a      	ldr	r3, [pc, #296]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	4944      	ldr	r1, [pc, #272]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d17d      	bne.n	8002cb0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bb4:	4b41      	ldr	r3, [pc, #260]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a40      	ldr	r2, [pc, #256]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fb38 	bl	8001234 <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bc6:	e009      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bc8:	f7fe fb34 	bl	8001234 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d902      	bls.n	8002bdc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bda:	e005      	b.n	8002be8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bdc:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ef      	bne.n	8002bc8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d160      	bne.n	8002cb0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d111      	bne.n	8002c18 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf4:	4b31      	ldr	r3, [pc, #196]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6892      	ldr	r2, [r2, #8]
 8002c04:	0211      	lsls	r1, r2, #8
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	0912      	lsrs	r2, r2, #4
 8002c0c:	0452      	lsls	r2, r2, #17
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	492a      	ldr	r1, [pc, #168]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	610b      	str	r3, [r1, #16]
 8002c16:	e027      	b.n	8002c68 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d112      	bne.n	8002c44 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c1e:	4b27      	ldr	r3, [pc, #156]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6892      	ldr	r2, [r2, #8]
 8002c2e:	0211      	lsls	r1, r2, #8
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6912      	ldr	r2, [r2, #16]
 8002c34:	0852      	lsrs	r2, r2, #1
 8002c36:	3a01      	subs	r2, #1
 8002c38:	0552      	lsls	r2, r2, #21
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	491f      	ldr	r1, [pc, #124]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	610b      	str	r3, [r1, #16]
 8002c42:	e011      	b.n	8002c68 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c44:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6892      	ldr	r2, [r2, #8]
 8002c54:	0211      	lsls	r1, r2, #8
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6952      	ldr	r2, [r2, #20]
 8002c5a:	0852      	lsrs	r2, r2, #1
 8002c5c:	3a01      	subs	r2, #1
 8002c5e:	0652      	lsls	r2, r2, #25
 8002c60:	430a      	orrs	r2, r1
 8002c62:	4916      	ldr	r1, [pc, #88]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c68:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fade 	bl	8001234 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c7a:	e009      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c7c:	f7fe fada 	bl	8001234 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d902      	bls.n	8002c90 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c8e:	e005      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c90:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	4904      	ldr	r1, [pc, #16]	@ (8002cbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cce:	4b6a      	ldr	r3, [pc, #424]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d018      	beq.n	8002d0c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cda:	4b67      	ldr	r3, [pc, #412]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0203 	and.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d10d      	bne.n	8002d06 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
       ||
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cf2:	4b61      	ldr	r3, [pc, #388]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
       ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d047      	beq.n	8002d96 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	e044      	b.n	8002d96 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d018      	beq.n	8002d46 <RCCEx_PLLSAI2_Config+0x86>
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d825      	bhi.n	8002d64 <RCCEx_PLLSAI2_Config+0xa4>
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d002      	beq.n	8002d22 <RCCEx_PLLSAI2_Config+0x62>
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d009      	beq.n	8002d34 <RCCEx_PLLSAI2_Config+0x74>
 8002d20:	e020      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d22:	4b55      	ldr	r3, [pc, #340]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11d      	bne.n	8002d6a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d32:	e01a      	b.n	8002d6a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d34:	4b50      	ldr	r3, [pc, #320]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d116      	bne.n	8002d6e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d44:	e013      	b.n	8002d6e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d46:	4b4c      	ldr	r3, [pc, #304]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d52:	4b49      	ldr	r3, [pc, #292]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d62:	e006      	b.n	8002d72 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      break;
 8002d68:	e004      	b.n	8002d74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e002      	b.n	8002d74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e000      	b.n	8002d74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d72:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10d      	bne.n	8002d96 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6819      	ldr	r1, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	4939      	ldr	r1, [pc, #228]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d167      	bne.n	8002e6c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d9c:	4b36      	ldr	r3, [pc, #216]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a35      	ldr	r2, [pc, #212]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da8:	f7fe fa44 	bl	8001234 <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dae:	e009      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002db0:	f7fe fa40 	bl	8001234 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d902      	bls.n	8002dc4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	73fb      	strb	r3, [r7, #15]
        break;
 8002dc2:	e005      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1ef      	bne.n	8002db0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d14a      	bne.n	8002e6c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d111      	bne.n	8002e00 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ddc:	4b26      	ldr	r3, [pc, #152]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6892      	ldr	r2, [r2, #8]
 8002dec:	0211      	lsls	r1, r2, #8
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68d2      	ldr	r2, [r2, #12]
 8002df2:	0912      	lsrs	r2, r2, #4
 8002df4:	0452      	lsls	r2, r2, #17
 8002df6:	430a      	orrs	r2, r1
 8002df8:	491f      	ldr	r1, [pc, #124]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	614b      	str	r3, [r1, #20]
 8002dfe:	e011      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e00:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	0211      	lsls	r1, r2, #8
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6912      	ldr	r2, [r2, #16]
 8002e16:	0852      	lsrs	r2, r2, #1
 8002e18:	3a01      	subs	r2, #1
 8002e1a:	0652      	lsls	r2, r2, #25
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	4916      	ldr	r1, [pc, #88]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e24:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe fa00 	bl	8001234 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e36:	e009      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e38:	f7fe f9fc 	bl	8001234 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
          break;
 8002e4a:	e005      	b.n	8002e58 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4904      	ldr	r1, [pc, #16]	@ (8002e78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000

08002e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e049      	b.n	8002f22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe f842 	bl	8000f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 fd76 	bl	80039ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e04f      	b.n	8002fe4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a23      	ldr	r2, [pc, #140]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01d      	beq.n	8002fa2 <HAL_TIM_Base_Start_IT+0x76>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f6e:	d018      	beq.n	8002fa2 <HAL_TIM_Base_Start_IT+0x76>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_TIM_Base_Start_IT+0x76>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_TIM_Base_Start_IT+0x76>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	@ (8002ffc <HAL_TIM_Base_Start_IT+0xd0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_TIM_Base_Start_IT+0x76>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1b      	ldr	r2, [pc, #108]	@ (8003000 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_TIM_Base_Start_IT+0x76>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a19      	ldr	r2, [pc, #100]	@ (8003004 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d115      	bne.n	8002fce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <HAL_TIM_Base_Start_IT+0xdc>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b06      	cmp	r3, #6
 8002fb2:	d015      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0xb4>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fba:	d011      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fcc:	e008      	b.n	8002fe0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e000      	b.n	8002fe2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40013400 	.word	0x40013400
 8003004:	40014000 	.word	0x40014000
 8003008:	00010007 	.word	0x00010007

0800300c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e049      	b.n	80030b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fee8 	bl	8000e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f000 fcae 	bl	80039ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_TIM_PWM_Start+0x24>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e03c      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d109      	bne.n	80030fa <HAL_TIM_PWM_Start+0x3e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e02f      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d109      	bne.n	8003114 <HAL_TIM_PWM_Start+0x58>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e022      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d109      	bne.n	800312e <HAL_TIM_PWM_Start+0x72>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e015      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b10      	cmp	r3, #16
 8003132:	d109      	bne.n	8003148 <HAL_TIM_PWM_Start+0x8c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e008      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e09c      	b.n	800329c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xb6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003170:	e023      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start+0xc6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003180:	e01b      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start+0xd6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003190:	e013      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_PWM_Start+0xe6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031a0:	e00b      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d104      	bne.n	80031b2 <HAL_TIM_PWM_Start+0xf6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031b0:	e003      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	6839      	ldr	r1, [r7, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 ff62 	bl	800408c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <HAL_TIM_PWM_Start+0x1e8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_TIM_PWM_Start+0x13e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a34      	ldr	r2, [pc, #208]	@ (80032a8 <HAL_TIM_PWM_Start+0x1ec>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_TIM_PWM_Start+0x13e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a32      	ldr	r2, [pc, #200]	@ (80032ac <HAL_TIM_PWM_Start+0x1f0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_TIM_PWM_Start+0x13e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a31      	ldr	r2, [pc, #196]	@ (80032b0 <HAL_TIM_PWM_Start+0x1f4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_TIM_PWM_Start+0x13e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2f      	ldr	r2, [pc, #188]	@ (80032b4 <HAL_TIM_PWM_Start+0x1f8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_PWM_Start+0x142>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_TIM_PWM_Start+0x144>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003212:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a22      	ldr	r2, [pc, #136]	@ (80032a4 <HAL_TIM_PWM_Start+0x1e8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01d      	beq.n	800325a <HAL_TIM_PWM_Start+0x19e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003226:	d018      	beq.n	800325a <HAL_TIM_PWM_Start+0x19e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a22      	ldr	r2, [pc, #136]	@ (80032b8 <HAL_TIM_PWM_Start+0x1fc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <HAL_TIM_PWM_Start+0x19e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a21      	ldr	r2, [pc, #132]	@ (80032bc <HAL_TIM_PWM_Start+0x200>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00e      	beq.n	800325a <HAL_TIM_PWM_Start+0x19e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1f      	ldr	r2, [pc, #124]	@ (80032c0 <HAL_TIM_PWM_Start+0x204>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d009      	beq.n	800325a <HAL_TIM_PWM_Start+0x19e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a17      	ldr	r2, [pc, #92]	@ (80032a8 <HAL_TIM_PWM_Start+0x1ec>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d004      	beq.n	800325a <HAL_TIM_PWM_Start+0x19e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a15      	ldr	r2, [pc, #84]	@ (80032ac <HAL_TIM_PWM_Start+0x1f0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d115      	bne.n	8003286 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4b18      	ldr	r3, [pc, #96]	@ (80032c4 <HAL_TIM_PWM_Start+0x208>)
 8003262:	4013      	ands	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b06      	cmp	r3, #6
 800326a:	d015      	beq.n	8003298 <HAL_TIM_PWM_Start+0x1dc>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003272:	d011      	beq.n	8003298 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003284:	e008      	b.n	8003298 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e000      	b.n	800329a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003298:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40013400 	.word	0x40013400
 80032ac:	40014000 	.word	0x40014000
 80032b0:	40014400 	.word	0x40014400
 80032b4:	40014800 	.word	0x40014800
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	00010007 	.word	0x00010007

080032c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e097      	b.n	800340c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fd fda9 	bl	8000e48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800330c:	f023 0307 	bic.w	r3, r3, #7
 8003310:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3304      	adds	r3, #4
 800331a:	4619      	mov	r1, r3
 800331c:	4610      	mov	r0, r2
 800331e:	f000 fb45 	bl	80039ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334a:	f023 0303 	bic.w	r3, r3, #3
 800334e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	4313      	orrs	r3, r2
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003368:	f023 030c 	bic.w	r3, r3, #12
 800336c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003374:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	4313      	orrs	r3, r2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	011a      	lsls	r2, r3, #4
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	031b      	lsls	r3, r3, #12
 8003398:	4313      	orrs	r3, r2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4313      	orrs	r3, r2
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003424:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800342c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003434:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800343c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d110      	bne.n	8003466 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800344a:	7b7b      	ldrb	r3, [r7, #13]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e069      	b.n	8003528 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003464:	e031      	b.n	80034ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d110      	bne.n	800348e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800346c:	7bbb      	ldrb	r3, [r7, #14]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d102      	bne.n	8003478 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003472:	7b3b      	ldrb	r3, [r7, #12]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d001      	beq.n	800347c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e055      	b.n	8003528 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800348c:	e01d      	b.n	80034ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d108      	bne.n	80034a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003494:	7bbb      	ldrb	r3, [r7, #14]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800349a:	7b7b      	ldrb	r3, [r7, #13]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d102      	bne.n	80034a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034a0:	7b3b      	ldrb	r3, [r7, #12]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d001      	beq.n	80034aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e03e      	b.n	8003528 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_TIM_Encoder_Start+0xc4>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d008      	beq.n	80034e8 <HAL_TIM_Encoder_Start+0xd4>
 80034d6:	e00f      	b.n	80034f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2201      	movs	r2, #1
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fdd3 	bl	800408c <TIM_CCxChannelCmd>
      break;
 80034e6:	e016      	b.n	8003516 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2201      	movs	r2, #1
 80034ee:	2104      	movs	r1, #4
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fdcb 	bl	800408c <TIM_CCxChannelCmd>
      break;
 80034f6:	e00e      	b.n	8003516 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2201      	movs	r2, #1
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fdc3 	bl	800408c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2201      	movs	r2, #1
 800350c:	2104      	movs	r1, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fdbc 	bl	800408c <TIM_CCxChannelCmd>
      break;
 8003514:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0202 	mvn.w	r2, #2
 8003564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9f8 	bl	8003970 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9ea 	bl	800395c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f9fb 	bl	8003984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0204 	mvn.w	r2, #4
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9d2 	bl	8003970 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9c4 	bl	800395c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f9d5 	bl	8003984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0208 	mvn.w	r2, #8
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f9ac 	bl	8003970 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f99e 	bl	800395c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f9af 	bl	8003984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d020      	beq.n	8003678 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01b      	beq.n	8003678 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0210 	mvn.w	r2, #16
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2208      	movs	r2, #8
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f986 	bl	8003970 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f978 	bl	800395c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f989 	bl	8003984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0201 	mvn.w	r2, #1
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd f842 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fe1c 	bl	80042f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fe14 	bl	800430c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f948 	bl	8003998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0220 	mvn.w	r2, #32
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fddc 	bl	80042e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800374e:	2302      	movs	r3, #2
 8003750:	e0ff      	b.n	8003952 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b14      	cmp	r3, #20
 800375e:	f200 80f0 	bhi.w	8003942 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003762:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	080037bd 	.word	0x080037bd
 800376c:	08003943 	.word	0x08003943
 8003770:	08003943 	.word	0x08003943
 8003774:	08003943 	.word	0x08003943
 8003778:	080037fd 	.word	0x080037fd
 800377c:	08003943 	.word	0x08003943
 8003780:	08003943 	.word	0x08003943
 8003784:	08003943 	.word	0x08003943
 8003788:	0800383f 	.word	0x0800383f
 800378c:	08003943 	.word	0x08003943
 8003790:	08003943 	.word	0x08003943
 8003794:	08003943 	.word	0x08003943
 8003798:	0800387f 	.word	0x0800387f
 800379c:	08003943 	.word	0x08003943
 80037a0:	08003943 	.word	0x08003943
 80037a4:	08003943 	.word	0x08003943
 80037a8:	080038c1 	.word	0x080038c1
 80037ac:	08003943 	.word	0x08003943
 80037b0:	08003943 	.word	0x08003943
 80037b4:	08003943 	.word	0x08003943
 80037b8:	08003901 	.word	0x08003901
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f98c 	bl	8003ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0204 	bic.w	r2, r2, #4
 80037e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6999      	ldr	r1, [r3, #24]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	619a      	str	r2, [r3, #24]
      break;
 80037fa:	e0a5      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f9fc 	bl	8003c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6999      	ldr	r1, [r3, #24]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	021a      	lsls	r2, r3, #8
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	619a      	str	r2, [r3, #24]
      break;
 800383c:	e084      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fa65 	bl	8003d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0208 	orr.w	r2, r2, #8
 8003858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0204 	bic.w	r2, r2, #4
 8003868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69d9      	ldr	r1, [r3, #28]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	61da      	str	r2, [r3, #28]
      break;
 800387c:	e064      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 facd 	bl	8003e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69d9      	ldr	r1, [r3, #28]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	61da      	str	r2, [r3, #28]
      break;
 80038be:	e043      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fb16 	bl	8003ef8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0208 	orr.w	r2, r2, #8
 80038da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0204 	bic.w	r2, r2, #4
 80038ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038fe:	e023      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fb5a 	bl	8003fc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	021a      	lsls	r2, r3, #8
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003940:	e002      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	75fb      	strb	r3, [r7, #23]
      break;
 8003946:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop

0800395c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a40      	ldr	r2, [pc, #256]	@ (8003ac0 <TIM_Base_SetConfig+0x114>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ca:	d00f      	beq.n	80039ec <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3d      	ldr	r2, [pc, #244]	@ (8003ac4 <TIM_Base_SetConfig+0x118>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00b      	beq.n	80039ec <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ac8 <TIM_Base_SetConfig+0x11c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a3b      	ldr	r2, [pc, #236]	@ (8003acc <TIM_Base_SetConfig+0x120>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_Base_SetConfig+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ad0 <TIM_Base_SetConfig+0x124>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d108      	bne.n	80039fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac0 <TIM_Base_SetConfig+0x114>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01f      	beq.n	8003a46 <TIM_Base_SetConfig+0x9a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0c:	d01b      	beq.n	8003a46 <TIM_Base_SetConfig+0x9a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac4 <TIM_Base_SetConfig+0x118>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d017      	beq.n	8003a46 <TIM_Base_SetConfig+0x9a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac8 <TIM_Base_SetConfig+0x11c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <TIM_Base_SetConfig+0x9a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2a      	ldr	r2, [pc, #168]	@ (8003acc <TIM_Base_SetConfig+0x120>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00f      	beq.n	8003a46 <TIM_Base_SetConfig+0x9a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a29      	ldr	r2, [pc, #164]	@ (8003ad0 <TIM_Base_SetConfig+0x124>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_Base_SetConfig+0x9a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a28      	ldr	r2, [pc, #160]	@ (8003ad4 <TIM_Base_SetConfig+0x128>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <TIM_Base_SetConfig+0x9a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a27      	ldr	r2, [pc, #156]	@ (8003ad8 <TIM_Base_SetConfig+0x12c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0x9a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a26      	ldr	r2, [pc, #152]	@ (8003adc <TIM_Base_SetConfig+0x130>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a10      	ldr	r2, [pc, #64]	@ (8003ac0 <TIM_Base_SetConfig+0x114>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00f      	beq.n	8003aa4 <TIM_Base_SetConfig+0xf8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <TIM_Base_SetConfig+0x124>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_Base_SetConfig+0xf8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a11      	ldr	r2, [pc, #68]	@ (8003ad4 <TIM_Base_SetConfig+0x128>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_Base_SetConfig+0xf8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a10      	ldr	r2, [pc, #64]	@ (8003ad8 <TIM_Base_SetConfig+0x12c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_Base_SetConfig+0xf8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8003adc <TIM_Base_SetConfig+0x130>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d103      	bne.n	8003aac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	615a      	str	r2, [r3, #20]
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40013400 	.word	0x40013400
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40014400 	.word	0x40014400
 8003adc:	40014800 	.word	0x40014800

08003ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f023 0201 	bic.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 0302 	bic.w	r3, r3, #2
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bec <TIM_OC1_SetConfig+0x10c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00f      	beq.n	8003b60 <TIM_OC1_SetConfig+0x80>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf0 <TIM_OC1_SetConfig+0x110>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <TIM_OC1_SetConfig+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf4 <TIM_OC1_SetConfig+0x114>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <TIM_OC1_SetConfig+0x80>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a29      	ldr	r2, [pc, #164]	@ (8003bf8 <TIM_OC1_SetConfig+0x118>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_OC1_SetConfig+0x80>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a28      	ldr	r2, [pc, #160]	@ (8003bfc <TIM_OC1_SetConfig+0x11c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10c      	bne.n	8003b7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0308 	bic.w	r3, r3, #8
 8003b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bec <TIM_OC1_SetConfig+0x10c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00f      	beq.n	8003ba2 <TIM_OC1_SetConfig+0xc2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <TIM_OC1_SetConfig+0x110>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00b      	beq.n	8003ba2 <TIM_OC1_SetConfig+0xc2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	@ (8003bf4 <TIM_OC1_SetConfig+0x114>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <TIM_OC1_SetConfig+0xc2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a18      	ldr	r2, [pc, #96]	@ (8003bf8 <TIM_OC1_SetConfig+0x118>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_OC1_SetConfig+0xc2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a17      	ldr	r2, [pc, #92]	@ (8003bfc <TIM_OC1_SetConfig+0x11c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d111      	bne.n	8003bc6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	bf00      	nop
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40013400 	.word	0x40013400
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800

08003c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f023 0210 	bic.w	r2, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0320 	bic.w	r3, r3, #32
 8003c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a28      	ldr	r2, [pc, #160]	@ (8003d00 <TIM_OC2_SetConfig+0x100>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_OC2_SetConfig+0x6c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a27      	ldr	r2, [pc, #156]	@ (8003d04 <TIM_OC2_SetConfig+0x104>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10d      	bne.n	8003c88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d00 <TIM_OC2_SetConfig+0x100>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00f      	beq.n	8003cb0 <TIM_OC2_SetConfig+0xb0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <TIM_OC2_SetConfig+0x104>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <TIM_OC2_SetConfig+0xb0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d08 <TIM_OC2_SetConfig+0x108>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_OC2_SetConfig+0xb0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d0c <TIM_OC2_SetConfig+0x10c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC2_SetConfig+0xb0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <TIM_OC2_SetConfig+0x110>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d113      	bne.n	8003cd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40013400 	.word	0x40013400
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800

08003d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a27      	ldr	r2, [pc, #156]	@ (8003e10 <TIM_OC3_SetConfig+0xfc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d003      	beq.n	8003d7e <TIM_OC3_SetConfig+0x6a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a26      	ldr	r2, [pc, #152]	@ (8003e14 <TIM_OC3_SetConfig+0x100>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10d      	bne.n	8003d9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <TIM_OC3_SetConfig+0xfc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00f      	beq.n	8003dc2 <TIM_OC3_SetConfig+0xae>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <TIM_OC3_SetConfig+0x100>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_OC3_SetConfig+0xae>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1a      	ldr	r2, [pc, #104]	@ (8003e18 <TIM_OC3_SetConfig+0x104>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_OC3_SetConfig+0xae>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <TIM_OC3_SetConfig+0x108>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC3_SetConfig+0xae>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <TIM_OC3_SetConfig+0x10c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d113      	bne.n	8003dea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40013400 	.word	0x40013400
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800

08003e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	031b      	lsls	r3, r3, #12
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <TIM_OC4_SetConfig+0xc0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00f      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x84>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a17      	ldr	r2, [pc, #92]	@ (8003ee8 <TIM_OC4_SetConfig+0xc4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x84>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a16      	ldr	r2, [pc, #88]	@ (8003eec <TIM_OC4_SetConfig+0xc8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x84>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a15      	ldr	r2, [pc, #84]	@ (8003ef0 <TIM_OC4_SetConfig+0xcc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x84>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a14      	ldr	r2, [pc, #80]	@ (8003ef4 <TIM_OC4_SetConfig+0xd0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d109      	bne.n	8003ebc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40013400 	.word	0x40013400
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40014800 	.word	0x40014800

08003ef8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a17      	ldr	r2, [pc, #92]	@ (8003fac <TIM_OC5_SetConfig+0xb4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00f      	beq.n	8003f72 <TIM_OC5_SetConfig+0x7a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <TIM_OC5_SetConfig+0xb8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00b      	beq.n	8003f72 <TIM_OC5_SetConfig+0x7a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <TIM_OC5_SetConfig+0xbc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <TIM_OC5_SetConfig+0x7a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <TIM_OC5_SetConfig+0xc0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_OC5_SetConfig+0x7a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a13      	ldr	r2, [pc, #76]	@ (8003fbc <TIM_OC5_SetConfig+0xc4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d109      	bne.n	8003f86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	621a      	str	r2, [r3, #32]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40013400 	.word	0x40013400
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800

08003fc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	051b      	lsls	r3, r3, #20
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a18      	ldr	r2, [pc, #96]	@ (8004078 <TIM_OC6_SetConfig+0xb8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00f      	beq.n	800403c <TIM_OC6_SetConfig+0x7c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a17      	ldr	r2, [pc, #92]	@ (800407c <TIM_OC6_SetConfig+0xbc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_OC6_SetConfig+0x7c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a16      	ldr	r2, [pc, #88]	@ (8004080 <TIM_OC6_SetConfig+0xc0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_OC6_SetConfig+0x7c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <TIM_OC6_SetConfig+0xc4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_OC6_SetConfig+0x7c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a14      	ldr	r2, [pc, #80]	@ (8004088 <TIM_OC6_SetConfig+0xc8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d109      	bne.n	8004050 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004042:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	029b      	lsls	r3, r3, #10
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	621a      	str	r2, [r3, #32]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40013400 	.word	0x40013400
 8004080:	40014000 	.word	0x40014000
 8004084:	40014400 	.word	0x40014400
 8004088:	40014800 	.word	0x40014800

0800408c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2201      	movs	r2, #1
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1a      	ldr	r2, [r3, #32]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1a      	ldr	r2, [r3, #32]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e068      	b.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2e      	ldr	r2, [pc, #184]	@ (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2d      	ldr	r2, [pc, #180]	@ (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d108      	bne.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800412a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1e      	ldr	r2, [pc, #120]	@ (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01d      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004162:	d018      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1b      	ldr	r2, [pc, #108]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1a      	ldr	r2, [pc, #104]	@ (80041dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	@ (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a13      	ldr	r2, [pc, #76]	@ (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a14      	ldr	r2, [pc, #80]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10c      	bne.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40013400 	.word	0x40013400
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40014000 	.word	0x40014000

080041e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004200:	2302      	movs	r3, #2
 8004202:	e065      	b.n	80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a16      	ldr	r2, [pc, #88]	@ (80042dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d115      	bne.n	80042be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	051b      	lsls	r3, r3, #20
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40013400 	.word	0x40013400

080042e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e040      	b.n	80043b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fc fe80 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2224      	movs	r2, #36	@ 0x24
 800434c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fb6a 	bl	8004a40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f8af 	bl	80044d0 <UART_SetConfig>
 8004372:	4603      	mov	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e01b      	b.n	80043b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800438a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800439a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fbe9 	bl	8004b84 <UART_CheckIdleState>
 80043b2:	4603      	mov	r3, r0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	@ 0x28
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d177      	bne.n	80044c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_UART_Transmit+0x24>
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e070      	b.n	80044c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2221      	movs	r2, #33	@ 0x21
 80043f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043f2:	f7fc ff1f 	bl	8001234 <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004410:	d108      	bne.n	8004424 <HAL_UART_Transmit+0x68>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e003      	b.n	800442c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800442c:	e02f      	b.n	800448e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2180      	movs	r1, #128	@ 0x80
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fc4b 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e03b      	b.n	80044c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	881a      	ldrh	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004460:	b292      	uxth	r2, r2
 8004462:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	3302      	adds	r3, #2
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e007      	b.n	800447c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	781a      	ldrb	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3301      	adds	r3, #1
 800447a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1c9      	bne.n	800442e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2140      	movs	r1, #64	@ 0x40
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fc15 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d004      	beq.n	80044ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e005      	b.n	80044c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e000      	b.n	80044c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
  }
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d4:	b08a      	sub	sp, #40	@ 0x28
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	4ba4      	ldr	r3, [pc, #656]	@ (8004790 <UART_SetConfig+0x2c0>)
 8004500:	4013      	ands	r3, r2
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004508:	430b      	orrs	r3, r1
 800450a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a99      	ldr	r2, [pc, #612]	@ (8004794 <UART_SetConfig+0x2c4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004538:	4313      	orrs	r3, r2
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a90      	ldr	r2, [pc, #576]	@ (8004798 <UART_SetConfig+0x2c8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d126      	bne.n	80045a8 <UART_SetConfig+0xd8>
 800455a:	4b90      	ldr	r3, [pc, #576]	@ (800479c <UART_SetConfig+0x2cc>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b03      	cmp	r3, #3
 8004566:	d81b      	bhi.n	80045a0 <UART_SetConfig+0xd0>
 8004568:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <UART_SetConfig+0xa0>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004581 	.word	0x08004581
 8004574:	08004591 	.word	0x08004591
 8004578:	08004589 	.word	0x08004589
 800457c:	08004599 	.word	0x08004599
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004586:	e116      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004588:	2302      	movs	r3, #2
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458e:	e112      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004596:	e10e      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459e:	e10a      	b.n	80047b6 <UART_SetConfig+0x2e6>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a6:	e106      	b.n	80047b6 <UART_SetConfig+0x2e6>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a7c      	ldr	r2, [pc, #496]	@ (80047a0 <UART_SetConfig+0x2d0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d138      	bne.n	8004624 <UART_SetConfig+0x154>
 80045b2:	4b7a      	ldr	r3, [pc, #488]	@ (800479c <UART_SetConfig+0x2cc>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b0c      	cmp	r3, #12
 80045be:	d82d      	bhi.n	800461c <UART_SetConfig+0x14c>
 80045c0:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <UART_SetConfig+0xf8>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045fd 	.word	0x080045fd
 80045cc:	0800461d 	.word	0x0800461d
 80045d0:	0800461d 	.word	0x0800461d
 80045d4:	0800461d 	.word	0x0800461d
 80045d8:	0800460d 	.word	0x0800460d
 80045dc:	0800461d 	.word	0x0800461d
 80045e0:	0800461d 	.word	0x0800461d
 80045e4:	0800461d 	.word	0x0800461d
 80045e8:	08004605 	.word	0x08004605
 80045ec:	0800461d 	.word	0x0800461d
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004615 	.word	0x08004615
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004602:	e0d8      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004604:	2302      	movs	r3, #2
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460a:	e0d4      	b.n	80047b6 <UART_SetConfig+0x2e6>
 800460c:	2304      	movs	r3, #4
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004612:	e0d0      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004614:	2308      	movs	r3, #8
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461a:	e0cc      	b.n	80047b6 <UART_SetConfig+0x2e6>
 800461c:	2310      	movs	r3, #16
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004622:	e0c8      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a5e      	ldr	r2, [pc, #376]	@ (80047a4 <UART_SetConfig+0x2d4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d125      	bne.n	800467a <UART_SetConfig+0x1aa>
 800462e:	4b5b      	ldr	r3, [pc, #364]	@ (800479c <UART_SetConfig+0x2cc>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004634:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004638:	2b30      	cmp	r3, #48	@ 0x30
 800463a:	d016      	beq.n	800466a <UART_SetConfig+0x19a>
 800463c:	2b30      	cmp	r3, #48	@ 0x30
 800463e:	d818      	bhi.n	8004672 <UART_SetConfig+0x1a2>
 8004640:	2b20      	cmp	r3, #32
 8004642:	d00a      	beq.n	800465a <UART_SetConfig+0x18a>
 8004644:	2b20      	cmp	r3, #32
 8004646:	d814      	bhi.n	8004672 <UART_SetConfig+0x1a2>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <UART_SetConfig+0x182>
 800464c:	2b10      	cmp	r3, #16
 800464e:	d008      	beq.n	8004662 <UART_SetConfig+0x192>
 8004650:	e00f      	b.n	8004672 <UART_SetConfig+0x1a2>
 8004652:	2300      	movs	r3, #0
 8004654:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004658:	e0ad      	b.n	80047b6 <UART_SetConfig+0x2e6>
 800465a:	2302      	movs	r3, #2
 800465c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004660:	e0a9      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004662:	2304      	movs	r3, #4
 8004664:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004668:	e0a5      	b.n	80047b6 <UART_SetConfig+0x2e6>
 800466a:	2308      	movs	r3, #8
 800466c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004670:	e0a1      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004672:	2310      	movs	r3, #16
 8004674:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004678:	e09d      	b.n	80047b6 <UART_SetConfig+0x2e6>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a4a      	ldr	r2, [pc, #296]	@ (80047a8 <UART_SetConfig+0x2d8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d125      	bne.n	80046d0 <UART_SetConfig+0x200>
 8004684:	4b45      	ldr	r3, [pc, #276]	@ (800479c <UART_SetConfig+0x2cc>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800468e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004690:	d016      	beq.n	80046c0 <UART_SetConfig+0x1f0>
 8004692:	2bc0      	cmp	r3, #192	@ 0xc0
 8004694:	d818      	bhi.n	80046c8 <UART_SetConfig+0x1f8>
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d00a      	beq.n	80046b0 <UART_SetConfig+0x1e0>
 800469a:	2b80      	cmp	r3, #128	@ 0x80
 800469c:	d814      	bhi.n	80046c8 <UART_SetConfig+0x1f8>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <UART_SetConfig+0x1d8>
 80046a2:	2b40      	cmp	r3, #64	@ 0x40
 80046a4:	d008      	beq.n	80046b8 <UART_SetConfig+0x1e8>
 80046a6:	e00f      	b.n	80046c8 <UART_SetConfig+0x1f8>
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ae:	e082      	b.n	80047b6 <UART_SetConfig+0x2e6>
 80046b0:	2302      	movs	r3, #2
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b6:	e07e      	b.n	80047b6 <UART_SetConfig+0x2e6>
 80046b8:	2304      	movs	r3, #4
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046be:	e07a      	b.n	80047b6 <UART_SetConfig+0x2e6>
 80046c0:	2308      	movs	r3, #8
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c6:	e076      	b.n	80047b6 <UART_SetConfig+0x2e6>
 80046c8:	2310      	movs	r3, #16
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ce:	e072      	b.n	80047b6 <UART_SetConfig+0x2e6>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a35      	ldr	r2, [pc, #212]	@ (80047ac <UART_SetConfig+0x2dc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d12a      	bne.n	8004730 <UART_SetConfig+0x260>
 80046da:	4b30      	ldr	r3, [pc, #192]	@ (800479c <UART_SetConfig+0x2cc>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046e8:	d01a      	beq.n	8004720 <UART_SetConfig+0x250>
 80046ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ee:	d81b      	bhi.n	8004728 <UART_SetConfig+0x258>
 80046f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f4:	d00c      	beq.n	8004710 <UART_SetConfig+0x240>
 80046f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046fa:	d815      	bhi.n	8004728 <UART_SetConfig+0x258>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <UART_SetConfig+0x238>
 8004700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004704:	d008      	beq.n	8004718 <UART_SetConfig+0x248>
 8004706:	e00f      	b.n	8004728 <UART_SetConfig+0x258>
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470e:	e052      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004710:	2302      	movs	r3, #2
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004716:	e04e      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004718:	2304      	movs	r3, #4
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e04a      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004720:	2308      	movs	r3, #8
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004726:	e046      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004728:	2310      	movs	r3, #16
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472e:	e042      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a17      	ldr	r2, [pc, #92]	@ (8004794 <UART_SetConfig+0x2c4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d13a      	bne.n	80047b0 <UART_SetConfig+0x2e0>
 800473a:	4b18      	ldr	r3, [pc, #96]	@ (800479c <UART_SetConfig+0x2cc>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004740:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004744:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004748:	d01a      	beq.n	8004780 <UART_SetConfig+0x2b0>
 800474a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800474e:	d81b      	bhi.n	8004788 <UART_SetConfig+0x2b8>
 8004750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004754:	d00c      	beq.n	8004770 <UART_SetConfig+0x2a0>
 8004756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800475a:	d815      	bhi.n	8004788 <UART_SetConfig+0x2b8>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <UART_SetConfig+0x298>
 8004760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004764:	d008      	beq.n	8004778 <UART_SetConfig+0x2a8>
 8004766:	e00f      	b.n	8004788 <UART_SetConfig+0x2b8>
 8004768:	2300      	movs	r3, #0
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476e:	e022      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004770:	2302      	movs	r3, #2
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004776:	e01e      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004778:	2304      	movs	r3, #4
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477e:	e01a      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004780:	2308      	movs	r3, #8
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004786:	e016      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004788:	2310      	movs	r3, #16
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478e:	e012      	b.n	80047b6 <UART_SetConfig+0x2e6>
 8004790:	efff69f3 	.word	0xefff69f3
 8004794:	40008000 	.word	0x40008000
 8004798:	40013800 	.word	0x40013800
 800479c:	40021000 	.word	0x40021000
 80047a0:	40004400 	.word	0x40004400
 80047a4:	40004800 	.word	0x40004800
 80047a8:	40004c00 	.word	0x40004c00
 80047ac:	40005000 	.word	0x40005000
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a9f      	ldr	r2, [pc, #636]	@ (8004a38 <UART_SetConfig+0x568>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d17a      	bne.n	80048b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d824      	bhi.n	8004812 <UART_SetConfig+0x342>
 80047c8:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <UART_SetConfig+0x300>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	08004813 	.word	0x08004813
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	08004813 	.word	0x08004813
 80047e0:	08004803 	.word	0x08004803
 80047e4:	08004813 	.word	0x08004813
 80047e8:	08004813 	.word	0x08004813
 80047ec:	08004813 	.word	0x08004813
 80047f0:	0800480b 	.word	0x0800480b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fd fdfa 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 80047f8:	61f8      	str	r0, [r7, #28]
        break;
 80047fa:	e010      	b.n	800481e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047fc:	4b8f      	ldr	r3, [pc, #572]	@ (8004a3c <UART_SetConfig+0x56c>)
 80047fe:	61fb      	str	r3, [r7, #28]
        break;
 8004800:	e00d      	b.n	800481e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004802:	f7fd fd5b 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8004806:	61f8      	str	r0, [r7, #28]
        break;
 8004808:	e009      	b.n	800481e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800480e:	61fb      	str	r3, [r7, #28]
        break;
 8004810:	e005      	b.n	800481e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800481c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80fb 	beq.w	8004a1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4413      	add	r3, r2
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	429a      	cmp	r2, r3
 8004834:	d305      	bcc.n	8004842 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	429a      	cmp	r2, r3
 8004840:	d903      	bls.n	800484a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004848:	e0e8      	b.n	8004a1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2200      	movs	r2, #0
 800484e:	461c      	mov	r4, r3
 8004850:	4615      	mov	r5, r2
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	022b      	lsls	r3, r5, #8
 800485c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004860:	0222      	lsls	r2, r4, #8
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	6849      	ldr	r1, [r1, #4]
 8004866:	0849      	lsrs	r1, r1, #1
 8004868:	2000      	movs	r0, #0
 800486a:	4688      	mov	r8, r1
 800486c:	4681      	mov	r9, r0
 800486e:	eb12 0a08 	adds.w	sl, r2, r8
 8004872:	eb43 0b09 	adc.w	fp, r3, r9
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004884:	4650      	mov	r0, sl
 8004886:	4659      	mov	r1, fp
 8004888:	f7fb fcf2 	bl	8000270 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4613      	mov	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489a:	d308      	bcc.n	80048ae <UART_SetConfig+0x3de>
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048a2:	d204      	bcs.n	80048ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	60da      	str	r2, [r3, #12]
 80048ac:	e0b6      	b.n	8004a1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048b4:	e0b2      	b.n	8004a1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048be:	d15e      	bne.n	800497e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d828      	bhi.n	800491a <UART_SetConfig+0x44a>
 80048c8:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <UART_SetConfig+0x400>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	08004905 	.word	0x08004905
 80048dc:	0800491b 	.word	0x0800491b
 80048e0:	0800490b 	.word	0x0800490b
 80048e4:	0800491b 	.word	0x0800491b
 80048e8:	0800491b 	.word	0x0800491b
 80048ec:	0800491b 	.word	0x0800491b
 80048f0:	08004913 	.word	0x08004913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f4:	f7fd fd7a 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 80048f8:	61f8      	str	r0, [r7, #28]
        break;
 80048fa:	e014      	b.n	8004926 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7fd fd8c 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8004900:	61f8      	str	r0, [r7, #28]
        break;
 8004902:	e010      	b.n	8004926 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004904:	4b4d      	ldr	r3, [pc, #308]	@ (8004a3c <UART_SetConfig+0x56c>)
 8004906:	61fb      	str	r3, [r7, #28]
        break;
 8004908:	e00d      	b.n	8004926 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490a:	f7fd fcd7 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800490e:	61f8      	str	r0, [r7, #28]
        break;
 8004910:	e009      	b.n	8004926 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004916:	61fb      	str	r3, [r7, #28]
        break;
 8004918:	e005      	b.n	8004926 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d077      	beq.n	8004a1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005a      	lsls	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	441a      	add	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b0f      	cmp	r3, #15
 8004946:	d916      	bls.n	8004976 <UART_SetConfig+0x4a6>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494e:	d212      	bcs.n	8004976 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f023 030f 	bic.w	r3, r3, #15
 8004958:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	b29b      	uxth	r3, r3
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	b29a      	uxth	r2, r3
 8004966:	8afb      	ldrh	r3, [r7, #22]
 8004968:	4313      	orrs	r3, r2
 800496a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	8afa      	ldrh	r2, [r7, #22]
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	e052      	b.n	8004a1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800497c:	e04e      	b.n	8004a1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800497e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004982:	2b08      	cmp	r3, #8
 8004984:	d827      	bhi.n	80049d6 <UART_SetConfig+0x506>
 8004986:	a201      	add	r2, pc, #4	@ (adr r2, 800498c <UART_SetConfig+0x4bc>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b9 	.word	0x080049b9
 8004994:	080049c1 	.word	0x080049c1
 8004998:	080049d7 	.word	0x080049d7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049d7 	.word	0x080049d7
 80049a4:	080049d7 	.word	0x080049d7
 80049a8:	080049d7 	.word	0x080049d7
 80049ac:	080049cf 	.word	0x080049cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7fd fd1c 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 80049b4:	61f8      	str	r0, [r7, #28]
        break;
 80049b6:	e014      	b.n	80049e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7fd fd2e 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 80049bc:	61f8      	str	r0, [r7, #28]
        break;
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a3c <UART_SetConfig+0x56c>)
 80049c2:	61fb      	str	r3, [r7, #28]
        break;
 80049c4:	e00d      	b.n	80049e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c6:	f7fd fc79 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 80049ca:	61f8      	str	r0, [r7, #28]
        break;
 80049cc:	e009      	b.n	80049e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d2:	61fb      	str	r3, [r7, #28]
        break;
 80049d4:	e005      	b.n	80049e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049e0:	bf00      	nop
    }

    if (pclk != 0U)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d019      	beq.n	8004a1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	085a      	lsrs	r2, r3, #1
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	d909      	bls.n	8004a16 <UART_SetConfig+0x546>
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a08:	d205      	bcs.n	8004a16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60da      	str	r2, [r3, #12]
 8004a14:	e002      	b.n	8004a1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a28:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	@ 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a36:	bf00      	nop
 8004a38:	40008000 	.word	0x40008000
 8004a3c:	00f42400 	.word	0x00f42400

08004a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b3e:	d10a      	bne.n	8004b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b098      	sub	sp, #96	@ 0x60
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b94:	f7fc fb4e 	bl	8001234 <HAL_GetTick>
 8004b98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d12e      	bne.n	8004c06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f88c 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d021      	beq.n	8004c06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004be2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e6      	bne.n	8004bc2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e062      	b.n	8004ccc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d149      	bne.n	8004ca8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f856 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d03c      	beq.n	8004ca8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e6      	bne.n	8004c2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c80:	61fa      	str	r2, [r7, #28]
 8004c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	69b9      	ldr	r1, [r7, #24]
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e5      	bne.n	8004c60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e011      	b.n	8004ccc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3758      	adds	r7, #88	@ 0x58
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce4:	e049      	b.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cec:	d045      	beq.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cee:	f7fc faa1 	bl	8001234 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e048      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d031      	beq.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d110      	bne.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f838 	bl	8004da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2208      	movs	r2, #8
 8004d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e029      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d54:	d111      	bne.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f81e 	bl	8004da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e00f      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d0a6      	beq.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b095      	sub	sp, #84	@ 0x54
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e6      	bne.n	8004daa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3308      	adds	r3, #8
 8004de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f023 0301 	bic.w	r3, r3, #1
 8004df2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e5      	bne.n	8004ddc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d118      	bne.n	8004e4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f023 0310 	bic.w	r3, r3, #16
 8004e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6979      	ldr	r1, [r7, #20]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	613b      	str	r3, [r7, #16]
   return(result);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e5e:	bf00      	nop
 8004e60:	3754      	adds	r7, #84	@ 0x54
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <std>:
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	b510      	push	{r4, lr}
 8004e70:	4604      	mov	r4, r0
 8004e72:	e9c0 3300 	strd	r3, r3, [r0]
 8004e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e7a:	6083      	str	r3, [r0, #8]
 8004e7c:	8181      	strh	r1, [r0, #12]
 8004e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e80:	81c2      	strh	r2, [r0, #14]
 8004e82:	6183      	str	r3, [r0, #24]
 8004e84:	4619      	mov	r1, r3
 8004e86:	2208      	movs	r2, #8
 8004e88:	305c      	adds	r0, #92	@ 0x5c
 8004e8a:	f000 f8c3 	bl	8005014 <memset>
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <std+0x58>)
 8004e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <std+0x5c>)
 8004e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ecc <std+0x60>)
 8004e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <std+0x64>)
 8004e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <std+0x68>)
 8004ea0:	6224      	str	r4, [r4, #32]
 8004ea2:	429c      	cmp	r4, r3
 8004ea4:	d006      	beq.n	8004eb4 <std+0x48>
 8004ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004eaa:	4294      	cmp	r4, r2
 8004eac:	d002      	beq.n	8004eb4 <std+0x48>
 8004eae:	33d0      	adds	r3, #208	@ 0xd0
 8004eb0:	429c      	cmp	r4, r3
 8004eb2:	d105      	bne.n	8004ec0 <std+0x54>
 8004eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ebc:	f000 b8dc 	b.w	8005078 <__retarget_lock_init_recursive>
 8004ec0:	bd10      	pop	{r4, pc}
 8004ec2:	bf00      	nop
 8004ec4:	080058d1 	.word	0x080058d1
 8004ec8:	080058f3 	.word	0x080058f3
 8004ecc:	0800592b 	.word	0x0800592b
 8004ed0:	0800594f 	.word	0x0800594f
 8004ed4:	2000024c 	.word	0x2000024c

08004ed8 <stdio_exit_handler>:
 8004ed8:	4a02      	ldr	r2, [pc, #8]	@ (8004ee4 <stdio_exit_handler+0xc>)
 8004eda:	4903      	ldr	r1, [pc, #12]	@ (8004ee8 <stdio_exit_handler+0x10>)
 8004edc:	4803      	ldr	r0, [pc, #12]	@ (8004eec <stdio_exit_handler+0x14>)
 8004ede:	f000 b869 	b.w	8004fb4 <_fwalk_sglue>
 8004ee2:	bf00      	nop
 8004ee4:	2000000c 	.word	0x2000000c
 8004ee8:	08005869 	.word	0x08005869
 8004eec:	2000001c 	.word	0x2000001c

08004ef0 <cleanup_stdio>:
 8004ef0:	6841      	ldr	r1, [r0, #4]
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <cleanup_stdio+0x34>)
 8004ef4:	4299      	cmp	r1, r3
 8004ef6:	b510      	push	{r4, lr}
 8004ef8:	4604      	mov	r4, r0
 8004efa:	d001      	beq.n	8004f00 <cleanup_stdio+0x10>
 8004efc:	f000 fcb4 	bl	8005868 <_fflush_r>
 8004f00:	68a1      	ldr	r1, [r4, #8]
 8004f02:	4b09      	ldr	r3, [pc, #36]	@ (8004f28 <cleanup_stdio+0x38>)
 8004f04:	4299      	cmp	r1, r3
 8004f06:	d002      	beq.n	8004f0e <cleanup_stdio+0x1e>
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 fcad 	bl	8005868 <_fflush_r>
 8004f0e:	68e1      	ldr	r1, [r4, #12]
 8004f10:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <cleanup_stdio+0x3c>)
 8004f12:	4299      	cmp	r1, r3
 8004f14:	d004      	beq.n	8004f20 <cleanup_stdio+0x30>
 8004f16:	4620      	mov	r0, r4
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1c:	f000 bca4 	b.w	8005868 <_fflush_r>
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	bf00      	nop
 8004f24:	2000024c 	.word	0x2000024c
 8004f28:	200002b4 	.word	0x200002b4
 8004f2c:	2000031c 	.word	0x2000031c

08004f30 <global_stdio_init.part.0>:
 8004f30:	b510      	push	{r4, lr}
 8004f32:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <global_stdio_init.part.0+0x30>)
 8004f34:	4c0b      	ldr	r4, [pc, #44]	@ (8004f64 <global_stdio_init.part.0+0x34>)
 8004f36:	4a0c      	ldr	r2, [pc, #48]	@ (8004f68 <global_stdio_init.part.0+0x38>)
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2104      	movs	r1, #4
 8004f40:	f7ff ff94 	bl	8004e6c <std>
 8004f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f48:	2201      	movs	r2, #1
 8004f4a:	2109      	movs	r1, #9
 8004f4c:	f7ff ff8e 	bl	8004e6c <std>
 8004f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f54:	2202      	movs	r2, #2
 8004f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f5a:	2112      	movs	r1, #18
 8004f5c:	f7ff bf86 	b.w	8004e6c <std>
 8004f60:	20000384 	.word	0x20000384
 8004f64:	2000024c 	.word	0x2000024c
 8004f68:	08004ed9 	.word	0x08004ed9

08004f6c <__sfp_lock_acquire>:
 8004f6c:	4801      	ldr	r0, [pc, #4]	@ (8004f74 <__sfp_lock_acquire+0x8>)
 8004f6e:	f000 b884 	b.w	800507a <__retarget_lock_acquire_recursive>
 8004f72:	bf00      	nop
 8004f74:	20000389 	.word	0x20000389

08004f78 <__sfp_lock_release>:
 8004f78:	4801      	ldr	r0, [pc, #4]	@ (8004f80 <__sfp_lock_release+0x8>)
 8004f7a:	f000 b87f 	b.w	800507c <__retarget_lock_release_recursive>
 8004f7e:	bf00      	nop
 8004f80:	20000389 	.word	0x20000389

08004f84 <__sinit>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	4604      	mov	r4, r0
 8004f88:	f7ff fff0 	bl	8004f6c <__sfp_lock_acquire>
 8004f8c:	6a23      	ldr	r3, [r4, #32]
 8004f8e:	b11b      	cbz	r3, 8004f98 <__sinit+0x14>
 8004f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f94:	f7ff bff0 	b.w	8004f78 <__sfp_lock_release>
 8004f98:	4b04      	ldr	r3, [pc, #16]	@ (8004fac <__sinit+0x28>)
 8004f9a:	6223      	str	r3, [r4, #32]
 8004f9c:	4b04      	ldr	r3, [pc, #16]	@ (8004fb0 <__sinit+0x2c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f5      	bne.n	8004f90 <__sinit+0xc>
 8004fa4:	f7ff ffc4 	bl	8004f30 <global_stdio_init.part.0>
 8004fa8:	e7f2      	b.n	8004f90 <__sinit+0xc>
 8004faa:	bf00      	nop
 8004fac:	08004ef1 	.word	0x08004ef1
 8004fb0:	20000384 	.word	0x20000384

08004fb4 <_fwalk_sglue>:
 8004fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb8:	4607      	mov	r7, r0
 8004fba:	4688      	mov	r8, r1
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8004fc8:	d505      	bpl.n	8004fd6 <_fwalk_sglue+0x22>
 8004fca:	6824      	ldr	r4, [r4, #0]
 8004fcc:	2c00      	cmp	r4, #0
 8004fce:	d1f7      	bne.n	8004fc0 <_fwalk_sglue+0xc>
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd6:	89ab      	ldrh	r3, [r5, #12]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d907      	bls.n	8004fec <_fwalk_sglue+0x38>
 8004fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	d003      	beq.n	8004fec <_fwalk_sglue+0x38>
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	47c0      	blx	r8
 8004fea:	4306      	orrs	r6, r0
 8004fec:	3568      	adds	r5, #104	@ 0x68
 8004fee:	e7e9      	b.n	8004fc4 <_fwalk_sglue+0x10>

08004ff0 <iprintf>:
 8004ff0:	b40f      	push	{r0, r1, r2, r3}
 8004ff2:	b507      	push	{r0, r1, r2, lr}
 8004ff4:	4906      	ldr	r1, [pc, #24]	@ (8005010 <iprintf+0x20>)
 8004ff6:	ab04      	add	r3, sp, #16
 8004ff8:	6808      	ldr	r0, [r1, #0]
 8004ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ffe:	6881      	ldr	r1, [r0, #8]
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	f000 f865 	bl	80050d0 <_vfiprintf_r>
 8005006:	b003      	add	sp, #12
 8005008:	f85d eb04 	ldr.w	lr, [sp], #4
 800500c:	b004      	add	sp, #16
 800500e:	4770      	bx	lr
 8005010:	20000018 	.word	0x20000018

08005014 <memset>:
 8005014:	4402      	add	r2, r0
 8005016:	4603      	mov	r3, r0
 8005018:	4293      	cmp	r3, r2
 800501a:	d100      	bne.n	800501e <memset+0xa>
 800501c:	4770      	bx	lr
 800501e:	f803 1b01 	strb.w	r1, [r3], #1
 8005022:	e7f9      	b.n	8005018 <memset+0x4>

08005024 <__errno>:
 8005024:	4b01      	ldr	r3, [pc, #4]	@ (800502c <__errno+0x8>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20000018 	.word	0x20000018

08005030 <__libc_init_array>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	4d0d      	ldr	r5, [pc, #52]	@ (8005068 <__libc_init_array+0x38>)
 8005034:	4c0d      	ldr	r4, [pc, #52]	@ (800506c <__libc_init_array+0x3c>)
 8005036:	1b64      	subs	r4, r4, r5
 8005038:	10a4      	asrs	r4, r4, #2
 800503a:	2600      	movs	r6, #0
 800503c:	42a6      	cmp	r6, r4
 800503e:	d109      	bne.n	8005054 <__libc_init_array+0x24>
 8005040:	4d0b      	ldr	r5, [pc, #44]	@ (8005070 <__libc_init_array+0x40>)
 8005042:	4c0c      	ldr	r4, [pc, #48]	@ (8005074 <__libc_init_array+0x44>)
 8005044:	f000 fe40 	bl	8005cc8 <_init>
 8005048:	1b64      	subs	r4, r4, r5
 800504a:	10a4      	asrs	r4, r4, #2
 800504c:	2600      	movs	r6, #0
 800504e:	42a6      	cmp	r6, r4
 8005050:	d105      	bne.n	800505e <__libc_init_array+0x2e>
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	f855 3b04 	ldr.w	r3, [r5], #4
 8005058:	4798      	blx	r3
 800505a:	3601      	adds	r6, #1
 800505c:	e7ee      	b.n	800503c <__libc_init_array+0xc>
 800505e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005062:	4798      	blx	r3
 8005064:	3601      	adds	r6, #1
 8005066:	e7f2      	b.n	800504e <__libc_init_array+0x1e>
 8005068:	08005e14 	.word	0x08005e14
 800506c:	08005e14 	.word	0x08005e14
 8005070:	08005e14 	.word	0x08005e14
 8005074:	08005e18 	.word	0x08005e18

08005078 <__retarget_lock_init_recursive>:
 8005078:	4770      	bx	lr

0800507a <__retarget_lock_acquire_recursive>:
 800507a:	4770      	bx	lr

0800507c <__retarget_lock_release_recursive>:
 800507c:	4770      	bx	lr

0800507e <__sfputc_r>:
 800507e:	6893      	ldr	r3, [r2, #8]
 8005080:	3b01      	subs	r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	b410      	push	{r4}
 8005086:	6093      	str	r3, [r2, #8]
 8005088:	da08      	bge.n	800509c <__sfputc_r+0x1e>
 800508a:	6994      	ldr	r4, [r2, #24]
 800508c:	42a3      	cmp	r3, r4
 800508e:	db01      	blt.n	8005094 <__sfputc_r+0x16>
 8005090:	290a      	cmp	r1, #10
 8005092:	d103      	bne.n	800509c <__sfputc_r+0x1e>
 8005094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005098:	f000 bc5d 	b.w	8005956 <__swbuf_r>
 800509c:	6813      	ldr	r3, [r2, #0]
 800509e:	1c58      	adds	r0, r3, #1
 80050a0:	6010      	str	r0, [r2, #0]
 80050a2:	7019      	strb	r1, [r3, #0]
 80050a4:	4608      	mov	r0, r1
 80050a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <__sfputs_r>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	4606      	mov	r6, r0
 80050b0:	460f      	mov	r7, r1
 80050b2:	4614      	mov	r4, r2
 80050b4:	18d5      	adds	r5, r2, r3
 80050b6:	42ac      	cmp	r4, r5
 80050b8:	d101      	bne.n	80050be <__sfputs_r+0x12>
 80050ba:	2000      	movs	r0, #0
 80050bc:	e007      	b.n	80050ce <__sfputs_r+0x22>
 80050be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c2:	463a      	mov	r2, r7
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7ff ffda 	bl	800507e <__sfputc_r>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	d1f3      	bne.n	80050b6 <__sfputs_r+0xa>
 80050ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050d0 <_vfiprintf_r>:
 80050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d4:	460d      	mov	r5, r1
 80050d6:	b09d      	sub	sp, #116	@ 0x74
 80050d8:	4614      	mov	r4, r2
 80050da:	4698      	mov	r8, r3
 80050dc:	4606      	mov	r6, r0
 80050de:	b118      	cbz	r0, 80050e8 <_vfiprintf_r+0x18>
 80050e0:	6a03      	ldr	r3, [r0, #32]
 80050e2:	b90b      	cbnz	r3, 80050e8 <_vfiprintf_r+0x18>
 80050e4:	f7ff ff4e 	bl	8004f84 <__sinit>
 80050e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050ea:	07d9      	lsls	r1, r3, #31
 80050ec:	d405      	bmi.n	80050fa <_vfiprintf_r+0x2a>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	059a      	lsls	r2, r3, #22
 80050f2:	d402      	bmi.n	80050fa <_vfiprintf_r+0x2a>
 80050f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050f6:	f7ff ffc0 	bl	800507a <__retarget_lock_acquire_recursive>
 80050fa:	89ab      	ldrh	r3, [r5, #12]
 80050fc:	071b      	lsls	r3, r3, #28
 80050fe:	d501      	bpl.n	8005104 <_vfiprintf_r+0x34>
 8005100:	692b      	ldr	r3, [r5, #16]
 8005102:	b99b      	cbnz	r3, 800512c <_vfiprintf_r+0x5c>
 8005104:	4629      	mov	r1, r5
 8005106:	4630      	mov	r0, r6
 8005108:	f000 fc64 	bl	80059d4 <__swsetup_r>
 800510c:	b170      	cbz	r0, 800512c <_vfiprintf_r+0x5c>
 800510e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005110:	07dc      	lsls	r4, r3, #31
 8005112:	d504      	bpl.n	800511e <_vfiprintf_r+0x4e>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005118:	b01d      	add	sp, #116	@ 0x74
 800511a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511e:	89ab      	ldrh	r3, [r5, #12]
 8005120:	0598      	lsls	r0, r3, #22
 8005122:	d4f7      	bmi.n	8005114 <_vfiprintf_r+0x44>
 8005124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005126:	f7ff ffa9 	bl	800507c <__retarget_lock_release_recursive>
 800512a:	e7f3      	b.n	8005114 <_vfiprintf_r+0x44>
 800512c:	2300      	movs	r3, #0
 800512e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005130:	2320      	movs	r3, #32
 8005132:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005136:	f8cd 800c 	str.w	r8, [sp, #12]
 800513a:	2330      	movs	r3, #48	@ 0x30
 800513c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80052ec <_vfiprintf_r+0x21c>
 8005140:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005144:	f04f 0901 	mov.w	r9, #1
 8005148:	4623      	mov	r3, r4
 800514a:	469a      	mov	sl, r3
 800514c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005150:	b10a      	cbz	r2, 8005156 <_vfiprintf_r+0x86>
 8005152:	2a25      	cmp	r2, #37	@ 0x25
 8005154:	d1f9      	bne.n	800514a <_vfiprintf_r+0x7a>
 8005156:	ebba 0b04 	subs.w	fp, sl, r4
 800515a:	d00b      	beq.n	8005174 <_vfiprintf_r+0xa4>
 800515c:	465b      	mov	r3, fp
 800515e:	4622      	mov	r2, r4
 8005160:	4629      	mov	r1, r5
 8005162:	4630      	mov	r0, r6
 8005164:	f7ff ffa2 	bl	80050ac <__sfputs_r>
 8005168:	3001      	adds	r0, #1
 800516a:	f000 80a7 	beq.w	80052bc <_vfiprintf_r+0x1ec>
 800516e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005170:	445a      	add	r2, fp
 8005172:	9209      	str	r2, [sp, #36]	@ 0x24
 8005174:	f89a 3000 	ldrb.w	r3, [sl]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 809f 	beq.w	80052bc <_vfiprintf_r+0x1ec>
 800517e:	2300      	movs	r3, #0
 8005180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005188:	f10a 0a01 	add.w	sl, sl, #1
 800518c:	9304      	str	r3, [sp, #16]
 800518e:	9307      	str	r3, [sp, #28]
 8005190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005194:	931a      	str	r3, [sp, #104]	@ 0x68
 8005196:	4654      	mov	r4, sl
 8005198:	2205      	movs	r2, #5
 800519a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519e:	4853      	ldr	r0, [pc, #332]	@ (80052ec <_vfiprintf_r+0x21c>)
 80051a0:	f7fb f816 	bl	80001d0 <memchr>
 80051a4:	9a04      	ldr	r2, [sp, #16]
 80051a6:	b9d8      	cbnz	r0, 80051e0 <_vfiprintf_r+0x110>
 80051a8:	06d1      	lsls	r1, r2, #27
 80051aa:	bf44      	itt	mi
 80051ac:	2320      	movmi	r3, #32
 80051ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051b2:	0713      	lsls	r3, r2, #28
 80051b4:	bf44      	itt	mi
 80051b6:	232b      	movmi	r3, #43	@ 0x2b
 80051b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051bc:	f89a 3000 	ldrb.w	r3, [sl]
 80051c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051c2:	d015      	beq.n	80051f0 <_vfiprintf_r+0x120>
 80051c4:	9a07      	ldr	r2, [sp, #28]
 80051c6:	4654      	mov	r4, sl
 80051c8:	2000      	movs	r0, #0
 80051ca:	f04f 0c0a 	mov.w	ip, #10
 80051ce:	4621      	mov	r1, r4
 80051d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d4:	3b30      	subs	r3, #48	@ 0x30
 80051d6:	2b09      	cmp	r3, #9
 80051d8:	d94b      	bls.n	8005272 <_vfiprintf_r+0x1a2>
 80051da:	b1b0      	cbz	r0, 800520a <_vfiprintf_r+0x13a>
 80051dc:	9207      	str	r2, [sp, #28]
 80051de:	e014      	b.n	800520a <_vfiprintf_r+0x13a>
 80051e0:	eba0 0308 	sub.w	r3, r0, r8
 80051e4:	fa09 f303 	lsl.w	r3, r9, r3
 80051e8:	4313      	orrs	r3, r2
 80051ea:	9304      	str	r3, [sp, #16]
 80051ec:	46a2      	mov	sl, r4
 80051ee:	e7d2      	b.n	8005196 <_vfiprintf_r+0xc6>
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	1d19      	adds	r1, r3, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	9103      	str	r1, [sp, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bfbb      	ittet	lt
 80051fc:	425b      	neglt	r3, r3
 80051fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005202:	9307      	strge	r3, [sp, #28]
 8005204:	9307      	strlt	r3, [sp, #28]
 8005206:	bfb8      	it	lt
 8005208:	9204      	strlt	r2, [sp, #16]
 800520a:	7823      	ldrb	r3, [r4, #0]
 800520c:	2b2e      	cmp	r3, #46	@ 0x2e
 800520e:	d10a      	bne.n	8005226 <_vfiprintf_r+0x156>
 8005210:	7863      	ldrb	r3, [r4, #1]
 8005212:	2b2a      	cmp	r3, #42	@ 0x2a
 8005214:	d132      	bne.n	800527c <_vfiprintf_r+0x1ac>
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	1d1a      	adds	r2, r3, #4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	9203      	str	r2, [sp, #12]
 800521e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005222:	3402      	adds	r4, #2
 8005224:	9305      	str	r3, [sp, #20]
 8005226:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80052fc <_vfiprintf_r+0x22c>
 800522a:	7821      	ldrb	r1, [r4, #0]
 800522c:	2203      	movs	r2, #3
 800522e:	4650      	mov	r0, sl
 8005230:	f7fa ffce 	bl	80001d0 <memchr>
 8005234:	b138      	cbz	r0, 8005246 <_vfiprintf_r+0x176>
 8005236:	9b04      	ldr	r3, [sp, #16]
 8005238:	eba0 000a 	sub.w	r0, r0, sl
 800523c:	2240      	movs	r2, #64	@ 0x40
 800523e:	4082      	lsls	r2, r0
 8005240:	4313      	orrs	r3, r2
 8005242:	3401      	adds	r4, #1
 8005244:	9304      	str	r3, [sp, #16]
 8005246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524a:	4829      	ldr	r0, [pc, #164]	@ (80052f0 <_vfiprintf_r+0x220>)
 800524c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005250:	2206      	movs	r2, #6
 8005252:	f7fa ffbd 	bl	80001d0 <memchr>
 8005256:	2800      	cmp	r0, #0
 8005258:	d03f      	beq.n	80052da <_vfiprintf_r+0x20a>
 800525a:	4b26      	ldr	r3, [pc, #152]	@ (80052f4 <_vfiprintf_r+0x224>)
 800525c:	bb1b      	cbnz	r3, 80052a6 <_vfiprintf_r+0x1d6>
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	3307      	adds	r3, #7
 8005262:	f023 0307 	bic.w	r3, r3, #7
 8005266:	3308      	adds	r3, #8
 8005268:	9303      	str	r3, [sp, #12]
 800526a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800526c:	443b      	add	r3, r7
 800526e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005270:	e76a      	b.n	8005148 <_vfiprintf_r+0x78>
 8005272:	fb0c 3202 	mla	r2, ip, r2, r3
 8005276:	460c      	mov	r4, r1
 8005278:	2001      	movs	r0, #1
 800527a:	e7a8      	b.n	80051ce <_vfiprintf_r+0xfe>
 800527c:	2300      	movs	r3, #0
 800527e:	3401      	adds	r4, #1
 8005280:	9305      	str	r3, [sp, #20]
 8005282:	4619      	mov	r1, r3
 8005284:	f04f 0c0a 	mov.w	ip, #10
 8005288:	4620      	mov	r0, r4
 800528a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800528e:	3a30      	subs	r2, #48	@ 0x30
 8005290:	2a09      	cmp	r2, #9
 8005292:	d903      	bls.n	800529c <_vfiprintf_r+0x1cc>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0c6      	beq.n	8005226 <_vfiprintf_r+0x156>
 8005298:	9105      	str	r1, [sp, #20]
 800529a:	e7c4      	b.n	8005226 <_vfiprintf_r+0x156>
 800529c:	fb0c 2101 	mla	r1, ip, r1, r2
 80052a0:	4604      	mov	r4, r0
 80052a2:	2301      	movs	r3, #1
 80052a4:	e7f0      	b.n	8005288 <_vfiprintf_r+0x1b8>
 80052a6:	ab03      	add	r3, sp, #12
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	462a      	mov	r2, r5
 80052ac:	4b12      	ldr	r3, [pc, #72]	@ (80052f8 <_vfiprintf_r+0x228>)
 80052ae:	a904      	add	r1, sp, #16
 80052b0:	4630      	mov	r0, r6
 80052b2:	f3af 8000 	nop.w
 80052b6:	4607      	mov	r7, r0
 80052b8:	1c78      	adds	r0, r7, #1
 80052ba:	d1d6      	bne.n	800526a <_vfiprintf_r+0x19a>
 80052bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052be:	07d9      	lsls	r1, r3, #31
 80052c0:	d405      	bmi.n	80052ce <_vfiprintf_r+0x1fe>
 80052c2:	89ab      	ldrh	r3, [r5, #12]
 80052c4:	059a      	lsls	r2, r3, #22
 80052c6:	d402      	bmi.n	80052ce <_vfiprintf_r+0x1fe>
 80052c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ca:	f7ff fed7 	bl	800507c <__retarget_lock_release_recursive>
 80052ce:	89ab      	ldrh	r3, [r5, #12]
 80052d0:	065b      	lsls	r3, r3, #25
 80052d2:	f53f af1f 	bmi.w	8005114 <_vfiprintf_r+0x44>
 80052d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052d8:	e71e      	b.n	8005118 <_vfiprintf_r+0x48>
 80052da:	ab03      	add	r3, sp, #12
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	462a      	mov	r2, r5
 80052e0:	4b05      	ldr	r3, [pc, #20]	@ (80052f8 <_vfiprintf_r+0x228>)
 80052e2:	a904      	add	r1, sp, #16
 80052e4:	4630      	mov	r0, r6
 80052e6:	f000 f91b 	bl	8005520 <_printf_i>
 80052ea:	e7e4      	b.n	80052b6 <_vfiprintf_r+0x1e6>
 80052ec:	08005dd8 	.word	0x08005dd8
 80052f0:	08005de2 	.word	0x08005de2
 80052f4:	00000000 	.word	0x00000000
 80052f8:	080050ad 	.word	0x080050ad
 80052fc:	08005dde 	.word	0x08005dde

08005300 <sbrk_aligned>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4e0f      	ldr	r6, [pc, #60]	@ (8005340 <sbrk_aligned+0x40>)
 8005304:	460c      	mov	r4, r1
 8005306:	6831      	ldr	r1, [r6, #0]
 8005308:	4605      	mov	r5, r0
 800530a:	b911      	cbnz	r1, 8005312 <sbrk_aligned+0x12>
 800530c:	f000 fc70 	bl	8005bf0 <_sbrk_r>
 8005310:	6030      	str	r0, [r6, #0]
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f000 fc6b 	bl	8005bf0 <_sbrk_r>
 800531a:	1c43      	adds	r3, r0, #1
 800531c:	d103      	bne.n	8005326 <sbrk_aligned+0x26>
 800531e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005322:	4620      	mov	r0, r4
 8005324:	bd70      	pop	{r4, r5, r6, pc}
 8005326:	1cc4      	adds	r4, r0, #3
 8005328:	f024 0403 	bic.w	r4, r4, #3
 800532c:	42a0      	cmp	r0, r4
 800532e:	d0f8      	beq.n	8005322 <sbrk_aligned+0x22>
 8005330:	1a21      	subs	r1, r4, r0
 8005332:	4628      	mov	r0, r5
 8005334:	f000 fc5c 	bl	8005bf0 <_sbrk_r>
 8005338:	3001      	adds	r0, #1
 800533a:	d1f2      	bne.n	8005322 <sbrk_aligned+0x22>
 800533c:	e7ef      	b.n	800531e <sbrk_aligned+0x1e>
 800533e:	bf00      	nop
 8005340:	2000038c 	.word	0x2000038c

08005344 <_malloc_r>:
 8005344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005348:	1ccd      	adds	r5, r1, #3
 800534a:	f025 0503 	bic.w	r5, r5, #3
 800534e:	3508      	adds	r5, #8
 8005350:	2d0c      	cmp	r5, #12
 8005352:	bf38      	it	cc
 8005354:	250c      	movcc	r5, #12
 8005356:	2d00      	cmp	r5, #0
 8005358:	4606      	mov	r6, r0
 800535a:	db01      	blt.n	8005360 <_malloc_r+0x1c>
 800535c:	42a9      	cmp	r1, r5
 800535e:	d904      	bls.n	800536a <_malloc_r+0x26>
 8005360:	230c      	movs	r3, #12
 8005362:	6033      	str	r3, [r6, #0]
 8005364:	2000      	movs	r0, #0
 8005366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800536a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005440 <_malloc_r+0xfc>
 800536e:	f000 faa3 	bl	80058b8 <__malloc_lock>
 8005372:	f8d8 3000 	ldr.w	r3, [r8]
 8005376:	461c      	mov	r4, r3
 8005378:	bb44      	cbnz	r4, 80053cc <_malloc_r+0x88>
 800537a:	4629      	mov	r1, r5
 800537c:	4630      	mov	r0, r6
 800537e:	f7ff ffbf 	bl	8005300 <sbrk_aligned>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	4604      	mov	r4, r0
 8005386:	d158      	bne.n	800543a <_malloc_r+0xf6>
 8005388:	f8d8 4000 	ldr.w	r4, [r8]
 800538c:	4627      	mov	r7, r4
 800538e:	2f00      	cmp	r7, #0
 8005390:	d143      	bne.n	800541a <_malloc_r+0xd6>
 8005392:	2c00      	cmp	r4, #0
 8005394:	d04b      	beq.n	800542e <_malloc_r+0xea>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	4639      	mov	r1, r7
 800539a:	4630      	mov	r0, r6
 800539c:	eb04 0903 	add.w	r9, r4, r3
 80053a0:	f000 fc26 	bl	8005bf0 <_sbrk_r>
 80053a4:	4581      	cmp	r9, r0
 80053a6:	d142      	bne.n	800542e <_malloc_r+0xea>
 80053a8:	6821      	ldr	r1, [r4, #0]
 80053aa:	1a6d      	subs	r5, r5, r1
 80053ac:	4629      	mov	r1, r5
 80053ae:	4630      	mov	r0, r6
 80053b0:	f7ff ffa6 	bl	8005300 <sbrk_aligned>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d03a      	beq.n	800542e <_malloc_r+0xea>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	442b      	add	r3, r5
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	f8d8 3000 	ldr.w	r3, [r8]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	bb62      	cbnz	r2, 8005420 <_malloc_r+0xdc>
 80053c6:	f8c8 7000 	str.w	r7, [r8]
 80053ca:	e00f      	b.n	80053ec <_malloc_r+0xa8>
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	1b52      	subs	r2, r2, r5
 80053d0:	d420      	bmi.n	8005414 <_malloc_r+0xd0>
 80053d2:	2a0b      	cmp	r2, #11
 80053d4:	d917      	bls.n	8005406 <_malloc_r+0xc2>
 80053d6:	1961      	adds	r1, r4, r5
 80053d8:	42a3      	cmp	r3, r4
 80053da:	6025      	str	r5, [r4, #0]
 80053dc:	bf18      	it	ne
 80053de:	6059      	strne	r1, [r3, #4]
 80053e0:	6863      	ldr	r3, [r4, #4]
 80053e2:	bf08      	it	eq
 80053e4:	f8c8 1000 	streq.w	r1, [r8]
 80053e8:	5162      	str	r2, [r4, r5]
 80053ea:	604b      	str	r3, [r1, #4]
 80053ec:	4630      	mov	r0, r6
 80053ee:	f000 fa69 	bl	80058c4 <__malloc_unlock>
 80053f2:	f104 000b 	add.w	r0, r4, #11
 80053f6:	1d23      	adds	r3, r4, #4
 80053f8:	f020 0007 	bic.w	r0, r0, #7
 80053fc:	1ac2      	subs	r2, r0, r3
 80053fe:	bf1c      	itt	ne
 8005400:	1a1b      	subne	r3, r3, r0
 8005402:	50a3      	strne	r3, [r4, r2]
 8005404:	e7af      	b.n	8005366 <_malloc_r+0x22>
 8005406:	6862      	ldr	r2, [r4, #4]
 8005408:	42a3      	cmp	r3, r4
 800540a:	bf0c      	ite	eq
 800540c:	f8c8 2000 	streq.w	r2, [r8]
 8005410:	605a      	strne	r2, [r3, #4]
 8005412:	e7eb      	b.n	80053ec <_malloc_r+0xa8>
 8005414:	4623      	mov	r3, r4
 8005416:	6864      	ldr	r4, [r4, #4]
 8005418:	e7ae      	b.n	8005378 <_malloc_r+0x34>
 800541a:	463c      	mov	r4, r7
 800541c:	687f      	ldr	r7, [r7, #4]
 800541e:	e7b6      	b.n	800538e <_malloc_r+0x4a>
 8005420:	461a      	mov	r2, r3
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	42a3      	cmp	r3, r4
 8005426:	d1fb      	bne.n	8005420 <_malloc_r+0xdc>
 8005428:	2300      	movs	r3, #0
 800542a:	6053      	str	r3, [r2, #4]
 800542c:	e7de      	b.n	80053ec <_malloc_r+0xa8>
 800542e:	230c      	movs	r3, #12
 8005430:	6033      	str	r3, [r6, #0]
 8005432:	4630      	mov	r0, r6
 8005434:	f000 fa46 	bl	80058c4 <__malloc_unlock>
 8005438:	e794      	b.n	8005364 <_malloc_r+0x20>
 800543a:	6005      	str	r5, [r0, #0]
 800543c:	e7d6      	b.n	80053ec <_malloc_r+0xa8>
 800543e:	bf00      	nop
 8005440:	20000390 	.word	0x20000390

08005444 <_printf_common>:
 8005444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005448:	4616      	mov	r6, r2
 800544a:	4698      	mov	r8, r3
 800544c:	688a      	ldr	r2, [r1, #8]
 800544e:	690b      	ldr	r3, [r1, #16]
 8005450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005454:	4293      	cmp	r3, r2
 8005456:	bfb8      	it	lt
 8005458:	4613      	movlt	r3, r2
 800545a:	6033      	str	r3, [r6, #0]
 800545c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005460:	4607      	mov	r7, r0
 8005462:	460c      	mov	r4, r1
 8005464:	b10a      	cbz	r2, 800546a <_printf_common+0x26>
 8005466:	3301      	adds	r3, #1
 8005468:	6033      	str	r3, [r6, #0]
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	0699      	lsls	r1, r3, #26
 800546e:	bf42      	ittt	mi
 8005470:	6833      	ldrmi	r3, [r6, #0]
 8005472:	3302      	addmi	r3, #2
 8005474:	6033      	strmi	r3, [r6, #0]
 8005476:	6825      	ldr	r5, [r4, #0]
 8005478:	f015 0506 	ands.w	r5, r5, #6
 800547c:	d106      	bne.n	800548c <_printf_common+0x48>
 800547e:	f104 0a19 	add.w	sl, r4, #25
 8005482:	68e3      	ldr	r3, [r4, #12]
 8005484:	6832      	ldr	r2, [r6, #0]
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	42ab      	cmp	r3, r5
 800548a:	dc26      	bgt.n	80054da <_printf_common+0x96>
 800548c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005490:	6822      	ldr	r2, [r4, #0]
 8005492:	3b00      	subs	r3, #0
 8005494:	bf18      	it	ne
 8005496:	2301      	movne	r3, #1
 8005498:	0692      	lsls	r2, r2, #26
 800549a:	d42b      	bmi.n	80054f4 <_printf_common+0xb0>
 800549c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054a0:	4641      	mov	r1, r8
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c8      	blx	r9
 80054a6:	3001      	adds	r0, #1
 80054a8:	d01e      	beq.n	80054e8 <_printf_common+0xa4>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	6922      	ldr	r2, [r4, #16]
 80054ae:	f003 0306 	and.w	r3, r3, #6
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	bf02      	ittt	eq
 80054b6:	68e5      	ldreq	r5, [r4, #12]
 80054b8:	6833      	ldreq	r3, [r6, #0]
 80054ba:	1aed      	subeq	r5, r5, r3
 80054bc:	68a3      	ldr	r3, [r4, #8]
 80054be:	bf0c      	ite	eq
 80054c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054c4:	2500      	movne	r5, #0
 80054c6:	4293      	cmp	r3, r2
 80054c8:	bfc4      	itt	gt
 80054ca:	1a9b      	subgt	r3, r3, r2
 80054cc:	18ed      	addgt	r5, r5, r3
 80054ce:	2600      	movs	r6, #0
 80054d0:	341a      	adds	r4, #26
 80054d2:	42b5      	cmp	r5, r6
 80054d4:	d11a      	bne.n	800550c <_printf_common+0xc8>
 80054d6:	2000      	movs	r0, #0
 80054d8:	e008      	b.n	80054ec <_printf_common+0xa8>
 80054da:	2301      	movs	r3, #1
 80054dc:	4652      	mov	r2, sl
 80054de:	4641      	mov	r1, r8
 80054e0:	4638      	mov	r0, r7
 80054e2:	47c8      	blx	r9
 80054e4:	3001      	adds	r0, #1
 80054e6:	d103      	bne.n	80054f0 <_printf_common+0xac>
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f0:	3501      	adds	r5, #1
 80054f2:	e7c6      	b.n	8005482 <_printf_common+0x3e>
 80054f4:	18e1      	adds	r1, r4, r3
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	2030      	movs	r0, #48	@ 0x30
 80054fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054fe:	4422      	add	r2, r4
 8005500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005508:	3302      	adds	r3, #2
 800550a:	e7c7      	b.n	800549c <_printf_common+0x58>
 800550c:	2301      	movs	r3, #1
 800550e:	4622      	mov	r2, r4
 8005510:	4641      	mov	r1, r8
 8005512:	4638      	mov	r0, r7
 8005514:	47c8      	blx	r9
 8005516:	3001      	adds	r0, #1
 8005518:	d0e6      	beq.n	80054e8 <_printf_common+0xa4>
 800551a:	3601      	adds	r6, #1
 800551c:	e7d9      	b.n	80054d2 <_printf_common+0x8e>
	...

08005520 <_printf_i>:
 8005520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	7e0f      	ldrb	r7, [r1, #24]
 8005526:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005528:	2f78      	cmp	r7, #120	@ 0x78
 800552a:	4691      	mov	r9, r2
 800552c:	4680      	mov	r8, r0
 800552e:	460c      	mov	r4, r1
 8005530:	469a      	mov	sl, r3
 8005532:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005536:	d807      	bhi.n	8005548 <_printf_i+0x28>
 8005538:	2f62      	cmp	r7, #98	@ 0x62
 800553a:	d80a      	bhi.n	8005552 <_printf_i+0x32>
 800553c:	2f00      	cmp	r7, #0
 800553e:	f000 80d2 	beq.w	80056e6 <_printf_i+0x1c6>
 8005542:	2f58      	cmp	r7, #88	@ 0x58
 8005544:	f000 80b9 	beq.w	80056ba <_printf_i+0x19a>
 8005548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800554c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005550:	e03a      	b.n	80055c8 <_printf_i+0xa8>
 8005552:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005556:	2b15      	cmp	r3, #21
 8005558:	d8f6      	bhi.n	8005548 <_printf_i+0x28>
 800555a:	a101      	add	r1, pc, #4	@ (adr r1, 8005560 <_printf_i+0x40>)
 800555c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005560:	080055b9 	.word	0x080055b9
 8005564:	080055cd 	.word	0x080055cd
 8005568:	08005549 	.word	0x08005549
 800556c:	08005549 	.word	0x08005549
 8005570:	08005549 	.word	0x08005549
 8005574:	08005549 	.word	0x08005549
 8005578:	080055cd 	.word	0x080055cd
 800557c:	08005549 	.word	0x08005549
 8005580:	08005549 	.word	0x08005549
 8005584:	08005549 	.word	0x08005549
 8005588:	08005549 	.word	0x08005549
 800558c:	080056cd 	.word	0x080056cd
 8005590:	080055f7 	.word	0x080055f7
 8005594:	08005687 	.word	0x08005687
 8005598:	08005549 	.word	0x08005549
 800559c:	08005549 	.word	0x08005549
 80055a0:	080056ef 	.word	0x080056ef
 80055a4:	08005549 	.word	0x08005549
 80055a8:	080055f7 	.word	0x080055f7
 80055ac:	08005549 	.word	0x08005549
 80055b0:	08005549 	.word	0x08005549
 80055b4:	0800568f 	.word	0x0800568f
 80055b8:	6833      	ldr	r3, [r6, #0]
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6032      	str	r2, [r6, #0]
 80055c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055c8:	2301      	movs	r3, #1
 80055ca:	e09d      	b.n	8005708 <_printf_i+0x1e8>
 80055cc:	6833      	ldr	r3, [r6, #0]
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	1d19      	adds	r1, r3, #4
 80055d2:	6031      	str	r1, [r6, #0]
 80055d4:	0606      	lsls	r6, r0, #24
 80055d6:	d501      	bpl.n	80055dc <_printf_i+0xbc>
 80055d8:	681d      	ldr	r5, [r3, #0]
 80055da:	e003      	b.n	80055e4 <_printf_i+0xc4>
 80055dc:	0645      	lsls	r5, r0, #25
 80055de:	d5fb      	bpl.n	80055d8 <_printf_i+0xb8>
 80055e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	da03      	bge.n	80055f0 <_printf_i+0xd0>
 80055e8:	232d      	movs	r3, #45	@ 0x2d
 80055ea:	426d      	negs	r5, r5
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055f0:	4859      	ldr	r0, [pc, #356]	@ (8005758 <_printf_i+0x238>)
 80055f2:	230a      	movs	r3, #10
 80055f4:	e011      	b.n	800561a <_printf_i+0xfa>
 80055f6:	6821      	ldr	r1, [r4, #0]
 80055f8:	6833      	ldr	r3, [r6, #0]
 80055fa:	0608      	lsls	r0, r1, #24
 80055fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005600:	d402      	bmi.n	8005608 <_printf_i+0xe8>
 8005602:	0649      	lsls	r1, r1, #25
 8005604:	bf48      	it	mi
 8005606:	b2ad      	uxthmi	r5, r5
 8005608:	2f6f      	cmp	r7, #111	@ 0x6f
 800560a:	4853      	ldr	r0, [pc, #332]	@ (8005758 <_printf_i+0x238>)
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	bf14      	ite	ne
 8005610:	230a      	movne	r3, #10
 8005612:	2308      	moveq	r3, #8
 8005614:	2100      	movs	r1, #0
 8005616:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800561a:	6866      	ldr	r6, [r4, #4]
 800561c:	60a6      	str	r6, [r4, #8]
 800561e:	2e00      	cmp	r6, #0
 8005620:	bfa2      	ittt	ge
 8005622:	6821      	ldrge	r1, [r4, #0]
 8005624:	f021 0104 	bicge.w	r1, r1, #4
 8005628:	6021      	strge	r1, [r4, #0]
 800562a:	b90d      	cbnz	r5, 8005630 <_printf_i+0x110>
 800562c:	2e00      	cmp	r6, #0
 800562e:	d04b      	beq.n	80056c8 <_printf_i+0x1a8>
 8005630:	4616      	mov	r6, r2
 8005632:	fbb5 f1f3 	udiv	r1, r5, r3
 8005636:	fb03 5711 	mls	r7, r3, r1, r5
 800563a:	5dc7      	ldrb	r7, [r0, r7]
 800563c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005640:	462f      	mov	r7, r5
 8005642:	42bb      	cmp	r3, r7
 8005644:	460d      	mov	r5, r1
 8005646:	d9f4      	bls.n	8005632 <_printf_i+0x112>
 8005648:	2b08      	cmp	r3, #8
 800564a:	d10b      	bne.n	8005664 <_printf_i+0x144>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	07df      	lsls	r7, r3, #31
 8005650:	d508      	bpl.n	8005664 <_printf_i+0x144>
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	6861      	ldr	r1, [r4, #4]
 8005656:	4299      	cmp	r1, r3
 8005658:	bfde      	ittt	le
 800565a:	2330      	movle	r3, #48	@ 0x30
 800565c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005660:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005664:	1b92      	subs	r2, r2, r6
 8005666:	6122      	str	r2, [r4, #16]
 8005668:	f8cd a000 	str.w	sl, [sp]
 800566c:	464b      	mov	r3, r9
 800566e:	aa03      	add	r2, sp, #12
 8005670:	4621      	mov	r1, r4
 8005672:	4640      	mov	r0, r8
 8005674:	f7ff fee6 	bl	8005444 <_printf_common>
 8005678:	3001      	adds	r0, #1
 800567a:	d14a      	bne.n	8005712 <_printf_i+0x1f2>
 800567c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005680:	b004      	add	sp, #16
 8005682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	f043 0320 	orr.w	r3, r3, #32
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	4833      	ldr	r0, [pc, #204]	@ (800575c <_printf_i+0x23c>)
 8005690:	2778      	movs	r7, #120	@ 0x78
 8005692:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	6831      	ldr	r1, [r6, #0]
 800569a:	061f      	lsls	r7, r3, #24
 800569c:	f851 5b04 	ldr.w	r5, [r1], #4
 80056a0:	d402      	bmi.n	80056a8 <_printf_i+0x188>
 80056a2:	065f      	lsls	r7, r3, #25
 80056a4:	bf48      	it	mi
 80056a6:	b2ad      	uxthmi	r5, r5
 80056a8:	6031      	str	r1, [r6, #0]
 80056aa:	07d9      	lsls	r1, r3, #31
 80056ac:	bf44      	itt	mi
 80056ae:	f043 0320 	orrmi.w	r3, r3, #32
 80056b2:	6023      	strmi	r3, [r4, #0]
 80056b4:	b11d      	cbz	r5, 80056be <_printf_i+0x19e>
 80056b6:	2310      	movs	r3, #16
 80056b8:	e7ac      	b.n	8005614 <_printf_i+0xf4>
 80056ba:	4827      	ldr	r0, [pc, #156]	@ (8005758 <_printf_i+0x238>)
 80056bc:	e7e9      	b.n	8005692 <_printf_i+0x172>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	f023 0320 	bic.w	r3, r3, #32
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	e7f6      	b.n	80056b6 <_printf_i+0x196>
 80056c8:	4616      	mov	r6, r2
 80056ca:	e7bd      	b.n	8005648 <_printf_i+0x128>
 80056cc:	6833      	ldr	r3, [r6, #0]
 80056ce:	6825      	ldr	r5, [r4, #0]
 80056d0:	6961      	ldr	r1, [r4, #20]
 80056d2:	1d18      	adds	r0, r3, #4
 80056d4:	6030      	str	r0, [r6, #0]
 80056d6:	062e      	lsls	r6, r5, #24
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	d501      	bpl.n	80056e0 <_printf_i+0x1c0>
 80056dc:	6019      	str	r1, [r3, #0]
 80056de:	e002      	b.n	80056e6 <_printf_i+0x1c6>
 80056e0:	0668      	lsls	r0, r5, #25
 80056e2:	d5fb      	bpl.n	80056dc <_printf_i+0x1bc>
 80056e4:	8019      	strh	r1, [r3, #0]
 80056e6:	2300      	movs	r3, #0
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	4616      	mov	r6, r2
 80056ec:	e7bc      	b.n	8005668 <_printf_i+0x148>
 80056ee:	6833      	ldr	r3, [r6, #0]
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	6032      	str	r2, [r6, #0]
 80056f4:	681e      	ldr	r6, [r3, #0]
 80056f6:	6862      	ldr	r2, [r4, #4]
 80056f8:	2100      	movs	r1, #0
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7fa fd68 	bl	80001d0 <memchr>
 8005700:	b108      	cbz	r0, 8005706 <_printf_i+0x1e6>
 8005702:	1b80      	subs	r0, r0, r6
 8005704:	6060      	str	r0, [r4, #4]
 8005706:	6863      	ldr	r3, [r4, #4]
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	2300      	movs	r3, #0
 800570c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005710:	e7aa      	b.n	8005668 <_printf_i+0x148>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	4632      	mov	r2, r6
 8005716:	4649      	mov	r1, r9
 8005718:	4640      	mov	r0, r8
 800571a:	47d0      	blx	sl
 800571c:	3001      	adds	r0, #1
 800571e:	d0ad      	beq.n	800567c <_printf_i+0x15c>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	079b      	lsls	r3, r3, #30
 8005724:	d413      	bmi.n	800574e <_printf_i+0x22e>
 8005726:	68e0      	ldr	r0, [r4, #12]
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	4298      	cmp	r0, r3
 800572c:	bfb8      	it	lt
 800572e:	4618      	movlt	r0, r3
 8005730:	e7a6      	b.n	8005680 <_printf_i+0x160>
 8005732:	2301      	movs	r3, #1
 8005734:	4632      	mov	r2, r6
 8005736:	4649      	mov	r1, r9
 8005738:	4640      	mov	r0, r8
 800573a:	47d0      	blx	sl
 800573c:	3001      	adds	r0, #1
 800573e:	d09d      	beq.n	800567c <_printf_i+0x15c>
 8005740:	3501      	adds	r5, #1
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	1a5b      	subs	r3, r3, r1
 8005748:	42ab      	cmp	r3, r5
 800574a:	dcf2      	bgt.n	8005732 <_printf_i+0x212>
 800574c:	e7eb      	b.n	8005726 <_printf_i+0x206>
 800574e:	2500      	movs	r5, #0
 8005750:	f104 0619 	add.w	r6, r4, #25
 8005754:	e7f5      	b.n	8005742 <_printf_i+0x222>
 8005756:	bf00      	nop
 8005758:	08005de9 	.word	0x08005de9
 800575c:	08005dfa 	.word	0x08005dfa

08005760 <__sflush_r>:
 8005760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	0716      	lsls	r6, r2, #28
 800576a:	4605      	mov	r5, r0
 800576c:	460c      	mov	r4, r1
 800576e:	d454      	bmi.n	800581a <__sflush_r+0xba>
 8005770:	684b      	ldr	r3, [r1, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	dc02      	bgt.n	800577c <__sflush_r+0x1c>
 8005776:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	dd48      	ble.n	800580e <__sflush_r+0xae>
 800577c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800577e:	2e00      	cmp	r6, #0
 8005780:	d045      	beq.n	800580e <__sflush_r+0xae>
 8005782:	2300      	movs	r3, #0
 8005784:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005788:	682f      	ldr	r7, [r5, #0]
 800578a:	6a21      	ldr	r1, [r4, #32]
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	d030      	beq.n	80057f2 <__sflush_r+0x92>
 8005790:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	0759      	lsls	r1, r3, #29
 8005796:	d505      	bpl.n	80057a4 <__sflush_r+0x44>
 8005798:	6863      	ldr	r3, [r4, #4]
 800579a:	1ad2      	subs	r2, r2, r3
 800579c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800579e:	b10b      	cbz	r3, 80057a4 <__sflush_r+0x44>
 80057a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057a2:	1ad2      	subs	r2, r2, r3
 80057a4:	2300      	movs	r3, #0
 80057a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057a8:	6a21      	ldr	r1, [r4, #32]
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b0      	blx	r6
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	d106      	bne.n	80057c2 <__sflush_r+0x62>
 80057b4:	6829      	ldr	r1, [r5, #0]
 80057b6:	291d      	cmp	r1, #29
 80057b8:	d82b      	bhi.n	8005812 <__sflush_r+0xb2>
 80057ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005864 <__sflush_r+0x104>)
 80057bc:	410a      	asrs	r2, r1
 80057be:	07d6      	lsls	r6, r2, #31
 80057c0:	d427      	bmi.n	8005812 <__sflush_r+0xb2>
 80057c2:	2200      	movs	r2, #0
 80057c4:	6062      	str	r2, [r4, #4]
 80057c6:	04d9      	lsls	r1, r3, #19
 80057c8:	6922      	ldr	r2, [r4, #16]
 80057ca:	6022      	str	r2, [r4, #0]
 80057cc:	d504      	bpl.n	80057d8 <__sflush_r+0x78>
 80057ce:	1c42      	adds	r2, r0, #1
 80057d0:	d101      	bne.n	80057d6 <__sflush_r+0x76>
 80057d2:	682b      	ldr	r3, [r5, #0]
 80057d4:	b903      	cbnz	r3, 80057d8 <__sflush_r+0x78>
 80057d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80057d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057da:	602f      	str	r7, [r5, #0]
 80057dc:	b1b9      	cbz	r1, 800580e <__sflush_r+0xae>
 80057de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057e2:	4299      	cmp	r1, r3
 80057e4:	d002      	beq.n	80057ec <__sflush_r+0x8c>
 80057e6:	4628      	mov	r0, r5
 80057e8:	f000 fa24 	bl	8005c34 <_free_r>
 80057ec:	2300      	movs	r3, #0
 80057ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80057f0:	e00d      	b.n	800580e <__sflush_r+0xae>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b0      	blx	r6
 80057f8:	4602      	mov	r2, r0
 80057fa:	1c50      	adds	r0, r2, #1
 80057fc:	d1c9      	bne.n	8005792 <__sflush_r+0x32>
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0c6      	beq.n	8005792 <__sflush_r+0x32>
 8005804:	2b1d      	cmp	r3, #29
 8005806:	d001      	beq.n	800580c <__sflush_r+0xac>
 8005808:	2b16      	cmp	r3, #22
 800580a:	d11e      	bne.n	800584a <__sflush_r+0xea>
 800580c:	602f      	str	r7, [r5, #0]
 800580e:	2000      	movs	r0, #0
 8005810:	e022      	b.n	8005858 <__sflush_r+0xf8>
 8005812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005816:	b21b      	sxth	r3, r3
 8005818:	e01b      	b.n	8005852 <__sflush_r+0xf2>
 800581a:	690f      	ldr	r7, [r1, #16]
 800581c:	2f00      	cmp	r7, #0
 800581e:	d0f6      	beq.n	800580e <__sflush_r+0xae>
 8005820:	0793      	lsls	r3, r2, #30
 8005822:	680e      	ldr	r6, [r1, #0]
 8005824:	bf08      	it	eq
 8005826:	694b      	ldreq	r3, [r1, #20]
 8005828:	600f      	str	r7, [r1, #0]
 800582a:	bf18      	it	ne
 800582c:	2300      	movne	r3, #0
 800582e:	eba6 0807 	sub.w	r8, r6, r7
 8005832:	608b      	str	r3, [r1, #8]
 8005834:	f1b8 0f00 	cmp.w	r8, #0
 8005838:	dde9      	ble.n	800580e <__sflush_r+0xae>
 800583a:	6a21      	ldr	r1, [r4, #32]
 800583c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800583e:	4643      	mov	r3, r8
 8005840:	463a      	mov	r2, r7
 8005842:	4628      	mov	r0, r5
 8005844:	47b0      	blx	r6
 8005846:	2800      	cmp	r0, #0
 8005848:	dc08      	bgt.n	800585c <__sflush_r+0xfc>
 800584a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800584e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800585c:	4407      	add	r7, r0
 800585e:	eba8 0800 	sub.w	r8, r8, r0
 8005862:	e7e7      	b.n	8005834 <__sflush_r+0xd4>
 8005864:	dfbffffe 	.word	0xdfbffffe

08005868 <_fflush_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	690b      	ldr	r3, [r1, #16]
 800586c:	4605      	mov	r5, r0
 800586e:	460c      	mov	r4, r1
 8005870:	b913      	cbnz	r3, 8005878 <_fflush_r+0x10>
 8005872:	2500      	movs	r5, #0
 8005874:	4628      	mov	r0, r5
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	b118      	cbz	r0, 8005882 <_fflush_r+0x1a>
 800587a:	6a03      	ldr	r3, [r0, #32]
 800587c:	b90b      	cbnz	r3, 8005882 <_fflush_r+0x1a>
 800587e:	f7ff fb81 	bl	8004f84 <__sinit>
 8005882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f3      	beq.n	8005872 <_fflush_r+0xa>
 800588a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800588c:	07d0      	lsls	r0, r2, #31
 800588e:	d404      	bmi.n	800589a <_fflush_r+0x32>
 8005890:	0599      	lsls	r1, r3, #22
 8005892:	d402      	bmi.n	800589a <_fflush_r+0x32>
 8005894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005896:	f7ff fbf0 	bl	800507a <__retarget_lock_acquire_recursive>
 800589a:	4628      	mov	r0, r5
 800589c:	4621      	mov	r1, r4
 800589e:	f7ff ff5f 	bl	8005760 <__sflush_r>
 80058a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058a4:	07da      	lsls	r2, r3, #31
 80058a6:	4605      	mov	r5, r0
 80058a8:	d4e4      	bmi.n	8005874 <_fflush_r+0xc>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	059b      	lsls	r3, r3, #22
 80058ae:	d4e1      	bmi.n	8005874 <_fflush_r+0xc>
 80058b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058b2:	f7ff fbe3 	bl	800507c <__retarget_lock_release_recursive>
 80058b6:	e7dd      	b.n	8005874 <_fflush_r+0xc>

080058b8 <__malloc_lock>:
 80058b8:	4801      	ldr	r0, [pc, #4]	@ (80058c0 <__malloc_lock+0x8>)
 80058ba:	f7ff bbde 	b.w	800507a <__retarget_lock_acquire_recursive>
 80058be:	bf00      	nop
 80058c0:	20000388 	.word	0x20000388

080058c4 <__malloc_unlock>:
 80058c4:	4801      	ldr	r0, [pc, #4]	@ (80058cc <__malloc_unlock+0x8>)
 80058c6:	f7ff bbd9 	b.w	800507c <__retarget_lock_release_recursive>
 80058ca:	bf00      	nop
 80058cc:	20000388 	.word	0x20000388

080058d0 <__sread>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	460c      	mov	r4, r1
 80058d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d8:	f000 f978 	bl	8005bcc <_read_r>
 80058dc:	2800      	cmp	r0, #0
 80058de:	bfab      	itete	ge
 80058e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058e2:	89a3      	ldrhlt	r3, [r4, #12]
 80058e4:	181b      	addge	r3, r3, r0
 80058e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058ea:	bfac      	ite	ge
 80058ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058ee:	81a3      	strhlt	r3, [r4, #12]
 80058f0:	bd10      	pop	{r4, pc}

080058f2 <__swrite>:
 80058f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f6:	461f      	mov	r7, r3
 80058f8:	898b      	ldrh	r3, [r1, #12]
 80058fa:	05db      	lsls	r3, r3, #23
 80058fc:	4605      	mov	r5, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	4616      	mov	r6, r2
 8005902:	d505      	bpl.n	8005910 <__swrite+0x1e>
 8005904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005908:	2302      	movs	r3, #2
 800590a:	2200      	movs	r2, #0
 800590c:	f000 f94c 	bl	8005ba8 <_lseek_r>
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	4632      	mov	r2, r6
 800591e:	463b      	mov	r3, r7
 8005920:	4628      	mov	r0, r5
 8005922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005926:	f000 b973 	b.w	8005c10 <_write_r>

0800592a <__sseek>:
 800592a:	b510      	push	{r4, lr}
 800592c:	460c      	mov	r4, r1
 800592e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005932:	f000 f939 	bl	8005ba8 <_lseek_r>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	bf15      	itete	ne
 800593c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800593e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005946:	81a3      	strheq	r3, [r4, #12]
 8005948:	bf18      	it	ne
 800594a:	81a3      	strhne	r3, [r4, #12]
 800594c:	bd10      	pop	{r4, pc}

0800594e <__sclose>:
 800594e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005952:	f000 b8f7 	b.w	8005b44 <_close_r>

08005956 <__swbuf_r>:
 8005956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005958:	460e      	mov	r6, r1
 800595a:	4614      	mov	r4, r2
 800595c:	4605      	mov	r5, r0
 800595e:	b118      	cbz	r0, 8005968 <__swbuf_r+0x12>
 8005960:	6a03      	ldr	r3, [r0, #32]
 8005962:	b90b      	cbnz	r3, 8005968 <__swbuf_r+0x12>
 8005964:	f7ff fb0e 	bl	8004f84 <__sinit>
 8005968:	69a3      	ldr	r3, [r4, #24]
 800596a:	60a3      	str	r3, [r4, #8]
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	071a      	lsls	r2, r3, #28
 8005970:	d501      	bpl.n	8005976 <__swbuf_r+0x20>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	b943      	cbnz	r3, 8005988 <__swbuf_r+0x32>
 8005976:	4621      	mov	r1, r4
 8005978:	4628      	mov	r0, r5
 800597a:	f000 f82b 	bl	80059d4 <__swsetup_r>
 800597e:	b118      	cbz	r0, 8005988 <__swbuf_r+0x32>
 8005980:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005984:	4638      	mov	r0, r7
 8005986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	6922      	ldr	r2, [r4, #16]
 800598c:	1a98      	subs	r0, r3, r2
 800598e:	6963      	ldr	r3, [r4, #20]
 8005990:	b2f6      	uxtb	r6, r6
 8005992:	4283      	cmp	r3, r0
 8005994:	4637      	mov	r7, r6
 8005996:	dc05      	bgt.n	80059a4 <__swbuf_r+0x4e>
 8005998:	4621      	mov	r1, r4
 800599a:	4628      	mov	r0, r5
 800599c:	f7ff ff64 	bl	8005868 <_fflush_r>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d1ed      	bne.n	8005980 <__swbuf_r+0x2a>
 80059a4:	68a3      	ldr	r3, [r4, #8]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	60a3      	str	r3, [r4, #8]
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	6022      	str	r2, [r4, #0]
 80059b0:	701e      	strb	r6, [r3, #0]
 80059b2:	6962      	ldr	r2, [r4, #20]
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d004      	beq.n	80059c4 <__swbuf_r+0x6e>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	07db      	lsls	r3, r3, #31
 80059be:	d5e1      	bpl.n	8005984 <__swbuf_r+0x2e>
 80059c0:	2e0a      	cmp	r6, #10
 80059c2:	d1df      	bne.n	8005984 <__swbuf_r+0x2e>
 80059c4:	4621      	mov	r1, r4
 80059c6:	4628      	mov	r0, r5
 80059c8:	f7ff ff4e 	bl	8005868 <_fflush_r>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d0d9      	beq.n	8005984 <__swbuf_r+0x2e>
 80059d0:	e7d6      	b.n	8005980 <__swbuf_r+0x2a>
	...

080059d4 <__swsetup_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4b29      	ldr	r3, [pc, #164]	@ (8005a7c <__swsetup_r+0xa8>)
 80059d8:	4605      	mov	r5, r0
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	460c      	mov	r4, r1
 80059de:	b118      	cbz	r0, 80059e8 <__swsetup_r+0x14>
 80059e0:	6a03      	ldr	r3, [r0, #32]
 80059e2:	b90b      	cbnz	r3, 80059e8 <__swsetup_r+0x14>
 80059e4:	f7ff face 	bl	8004f84 <__sinit>
 80059e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ec:	0719      	lsls	r1, r3, #28
 80059ee:	d422      	bmi.n	8005a36 <__swsetup_r+0x62>
 80059f0:	06da      	lsls	r2, r3, #27
 80059f2:	d407      	bmi.n	8005a04 <__swsetup_r+0x30>
 80059f4:	2209      	movs	r2, #9
 80059f6:	602a      	str	r2, [r5, #0]
 80059f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059fc:	81a3      	strh	r3, [r4, #12]
 80059fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a02:	e033      	b.n	8005a6c <__swsetup_r+0x98>
 8005a04:	0758      	lsls	r0, r3, #29
 8005a06:	d512      	bpl.n	8005a2e <__swsetup_r+0x5a>
 8005a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a0a:	b141      	cbz	r1, 8005a1e <__swsetup_r+0x4a>
 8005a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d002      	beq.n	8005a1a <__swsetup_r+0x46>
 8005a14:	4628      	mov	r0, r5
 8005a16:	f000 f90d 	bl	8005c34 <_free_r>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	2300      	movs	r3, #0
 8005a28:	6063      	str	r3, [r4, #4]
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	f043 0308 	orr.w	r3, r3, #8
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	b94b      	cbnz	r3, 8005a4e <__swsetup_r+0x7a>
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a44:	d003      	beq.n	8005a4e <__swsetup_r+0x7a>
 8005a46:	4621      	mov	r1, r4
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f000 f83f 	bl	8005acc <__smakebuf_r>
 8005a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a52:	f013 0201 	ands.w	r2, r3, #1
 8005a56:	d00a      	beq.n	8005a6e <__swsetup_r+0x9a>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	60a2      	str	r2, [r4, #8]
 8005a5c:	6962      	ldr	r2, [r4, #20]
 8005a5e:	4252      	negs	r2, r2
 8005a60:	61a2      	str	r2, [r4, #24]
 8005a62:	6922      	ldr	r2, [r4, #16]
 8005a64:	b942      	cbnz	r2, 8005a78 <__swsetup_r+0xa4>
 8005a66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a6a:	d1c5      	bne.n	80059f8 <__swsetup_r+0x24>
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	0799      	lsls	r1, r3, #30
 8005a70:	bf58      	it	pl
 8005a72:	6962      	ldrpl	r2, [r4, #20]
 8005a74:	60a2      	str	r2, [r4, #8]
 8005a76:	e7f4      	b.n	8005a62 <__swsetup_r+0x8e>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e7f7      	b.n	8005a6c <__swsetup_r+0x98>
 8005a7c:	20000018 	.word	0x20000018

08005a80 <__swhatbuf_r>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	460c      	mov	r4, r1
 8005a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a88:	2900      	cmp	r1, #0
 8005a8a:	b096      	sub	sp, #88	@ 0x58
 8005a8c:	4615      	mov	r5, r2
 8005a8e:	461e      	mov	r6, r3
 8005a90:	da0d      	bge.n	8005aae <__swhatbuf_r+0x2e>
 8005a92:	89a3      	ldrh	r3, [r4, #12]
 8005a94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a98:	f04f 0100 	mov.w	r1, #0
 8005a9c:	bf14      	ite	ne
 8005a9e:	2340      	movne	r3, #64	@ 0x40
 8005aa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	6031      	str	r1, [r6, #0]
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	b016      	add	sp, #88	@ 0x58
 8005aac:	bd70      	pop	{r4, r5, r6, pc}
 8005aae:	466a      	mov	r2, sp
 8005ab0:	f000 f858 	bl	8005b64 <_fstat_r>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	dbec      	blt.n	8005a92 <__swhatbuf_r+0x12>
 8005ab8:	9901      	ldr	r1, [sp, #4]
 8005aba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005abe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ac2:	4259      	negs	r1, r3
 8005ac4:	4159      	adcs	r1, r3
 8005ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aca:	e7eb      	b.n	8005aa4 <__swhatbuf_r+0x24>

08005acc <__smakebuf_r>:
 8005acc:	898b      	ldrh	r3, [r1, #12]
 8005ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ad0:	079d      	lsls	r5, r3, #30
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	d507      	bpl.n	8005ae8 <__smakebuf_r+0x1c>
 8005ad8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	6163      	str	r3, [r4, #20]
 8005ae4:	b003      	add	sp, #12
 8005ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae8:	ab01      	add	r3, sp, #4
 8005aea:	466a      	mov	r2, sp
 8005aec:	f7ff ffc8 	bl	8005a80 <__swhatbuf_r>
 8005af0:	9f00      	ldr	r7, [sp, #0]
 8005af2:	4605      	mov	r5, r0
 8005af4:	4639      	mov	r1, r7
 8005af6:	4630      	mov	r0, r6
 8005af8:	f7ff fc24 	bl	8005344 <_malloc_r>
 8005afc:	b948      	cbnz	r0, 8005b12 <__smakebuf_r+0x46>
 8005afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b02:	059a      	lsls	r2, r3, #22
 8005b04:	d4ee      	bmi.n	8005ae4 <__smakebuf_r+0x18>
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	e7e2      	b.n	8005ad8 <__smakebuf_r+0xc>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	6020      	str	r0, [r4, #0]
 8005b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	9b01      	ldr	r3, [sp, #4]
 8005b1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b22:	b15b      	cbz	r3, 8005b3c <__smakebuf_r+0x70>
 8005b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f000 f82d 	bl	8005b88 <_isatty_r>
 8005b2e:	b128      	cbz	r0, 8005b3c <__smakebuf_r+0x70>
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	81a3      	strh	r3, [r4, #12]
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	431d      	orrs	r5, r3
 8005b40:	81a5      	strh	r5, [r4, #12]
 8005b42:	e7cf      	b.n	8005ae4 <__smakebuf_r+0x18>

08005b44 <_close_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4d06      	ldr	r5, [pc, #24]	@ (8005b60 <_close_r+0x1c>)
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	602b      	str	r3, [r5, #0]
 8005b50:	f7fa ff5f 	bl	8000a12 <_close>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d102      	bne.n	8005b5e <_close_r+0x1a>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	b103      	cbz	r3, 8005b5e <_close_r+0x1a>
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	bd38      	pop	{r3, r4, r5, pc}
 8005b60:	20000394 	.word	0x20000394

08005b64 <_fstat_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4d07      	ldr	r5, [pc, #28]	@ (8005b84 <_fstat_r+0x20>)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	4611      	mov	r1, r2
 8005b70:	602b      	str	r3, [r5, #0]
 8005b72:	f7fa ff5a 	bl	8000a2a <_fstat>
 8005b76:	1c43      	adds	r3, r0, #1
 8005b78:	d102      	bne.n	8005b80 <_fstat_r+0x1c>
 8005b7a:	682b      	ldr	r3, [r5, #0]
 8005b7c:	b103      	cbz	r3, 8005b80 <_fstat_r+0x1c>
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	bd38      	pop	{r3, r4, r5, pc}
 8005b82:	bf00      	nop
 8005b84:	20000394 	.word	0x20000394

08005b88 <_isatty_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4d06      	ldr	r5, [pc, #24]	@ (8005ba4 <_isatty_r+0x1c>)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	4604      	mov	r4, r0
 8005b90:	4608      	mov	r0, r1
 8005b92:	602b      	str	r3, [r5, #0]
 8005b94:	f7fa ff59 	bl	8000a4a <_isatty>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d102      	bne.n	8005ba2 <_isatty_r+0x1a>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	b103      	cbz	r3, 8005ba2 <_isatty_r+0x1a>
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
 8005ba4:	20000394 	.word	0x20000394

08005ba8 <_lseek_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4d07      	ldr	r5, [pc, #28]	@ (8005bc8 <_lseek_r+0x20>)
 8005bac:	4604      	mov	r4, r0
 8005bae:	4608      	mov	r0, r1
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	602a      	str	r2, [r5, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f7fa ff52 	bl	8000a60 <_lseek>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_lseek_r+0x1e>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_lseek_r+0x1e>
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	20000394 	.word	0x20000394

08005bcc <_read_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4d07      	ldr	r5, [pc, #28]	@ (8005bec <_read_r+0x20>)
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	4608      	mov	r0, r1
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	602a      	str	r2, [r5, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f7fa fefc 	bl	80009d8 <_read>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_read_r+0x1e>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_read_r+0x1e>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20000394 	.word	0x20000394

08005bf0 <_sbrk_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d06      	ldr	r5, [pc, #24]	@ (8005c0c <_sbrk_r+0x1c>)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	f7fa ff3e 	bl	8000a7c <_sbrk>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_sbrk_r+0x1a>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_sbrk_r+0x1a>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	20000394 	.word	0x20000394

08005c10 <_write_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	@ (8005c30 <_write_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fa fd68 	bl	80006f4 <_write>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_write_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_write_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20000394 	.word	0x20000394

08005c34 <_free_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4605      	mov	r5, r0
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	d041      	beq.n	8005cc0 <_free_r+0x8c>
 8005c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c40:	1f0c      	subs	r4, r1, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bfb8      	it	lt
 8005c46:	18e4      	addlt	r4, r4, r3
 8005c48:	f7ff fe36 	bl	80058b8 <__malloc_lock>
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc4 <_free_r+0x90>)
 8005c4e:	6813      	ldr	r3, [r2, #0]
 8005c50:	b933      	cbnz	r3, 8005c60 <_free_r+0x2c>
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	6014      	str	r4, [r2, #0]
 8005c56:	4628      	mov	r0, r5
 8005c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c5c:	f7ff be32 	b.w	80058c4 <__malloc_unlock>
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d908      	bls.n	8005c76 <_free_r+0x42>
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	1821      	adds	r1, r4, r0
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf01      	itttt	eq
 8005c6c:	6819      	ldreq	r1, [r3, #0]
 8005c6e:	685b      	ldreq	r3, [r3, #4]
 8005c70:	1809      	addeq	r1, r1, r0
 8005c72:	6021      	streq	r1, [r4, #0]
 8005c74:	e7ed      	b.n	8005c52 <_free_r+0x1e>
 8005c76:	461a      	mov	r2, r3
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	b10b      	cbz	r3, 8005c80 <_free_r+0x4c>
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d9fa      	bls.n	8005c76 <_free_r+0x42>
 8005c80:	6811      	ldr	r1, [r2, #0]
 8005c82:	1850      	adds	r0, r2, r1
 8005c84:	42a0      	cmp	r0, r4
 8005c86:	d10b      	bne.n	8005ca0 <_free_r+0x6c>
 8005c88:	6820      	ldr	r0, [r4, #0]
 8005c8a:	4401      	add	r1, r0
 8005c8c:	1850      	adds	r0, r2, r1
 8005c8e:	4283      	cmp	r3, r0
 8005c90:	6011      	str	r1, [r2, #0]
 8005c92:	d1e0      	bne.n	8005c56 <_free_r+0x22>
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	6053      	str	r3, [r2, #4]
 8005c9a:	4408      	add	r0, r1
 8005c9c:	6010      	str	r0, [r2, #0]
 8005c9e:	e7da      	b.n	8005c56 <_free_r+0x22>
 8005ca0:	d902      	bls.n	8005ca8 <_free_r+0x74>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	e7d6      	b.n	8005c56 <_free_r+0x22>
 8005ca8:	6820      	ldr	r0, [r4, #0]
 8005caa:	1821      	adds	r1, r4, r0
 8005cac:	428b      	cmp	r3, r1
 8005cae:	bf04      	itt	eq
 8005cb0:	6819      	ldreq	r1, [r3, #0]
 8005cb2:	685b      	ldreq	r3, [r3, #4]
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	bf04      	itt	eq
 8005cb8:	1809      	addeq	r1, r1, r0
 8005cba:	6021      	streq	r1, [r4, #0]
 8005cbc:	6054      	str	r4, [r2, #4]
 8005cbe:	e7ca      	b.n	8005c56 <_free_r+0x22>
 8005cc0:	bd38      	pop	{r3, r4, r5, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000390 	.word	0x20000390

08005cc8 <_init>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	bf00      	nop
 8005ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cce:	bc08      	pop	{r3}
 8005cd0:	469e      	mov	lr, r3
 8005cd2:	4770      	bx	lr

08005cd4 <_fini>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	bf00      	nop
 8005cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cda:	bc08      	pop	{r3}
 8005cdc:	469e      	mov	lr, r3
 8005cde:	4770      	bx	lr
