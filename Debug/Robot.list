
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b234  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800b3c8  0800b3c8  0000c3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9f8  0800b9f8  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9f8  0800b9f8  0000c9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba00  0800ba00  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba00  0800ba00  0000ca00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba04  0800ba04  0000ca04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ba08  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001e8  0800bbf0  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  0800bbf0  0000d5c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e02  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a56  00000000  00000000  0002001a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00022a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d29  00000000  00000000  00023b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282c5  00000000  00000000  00024879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001409f  00000000  00000000  0004cb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5022  00000000  00000000  00060bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155bff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab0  00000000  00000000  00155c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015b6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3ac 	.word	0x0800b3ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b3ac 	.word	0x0800b3ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a3b      	ldr	r2, [pc, #236]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b39      	ldr	r3, [pc, #228]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a35      	ldr	r2, [pc, #212]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b33      	ldr	r3, [pc, #204]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a29      	ldr	r2, [pc, #164]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <MX_GPIO_Init+0x108>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f001 fe71 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 7158 	mov.w	r1, #864	@ 0x360
 8000fc0:	4820      	ldr	r0, [pc, #128]	@ (8001044 <MX_GPIO_Init+0x10c>)
 8000fc2:	f001 fe6b 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4819      	ldr	r0, [pc, #100]	@ (8001044 <MX_GPIO_Init+0x10c>)
 8000fde:	f001 fcb3 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffc:	f001 fca4 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001000:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <MX_GPIO_Init+0x10c>)
 800101a:	f001 fc95 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_GPIO_Init+0x110>)
 8001034:	f001 fc88 	bl	8002948 <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	48000800 	.word	0x48000800
 8001048:	48000400 	.word	0x48000400

0800104c <PID_Init>:

PID_TypeDef pid_L, pid_R;



void PID_Init(PID_TypeDef *pid, float Kp, float Ki, float Kd, float setpoint) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6178      	str	r0, [r7, #20]
 8001054:	ed87 0a04 	vstr	s0, [r7, #16]
 8001058:	edc7 0a03 	vstr	s1, [r7, #12]
 800105c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001060:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->Kp = Kp;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
    pid->integral = 0;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
    pid->output = 0;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
    pid->prev_time = HAL_GetTick();
 8001094:	f001 fa98 	bl	80025c8 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	61da      	str	r2, [r3, #28]
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <Odometry_Init>:
    float theta;
} Odometry_TypeDef;

Odometry_TypeDef odom;

void Odometry_Init(Odometry_TypeDef *odom) {
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
    odom->x = 0.0f;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
    odom->y = 0.0f;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
    odom->theta = 0.0f;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    if (htim == &htim6) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a31      	ldr	r2, [pc, #196]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d158      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0xc2>

    	uint32_t encoder_count_L = __HAL_TIM_GET_COUNTER(&htim2);
 80010e4:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	61fb      	str	r3, [r7, #28]
        uint32_t encoder_count_R = __HAL_TIM_GET_COUNTER(&htim3);
 80010ec:	4b2f      	ldr	r3, [pc, #188]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f2:	61bb      	str	r3, [r7, #24]


        htim2.Instance->CNT = 0;
 80010f4:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	@ 0x24
        htim3.Instance->CNT = 0;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24


        float distance_L = (float)encoder_count_L / 120.0f;
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80011b0 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]
        float distance_R = (float)encoder_count_R / 120.0f;
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001124:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80011b0 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	edc7 7a04 	vstr	s15, [r7, #16]

        float pre_speed_L = distance_L * TIMER_FREQUENCY;
 8001130:	edd7 7a05 	vldr	s15, [r7, #20]
 8001134:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113c:	edc7 7a03 	vstr	s15, [r7, #12]
        if (pre_speed_L < 300) speed_L = pre_speed_L;
 8001140:	edd7 7a03 	vldr	s15, [r7, #12]
 8001144:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80011b4 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8001148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d507      	bpl.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8001152:	edd7 7a03 	vldr	s15, [r7, #12]
 8001156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115a:	ee17 2a90 	vmov	r2, s15
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001160:	601a      	str	r2, [r3, #0]

        float pre_speed_R = distance_R * TIMER_FREQUENCY;
 8001162:	edd7 7a04 	vldr	s15, [r7, #16]
 8001166:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800116a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116e:	edc7 7a02 	vstr	s15, [r7, #8]
        if (pre_speed_R < 300) speed_R = pre_speed_R;
 8001172:	edd7 7a02 	vldr	s15, [r7, #8]
 8001176:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80011b4 <HAL_TIM_PeriodElapsedCallback+0xe0>
 800117a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	d400      	bmi.n	8001186 <HAL_TIM_PeriodElapsedCallback+0xb2>


    }
}
 8001184:	e007      	b.n	8001196 <HAL_TIM_PeriodElapsedCallback+0xc2>
        if (pre_speed_R < 300) speed_R = pre_speed_R;
 8001186:	edd7 7a02 	vldr	s15, [r7, #8]
 800118a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118e:	ee17 2a90 	vmov	r2, s15
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200003a4 	.word	0x200003a4
 80011a8:	2000030c 	.word	0x2000030c
 80011ac:	20000358 	.word	0x20000358
 80011b0:	42f00000 	.word	0x42f00000
 80011b4:	43960000 	.word	0x43960000
 80011b8:	20000204 	.word	0x20000204
 80011bc:	20000208 	.word	0x20000208

080011c0 <Update_Odometry>:


void Update_Odometry(Odometry_TypeDef *odom, float speed_L, float speed_R, float dt) {
 80011c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011c4:	b088      	sub	sp, #32
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80011ce:	edc7 0a01 	vstr	s1, [r7, #4]
 80011d2:	ed87 1a00 	vstr	s2, [r7]

    float v_L = speed_L / 100.0;
 80011d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011da:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001350 <Update_Odometry+0x190>
 80011de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e2:	edc7 7a07 	vstr	s15, [r7, #28]
    float v_R = speed_R / 100.0;
 80011e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ea:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8001350 <Update_Odometry+0x190>
 80011ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f2:	edc7 7a06 	vstr	s15, [r7, #24]


    float v = (v_L + v_R) / 2.0;
 80011f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80011fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001202:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120a:	edc7 7a05 	vstr	s15, [r7, #20]
    float omega = (v_R - v_L) / WHEEL_BASE;
 800120e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001212:	edd7 7a07 	vldr	s15, [r7, #28]
 8001216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121a:	ee17 0a90 	vmov	r0, s15
 800121e:	f7ff f993 	bl	8000548 <__aeabi_f2d>
 8001222:	a349      	add	r3, pc, #292	@ (adr r3, 8001348 <Update_Odometry+0x188>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff fb10 	bl	800084c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fcb8 	bl	8000ba8 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	613b      	str	r3, [r7, #16]

    // Aktualizuj pozycje
    odom->theta += omega * dt;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001242:	edd7 6a04 	vldr	s13, [r7, #16]
 8001246:	edd7 7a00 	vldr	s15, [r7]
 800124a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	edc3 7a02 	vstr	s15, [r3, #8]
    odom->x += v * cos(odom->theta) * dt;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f973 	bl	8000548 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff f96e 	bl	8000548 <__aeabi_f2d>
 800126c:	4680      	mov	r8, r0
 800126e:	4689      	mov	r9, r1
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f967 	bl	8000548 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	ec43 2b10 	vmov	d0, r2, r3
 8001282:	f006 f8ed 	bl	8007460 <cos>
 8001286:	ec53 2b10 	vmov	r2, r3, d0
 800128a:	4640      	mov	r0, r8
 800128c:	4649      	mov	r1, r9
 800128e:	f7ff f9b3 	bl	80005f8 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4690      	mov	r8, r2
 8001298:	4699      	mov	r9, r3
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f7ff f954 	bl	8000548 <__aeabi_f2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4640      	mov	r0, r8
 80012a6:	4649      	mov	r1, r9
 80012a8:	f7ff f9a6 	bl	80005f8 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7fe ffea 	bl	800028c <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc72 	bl	8000ba8 <__aeabi_d2f>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	601a      	str	r2, [r3, #0]
    odom->y += v * sin(odom->theta) * dt;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f93a 	bl	8000548 <__aeabi_f2d>
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	6978      	ldr	r0, [r7, #20]
 80012da:	f7ff f935 	bl	8000548 <__aeabi_f2d>
 80012de:	4680      	mov	r8, r0
 80012e0:	4689      	mov	r9, r1
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f92e 	bl	8000548 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	ec43 2b10 	vmov	d0, r2, r3
 80012f4:	f006 f910 	bl	8007518 <sin>
 80012f8:	ec53 2b10 	vmov	r2, r3, d0
 80012fc:	4640      	mov	r0, r8
 80012fe:	4649      	mov	r1, r9
 8001300:	f7ff f97a 	bl	80005f8 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4690      	mov	r8, r2
 800130a:	4699      	mov	r9, r3
 800130c:	6838      	ldr	r0, [r7, #0]
 800130e:	f7ff f91b 	bl	8000548 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4640      	mov	r0, r8
 8001318:	4649      	mov	r1, r9
 800131a:	f7ff f96d 	bl	80005f8 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7fe ffb1 	bl	800028c <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc39 	bl	8000ba8 <__aeabi_d2f>
 8001336:	4602      	mov	r2, r0
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]
}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001346:	bf00      	nop
 8001348:	33333333 	.word	0x33333333
 800134c:	3fc33333 	.word	0x3fc33333
 8001350:	42c80000 	.word	0x42c80000

08001354 <SetTarget>:
} Target_TypeDef;

Target_TypeDef target;


void SetTarget(float x, float y) {
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	ed87 0a01 	vstr	s0, [r7, #4]
 800135e:	edc7 0a00 	vstr	s1, [r7]
    target.x = x;
 8001362:	4a06      	ldr	r2, [pc, #24]	@ (800137c <SetTarget+0x28>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]
    target.y = y;
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <SetTarget+0x28>)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	6053      	str	r3, [r2, #4]
    //char buffer[50];
    //int len = sprintf(buffer, "%.2f %.2f\n", x, y);
    //HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, HAL_MAX_DELAY);


}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200002b4 	.word	0x200002b4

08001380 <CalculateTargetSpeed>:





void CalculateTargetSpeed(Odometry_TypeDef *odom, Target_TypeDef *target, float *speed_L_target, float *speed_R_target) {
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b08e      	sub	sp, #56	@ 0x38
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
    float dx = target->x - odom->x;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	ed93 7a00 	vldr	s14, [r3]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dy = target->y - odom->y;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    distance = sqrt(dx * dx + dy * dy);
 80013b6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	ee17 0a90 	vmov	r0, s15
 80013ce:	f7ff f8bb 	bl	8000548 <__aeabi_f2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	ec43 2b10 	vmov	d0, r2, r3
 80013da:	f005 fe7b 	bl	80070d4 <sqrt>
 80013de:	ec53 2b10 	vmov	r2, r3, d0
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fbdf 	bl	8000ba8 <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a70      	ldr	r2, [pc, #448]	@ (80015b0 <CalculateTargetSpeed+0x230>)
 80013ee:	6013      	str	r3, [r2, #0]
    float angle_to_target = atan2(dy, dx);
 80013f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013f2:	f7ff f8a9 	bl	8000548 <__aeabi_f2d>
 80013f6:	4604      	mov	r4, r0
 80013f8:	460d      	mov	r5, r1
 80013fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80013fc:	f7ff f8a4 	bl	8000548 <__aeabi_f2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	ec43 2b11 	vmov	d1, r2, r3
 8001408:	ec45 4b10 	vmov	d0, r4, r5
 800140c:	f005 fd98 	bl	8006f40 <atan2>
 8001410:	ec53 2b10 	vmov	r2, r3, d0
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fbc6 	bl	8000ba8 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	623b      	str	r3, [r7, #32]
    //printf("dx: %f, dy: %f, distance: %f\n\r", dx, dy, distance);



    float angle_error = angle_to_target - odom->theta;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	edd3 7a02 	vldr	s15, [r3, #8]
 8001426:	ed97 7a08 	vldr	s14, [r7, #32]
 800142a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (angle_error > M_PI) angle_error -= 2 * M_PI;
 8001432:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001434:	f7ff f888 	bl	8000548 <__aeabi_f2d>
 8001438:	a357      	add	r3, pc, #348	@ (adr r3, 8001598 <CalculateTargetSpeed+0x218>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff fb6b 	bl	8000b18 <__aeabi_dcmpgt>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00f      	beq.n	8001468 <CalculateTargetSpeed+0xe8>
 8001448:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800144a:	f7ff f87d 	bl	8000548 <__aeabi_f2d>
 800144e:	a354      	add	r3, pc, #336	@ (adr r3, 80015a0 <CalculateTargetSpeed+0x220>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7fe ff18 	bl	8000288 <__aeabi_dsub>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fba2 	bl	8000ba8 <__aeabi_d2f>
 8001464:	4603      	mov	r3, r0
 8001466:	637b      	str	r3, [r7, #52]	@ 0x34
    if (angle_error < -M_PI) angle_error += 2 * M_PI;
 8001468:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_f2d>
 800146e:	a34e      	add	r3, pc, #312	@ (adr r3, 80015a8 <CalculateTargetSpeed+0x228>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff fb32 	bl	8000adc <__aeabi_dcmplt>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00f      	beq.n	800149e <CalculateTargetSpeed+0x11e>
 800147e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001480:	f7ff f862 	bl	8000548 <__aeabi_f2d>
 8001484:	a346      	add	r3, pc, #280	@ (adr r3, 80015a0 <CalculateTargetSpeed+0x220>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7fe feff 	bl	800028c <__adddf3>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fb87 	bl	8000ba8 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34

    // Parametry do dostosowania
    float max_linear_speed = 120.0f;
 800149e:	4b45      	ldr	r3, [pc, #276]	@ (80015b4 <CalculateTargetSpeed+0x234>)
 80014a0:	61fb      	str	r3, [r7, #28]
    float max_angular_speed = 1000.0f;
 80014a2:	4b45      	ldr	r3, [pc, #276]	@ (80015b8 <CalculateTargetSpeed+0x238>)
 80014a4:	61bb      	str	r3, [r7, #24]
    float linear_speed_kp = 60.0f;
 80014a6:	4b45      	ldr	r3, [pc, #276]	@ (80015bc <CalculateTargetSpeed+0x23c>)
 80014a8:	617b      	str	r3, [r7, #20]
    float angular_speed_kp = 10.0f;
 80014aa:	4b45      	ldr	r3, [pc, #276]	@ (80015c0 <CalculateTargetSpeed+0x240>)
 80014ac:	613b      	str	r3, [r7, #16]


    float linear_speed = linear_speed_kp * distance;
 80014ae:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <CalculateTargetSpeed+0x230>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80014b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014bc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    if (linear_speed > max_linear_speed) {
 80014c0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80014c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	dd01      	ble.n	80014d6 <CalculateTargetSpeed+0x156>
        linear_speed = max_linear_speed;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    float angular_speed = angular_speed_kp * angle_error;
 80014d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014da:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (angular_speed > max_angular_speed) {
 80014e6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	dd02      	ble.n	80014fe <CalculateTargetSpeed+0x17e>
        angular_speed = max_angular_speed;
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014fc:	e010      	b.n	8001520 <CalculateTargetSpeed+0x1a0>
    } else if (angular_speed < -max_angular_speed) {
 80014fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001502:	eef1 7a67 	vneg.f32	s15, s15
 8001506:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800150a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	d505      	bpl.n	8001520 <CalculateTargetSpeed+0x1a0>
        angular_speed = -max_angular_speed;
 8001514:	edd7 7a06 	vldr	s15, [r7, #24]
 8001518:	eef1 7a67 	vneg.f32	s15, s15
 800151c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    }


    *speed_L_target = linear_speed - (WHEEL_BASE / 2) * angular_speed;
 8001520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001522:	f7ff f811 	bl	8000548 <__aeabi_f2d>
 8001526:	4604      	mov	r4, r0
 8001528:	460d      	mov	r5, r1
 800152a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800152c:	f7ff f80c 	bl	8000548 <__aeabi_f2d>
 8001530:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001534:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <CalculateTargetSpeed+0x244>)
 8001536:	f7ff f85f 	bl	80005f8 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4620      	mov	r0, r4
 8001540:	4629      	mov	r1, r5
 8001542:	f7fe fea1 	bl	8000288 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb2b 	bl	8000ba8 <__aeabi_d2f>
 8001552:	4602      	mov	r2, r0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]
    *speed_R_target = linear_speed + (WHEEL_BASE / 2) * angular_speed;
 8001558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800155a:	f7fe fff5 	bl	8000548 <__aeabi_f2d>
 800155e:	4604      	mov	r4, r0
 8001560:	460d      	mov	r5, r1
 8001562:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001564:	f7fe fff0 	bl	8000548 <__aeabi_f2d>
 8001568:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <CalculateTargetSpeed+0x244>)
 800156e:	f7ff f843 	bl	80005f8 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	f7fe fe87 	bl	800028c <__adddf3>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fb0f 	bl	8000ba8 <__aeabi_d2f>
 800158a:	4602      	mov	r2, r0
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	3738      	adds	r7, #56	@ 0x38
 8001594:	46bd      	mov	sp, r7
 8001596:	bdb0      	pop	{r4, r5, r7, pc}
 8001598:	54442d18 	.word	0x54442d18
 800159c:	400921fb 	.word	0x400921fb
 80015a0:	54442d18 	.word	0x54442d18
 80015a4:	401921fb 	.word	0x401921fb
 80015a8:	54442d18 	.word	0x54442d18
 80015ac:	c00921fb 	.word	0xc00921fb
 80015b0:	20000264 	.word	0x20000264
 80015b4:	42f00000 	.word	0x42f00000
 80015b8:	447a0000 	.word	0x447a0000
 80015bc:	42700000 	.word	0x42700000
 80015c0:	41200000 	.word	0x41200000
 80015c4:	3fb33333 	.word	0x3fb33333

080015c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_UART_RxCpltCallback+0x2c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d108      	bne.n	80015ec <HAL_UART_RxCpltCallback+0x24>

        ProcessReceivedData(uartBuffer, UART_BUFFER_SIZE);
 80015da:	2140      	movs	r1, #64	@ 0x40
 80015dc:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <HAL_UART_RxCpltCallback+0x30>)
 80015de:	f000 f80f 	bl	8001600 <ProcessReceivedData>
        HAL_UART_Receive_IT(&huart2, uartBuffer, UART_BUFFER_SIZE);
 80015e2:	2240      	movs	r2, #64	@ 0x40
 80015e4:	4904      	ldr	r1, [pc, #16]	@ (80015f8 <HAL_UART_RxCpltCallback+0x30>)
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <HAL_UART_RxCpltCallback+0x34>)
 80015e8:	f004 f9ba 	bl	8005960 <HAL_UART_Receive_IT>
    }
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40004400 	.word	0x40004400
 80015f8:	2000020c 	.word	0x2000020c
 80015fc:	200003f0 	.word	0x200003f0

08001600 <ProcessReceivedData>:
void UART_Transmit(const char *data) {
    HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}

void ProcessReceivedData(uint8_t* data, uint16_t length)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
    if (length >= sizeof(float) * 2) {
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	2b07      	cmp	r3, #7
 8001610:	d910      	bls.n	8001634 <ProcessReceivedData+0x34>
        float targetX, targetY;
        memcpy(&targetX, data, sizeof(float));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60fb      	str	r3, [r7, #12]
        memcpy(&targetY, data + sizeof(float), sizeof(float));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3304      	adds	r3, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60bb      	str	r3, [r7, #8]
        SetTarget(targetX, targetY);
 8001620:	edd7 7a03 	vldr	s15, [r7, #12]
 8001624:	ed97 7a02 	vldr	s14, [r7, #8]
 8001628:	eef0 0a47 	vmov.f32	s1, s14
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f7ff fe90 	bl	8001354 <SetTarget>
        //printf("Otrzymano targetX: %f, targetY: %f\n", 1.0f, 1.0f);

        //PID_Init(&pid_L, 3, 0.1, 0.2, targetY);
        //PID_Init(&pid_R, 3, 0.1, 0.2, targetX);
    }
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <SetMotorDirection>:


void SetMotorDirection(int direction_L, int direction_R) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]

    if (direction_L == 1) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d10b      	bne.n	8001664 <SetMotorDirection+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001652:	4819      	ldr	r0, [pc, #100]	@ (80016b8 <SetMotorDirection+0x7c>)
 8001654:	f001 fb22 	bl	8002c9c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2120      	movs	r1, #32
 800165c:	4816      	ldr	r0, [pc, #88]	@ (80016b8 <SetMotorDirection+0x7c>)
 800165e:	f001 fb1d 	bl	8002c9c <HAL_GPIO_WritePin>
 8001662:	e00a      	b.n	800167a <SetMotorDirection+0x3e>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800166a:	4813      	ldr	r0, [pc, #76]	@ (80016b8 <SetMotorDirection+0x7c>)
 800166c:	f001 fb16 	bl	8002c9c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	2120      	movs	r1, #32
 8001674:	4810      	ldr	r0, [pc, #64]	@ (80016b8 <SetMotorDirection+0x7c>)
 8001676:	f001 fb11 	bl	8002c9c <HAL_GPIO_WritePin>
    }

    if (direction_R == 1) {
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d10b      	bne.n	8001698 <SetMotorDirection+0x5c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2140      	movs	r1, #64	@ 0x40
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <SetMotorDirection+0x7c>)
 8001686:	f001 fb09 	bl	8002c9c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001690:	4809      	ldr	r0, [pc, #36]	@ (80016b8 <SetMotorDirection+0x7c>)
 8001692:	f001 fb03 	bl	8002c9c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
    }
}
 8001696:	e00a      	b.n	80016ae <SetMotorDirection+0x72>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2140      	movs	r1, #64	@ 0x40
 800169c:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <SetMotorDirection+0x7c>)
 800169e:	f001 fafd 	bl	8002c9c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <SetMotorDirection+0x7c>)
 80016aa:	f001 faf7 	bl	8002c9c <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	48000800 	.word	0x48000800

080016bc <_write>:


int _write(int file, char* ptr, int len){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <_write+0x28>)
 80016d4:	f004 f8ba 	bl	800584c <HAL_UART_Transmit>
	return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200003f0 	.word	0x200003f0

080016e8 <SendDataToQt>:

void SendDataToQt(Odometry_TypeDef *odom, Target_TypeDef *target ,float pwm_L ,float pwm_R,  float speed_L, float speed_R) {
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b0ba      	sub	sp, #232	@ 0xe8
 80016ee:	af10      	add	r7, sp, #64	@ 0x40
 80016f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80016f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80016f4:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
 80016f8:	edc7 0a0c 	vstr	s1, [r7, #48]	@ 0x30
 80016fc:	ed87 1a0b 	vstr	s2, [r7, #44]	@ 0x2c
 8001700:	edc7 1a0a 	vstr	s3, [r7, #40]	@ 0x28

    char buffer[100];
    sprintf(buffer, "%.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f\n", speed_L, speed_R, pwm_L, pwm_R, odom->x, odom->y, odom->theta, target->x, target->y);
 8001704:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001706:	f7fe ff1f 	bl	8000548 <__aeabi_f2d>
 800170a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800170e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001710:	f7fe ff1a 	bl	8000548 <__aeabi_f2d>
 8001714:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001718:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800171a:	f7fe ff15 	bl	8000548 <__aeabi_f2d>
 800171e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001722:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001724:	f7fe ff10 	bl	8000548 <__aeabi_f2d>
 8001728:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800172c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff09 	bl	8000548 <__aeabi_f2d>
 8001736:	e9c7 0100 	strd	r0, r1, [r7]
 800173a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff02 	bl	8000548 <__aeabi_f2d>
 8001744:	4682      	mov	sl, r0
 8001746:	468b      	mov	fp, r1
 8001748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fefb 	bl	8000548 <__aeabi_f2d>
 8001752:	4680      	mov	r8, r0
 8001754:	4689      	mov	r9, r1
 8001756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fef4 	bl	8000548 <__aeabi_f2d>
 8001760:	4604      	mov	r4, r0
 8001762:	460d      	mov	r5, r1
 8001764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe feed 	bl	8000548 <__aeabi_f2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001776:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800177a:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 800177e:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001782:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001786:	ed97 7b00 	vldr	d7, [r7]
 800178a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800178e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001792:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001796:	ed97 7b04 	vldr	d7, [r7, #16]
 800179a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800179e:	ed97 7b06 	vldr	d7, [r7, #24]
 80017a2:	ed8d 7b00 	vstr	d7, [sp]
 80017a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017aa:	490b      	ldr	r1, [pc, #44]	@ (80017d8 <SendDataToQt+0xf0>)
 80017ac:	f007 fc10 	bl	8008fd0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80017b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fd5b 	bl	8000270 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b29a      	uxth	r2, r3
 80017be:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <SendDataToQt+0xf4>)
 80017c8:	f004 f840 	bl	800584c <HAL_UART_Transmit>
}
 80017cc:	bf00      	nop
 80017ce:	37a8      	adds	r7, #168	@ 0xa8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d6:	bf00      	nop
 80017d8:	0800b3c8 	.word	0x0800b3c8
 80017dc:	200003f0 	.word	0x200003f0

080017e0 <PID_Compute>:





float PID_Compute(PID_TypeDef *pid, float current_value, float dt) {
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80017ec:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = pid->setpoint - current_value;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80017f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fe:	edc7 7a05 	vstr	s15, [r7, #20]


    pid->integral += error * dt;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	ed93 7a05 	vldr	s14, [r3, #20]
 8001808:	edd7 6a05 	vldr	s13, [r7, #20]
 800180c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	edc3 7a05 	vstr	s15, [r3, #20]


    float derivative = (error - pid->prev_error) / dt;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	edd3 7a04 	vldr	s15, [r3, #16]
 8001824:	ed97 7a05 	vldr	s14, [r7, #20]
 8001828:	ee77 6a67 	vsub.f32	s13, s14, s15
 800182c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001834:	edc7 7a04 	vstr	s15, [r7, #16]


    pid->output = (pid->Kp * error) + (pid->Ki * pid->integral) + (pid->Kd * derivative);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	ed93 7a00 	vldr	s14, [r3]
 800183e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	edd3 6a01 	vldr	s13, [r3, #4]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001860:	edd7 7a04 	vldr	s15, [r7, #16]
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	edc3 7a06 	vstr	s15, [r3, #24]
    pid->prev_error = error;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	611a      	str	r2, [r3, #16]

    if (pid_iterations < 4) {
 8001878:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <PID_Compute+0x128>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b03      	cmp	r3, #3
 800187e:	dc19      	bgt.n	80018b4 <PID_Compute+0xd4>
        if (pid->output > 30) pid->output  = 30;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	edd3 7a06 	vldr	s15, [r3, #24]
 8001886:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800188a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	dd02      	ble.n	800189a <PID_Compute+0xba>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <PID_Compute+0x12c>)
 8001898:	619a      	str	r2, [r3, #24]
        if (pid->output < 0) pid->output  = 0;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	edd3 7a06 	vldr	s15, [r3, #24]
 80018a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d51d      	bpl.n	80018e6 <PID_Compute+0x106>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
 80018b2:	e018      	b.n	80018e6 <PID_Compute+0x106>
    } else {
        if (pid->output > 1000) pid->output  = 1000;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80018ba:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001910 <PID_Compute+0x130>
 80018be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	dd02      	ble.n	80018ce <PID_Compute+0xee>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <PID_Compute+0x134>)
 80018cc:	619a      	str	r2, [r3, #24]
        if (pid->output < 0) pid->output  = 0;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80018d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	d503      	bpl.n	80018e6 <PID_Compute+0x106>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]

    }

    pid_iterations++;
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <PID_Compute+0x128>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a06      	ldr	r2, [pc, #24]	@ (8001908 <PID_Compute+0x128>)
 80018ee:	6013      	str	r3, [r2, #0]

    return pid->output;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	ee07 3a90 	vmov	s15, r3
}
 80018f8:	eeb0 0a67 	vmov.f32	s0, s15
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000260 	.word	0x20000260
 800190c:	41f00000 	.word	0x41f00000
 8001910:	447a0000 	.word	0x447a0000
 8001914:	447a0000 	.word	0x447a0000

08001918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191e:	f000 fde3 	bl	80024e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001922:	f000 f939 	bl	8001b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001926:	f7ff fb07 	bl	8000f38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800192a:	f000 fd1f 	bl	800236c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800192e:	f000 faaf 	bl	8001e90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001932:	f000 fb49 	bl	8001fc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001936:	f000 fb9b 	bl	8002070 <MX_TIM3_Init>
  MX_TIM6_Init();
 800193a:	f000 fbef 	bl	800211c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, uartBuffer, UART_BUFFER_SIZE);
 800193e:	2240      	movs	r2, #64	@ 0x40
 8001940:	497f      	ldr	r1, [pc, #508]	@ (8001b40 <main+0x228>)
 8001942:	4880      	ldr	r0, [pc, #512]	@ (8001b44 <main+0x22c>)
 8001944:	f004 f80c 	bl	8005960 <HAL_UART_Receive_IT>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001948:	2100      	movs	r1, #0
 800194a:	487f      	ldr	r0, [pc, #508]	@ (8001b48 <main+0x230>)
 800194c:	f002 fdfe 	bl	800454c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001950:	2104      	movs	r1, #4
 8001952:	487d      	ldr	r0, [pc, #500]	@ (8001b48 <main+0x230>)
 8001954:	f002 fdfa 	bl	800454c <HAL_TIM_PWM_Start>


  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001958:	213c      	movs	r1, #60	@ 0x3c
 800195a:	487c      	ldr	r0, [pc, #496]	@ (8001b4c <main+0x234>)
 800195c:	f002 ffa2 	bl	80048a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001960:	213c      	movs	r1, #60	@ 0x3c
 8001962:	487b      	ldr	r0, [pc, #492]	@ (8001b50 <main+0x238>)
 8001964:	f002 ff9e 	bl	80048a4 <HAL_TIM_Encoder_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001968:	4b77      	ldr	r3, [pc, #476]	@ (8001b48 <main+0x230>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001970:	4b75      	ldr	r3, [pc, #468]	@ (8001b48 <main+0x230>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_TIM_Base_Start_IT(&htim6);
 8001978:	4876      	ldr	r0, [pc, #472]	@ (8001b54 <main+0x23c>)
 800197a:	f002 fd1f 	bl	80043bc <HAL_TIM_Base_Start_IT>

  Odometry_Init(&odom);
 800197e:	4876      	ldr	r0, [pc, #472]	@ (8001b58 <main+0x240>)
 8001980:	f7ff fb91 	bl	80010a6 <Odometry_Init>

  uint32_t prev_time = HAL_GetTick();
 8001984:	f000 fe20 	bl	80025c8 <HAL_GetTick>
 8001988:	6078      	str	r0, [r7, #4]

  SetMotorDirection(0,0);
 800198a:	2100      	movs	r1, #0
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fe55 	bl	800163c <SetMotorDirection>

  PID_Init(&pid_L, 6, 1.5, 0.1, 1);
 8001992:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8001996:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 8001b5c <main+0x244>
 800199a:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 800199e:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 80019a2:	486f      	ldr	r0, [pc, #444]	@ (8001b60 <main+0x248>)
 80019a4:	f7ff fb52 	bl	800104c <PID_Init>
  PID_Init(&pid_R, 6, 1.5, 0.3, 1);
 80019a8:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80019ac:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 8001b64 <main+0x24c>
 80019b0:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 80019b4:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 80019b8:	486b      	ldr	r0, [pc, #428]	@ (8001b68 <main+0x250>)
 80019ba:	f7ff fb47 	bl	800104c <PID_Init>


  SetTarget(0.5f,0);
 80019be:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8001b6c <main+0x254>
 80019c2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80019c6:	f7ff fcc5 	bl	8001354 <SetTarget>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    uint32_t current_time = HAL_GetTick();
 80019ca:	f000 fdfd 	bl	80025c8 <HAL_GetTick>
 80019ce:	6038      	str	r0, [r7, #0]
	    dt = (current_time - prev_time) / 1000.0f;
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019de:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8001b70 <main+0x258>
 80019e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e6:	4b63      	ldr	r3, [pc, #396]	@ (8001b74 <main+0x25c>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]
	    prev_time = current_time;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	607b      	str	r3, [r7, #4]


	    // Aktulaizowanie polozenia
	    Update_Odometry(&odom, speed_L, speed_R, dt);
 80019f0:	4b61      	ldr	r3, [pc, #388]	@ (8001b78 <main+0x260>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019fc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b7c <main+0x264>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	ee07 3a10 	vmov	s14, r3
 8001a04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001a08:	4b5a      	ldr	r3, [pc, #360]	@ (8001b74 <main+0x25c>)
 8001a0a:	edd3 6a00 	vldr	s13, [r3]
 8001a0e:	eeb0 1a66 	vmov.f32	s2, s13
 8001a12:	eef0 0a47 	vmov.f32	s1, s14
 8001a16:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1a:	484f      	ldr	r0, [pc, #316]	@ (8001b58 <main+0x240>)
 8001a1c:	f7ff fbd0 	bl	80011c0 <Update_Odometry>


	    // Obliczanie predkosci
	    CalculateTargetSpeed(&odom, &target, &speed_L_target, &speed_R_target);
 8001a20:	4b57      	ldr	r3, [pc, #348]	@ (8001b80 <main+0x268>)
 8001a22:	4a58      	ldr	r2, [pc, #352]	@ (8001b84 <main+0x26c>)
 8001a24:	4958      	ldr	r1, [pc, #352]	@ (8001b88 <main+0x270>)
 8001a26:	484c      	ldr	r0, [pc, #304]	@ (8001b58 <main+0x240>)
 8001a28:	f7ff fcaa 	bl	8001380 <CalculateTargetSpeed>


	    // Sprawdzenie, czy robot osiągnął cel
	    if (distance < 0.1) {
 8001a2c:	4b57      	ldr	r3, [pc, #348]	@ (8001b8c <main+0x274>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd89 	bl	8000548 <__aeabi_f2d>
 8001a36:	a340      	add	r3, pc, #256	@ (adr r3, 8001b38 <main+0x220>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	f7ff f84e 	bl	8000adc <__aeabi_dcmplt>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00f      	beq.n	8001a66 <main+0x14e>
	        speed_L_target = 0;
 8001a46:	4b4f      	ldr	r3, [pc, #316]	@ (8001b84 <main+0x26c>)
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
	        speed_R_target = 0;
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <main+0x268>)
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
	        pid_L.integral = 0;
 8001a56:	4b42      	ldr	r3, [pc, #264]	@ (8001b60 <main+0x248>)
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
	        pid_R.integral = 0;
 8001a5e:	4b42      	ldr	r3, [pc, #264]	@ (8001b68 <main+0x250>)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
	        //printf("dojechales do celuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
	    }


	    // Ustawanie predkosci do regulatorow pid
	    pid_L.setpoint = speed_L_target;
 8001a66:	4b47      	ldr	r3, [pc, #284]	@ (8001b84 <main+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b60 <main+0x248>)
 8001a6c:	60d3      	str	r3, [r2, #12]
	    pid_R.setpoint = speed_R_target;
 8001a6e:	4b44      	ldr	r3, [pc, #272]	@ (8001b80 <main+0x268>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3d      	ldr	r2, [pc, #244]	@ (8001b68 <main+0x250>)
 8001a74:	60d3      	str	r3, [r2, #12]
	    //pid_L.setpoint = 50;
	    //pid_R.setpoint = 50;


	    // Obliczanie wypeniania PWM przez regultor pid
	    pwm_L = PID_Compute(&pid_L, speed_L, dt);
 8001a76:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <main+0x260>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a82:	4b3c      	ldr	r3, [pc, #240]	@ (8001b74 <main+0x25c>)
 8001a84:	ed93 7a00 	vldr	s14, [r3]
 8001a88:	eef0 0a47 	vmov.f32	s1, s14
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	4833      	ldr	r0, [pc, #204]	@ (8001b60 <main+0x248>)
 8001a92:	f7ff fea5 	bl	80017e0 <PID_Compute>
 8001a96:	eef0 7a40 	vmov.f32	s15, s0
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <main+0x278>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
	    pwm_R = PID_Compute(&pid_R, speed_R, dt);
 8001aa0:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <main+0x264>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aac:	4b31      	ldr	r3, [pc, #196]	@ (8001b74 <main+0x25c>)
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	eef0 0a47 	vmov.f32	s1, s14
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	482b      	ldr	r0, [pc, #172]	@ (8001b68 <main+0x250>)
 8001abc:	f7ff fe90 	bl	80017e0 <PID_Compute>
 8001ac0:	eef0 7a40 	vmov.f32	s15, s0
 8001ac4:	4b33      	ldr	r3, [pc, #204]	@ (8001b94 <main+0x27c>)
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
	    //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
	    //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);


	    // Nadawanie silnika odpowiedniego pwm
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_L);
 8001aca:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <main+0x278>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <main+0x230>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad8:	ee17 2a90 	vmov	r2, s15
 8001adc:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_R);
 8001ade:	4b2d      	ldr	r3, [pc, #180]	@ (8001b94 <main+0x27c>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <main+0x230>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aec:	ee17 2a90 	vmov	r2, s15
 8001af0:	639a      	str	r2, [r3, #56]	@ 0x38


	    SendDataToQt(&odom, &target ,pwm_L ,pwm_R ,speed_L ,speed_R);
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <main+0x278>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <main+0x27c>)
 8001afa:	ed93 7a00 	vldr	s14, [r3]
 8001afe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <main+0x260>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	ee06 3a90 	vmov	s13, r3
 8001b06:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <main+0x264>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	ee06 3a10 	vmov	s12, r3
 8001b12:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001b16:	eef0 1a46 	vmov.f32	s3, s12
 8001b1a:	eeb0 1a66 	vmov.f32	s2, s13
 8001b1e:	eef0 0a47 	vmov.f32	s1, s14
 8001b22:	eeb0 0a67 	vmov.f32	s0, s15
 8001b26:	4918      	ldr	r1, [pc, #96]	@ (8001b88 <main+0x270>)
 8001b28:	480b      	ldr	r0, [pc, #44]	@ (8001b58 <main+0x240>)
 8001b2a:	f7ff fddd 	bl	80016e8 <SendDataToQt>
	    printf("Speed L target: %.2f, Speed R target: %.2f\n\r", speed_L_target, speed_R_target);
	    printf("rzzezczywiste predkosci  rowne lewe kolo  : %.2ld, prawe kolo : %.2ld\n\r", speed_L, speed_R);
		*/


	    HAL_Delay(100);
 8001b2e:	2064      	movs	r0, #100	@ 0x64
 8001b30:	f000 fd56 	bl	80025e0 <HAL_Delay>
  {
 8001b34:	e749      	b.n	80019ca <main+0xb2>
 8001b36:	bf00      	nop
 8001b38:	9999999a 	.word	0x9999999a
 8001b3c:	3fb99999 	.word	0x3fb99999
 8001b40:	2000020c 	.word	0x2000020c
 8001b44:	200003f0 	.word	0x200003f0
 8001b48:	200002c0 	.word	0x200002c0
 8001b4c:	2000030c 	.word	0x2000030c
 8001b50:	20000358 	.word	0x20000358
 8001b54:	200003a4 	.word	0x200003a4
 8001b58:	200002a8 	.word	0x200002a8
 8001b5c:	3dcccccd 	.word	0x3dcccccd
 8001b60:	20000268 	.word	0x20000268
 8001b64:	3e99999a 	.word	0x3e99999a
 8001b68:	20000288 	.word	0x20000288
 8001b6c:	00000000 	.word	0x00000000
 8001b70:	447a0000 	.word	0x447a0000
 8001b74:	2000025c 	.word	0x2000025c
 8001b78:	20000204 	.word	0x20000204
 8001b7c:	20000208 	.word	0x20000208
 8001b80:	20000250 	.word	0x20000250
 8001b84:	2000024c 	.word	0x2000024c
 8001b88:	200002b4 	.word	0x200002b4
 8001b8c:	20000264 	.word	0x20000264
 8001b90:	20000258 	.word	0x20000258
 8001b94:	20000254 	.word	0x20000254

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b096      	sub	sp, #88	@ 0x58
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	2244      	movs	r2, #68	@ 0x44
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f007 faf4 	bl	8009194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	463b      	mov	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bbe:	f001 f893 	bl	8002ce8 <HAL_PWREx_ControlVoltageScaling>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bc8:	f000 f837 	bl	8001c3a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bde:	2302      	movs	r3, #2
 8001be0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001be6:	230a      	movs	r3, #10
 8001be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bea:	2307      	movs	r3, #7
 8001bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 f8ca 	bl	8002d94 <HAL_RCC_OscConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c06:	f000 f818 	bl	8001c3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0a:	230f      	movs	r3, #15
 8001c0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2104      	movs	r1, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 fc92 	bl	800354c <HAL_RCC_ClockConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c2e:	f000 f804 	bl	8001c3a <Error_Handler>
  }
}
 8001c32:	bf00      	nop
 8001c34:	3758      	adds	r7, #88	@ 0x58
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3e:	b672      	cpsid	i
}
 8001c40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c42:	bf00      	nop
 8001c44:	e7fd      	b.n	8001c42 <Error_Handler+0x8>
	...

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c52:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000

08001c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <NMI_Handler+0x4>

08001c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <BusFault_Handler+0x4>

08001cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <UsageFault_Handler+0x4>

08001cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce6:	f000 fc5b 	bl	80025a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cf4:	4802      	ldr	r0, [pc, #8]	@ (8001d00 <USART2_IRQHandler+0x10>)
 8001cf6:	f003 fe7f 	bl	80059f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200003f0 	.word	0x200003f0

08001d04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d08:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <TIM6_DAC_IRQHandler+0x10>)
 8001d0a:	f002 fe59 	bl	80049c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200003a4 	.word	0x200003a4

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d32:	f007 fa3b 	bl	80091ac <__errno>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2216      	movs	r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe7 	bl	8001d28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5a:	bf00      	nop
 8001d5c:	e7fd      	b.n	8001d5a <_exit+0x12>

08001d5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e00a      	b.n	8001d86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d70:	f3af 8000 	nop.w
 8001d74:	4601      	mov	r1, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	60ba      	str	r2, [r7, #8]
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbf0      	blt.n	8001d70 <_read+0x12>
  }

  return len;
 8001d8e:	687b      	ldr	r3, [r7, #4]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc0:	605a      	str	r2, [r3, #4]
  return 0;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_isatty>:

int _isatty(int file)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e30:	f007 f9bc 	bl	80091ac <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e3e:	e009      	b.n	8001e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e46:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a05      	ldr	r2, [pc, #20]	@ (8001e64 <_sbrk+0x64>)
 8001e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20018000 	.word	0x20018000
 8001e60:	00000400 	.word	0x00000400
 8001e64:	200002bc 	.word	0x200002bc
 8001e68:	200005c8 	.word	0x200005c8

08001e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <SystemInit+0x20>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <SystemInit+0x20>)
 8001e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b096      	sub	sp, #88	@ 0x58
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
 8001eb2:	615a      	str	r2, [r3, #20]
 8001eb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	222c      	movs	r2, #44	@ 0x2c
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f007 f969 	bl	8009194 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001ec4:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc4 <MX_TIM1_Init+0x134>)
 8001ec6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001eca:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001ece:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001ed8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001edc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ede:	4b38      	ldr	r3, [pc, #224]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ee4:	4b36      	ldr	r3, [pc, #216]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eea:	4b35      	ldr	r3, [pc, #212]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ef0:	4833      	ldr	r0, [pc, #204]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001ef2:	f002 fad3 	bl	800449c <HAL_TIM_PWM_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001efc:	f7ff fe9d 	bl	8001c3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f10:	4619      	mov	r1, r3
 8001f12:	482b      	ldr	r0, [pc, #172]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001f14:	f003 fb28 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001f1e:	f7ff fe8c 	bl	8001c3a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f22:	2360      	movs	r3, #96	@ 0x60
 8001f24:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f42:	2200      	movs	r2, #0
 8001f44:	4619      	mov	r1, r3
 8001f46:	481e      	ldr	r0, [pc, #120]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001f48:	f002 fe3c 	bl	8004bc4 <HAL_TIM_PWM_ConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001f52:	f7ff fe72 	bl	8001c3a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4818      	ldr	r0, [pc, #96]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001f60:	f002 fe30 	bl	8004bc4 <HAL_TIM_PWM_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001f6a:	f7ff fe66 	bl	8001c3a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4807      	ldr	r0, [pc, #28]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001fa4:	f003 fb68 	bl	8005678 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8001fae:	f7ff fe44 	bl	8001c3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fb2:	4803      	ldr	r0, [pc, #12]	@ (8001fc0 <MX_TIM1_Init+0x130>)
 8001fb4:	f000 f9a2 	bl	80022fc <HAL_TIM_MspPostInit>

}
 8001fb8:	bf00      	nop
 8001fba:	3758      	adds	r7, #88	@ 0x58
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200002c0 	.word	0x200002c0
 8001fc4:	40012c00 	.word	0x40012c00

08001fc8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	@ 0x30
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	2224      	movs	r2, #36	@ 0x24
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f007 f8dc 	bl	8009194 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	463b      	mov	r3, r7
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	@ (800206c <MX_TIM2_Init+0xa4>)
 8001fe8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fee:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <MX_TIM2_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <MX_TIM2_Init+0xa4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <MX_TIM2_Init+0xa4>)
 8001ffc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002000:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <MX_TIM2_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <MX_TIM2_Init+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800200e:	2303      	movs	r3, #3
 8002010:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002016:	2301      	movs	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800201e:	230f      	movs	r3, #15
 8002020:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002026:	2301      	movs	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <MX_TIM2_Init+0xa4>)
 800203a:	f002 fb8d 	bl	8004758 <HAL_TIM_Encoder_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002044:	f7ff fdf9 	bl	8001c3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	@ (800206c <MX_TIM2_Init+0xa4>)
 8002056:	f003 fa87 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002060:	f7ff fdeb 	bl	8001c3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3730      	adds	r7, #48	@ 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000030c 	.word	0x2000030c

08002070 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	@ 0x30
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	2224      	movs	r2, #36	@ 0x24
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f007 f888 	bl	8009194 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	463b      	mov	r3, r7
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800208e:	4b21      	ldr	r3, [pc, #132]	@ (8002114 <MX_TIM3_Init+0xa4>)
 8002090:	4a21      	ldr	r2, [pc, #132]	@ (8002118 <MX_TIM3_Init+0xa8>)
 8002092:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002094:	4b1f      	ldr	r3, [pc, #124]	@ (8002114 <MX_TIM3_Init+0xa4>)
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209a:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <MX_TIM3_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <MX_TIM3_Init+0xa4>)
 80020a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <MX_TIM3_Init+0xa4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <MX_TIM3_Init+0xa4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020b4:	2303      	movs	r3, #3
 80020b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020bc:	2301      	movs	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80020c4:	230f      	movs	r3, #15
 80020c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020cc:	2301      	movs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4619      	mov	r1, r3
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <MX_TIM3_Init+0xa4>)
 80020e0:	f002 fb3a 	bl	8004758 <HAL_TIM_Encoder_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80020ea:	f7ff fda6 	bl	8001c3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020f6:	463b      	mov	r3, r7
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	@ (8002114 <MX_TIM3_Init+0xa4>)
 80020fc:	f003 fa34 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002106:	f7ff fd98 	bl	8001c3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	3730      	adds	r7, #48	@ 0x30
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000358 	.word	0x20000358
 8002118:	40000400 	.word	0x40000400

0800211c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800212c:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <MX_TIM6_Init+0x68>)
 800212e:	4a16      	ldr	r2, [pc, #88]	@ (8002188 <MX_TIM6_Init+0x6c>)
 8002130:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002132:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <MX_TIM6_Init+0x68>)
 8002134:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002138:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213a:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <MX_TIM6_Init+0x68>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002140:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <MX_TIM6_Init+0x68>)
 8002142:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002146:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002148:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <MX_TIM6_Init+0x68>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800214e:	480d      	ldr	r0, [pc, #52]	@ (8002184 <MX_TIM6_Init+0x68>)
 8002150:	f002 f8dc 	bl	800430c <HAL_TIM_Base_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800215a:	f7ff fd6e 	bl	8001c3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4806      	ldr	r0, [pc, #24]	@ (8002184 <MX_TIM6_Init+0x68>)
 800216c:	f003 f9fc 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002176:	f7ff fd60 	bl	8001c3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200003a4 	.word	0x200003a4
 8002188:	40001000 	.word	0x40001000

0800218c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <HAL_TIM_PWM_MspInit+0x38>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d10b      	bne.n	80021b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a2:	4a09      	ldr	r2, [pc, #36]	@ (80021c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021aa:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40012c00 	.word	0x40012c00
 80021c8:	40021000 	.word	0x40021000

080021cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	@ 0x30
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ec:	d129      	bne.n	8002242 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ee:	4b2e      	ldr	r3, [pc, #184]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	4a2d      	ldr	r2, [pc, #180]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021fa:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	4b28      	ldr	r3, [pc, #160]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	4a27      	ldr	r2, [pc, #156]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002212:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800221e:	2303      	movs	r3, #3
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800222e:	2301      	movs	r3, #1
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800223c:	f000 fb84 	bl	8002948 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002240:	e02d      	b.n	800229e <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM3)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a19      	ldr	r2, [pc, #100]	@ (80022ac <HAL_TIM_Encoder_MspInit+0xe0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d128      	bne.n	800229e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800224c:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002250:	4a15      	ldr	r2, [pc, #84]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002252:	f043 0302 	orr.w	r3, r3, #2
 8002256:	6593      	str	r3, [r2, #88]	@ 0x58
 8002258:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002268:	4a0f      	ldr	r2, [pc, #60]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002270:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800227c:	23c0      	movs	r3, #192	@ 0xc0
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800228c:	2302      	movs	r3, #2
 800228e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229a:	f000 fb55 	bl	8002948 <HAL_GPIO_Init>
}
 800229e:	bf00      	nop
 80022a0:	3730      	adds	r7, #48	@ 0x30
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40000400 	.word	0x40000400

080022b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <HAL_TIM_Base_MspInit+0x44>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d113      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022c2:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <HAL_TIM_Base_MspInit+0x48>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	4a0c      	ldr	r2, [pc, #48]	@ (80022f8 <HAL_TIM_Base_MspInit+0x48>)
 80022c8:	f043 0310 	orr.w	r3, r3, #16
 80022cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_TIM_Base_MspInit+0x48>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2036      	movs	r0, #54	@ 0x36
 80022e0:	f000 fa7d 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022e4:	2036      	movs	r0, #54	@ 0x36
 80022e6:	f000 fa96 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40001000 	.word	0x40001000
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <HAL_TIM_MspPostInit+0x68>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d11d      	bne.n	800235a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_TIM_MspPostInit+0x6c>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	4a11      	ldr	r2, [pc, #68]	@ (8002368 <HAL_TIM_MspPostInit+0x6c>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232a:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <HAL_TIM_MspPostInit+0x6c>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002336:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800233a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002348:	2301      	movs	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002356:	f000 faf7 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800235a:	bf00      	nop
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40012c00 	.word	0x40012c00
 8002368:	40021000 	.word	0x40021000

0800236c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002370:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 8002372:	4a15      	ldr	r2, [pc, #84]	@ (80023c8 <MX_USART2_UART_Init+0x5c>)
 8002374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002376:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 8002378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800237c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800238a:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 8002392:	220c      	movs	r2, #12
 8002394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800239c:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	@ (80023c4 <MX_USART2_UART_Init+0x58>)
 80023b0:	f003 f9fe 	bl	80057b0 <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023ba:	f7ff fc3e 	bl	8001c3a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200003f0 	.word	0x200003f0
 80023c8:	40004400 	.word	0x40004400

080023cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0ac      	sub	sp, #176	@ 0xb0
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2288      	movs	r2, #136	@ 0x88
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f006 fed1 	bl	8009194 <memset>
  if(uartHandle->Instance==USART2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a25      	ldr	r2, [pc, #148]	@ (800248c <HAL_UART_MspInit+0xc0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d143      	bne.n	8002484 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023fc:	2302      	movs	r3, #2
 80023fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002400:	2300      	movs	r3, #0
 8002402:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4618      	mov	r0, r3
 800240a:	f001 fac3 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002414:	f7ff fc11 	bl	8001c3a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002418:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HAL_UART_MspInit+0xc4>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241c:	4a1c      	ldr	r2, [pc, #112]	@ (8002490 <HAL_UART_MspInit+0xc4>)
 800241e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002422:	6593      	str	r3, [r2, #88]	@ 0x58
 8002424:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <HAL_UART_MspInit+0xc4>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	4b17      	ldr	r3, [pc, #92]	@ (8002490 <HAL_UART_MspInit+0xc4>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002434:	4a16      	ldr	r2, [pc, #88]	@ (8002490 <HAL_UART_MspInit+0xc4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800243c:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <HAL_UART_MspInit+0xc4>)
 800243e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002448:	230c      	movs	r3, #12
 800244a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245a:	2303      	movs	r3, #3
 800245c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002460:	2307      	movs	r3, #7
 8002462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800246a:	4619      	mov	r1, r3
 800246c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002470:	f000 fa6a 	bl	8002948 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	2026      	movs	r0, #38	@ 0x26
 800247a:	f000 f9b0 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800247e:	2026      	movs	r0, #38	@ 0x26
 8002480:	f000 f9c9 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002484:	bf00      	nop
 8002486:	37b0      	adds	r7, #176	@ 0xb0
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40004400 	.word	0x40004400
 8002490:	40021000 	.word	0x40021000

08002494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002498:	f7ff fce8 	bl	8001e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800249c:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800249e:	490d      	ldr	r1, [pc, #52]	@ (80024d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <LoopForever+0xe>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b4:	4c0a      	ldr	r4, [pc, #40]	@ (80024e0 <LoopForever+0x16>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c2:	f006 fe79 	bl	80091b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024c6:	f7ff fa27 	bl	8001918 <main>

080024ca <LoopForever>:

LoopForever:
    b LoopForever
 80024ca:	e7fe      	b.n	80024ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80024d8:	0800ba08 	.word	0x0800ba08
  ldr r2, =_sbss
 80024dc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80024e0:	200005c8 	.word	0x200005c8

080024e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC1_2_IRQHandler>
	...

080024e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <HAL_Init+0x3c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002524 <HAL_Init+0x3c>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fe:	2003      	movs	r0, #3
 8002500:	f000 f962 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002504:	2000      	movs	r0, #0
 8002506:	f000 f80f 	bl	8002528 <HAL_InitTick>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	71fb      	strb	r3, [r7, #7]
 8002514:	e001      	b.n	800251a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002516:	f7ff fb97 	bl	8001c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800251a:	79fb      	ldrb	r3, [r7, #7]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40022000 	.word	0x40022000

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <HAL_InitTick+0x6c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d023      	beq.n	8002584 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800253c:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <HAL_InitTick+0x70>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <HAL_InitTick+0x6c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f96d 	bl	8002832 <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d809      	bhi.n	8002578 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800256c:	f000 f937 	bl	80027de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002570:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_InitTick+0x74>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e007      	b.n	8002588 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e004      	b.n	8002588 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	e001      	b.n	8002588 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000008 	.word	0x20000008
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_IncTick+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_IncTick+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <HAL_IncTick+0x24>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000478 	.word	0x20000478

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000478 	.word	0x20000478

080025e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff ffee 	bl	80025c8 <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025f8:	d005      	beq.n	8002606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <HAL_Delay+0x44>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002606:	bf00      	nop
 8002608:	f7ff ffde 	bl	80025c8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d8f7      	bhi.n	8002608 <HAL_Delay+0x28>
  {
  }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000008 	.word	0x20000008

08002628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002644:	4013      	ands	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002650:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265a:	4a04      	ldr	r2, [pc, #16]	@ (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	60d3      	str	r3, [r2, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002674:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <__NVIC_GetPriorityGrouping+0x18>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	f003 0307 	and.w	r3, r3, #7
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	2b00      	cmp	r3, #0
 800269c:	db0b      	blt.n	80026b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4907      	ldr	r1, [pc, #28]	@ (80026c4 <__NVIC_EnableIRQ+0x38>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2001      	movs	r0, #1
 80026ae:	fa00 f202 	lsl.w	r2, r0, r2
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100

080026c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	db0a      	blt.n	80026f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	490c      	ldr	r1, [pc, #48]	@ (8002714 <__NVIC_SetPriority+0x4c>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	0112      	lsls	r2, r2, #4
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	440b      	add	r3, r1
 80026ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f0:	e00a      	b.n	8002708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4908      	ldr	r1, [pc, #32]	@ (8002718 <__NVIC_SetPriority+0x50>)
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	3b04      	subs	r3, #4
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	440b      	add	r3, r1
 8002706:	761a      	strb	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000e100 	.word	0xe000e100
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f1c3 0307 	rsb	r3, r3, #7
 8002736:	2b04      	cmp	r3, #4
 8002738:	bf28      	it	cs
 800273a:	2304      	movcs	r3, #4
 800273c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3304      	adds	r3, #4
 8002742:	2b06      	cmp	r3, #6
 8002744:	d902      	bls.n	800274c <NVIC_EncodePriority+0x30>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3b03      	subs	r3, #3
 800274a:	e000      	b.n	800274e <NVIC_EncodePriority+0x32>
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	401a      	ands	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002764:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43d9      	mvns	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	4313      	orrs	r3, r2
         );
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	@ 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002794:	d301      	bcc.n	800279a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002796:	2301      	movs	r3, #1
 8002798:	e00f      	b.n	80027ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279a:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <SysTick_Config+0x40>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a2:	210f      	movs	r1, #15
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027a8:	f7ff ff8e 	bl	80026c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <SysTick_Config+0x40>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b2:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <SysTick_Config+0x40>)
 80027b4:	2207      	movs	r2, #7
 80027b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff29 	bl	8002628 <__NVIC_SetPriorityGrouping>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027f0:	f7ff ff3e 	bl	8002670 <__NVIC_GetPriorityGrouping>
 80027f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	6978      	ldr	r0, [r7, #20]
 80027fc:	f7ff ff8e 	bl	800271c <NVIC_EncodePriority>
 8002800:	4602      	mov	r2, r0
 8002802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff5d 	bl	80026c8 <__NVIC_SetPriority>
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff31 	bl	800268c <__NVIC_EnableIRQ>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffa2 	bl	8002784 <SysTick_Config>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d008      	beq.n	8002874 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2204      	movs	r2, #4
 8002866:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e022      	b.n	80028ba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020e 	bic.w	r2, r2, #14
 8002882:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002898:	f003 021c 	and.w	r2, r3, #28
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d005      	beq.n	80028ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	e029      	b.n	800293e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 020e 	bic.w	r2, r2, #14
 80028f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	f003 021c 	and.w	r2, r3, #28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
    }
  }
  return status;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002956:	e17f      	b.n	8002c58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2101      	movs	r1, #1
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8171 	beq.w	8002c52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d005      	beq.n	8002988 <HAL_GPIO_Init+0x40>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d130      	bne.n	80029ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029be:	2201      	movs	r2, #1
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 0201 	and.w	r2, r3, #1
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d118      	bne.n	8002a28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029fc:	2201      	movs	r2, #1
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	f003 0201 	and.w	r2, r3, #1
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d017      	beq.n	8002a64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d123      	bne.n	8002ab8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	08da      	lsrs	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3208      	adds	r2, #8
 8002a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	6939      	ldr	r1, [r7, #16]
 8002ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0203 	and.w	r2, r3, #3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80ac 	beq.w	8002c52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afa:	4b5f      	ldr	r3, [pc, #380]	@ (8002c78 <HAL_GPIO_Init+0x330>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afe:	4a5e      	ldr	r2, [pc, #376]	@ (8002c78 <HAL_GPIO_Init+0x330>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b06:	4b5c      	ldr	r3, [pc, #368]	@ (8002c78 <HAL_GPIO_Init+0x330>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b12:	4a5a      	ldr	r2, [pc, #360]	@ (8002c7c <HAL_GPIO_Init+0x334>)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b3c:	d025      	beq.n	8002b8a <HAL_GPIO_Init+0x242>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4f      	ldr	r2, [pc, #316]	@ (8002c80 <HAL_GPIO_Init+0x338>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01f      	beq.n	8002b86 <HAL_GPIO_Init+0x23e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4e      	ldr	r2, [pc, #312]	@ (8002c84 <HAL_GPIO_Init+0x33c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d019      	beq.n	8002b82 <HAL_GPIO_Init+0x23a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4d      	ldr	r2, [pc, #308]	@ (8002c88 <HAL_GPIO_Init+0x340>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_GPIO_Init+0x236>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4c      	ldr	r2, [pc, #304]	@ (8002c8c <HAL_GPIO_Init+0x344>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00d      	beq.n	8002b7a <HAL_GPIO_Init+0x232>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4b      	ldr	r2, [pc, #300]	@ (8002c90 <HAL_GPIO_Init+0x348>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <HAL_GPIO_Init+0x22e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <HAL_GPIO_Init+0x34c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_GPIO_Init+0x22a>
 8002b6e:	2306      	movs	r3, #6
 8002b70:	e00c      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b72:	2307      	movs	r3, #7
 8002b74:	e00a      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b76:	2305      	movs	r3, #5
 8002b78:	e008      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	e006      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e004      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e002      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	f002 0203 	and.w	r2, r2, #3
 8002b92:	0092      	lsls	r2, r2, #2
 8002b94:	4093      	lsls	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b9c:	4937      	ldr	r1, [pc, #220]	@ (8002c7c <HAL_GPIO_Init+0x334>)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002baa:	4b3b      	ldr	r3, [pc, #236]	@ (8002c98 <HAL_GPIO_Init+0x350>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bce:	4a32      	ldr	r2, [pc, #200]	@ (8002c98 <HAL_GPIO_Init+0x350>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bd4:	4b30      	ldr	r3, [pc, #192]	@ (8002c98 <HAL_GPIO_Init+0x350>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bf8:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <HAL_GPIO_Init+0x350>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bfe:	4b26      	ldr	r3, [pc, #152]	@ (8002c98 <HAL_GPIO_Init+0x350>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c22:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <HAL_GPIO_Init+0x350>)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c28:	4b1b      	ldr	r3, [pc, #108]	@ (8002c98 <HAL_GPIO_Init+0x350>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c4c:	4a12      	ldr	r2, [pc, #72]	@ (8002c98 <HAL_GPIO_Init+0x350>)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3301      	adds	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f47f ae78 	bne.w	8002958 <HAL_GPIO_Init+0x10>
  }
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	48000400 	.word	0x48000400
 8002c84:	48000800 	.word	0x48000800
 8002c88:	48000c00 	.word	0x48000c00
 8002c8c:	48001000 	.word	0x48001000
 8002c90:	48001400 	.word	0x48001400
 8002c94:	48001800 	.word	0x48001800
 8002c98:	40010400 	.word	0x40010400

08002c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cac:	787b      	ldrb	r3, [r7, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cd0:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40007000 	.word	0x40007000

08002ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf6:	d130      	bne.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf8:	4b23      	ldr	r3, [pc, #140]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d04:	d038      	beq.n	8002d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d06:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d16:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2232      	movs	r2, #50	@ 0x32
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	4a1b      	ldr	r2, [pc, #108]	@ (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9b      	lsrs	r3, r3, #18
 8002d28:	3301      	adds	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d2c:	e002      	b.n	8002d34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d34:	4b14      	ldr	r3, [pc, #80]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d40:	d102      	bne.n	8002d48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f2      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d48:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d54:	d110      	bne.n	8002d78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e00f      	b.n	8002d7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d66:	d007      	beq.n	8002d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d68:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d70:	4a05      	ldr	r2, [pc, #20]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	431bde83 	.word	0x431bde83

08002d94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e3ca      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4b97      	ldr	r3, [pc, #604]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db0:	4b94      	ldr	r3, [pc, #592]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80e4 	beq.w	8002f90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <HAL_RCC_OscConfig+0x4a>
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	f040 808b 	bne.w	8002eec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 8087 	bne.w	8002eec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dde:	4b89      	ldr	r3, [pc, #548]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x62>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e3a2      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1a      	ldr	r2, [r3, #32]
 8002dfa:	4b82      	ldr	r3, [pc, #520]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <HAL_RCC_OscConfig+0x7c>
 8002e06:	4b7f      	ldr	r3, [pc, #508]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e0e:	e005      	b.n	8002e1c <HAL_RCC_OscConfig+0x88>
 8002e10:	4b7c      	ldr	r3, [pc, #496]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d223      	bcs.n	8002e68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fd55 	bl	80038d4 <RCC_SetFlashLatencyFromMSIRange>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e383      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e34:	4b73      	ldr	r3, [pc, #460]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a72      	ldr	r2, [pc, #456]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	f043 0308 	orr.w	r3, r3, #8
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b70      	ldr	r3, [pc, #448]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	496d      	ldr	r1, [pc, #436]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e52:	4b6c      	ldr	r3, [pc, #432]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	4968      	ldr	r1, [pc, #416]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
 8002e66:	e025      	b.n	8002eb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e68:	4b66      	ldr	r3, [pc, #408]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a65      	ldr	r2, [pc, #404]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	f043 0308 	orr.w	r3, r3, #8
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b63      	ldr	r3, [pc, #396]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4960      	ldr	r1, [pc, #384]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e86:	4b5f      	ldr	r3, [pc, #380]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	495b      	ldr	r1, [pc, #364]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fd15 	bl	80038d4 <RCC_SetFlashLatencyFromMSIRange>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e343      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb4:	f000 fc4a 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b52      	ldr	r3, [pc, #328]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	4950      	ldr	r1, [pc, #320]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800300c <HAL_RCC_OscConfig+0x278>)
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ed4:	4b4e      	ldr	r3, [pc, #312]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fb25 	bl	8002528 <HAL_InitTick>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d052      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	e327      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d032      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ef4:	4b43      	ldr	r3, [pc, #268]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a42      	ldr	r2, [pc, #264]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f00:	f7ff fb62 	bl	80025c8 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f08:	f7ff fb5e 	bl	80025c8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e310      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f26:	4b37      	ldr	r3, [pc, #220]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a36      	ldr	r2, [pc, #216]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b34      	ldr	r3, [pc, #208]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4931      	ldr	r1, [pc, #196]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f44:	4b2f      	ldr	r3, [pc, #188]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	492c      	ldr	r1, [pc, #176]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
 8002f58:	e01a      	b.n	8002f90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a29      	ldr	r2, [pc, #164]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f66:	f7ff fb2f 	bl	80025c8 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f6e:	f7ff fb2b 	bl	80025c8 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e2dd      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f80:	4b20      	ldr	r3, [pc, #128]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x1da>
 8002f8c:	e000      	b.n	8002f90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d074      	beq.n	8003086 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x21a>
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	d10e      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d064      	beq.n	8003084 <HAL_RCC_OscConfig+0x2f0>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d160      	bne.n	8003084 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e2ba      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x24a>
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	e026      	b.n	800302c <HAL_RCC_OscConfig+0x298>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fe6:	d115      	bne.n	8003014 <HAL_RCC_OscConfig+0x280>
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a05      	ldr	r2, [pc, #20]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002fee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b03      	ldr	r3, [pc, #12]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a02      	ldr	r2, [pc, #8]	@ (8003004 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	e014      	b.n	800302c <HAL_RCC_OscConfig+0x298>
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	0800b3f8 	.word	0x0800b3f8
 800300c:	20000000 	.word	0x20000000
 8003010:	20000004 	.word	0x20000004
 8003014:	4ba0      	ldr	r3, [pc, #640]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a9f      	ldr	r2, [pc, #636]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b9d      	ldr	r3, [pc, #628]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a9c      	ldr	r2, [pc, #624]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800302a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7ff fac8 	bl	80025c8 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7ff fac4 	bl	80025c8 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	@ 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e276      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304e:	4b92      	ldr	r3, [pc, #584]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x2a8>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7ff fab4 	bl	80025c8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7ff fab0 	bl	80025c8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	@ 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e262      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003076:	4b88      	ldr	r3, [pc, #544]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x2d0>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d060      	beq.n	8003154 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b04      	cmp	r3, #4
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_OscConfig+0x310>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b0c      	cmp	r3, #12
 800309c:	d119      	bne.n	80030d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d116      	bne.n	80030d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_OscConfig+0x328>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e23f      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b76      	ldr	r3, [pc, #472]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	4973      	ldr	r1, [pc, #460]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d0:	e040      	b.n	8003154 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d023      	beq.n	8003122 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030da:	4b6f      	ldr	r3, [pc, #444]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6e      	ldr	r2, [pc, #440]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7ff fa6f 	bl	80025c8 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ee:	f7ff fa6b 	bl	80025c8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e21d      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003100:	4b65      	ldr	r3, [pc, #404]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b62      	ldr	r3, [pc, #392]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	495f      	ldr	r1, [pc, #380]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
 8003120:	e018      	b.n	8003154 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003122:	4b5d      	ldr	r3, [pc, #372]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5c      	ldr	r2, [pc, #368]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800312c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7ff fa4b 	bl	80025c8 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003136:	f7ff fa47 	bl	80025c8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1f9      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003148:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d03c      	beq.n	80031da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01c      	beq.n	80031a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003168:	4b4b      	ldr	r3, [pc, #300]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316e:	4a4a      	ldr	r2, [pc, #296]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7ff fa26 	bl	80025c8 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003180:	f7ff fa22 	bl	80025c8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1d4      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003192:	4b41      	ldr	r3, [pc, #260]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ef      	beq.n	8003180 <HAL_RCC_OscConfig+0x3ec>
 80031a0:	e01b      	b.n	80031da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7ff fa09 	bl	80025c8 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ba:	f7ff fa05 	bl	80025c8 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e1b7      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031cc:	4b32      	ldr	r3, [pc, #200]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80031ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ef      	bne.n	80031ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80a6 	beq.w	8003334 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e8:	2300      	movs	r3, #0
 80031ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10d      	bne.n	8003214 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f8:	4b27      	ldr	r3, [pc, #156]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fc:	4a26      	ldr	r2, [pc, #152]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 80031fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003202:	6593      	str	r3, [r2, #88]	@ 0x58
 8003204:	4b24      	ldr	r3, [pc, #144]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003210:	2301      	movs	r3, #1
 8003212:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003214:	4b21      	ldr	r3, [pc, #132]	@ (800329c <HAL_RCC_OscConfig+0x508>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d118      	bne.n	8003252 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003220:	4b1e      	ldr	r3, [pc, #120]	@ (800329c <HAL_RCC_OscConfig+0x508>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1d      	ldr	r2, [pc, #116]	@ (800329c <HAL_RCC_OscConfig+0x508>)
 8003226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800322a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322c:	f7ff f9cc 	bl	80025c8 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003234:	f7ff f9c8 	bl	80025c8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e17a      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003246:	4b15      	ldr	r3, [pc, #84]	@ (800329c <HAL_RCC_OscConfig+0x508>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d108      	bne.n	800326c <HAL_RCC_OscConfig+0x4d8>
 800325a:	4b0f      	ldr	r3, [pc, #60]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003260:	4a0d      	ldr	r2, [pc, #52]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800326a:	e029      	b.n	80032c0 <HAL_RCC_OscConfig+0x52c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b05      	cmp	r3, #5
 8003272:	d115      	bne.n	80032a0 <HAL_RCC_OscConfig+0x50c>
 8003274:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	4a07      	ldr	r2, [pc, #28]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003284:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328a:	4a03      	ldr	r2, [pc, #12]	@ (8003298 <HAL_RCC_OscConfig+0x504>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003294:	e014      	b.n	80032c0 <HAL_RCC_OscConfig+0x52c>
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	40007000 	.word	0x40007000
 80032a0:	4b9c      	ldr	r3, [pc, #624]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a6:	4a9b      	ldr	r2, [pc, #620]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032b0:	4b98      	ldr	r3, [pc, #608]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b6:	4a97      	ldr	r2, [pc, #604]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80032b8:	f023 0304 	bic.w	r3, r3, #4
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d016      	beq.n	80032f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7ff f97e 	bl	80025c8 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7ff f97a 	bl	80025c8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e12a      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ed      	beq.n	80032d0 <HAL_RCC_OscConfig+0x53c>
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f6:	f7ff f967 	bl	80025c8 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7ff f963 	bl	80025c8 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e113      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003314:	4b7f      	ldr	r3, [pc, #508]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1ed      	bne.n	80032fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d105      	bne.n	8003334 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003328:	4b7a      	ldr	r3, [pc, #488]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332c:	4a79      	ldr	r2, [pc, #484]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 800332e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003332:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80fe 	beq.w	800353a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 80d0 	bne.w	80034e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003348:	4b72      	ldr	r3, [pc, #456]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 0203 	and.w	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	429a      	cmp	r2, r3
 800335a:	d130      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	3b01      	subs	r3, #1
 8003368:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d127      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d11f      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003388:	2a07      	cmp	r2, #7
 800338a:	bf14      	ite	ne
 800338c:	2201      	movne	r2, #1
 800338e:	2200      	moveq	r2, #0
 8003390:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003392:	4293      	cmp	r3, r2
 8003394:	d113      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d109      	bne.n	80033be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	3b01      	subs	r3, #1
 80033b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d06e      	beq.n	800349c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d069      	beq.n	8003498 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033c4:	4b53      	ldr	r3, [pc, #332]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033d0:	4b50      	ldr	r3, [pc, #320]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0ad      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033ec:	f7ff f8ec 	bl	80025c8 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7ff f8e8 	bl	80025c8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e09a      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003406:	4b43      	ldr	r3, [pc, #268]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003412:	4b40      	ldr	r3, [pc, #256]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	4b40      	ldr	r3, [pc, #256]	@ (8003518 <HAL_RCC_OscConfig+0x784>)
 8003418:	4013      	ands	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003422:	3a01      	subs	r2, #1
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	4311      	orrs	r1, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800342c:	0212      	lsls	r2, r2, #8
 800342e:	4311      	orrs	r1, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003434:	0852      	lsrs	r2, r2, #1
 8003436:	3a01      	subs	r2, #1
 8003438:	0552      	lsls	r2, r2, #21
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003440:	0852      	lsrs	r2, r2, #1
 8003442:	3a01      	subs	r2, #1
 8003444:	0652      	lsls	r2, r2, #25
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800344c:	0912      	lsrs	r2, r2, #4
 800344e:	0452      	lsls	r2, r2, #17
 8003450:	430a      	orrs	r2, r1
 8003452:	4930      	ldr	r1, [pc, #192]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 8003454:	4313      	orrs	r3, r2
 8003456:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003458:	4b2e      	ldr	r3, [pc, #184]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2d      	ldr	r2, [pc, #180]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 800345e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003464:	4b2b      	ldr	r3, [pc, #172]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a2a      	ldr	r2, [pc, #168]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 800346a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800346e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003470:	f7ff f8aa 	bl	80025c8 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7ff f8a6 	bl	80025c8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e058      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003496:	e050      	b.n	800353a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e04f      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349c:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d148      	bne.n	800353a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a19      	ldr	r2, [pc, #100]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b4:	4b17      	ldr	r3, [pc, #92]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a16      	ldr	r2, [pc, #88]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034c0:	f7ff f882 	bl	80025c8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7ff f87e 	bl	80025c8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e030      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	4b0e      	ldr	r3, [pc, #56]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x734>
 80034e6:	e028      	b.n	800353a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d023      	beq.n	8003536 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a08      	ldr	r2, [pc, #32]	@ (8003514 <HAL_RCC_OscConfig+0x780>)
 80034f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7ff f865 	bl	80025c8 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003500:	e00c      	b.n	800351c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003502:	f7ff f861 	bl	80025c8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d905      	bls.n	800351c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e013      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
 8003514:	40021000 	.word	0x40021000
 8003518:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351c:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <HAL_RCC_OscConfig+0x7b0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1ec      	bne.n	8003502 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003528:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_RCC_OscConfig+0x7b0>)
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	4905      	ldr	r1, [pc, #20]	@ (8003544 <HAL_RCC_OscConfig+0x7b0>)
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_OscConfig+0x7b4>)
 8003530:	4013      	ands	r3, r2
 8003532:	60cb      	str	r3, [r1, #12]
 8003534:	e001      	b.n	800353a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	feeefffc 	.word	0xfeeefffc

0800354c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0e7      	b.n	8003730 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b75      	ldr	r3, [pc, #468]	@ (8003738 <HAL_RCC_ClockConfig+0x1ec>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d910      	bls.n	8003590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b72      	ldr	r3, [pc, #456]	@ (8003738 <HAL_RCC_ClockConfig+0x1ec>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0207 	bic.w	r2, r3, #7
 8003576:	4970      	ldr	r1, [pc, #448]	@ (8003738 <HAL_RCC_ClockConfig+0x1ec>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b6e      	ldr	r3, [pc, #440]	@ (8003738 <HAL_RCC_ClockConfig+0x1ec>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0cf      	b.n	8003730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	4b66      	ldr	r3, [pc, #408]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d908      	bls.n	80035be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ac:	4b63      	ldr	r3, [pc, #396]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4960      	ldr	r1, [pc, #384]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d04c      	beq.n	8003664 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d2:	4b5a      	ldr	r3, [pc, #360]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d121      	bne.n	8003622 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0a6      	b.n	8003730 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ea:	4b54      	ldr	r3, [pc, #336]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d115      	bne.n	8003622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e09a      	b.n	8003730 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003602:	4b4e      	ldr	r3, [pc, #312]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e08e      	b.n	8003730 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003612:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e086      	b.n	8003730 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003622:	4b46      	ldr	r3, [pc, #280]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f023 0203 	bic.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4943      	ldr	r1, [pc, #268]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003634:	f7fe ffc8 	bl	80025c8 <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	e00a      	b.n	8003652 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363c:	f7fe ffc4 	bl	80025c8 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e06e      	b.n	8003730 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	4b3a      	ldr	r3, [pc, #232]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 020c 	and.w	r2, r3, #12
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	429a      	cmp	r2, r3
 8003662:	d1eb      	bne.n	800363c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d010      	beq.n	8003692 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	4b31      	ldr	r3, [pc, #196]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800367c:	429a      	cmp	r2, r3
 800367e:	d208      	bcs.n	8003692 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003680:	4b2e      	ldr	r3, [pc, #184]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	492b      	ldr	r1, [pc, #172]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003692:	4b29      	ldr	r3, [pc, #164]	@ (8003738 <HAL_RCC_ClockConfig+0x1ec>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d210      	bcs.n	80036c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a0:	4b25      	ldr	r3, [pc, #148]	@ (8003738 <HAL_RCC_ClockConfig+0x1ec>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 0207 	bic.w	r2, r3, #7
 80036a8:	4923      	ldr	r1, [pc, #140]	@ (8003738 <HAL_RCC_ClockConfig+0x1ec>)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b0:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <HAL_RCC_ClockConfig+0x1ec>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e036      	b.n	8003730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ce:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	4918      	ldr	r1, [pc, #96]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ec:	4b13      	ldr	r3, [pc, #76]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4910      	ldr	r1, [pc, #64]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003700:	f000 f824 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b0d      	ldr	r3, [pc, #52]	@ (800373c <HAL_RCC_ClockConfig+0x1f0>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	490b      	ldr	r1, [pc, #44]	@ (8003740 <HAL_RCC_ClockConfig+0x1f4>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
 800371c:	4a09      	ldr	r2, [pc, #36]	@ (8003744 <HAL_RCC_ClockConfig+0x1f8>)
 800371e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003720:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <HAL_RCC_ClockConfig+0x1fc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe feff 	bl	8002528 <HAL_InitTick>
 800372a:	4603      	mov	r3, r0
 800372c:	72fb      	strb	r3, [r7, #11]

  return status;
 800372e:	7afb      	ldrb	r3, [r7, #11]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40022000 	.word	0x40022000
 800373c:	40021000 	.word	0x40021000
 8003740:	0800b3f8 	.word	0x0800b3f8
 8003744:	20000000 	.word	0x20000000
 8003748:	20000004 	.word	0x20000004

0800374c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	@ 0x24
 8003750:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800375a:	4b3e      	ldr	r3, [pc, #248]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x108>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003764:	4b3b      	ldr	r3, [pc, #236]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x108>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x34>
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d121      	bne.n	80037be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d11e      	bne.n	80037be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003780:	4b34      	ldr	r3, [pc, #208]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x108>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800378c:	4b31      	ldr	r3, [pc, #196]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x108>)
 800378e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	e005      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800379c:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x108>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10d      	bne.n	80037d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037bc:	e00a      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c4:	4b25      	ldr	r3, [pc, #148]	@ (800385c <HAL_RCC_GetSysClockFreq+0x110>)
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	e004      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037d0:	4b23      	ldr	r3, [pc, #140]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x114>)
 80037d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d134      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037da:	4b1e      	ldr	r3, [pc, #120]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x108>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d003      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0xac>
 80037f0:	e005      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037f2:	4b1a      	ldr	r3, [pc, #104]	@ (800385c <HAL_RCC_GetSysClockFreq+0x110>)
 80037f4:	617b      	str	r3, [r7, #20]
      break;
 80037f6:	e005      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037f8:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x114>)
 80037fa:	617b      	str	r3, [r7, #20]
      break;
 80037fc:	e002      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	617b      	str	r3, [r7, #20]
      break;
 8003802:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003804:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	3301      	adds	r3, #1
 8003810:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003812:	4b10      	ldr	r3, [pc, #64]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x108>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	fb03 f202 	mul.w	r2, r3, r2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800382a:	4b0a      	ldr	r3, [pc, #40]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x108>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	0e5b      	lsrs	r3, r3, #25
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	3301      	adds	r3, #1
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003844:	69bb      	ldr	r3, [r7, #24]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3724      	adds	r7, #36	@ 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	0800b410 	.word	0x0800b410
 800385c:	00f42400 	.word	0x00f42400
 8003860:	007a1200 	.word	0x007a1200

08003864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003868:	4b03      	ldr	r3, [pc, #12]	@ (8003878 <HAL_RCC_GetHCLKFreq+0x14>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000000 	.word	0x20000000

0800387c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003880:	f7ff fff0 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4904      	ldr	r1, [pc, #16]	@ (80038a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	0800b408 	.word	0x0800b408

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038ac:	f7ff ffda 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0adb      	lsrs	r3, r3, #11
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4904      	ldr	r1, [pc, #16]	@ (80038d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	0800b408 	.word	0x0800b408

080038d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038e0:	4b2a      	ldr	r3, [pc, #168]	@ (800398c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038ec:	f7ff f9ee 	bl	8002ccc <HAL_PWREx_GetVoltageRange>
 80038f0:	6178      	str	r0, [r7, #20]
 80038f2:	e014      	b.n	800391e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	4b25      	ldr	r3, [pc, #148]	@ (800398c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f8:	4a24      	ldr	r2, [pc, #144]	@ (800398c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003900:	4b22      	ldr	r3, [pc, #136]	@ (800398c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800390c:	f7ff f9de 	bl	8002ccc <HAL_PWREx_GetVoltageRange>
 8003910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4b1e      	ldr	r3, [pc, #120]	@ (800398c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003916:	4a1d      	ldr	r2, [pc, #116]	@ (800398c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800391c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003924:	d10b      	bne.n	800393e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b80      	cmp	r3, #128	@ 0x80
 800392a:	d919      	bls.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003930:	d902      	bls.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003932:	2302      	movs	r3, #2
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	e013      	b.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003938:	2301      	movs	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e010      	b.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b80      	cmp	r3, #128	@ 0x80
 8003942:	d902      	bls.n	800394a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003944:	2303      	movs	r3, #3
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	e00a      	b.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b80      	cmp	r3, #128	@ 0x80
 800394e:	d102      	bne.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003950:	2302      	movs	r3, #2
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	e004      	b.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b70      	cmp	r3, #112	@ 0x70
 800395a:	d101      	bne.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800395c:	2301      	movs	r3, #1
 800395e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003960:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 0207 	bic.w	r2, r3, #7
 8003968:	4909      	ldr	r1, [pc, #36]	@ (8003990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003970:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	429a      	cmp	r2, r3
 800397c:	d001      	beq.n	8003982 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	40022000 	.word	0x40022000

08003994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800399c:	2300      	movs	r3, #0
 800399e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039a0:	2300      	movs	r3, #0
 80039a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d041      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039b8:	d02a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039be:	d824      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039c4:	d008      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039ca:	d81e      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039d4:	d010      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039d6:	e018      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d8:	4b86      	ldr	r3, [pc, #536]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4a85      	ldr	r2, [pc, #532]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e4:	e015      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fabb 	bl	8003f68 <RCCEx_PLLSAI1_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039f6:	e00c      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3320      	adds	r3, #32
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fba6 	bl	8004150 <RCCEx_PLLSAI2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a08:	e003      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a0e:	e000      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a18:	4b76      	ldr	r3, [pc, #472]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a26:	4973      	ldr	r1, [pc, #460]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a2e:	e001      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d041      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a48:	d02a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a4e:	d824      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a54:	d008      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a5a:	d81e      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a64:	d010      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a66:	e018      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a68:	4b62      	ldr	r3, [pc, #392]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a61      	ldr	r2, [pc, #388]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a74:	e015      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fa73 	bl	8003f68 <RCCEx_PLLSAI1_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a86:	e00c      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3320      	adds	r3, #32
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fb5e 	bl	8004150 <RCCEx_PLLSAI2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a98:	e003      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aa8:	4b52      	ldr	r3, [pc, #328]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ab6:	494f      	ldr	r1, [pc, #316]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003abe:	e001      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80a0 	beq.w	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ad6:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00d      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b41      	ldr	r3, [pc, #260]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af0:	4a40      	ldr	r2, [pc, #256]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003af8:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b04:	2301      	movs	r3, #1
 8003b06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b08:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b14:	f7fe fd58 	bl	80025c8 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b1a:	e009      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1c:	f7fe fd54 	bl	80025c8 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b2e:	e005      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b30:	4b31      	ldr	r3, [pc, #196]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d15c      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b42:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01f      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d019      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b6c:	4b21      	ldr	r3, [pc, #132]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b72:	4a20      	ldr	r2, [pc, #128]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b8c:	4a19      	ldr	r2, [pc, #100]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fe fd13 	bl	80025c8 <HAL_GetTick>
 8003ba2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba4:	e00b      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe fd0f 	bl	80025c8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d902      	bls.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	74fb      	strb	r3, [r7, #19]
            break;
 8003bbc:	e006      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ec      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd2:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003be2:	4904      	ldr	r1, [pc, #16]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bea:	e009      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	74bb      	strb	r3, [r7, #18]
 8003bf0:	e006      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c00:	7c7b      	ldrb	r3, [r7, #17]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d105      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c06:	4b9e      	ldr	r3, [pc, #632]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0a:	4a9d      	ldr	r2, [pc, #628]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c1e:	4b98      	ldr	r3, [pc, #608]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c24:	f023 0203 	bic.w	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2c:	4994      	ldr	r1, [pc, #592]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c40:	4b8f      	ldr	r3, [pc, #572]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c46:	f023 020c 	bic.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4e:	498c      	ldr	r1, [pc, #560]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c62:	4b87      	ldr	r3, [pc, #540]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	4983      	ldr	r1, [pc, #524]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c84:	4b7e      	ldr	r3, [pc, #504]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	497b      	ldr	r1, [pc, #492]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ca6:	4b76      	ldr	r3, [pc, #472]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb4:	4972      	ldr	r1, [pc, #456]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cc8:	4b6d      	ldr	r3, [pc, #436]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	496a      	ldr	r1, [pc, #424]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cea:	4b65      	ldr	r3, [pc, #404]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	4961      	ldr	r1, [pc, #388]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d0c:	4b5c      	ldr	r3, [pc, #368]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1a:	4959      	ldr	r1, [pc, #356]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d2e:	4b54      	ldr	r3, [pc, #336]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3c:	4950      	ldr	r1, [pc, #320]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d50:	4b4b      	ldr	r3, [pc, #300]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5e:	4948      	ldr	r1, [pc, #288]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d72:	4b43      	ldr	r3, [pc, #268]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d80:	493f      	ldr	r1, [pc, #252]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d028      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d94:	4b3a      	ldr	r3, [pc, #232]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003da2:	4937      	ldr	r1, [pc, #220]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db4:	4b32      	ldr	r3, [pc, #200]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a31      	ldr	r2, [pc, #196]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dbe:	60d3      	str	r3, [r2, #12]
 8003dc0:	e011      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f8c8 	bl	8003f68 <RCCEx_PLLSAI1_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d028      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003df2:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	491f      	ldr	r1, [pc, #124]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e10:	d106      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e12:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	4a1a      	ldr	r2, [pc, #104]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e1c:	60d3      	str	r3, [r2, #12]
 8003e1e:	e011      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f899 	bl	8003f68 <RCCEx_PLLSAI1_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02b      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e50:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5e:	4908      	ldr	r1, [pc, #32]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e6e:	d109      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e70:	4b03      	ldr	r3, [pc, #12]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a02      	ldr	r2, [pc, #8]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e7a:	60d3      	str	r3, [r2, #12]
 8003e7c:	e014      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3304      	adds	r3, #4
 8003e92:	2101      	movs	r1, #1
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f867 	bl	8003f68 <RCCEx_PLLSAI1_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02f      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ec2:	4928      	ldr	r1, [pc, #160]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ed2:	d10d      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f844 	bl	8003f68 <RCCEx_PLLSAI1_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d014      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	74bb      	strb	r3, [r7, #18]
 8003eee:	e011      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3320      	adds	r3, #32
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f925 	bl	8004150 <RCCEx_PLLSAI2_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f20:	4b10      	ldr	r3, [pc, #64]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f26:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f2e:	490d      	ldr	r1, [pc, #52]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f42:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f52:	4904      	ldr	r1, [pc, #16]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000

08003f68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f76:	4b75      	ldr	r3, [pc, #468]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d018      	beq.n	8003fb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f82:	4b72      	ldr	r3, [pc, #456]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0203 	and.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d10d      	bne.n	8003fae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
       ||
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f9a:	4b6c      	ldr	r3, [pc, #432]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
       ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d047      	beq.n	800403e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
 8003fb2:	e044      	b.n	800403e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d018      	beq.n	8003fee <RCCEx_PLLSAI1_Config+0x86>
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d825      	bhi.n	800400c <RCCEx_PLLSAI1_Config+0xa4>
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d002      	beq.n	8003fca <RCCEx_PLLSAI1_Config+0x62>
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d009      	beq.n	8003fdc <RCCEx_PLLSAI1_Config+0x74>
 8003fc8:	e020      	b.n	800400c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fca:	4b60      	ldr	r3, [pc, #384]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d11d      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fda:	e01a      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fdc:	4b5b      	ldr	r3, [pc, #364]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fec:	e013      	b.n	8004016 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fee:	4b57      	ldr	r3, [pc, #348]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10f      	bne.n	800401a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ffa:	4b54      	ldr	r3, [pc, #336]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800400a:	e006      	b.n	800401a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e004      	b.n	800401c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004012:	bf00      	nop
 8004014:	e002      	b.n	800401c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800401a:	bf00      	nop
    }

    if(status == HAL_OK)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10d      	bne.n	800403e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004022:	4b4a      	ldr	r3, [pc, #296]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6819      	ldr	r1, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	3b01      	subs	r3, #1
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	430b      	orrs	r3, r1
 8004038:	4944      	ldr	r1, [pc, #272]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d17d      	bne.n	8004140 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004044:	4b41      	ldr	r3, [pc, #260]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a40      	ldr	r2, [pc, #256]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 800404a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800404e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004050:	f7fe faba 	bl	80025c8 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004056:	e009      	b.n	800406c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004058:	f7fe fab6 	bl	80025c8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d902      	bls.n	800406c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	73fb      	strb	r3, [r7, #15]
        break;
 800406a:	e005      	b.n	8004078 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800406c:	4b37      	ldr	r3, [pc, #220]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1ef      	bne.n	8004058 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d160      	bne.n	8004140 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d111      	bne.n	80040a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004084:	4b31      	ldr	r3, [pc, #196]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800408c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6892      	ldr	r2, [r2, #8]
 8004094:	0211      	lsls	r1, r2, #8
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68d2      	ldr	r2, [r2, #12]
 800409a:	0912      	lsrs	r2, r2, #4
 800409c:	0452      	lsls	r2, r2, #17
 800409e:	430a      	orrs	r2, r1
 80040a0:	492a      	ldr	r1, [pc, #168]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	610b      	str	r3, [r1, #16]
 80040a6:	e027      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d112      	bne.n	80040d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ae:	4b27      	ldr	r3, [pc, #156]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80040b6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6892      	ldr	r2, [r2, #8]
 80040be:	0211      	lsls	r1, r2, #8
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6912      	ldr	r2, [r2, #16]
 80040c4:	0852      	lsrs	r2, r2, #1
 80040c6:	3a01      	subs	r2, #1
 80040c8:	0552      	lsls	r2, r2, #21
 80040ca:	430a      	orrs	r2, r1
 80040cc:	491f      	ldr	r1, [pc, #124]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	610b      	str	r3, [r1, #16]
 80040d2:	e011      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040d4:	4b1d      	ldr	r3, [pc, #116]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6892      	ldr	r2, [r2, #8]
 80040e4:	0211      	lsls	r1, r2, #8
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6952      	ldr	r2, [r2, #20]
 80040ea:	0852      	lsrs	r2, r2, #1
 80040ec:	3a01      	subs	r2, #1
 80040ee:	0652      	lsls	r2, r2, #25
 80040f0:	430a      	orrs	r2, r1
 80040f2:	4916      	ldr	r1, [pc, #88]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040f8:	4b14      	ldr	r3, [pc, #80]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a13      	ldr	r2, [pc, #76]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004102:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fe fa60 	bl	80025c8 <HAL_GetTick>
 8004108:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800410a:	e009      	b.n	8004120 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800410c:	f7fe fa5c 	bl	80025c8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d902      	bls.n	8004120 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	73fb      	strb	r3, [r7, #15]
          break;
 800411e:	e005      	b.n	800412c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004120:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ef      	beq.n	800410c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004132:	4b06      	ldr	r3, [pc, #24]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	4904      	ldr	r1, [pc, #16]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e4>)
 800413c:	4313      	orrs	r3, r2
 800413e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000

08004150 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800415e:	4b6a      	ldr	r3, [pc, #424]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d018      	beq.n	800419c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800416a:	4b67      	ldr	r3, [pc, #412]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0203 	and.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d10d      	bne.n	8004196 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
       ||
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004182:	4b61      	ldr	r3, [pc, #388]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
       ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d047      	beq.n	8004226 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
 800419a:	e044      	b.n	8004226 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d018      	beq.n	80041d6 <RCCEx_PLLSAI2_Config+0x86>
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d825      	bhi.n	80041f4 <RCCEx_PLLSAI2_Config+0xa4>
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d002      	beq.n	80041b2 <RCCEx_PLLSAI2_Config+0x62>
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d009      	beq.n	80041c4 <RCCEx_PLLSAI2_Config+0x74>
 80041b0:	e020      	b.n	80041f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041b2:	4b55      	ldr	r3, [pc, #340]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11d      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c2:	e01a      	b.n	80041fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041c4:	4b50      	ldr	r3, [pc, #320]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d116      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d4:	e013      	b.n	80041fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041e2:	4b49      	ldr	r3, [pc, #292]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041f2:	e006      	b.n	8004202 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
      break;
 80041f8:	e004      	b.n	8004204 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004202:	bf00      	nop
    }

    if(status == HAL_OK)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10d      	bne.n	8004226 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800420a:	4b3f      	ldr	r3, [pc, #252]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6819      	ldr	r1, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	430b      	orrs	r3, r1
 8004220:	4939      	ldr	r1, [pc, #228]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004222:	4313      	orrs	r3, r2
 8004224:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d167      	bne.n	80042fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800422c:	4b36      	ldr	r3, [pc, #216]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a35      	ldr	r2, [pc, #212]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004238:	f7fe f9c6 	bl	80025c8 <HAL_GetTick>
 800423c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800423e:	e009      	b.n	8004254 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004240:	f7fe f9c2 	bl	80025c8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d902      	bls.n	8004254 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	73fb      	strb	r3, [r7, #15]
        break;
 8004252:	e005      	b.n	8004260 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004254:	4b2c      	ldr	r3, [pc, #176]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ef      	bne.n	8004240 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d14a      	bne.n	80042fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d111      	bne.n	8004290 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800426c:	4b26      	ldr	r3, [pc, #152]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6892      	ldr	r2, [r2, #8]
 800427c:	0211      	lsls	r1, r2, #8
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68d2      	ldr	r2, [r2, #12]
 8004282:	0912      	lsrs	r2, r2, #4
 8004284:	0452      	lsls	r2, r2, #17
 8004286:	430a      	orrs	r2, r1
 8004288:	491f      	ldr	r1, [pc, #124]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	4313      	orrs	r3, r2
 800428c:	614b      	str	r3, [r1, #20]
 800428e:	e011      	b.n	80042b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004298:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	0211      	lsls	r1, r2, #8
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6912      	ldr	r2, [r2, #16]
 80042a6:	0852      	lsrs	r2, r2, #1
 80042a8:	3a01      	subs	r2, #1
 80042aa:	0652      	lsls	r2, r2, #25
 80042ac:	430a      	orrs	r2, r1
 80042ae:	4916      	ldr	r1, [pc, #88]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a13      	ldr	r2, [pc, #76]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fe f982 	bl	80025c8 <HAL_GetTick>
 80042c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042c6:	e009      	b.n	80042dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042c8:	f7fe f97e 	bl	80025c8 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d902      	bls.n	80042dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	73fb      	strb	r3, [r7, #15]
          break;
 80042da:	e005      	b.n	80042e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ef      	beq.n	80042c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042ee:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4904      	ldr	r1, [pc, #16]	@ (8004308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e049      	b.n	80043b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd ffbc 	bl	80022b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f000 fd76 	bl	8004e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e04f      	b.n	8004474 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a23      	ldr	r2, [pc, #140]	@ (8004480 <HAL_TIM_Base_Start_IT+0xc4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01d      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fe:	d018      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1f      	ldr	r2, [pc, #124]	@ (8004484 <HAL_TIM_Base_Start_IT+0xc8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1e      	ldr	r2, [pc, #120]	@ (8004488 <HAL_TIM_Base_Start_IT+0xcc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1c      	ldr	r2, [pc, #112]	@ (800448c <HAL_TIM_Base_Start_IT+0xd0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1b      	ldr	r2, [pc, #108]	@ (8004490 <HAL_TIM_Base_Start_IT+0xd4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a19      	ldr	r2, [pc, #100]	@ (8004494 <HAL_TIM_Base_Start_IT+0xd8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d115      	bne.n	800445e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b17      	ldr	r3, [pc, #92]	@ (8004498 <HAL_TIM_Base_Start_IT+0xdc>)
 800443a:	4013      	ands	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b06      	cmp	r3, #6
 8004442:	d015      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0xb4>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444a:	d011      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	e008      	b.n	8004470 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e000      	b.n	8004472 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004470:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40013400 	.word	0x40013400
 8004494:	40014000 	.word	0x40014000
 8004498:	00010007 	.word	0x00010007

0800449c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e049      	b.n	8004542 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd fe62 	bl	800218c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 fcae 	bl	8004e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_TIM_PWM_Start+0x24>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e03c      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b04      	cmp	r3, #4
 8004574:	d109      	bne.n	800458a <HAL_TIM_PWM_Start+0x3e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	e02f      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d109      	bne.n	80045a4 <HAL_TIM_PWM_Start+0x58>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e022      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b0c      	cmp	r3, #12
 80045a8:	d109      	bne.n	80045be <HAL_TIM_PWM_Start+0x72>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e015      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d109      	bne.n	80045d8 <HAL_TIM_PWM_Start+0x8c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e008      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e09c      	b.n	800472c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start+0xb6>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004600:	e023      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start+0xc6>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004610:	e01b      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start+0xd6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004620:	e013      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0xe6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004630:	e00b      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b10      	cmp	r3, #16
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Start+0xf6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004640:	e003      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2201      	movs	r2, #1
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ff62 	bl	800551c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a35      	ldr	r2, [pc, #212]	@ (8004734 <HAL_TIM_PWM_Start+0x1e8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_TIM_PWM_Start+0x13e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a34      	ldr	r2, [pc, #208]	@ (8004738 <HAL_TIM_PWM_Start+0x1ec>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00e      	beq.n	800468a <HAL_TIM_PWM_Start+0x13e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a32      	ldr	r2, [pc, #200]	@ (800473c <HAL_TIM_PWM_Start+0x1f0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d009      	beq.n	800468a <HAL_TIM_PWM_Start+0x13e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a31      	ldr	r2, [pc, #196]	@ (8004740 <HAL_TIM_PWM_Start+0x1f4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_TIM_PWM_Start+0x13e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a2f      	ldr	r2, [pc, #188]	@ (8004744 <HAL_TIM_PWM_Start+0x1f8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_TIM_PWM_Start+0x142>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <HAL_TIM_PWM_Start+0x144>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a22      	ldr	r2, [pc, #136]	@ (8004734 <HAL_TIM_PWM_Start+0x1e8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01d      	beq.n	80046ea <HAL_TIM_PWM_Start+0x19e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b6:	d018      	beq.n	80046ea <HAL_TIM_PWM_Start+0x19e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a22      	ldr	r2, [pc, #136]	@ (8004748 <HAL_TIM_PWM_Start+0x1fc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_TIM_PWM_Start+0x19e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a21      	ldr	r2, [pc, #132]	@ (800474c <HAL_TIM_PWM_Start+0x200>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_TIM_PWM_Start+0x19e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004750 <HAL_TIM_PWM_Start+0x204>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <HAL_TIM_PWM_Start+0x19e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <HAL_TIM_PWM_Start+0x1ec>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_TIM_PWM_Start+0x19e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a15      	ldr	r2, [pc, #84]	@ (800473c <HAL_TIM_PWM_Start+0x1f0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d115      	bne.n	8004716 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	4b18      	ldr	r3, [pc, #96]	@ (8004754 <HAL_TIM_PWM_Start+0x208>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b06      	cmp	r3, #6
 80046fa:	d015      	beq.n	8004728 <HAL_TIM_PWM_Start+0x1dc>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004702:	d011      	beq.n	8004728 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	e008      	b.n	8004728 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e000      	b.n	800472a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40013400 	.word	0x40013400
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	00010007 	.word	0x00010007

08004758 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e097      	b.n	800489c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d106      	bne.n	8004786 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fd fd23 	bl	80021cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800479c:	f023 0307 	bic.w	r3, r3, #7
 80047a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f000 fb45 	bl	8004e3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	4313      	orrs	r3, r2
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80047f8:	f023 030c 	bic.w	r3, r3, #12
 80047fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004804:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	4313      	orrs	r3, r2
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	011a      	lsls	r2, r3, #4
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	031b      	lsls	r3, r3, #12
 8004828:	4313      	orrs	r3, r2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004836:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800483e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	4313      	orrs	r3, r2
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d110      	bne.n	80048f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d102      	bne.n	80048e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048da:	7b7b      	ldrb	r3, [r7, #13]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d001      	beq.n	80048e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e069      	b.n	80049b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048f4:	e031      	b.n	800495a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d110      	bne.n	800491e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048fc:	7bbb      	ldrb	r3, [r7, #14]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d102      	bne.n	8004908 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004902:	7b3b      	ldrb	r3, [r7, #12]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d001      	beq.n	800490c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e055      	b.n	80049b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800491c:	e01d      	b.n	800495a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d108      	bne.n	8004936 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004924:	7bbb      	ldrb	r3, [r7, #14]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d105      	bne.n	8004936 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800492a:	7b7b      	ldrb	r3, [r7, #13]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d102      	bne.n	8004936 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004930:	7b3b      	ldrb	r3, [r7, #12]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d001      	beq.n	800493a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e03e      	b.n	80049b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_TIM_Encoder_Start+0xc4>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b04      	cmp	r3, #4
 8004964:	d008      	beq.n	8004978 <HAL_TIM_Encoder_Start+0xd4>
 8004966:	e00f      	b.n	8004988 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2201      	movs	r2, #1
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fdd3 	bl	800551c <TIM_CCxChannelCmd>
      break;
 8004976:	e016      	b.n	80049a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2201      	movs	r2, #1
 800497e:	2104      	movs	r1, #4
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fdcb 	bl	800551c <TIM_CCxChannelCmd>
      break;
 8004986:	e00e      	b.n	80049a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2201      	movs	r2, #1
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fdc3 	bl	800551c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	2104      	movs	r1, #4
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fdbc 	bl	800551c <TIM_CCxChannelCmd>
      break;
 80049a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d020      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01b      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0202 	mvn.w	r2, #2
 80049f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9f8 	bl	8004e00 <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9ea 	bl	8004dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f9fb 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d020      	beq.n	8004a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01b      	beq.n	8004a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0204 	mvn.w	r2, #4
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9d2 	bl	8004e00 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9c4 	bl	8004dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f9d5 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d020      	beq.n	8004abc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0208 	mvn.w	r2, #8
 8004a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2204      	movs	r2, #4
 8004a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9ac 	bl	8004e00 <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f99e 	bl	8004dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f9af 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d020      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0210 	mvn.w	r2, #16
 8004ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2208      	movs	r2, #8
 8004ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f986 	bl	8004e00 <HAL_TIM_IC_CaptureCallback>
 8004af4:	e005      	b.n	8004b02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f978 	bl	8004dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f989 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00c      	beq.n	8004b2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0201 	mvn.w	r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fad4 	bl	80010d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00c      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fe1c 	bl	8005788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fe14 	bl	800579c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f948 	bl	8004e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0220 	mvn.w	r2, #32
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fddc 	bl	8005774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e0ff      	b.n	8004de2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b14      	cmp	r3, #20
 8004bee:	f200 80f0 	bhi.w	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004dd3 	.word	0x08004dd3
 8004c00:	08004dd3 	.word	0x08004dd3
 8004c04:	08004dd3 	.word	0x08004dd3
 8004c08:	08004c8d 	.word	0x08004c8d
 8004c0c:	08004dd3 	.word	0x08004dd3
 8004c10:	08004dd3 	.word	0x08004dd3
 8004c14:	08004dd3 	.word	0x08004dd3
 8004c18:	08004ccf 	.word	0x08004ccf
 8004c1c:	08004dd3 	.word	0x08004dd3
 8004c20:	08004dd3 	.word	0x08004dd3
 8004c24:	08004dd3 	.word	0x08004dd3
 8004c28:	08004d0f 	.word	0x08004d0f
 8004c2c:	08004dd3 	.word	0x08004dd3
 8004c30:	08004dd3 	.word	0x08004dd3
 8004c34:	08004dd3 	.word	0x08004dd3
 8004c38:	08004d51 	.word	0x08004d51
 8004c3c:	08004dd3 	.word	0x08004dd3
 8004c40:	08004dd3 	.word	0x08004dd3
 8004c44:	08004dd3 	.word	0x08004dd3
 8004c48:	08004d91 	.word	0x08004d91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f98c 	bl	8004f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0208 	orr.w	r2, r2, #8
 8004c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0204 	bic.w	r2, r2, #4
 8004c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6999      	ldr	r1, [r3, #24]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	619a      	str	r2, [r3, #24]
      break;
 8004c8a:	e0a5      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 f9fc 	bl	8005090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6999      	ldr	r1, [r3, #24]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	619a      	str	r2, [r3, #24]
      break;
 8004ccc:	e084      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fa65 	bl	80051a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0208 	orr.w	r2, r2, #8
 8004ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0204 	bic.w	r2, r2, #4
 8004cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69d9      	ldr	r1, [r3, #28]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	61da      	str	r2, [r3, #28]
      break;
 8004d0c:	e064      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 facd 	bl	80052b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69d9      	ldr	r1, [r3, #28]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	021a      	lsls	r2, r3, #8
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	61da      	str	r2, [r3, #28]
      break;
 8004d4e:	e043      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fb16 	bl	8005388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0208 	orr.w	r2, r2, #8
 8004d6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0204 	bic.w	r2, r2, #4
 8004d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d8e:	e023      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fb5a 	bl	8005450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004daa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	021a      	lsls	r2, r3, #8
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004dd0:	e002      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop

08004dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a40      	ldr	r2, [pc, #256]	@ (8004f50 <TIM_Base_SetConfig+0x114>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5a:	d00f      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f54 <TIM_Base_SetConfig+0x118>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3c      	ldr	r2, [pc, #240]	@ (8004f58 <TIM_Base_SetConfig+0x11c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d007      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8004f5c <TIM_Base_SetConfig+0x120>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3a      	ldr	r2, [pc, #232]	@ (8004f60 <TIM_Base_SetConfig+0x124>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d108      	bne.n	8004e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2f      	ldr	r2, [pc, #188]	@ (8004f50 <TIM_Base_SetConfig+0x114>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01f      	beq.n	8004ed6 <TIM_Base_SetConfig+0x9a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9c:	d01b      	beq.n	8004ed6 <TIM_Base_SetConfig+0x9a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f54 <TIM_Base_SetConfig+0x118>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d017      	beq.n	8004ed6 <TIM_Base_SetConfig+0x9a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f58 <TIM_Base_SetConfig+0x11c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <TIM_Base_SetConfig+0x9a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f5c <TIM_Base_SetConfig+0x120>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00f      	beq.n	8004ed6 <TIM_Base_SetConfig+0x9a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a29      	ldr	r2, [pc, #164]	@ (8004f60 <TIM_Base_SetConfig+0x124>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <TIM_Base_SetConfig+0x9a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a28      	ldr	r2, [pc, #160]	@ (8004f64 <TIM_Base_SetConfig+0x128>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d007      	beq.n	8004ed6 <TIM_Base_SetConfig+0x9a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a27      	ldr	r2, [pc, #156]	@ (8004f68 <TIM_Base_SetConfig+0x12c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <TIM_Base_SetConfig+0x9a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a26      	ldr	r2, [pc, #152]	@ (8004f6c <TIM_Base_SetConfig+0x130>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d108      	bne.n	8004ee8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a10      	ldr	r2, [pc, #64]	@ (8004f50 <TIM_Base_SetConfig+0x114>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00f      	beq.n	8004f34 <TIM_Base_SetConfig+0xf8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a12      	ldr	r2, [pc, #72]	@ (8004f60 <TIM_Base_SetConfig+0x124>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <TIM_Base_SetConfig+0xf8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a11      	ldr	r2, [pc, #68]	@ (8004f64 <TIM_Base_SetConfig+0x128>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0xf8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a10      	ldr	r2, [pc, #64]	@ (8004f68 <TIM_Base_SetConfig+0x12c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0xf8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8004f6c <TIM_Base_SetConfig+0x130>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d103      	bne.n	8004f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	615a      	str	r2, [r3, #20]
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40013400 	.word	0x40013400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40014400 	.word	0x40014400
 8004f6c:	40014800 	.word	0x40014800

08004f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f023 0201 	bic.w	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 0302 	bic.w	r3, r3, #2
 8004fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a2c      	ldr	r2, [pc, #176]	@ (800507c <TIM_OC1_SetConfig+0x10c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00f      	beq.n	8004ff0 <TIM_OC1_SetConfig+0x80>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8005080 <TIM_OC1_SetConfig+0x110>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_OC1_SetConfig+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a2a      	ldr	r2, [pc, #168]	@ (8005084 <TIM_OC1_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_OC1_SetConfig+0x80>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a29      	ldr	r2, [pc, #164]	@ (8005088 <TIM_OC1_SetConfig+0x118>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC1_SetConfig+0x80>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a28      	ldr	r2, [pc, #160]	@ (800508c <TIM_OC1_SetConfig+0x11c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10c      	bne.n	800500a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0308 	bic.w	r3, r3, #8
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f023 0304 	bic.w	r3, r3, #4
 8005008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1b      	ldr	r2, [pc, #108]	@ (800507c <TIM_OC1_SetConfig+0x10c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00f      	beq.n	8005032 <TIM_OC1_SetConfig+0xc2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1a      	ldr	r2, [pc, #104]	@ (8005080 <TIM_OC1_SetConfig+0x110>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00b      	beq.n	8005032 <TIM_OC1_SetConfig+0xc2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a19      	ldr	r2, [pc, #100]	@ (8005084 <TIM_OC1_SetConfig+0x114>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <TIM_OC1_SetConfig+0xc2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a18      	ldr	r2, [pc, #96]	@ (8005088 <TIM_OC1_SetConfig+0x118>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_OC1_SetConfig+0xc2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a17      	ldr	r2, [pc, #92]	@ (800508c <TIM_OC1_SetConfig+0x11c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d111      	bne.n	8005056 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	621a      	str	r2, [r3, #32]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40013400 	.word	0x40013400
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400
 800508c:	40014800 	.word	0x40014800

08005090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f023 0210 	bic.w	r2, r3, #16
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0320 	bic.w	r3, r3, #32
 80050de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a28      	ldr	r2, [pc, #160]	@ (8005190 <TIM_OC2_SetConfig+0x100>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC2_SetConfig+0x6c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a27      	ldr	r2, [pc, #156]	@ (8005194 <TIM_OC2_SetConfig+0x104>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10d      	bne.n	8005118 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1d      	ldr	r2, [pc, #116]	@ (8005190 <TIM_OC2_SetConfig+0x100>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00f      	beq.n	8005140 <TIM_OC2_SetConfig+0xb0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a1c      	ldr	r2, [pc, #112]	@ (8005194 <TIM_OC2_SetConfig+0x104>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00b      	beq.n	8005140 <TIM_OC2_SetConfig+0xb0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <TIM_OC2_SetConfig+0x108>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_OC2_SetConfig+0xb0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a1a      	ldr	r2, [pc, #104]	@ (800519c <TIM_OC2_SetConfig+0x10c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_OC2_SetConfig+0xb0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a19      	ldr	r2, [pc, #100]	@ (80051a0 <TIM_OC2_SetConfig+0x110>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d113      	bne.n	8005168 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	621a      	str	r2, [r3, #32]
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40013400 	.word	0x40013400
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400
 80051a0:	40014800 	.word	0x40014800

080051a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a27      	ldr	r2, [pc, #156]	@ (80052a0 <TIM_OC3_SetConfig+0xfc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_OC3_SetConfig+0x6a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a26      	ldr	r2, [pc, #152]	@ (80052a4 <TIM_OC3_SetConfig+0x100>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10d      	bne.n	800522a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1c      	ldr	r2, [pc, #112]	@ (80052a0 <TIM_OC3_SetConfig+0xfc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00f      	beq.n	8005252 <TIM_OC3_SetConfig+0xae>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1b      	ldr	r2, [pc, #108]	@ (80052a4 <TIM_OC3_SetConfig+0x100>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00b      	beq.n	8005252 <TIM_OC3_SetConfig+0xae>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1a      	ldr	r2, [pc, #104]	@ (80052a8 <TIM_OC3_SetConfig+0x104>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <TIM_OC3_SetConfig+0xae>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a19      	ldr	r2, [pc, #100]	@ (80052ac <TIM_OC3_SetConfig+0x108>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_OC3_SetConfig+0xae>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a18      	ldr	r2, [pc, #96]	@ (80052b0 <TIM_OC3_SetConfig+0x10c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d113      	bne.n	800527a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40013400 	.word	0x40013400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40014400 	.word	0x40014400
 80052b0:	40014800 	.word	0x40014800

080052b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	031b      	lsls	r3, r3, #12
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a18      	ldr	r2, [pc, #96]	@ (8005374 <TIM_OC4_SetConfig+0xc0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00f      	beq.n	8005338 <TIM_OC4_SetConfig+0x84>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a17      	ldr	r2, [pc, #92]	@ (8005378 <TIM_OC4_SetConfig+0xc4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00b      	beq.n	8005338 <TIM_OC4_SetConfig+0x84>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a16      	ldr	r2, [pc, #88]	@ (800537c <TIM_OC4_SetConfig+0xc8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d007      	beq.n	8005338 <TIM_OC4_SetConfig+0x84>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a15      	ldr	r2, [pc, #84]	@ (8005380 <TIM_OC4_SetConfig+0xcc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_OC4_SetConfig+0x84>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a14      	ldr	r2, [pc, #80]	@ (8005384 <TIM_OC4_SetConfig+0xd0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d109      	bne.n	800534c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800533e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40013400 	.word	0x40013400
 800537c:	40014000 	.word	0x40014000
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800

08005388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a17      	ldr	r2, [pc, #92]	@ (800543c <TIM_OC5_SetConfig+0xb4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a16      	ldr	r2, [pc, #88]	@ (8005440 <TIM_OC5_SetConfig+0xb8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a15      	ldr	r2, [pc, #84]	@ (8005444 <TIM_OC5_SetConfig+0xbc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a14      	ldr	r2, [pc, #80]	@ (8005448 <TIM_OC5_SetConfig+0xc0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a13      	ldr	r2, [pc, #76]	@ (800544c <TIM_OC5_SetConfig+0xc4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d109      	bne.n	8005416 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800

08005450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	051b      	lsls	r3, r3, #20
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <TIM_OC6_SetConfig+0xb8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00f      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a17      	ldr	r2, [pc, #92]	@ (800550c <TIM_OC6_SetConfig+0xbc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a16      	ldr	r2, [pc, #88]	@ (8005510 <TIM_OC6_SetConfig+0xc0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a15      	ldr	r2, [pc, #84]	@ (8005514 <TIM_OC6_SetConfig+0xc4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a14      	ldr	r2, [pc, #80]	@ (8005518 <TIM_OC6_SetConfig+0xc8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d109      	bne.n	80054e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800

0800551c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	2201      	movs	r2, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1a      	ldr	r2, [r3, #32]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	43db      	mvns	r3, r3
 800553e:	401a      	ands	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1a      	ldr	r2, [r3, #32]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	fa01 f303 	lsl.w	r3, r1, r3
 8005554:	431a      	orrs	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800557c:	2302      	movs	r3, #2
 800557e:	e068      	b.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2d      	ldr	r2, [pc, #180]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d108      	bne.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01d      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f2:	d018      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1a      	ldr	r2, [pc, #104]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a18      	ldr	r2, [pc, #96]	@ (8005670 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a13      	ldr	r2, [pc, #76]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a14      	ldr	r2, [pc, #80]	@ (8005674 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10c      	bne.n	8005640 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800562c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40013400 	.word	0x40013400
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800
 8005670:	40000c00 	.word	0x40000c00
 8005674:	40014000 	.word	0x40014000

08005678 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005690:	2302      	movs	r3, #2
 8005692:	e065      	b.n	8005760 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a16      	ldr	r2, [pc, #88]	@ (800576c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a14      	ldr	r2, [pc, #80]	@ (8005770 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d115      	bne.n	800574e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	051b      	lsls	r3, r3, #20
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	40012c00 	.word	0x40012c00
 8005770:	40013400 	.word	0x40013400

08005774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e040      	b.n	8005844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc fdfa 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	@ 0x24
 80057dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0201 	bic.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fec0 	bl	800657c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fc05 	bl	800600c <UART_SetConfig>
 8005802:	4603      	mov	r3, r0
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e01b      	b.n	8005844 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800581a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800582a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 ff3f 	bl	80066c0 <UART_CheckIdleState>
 8005842:	4603      	mov	r3, r0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	@ 0x28
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005860:	2b20      	cmp	r3, #32
 8005862:	d177      	bne.n	8005954 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_UART_Transmit+0x24>
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e070      	b.n	8005956 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2221      	movs	r2, #33	@ 0x21
 8005880:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005882:	f7fc fea1 	bl	80025c8 <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	88fa      	ldrh	r2, [r7, #6]
 800588c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	88fa      	ldrh	r2, [r7, #6]
 8005894:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a0:	d108      	bne.n	80058b4 <HAL_UART_Transmit+0x68>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	e003      	b.n	80058bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058bc:	e02f      	b.n	800591e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2180      	movs	r1, #128	@ 0x80
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 ffa1 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e03b      	b.n	8005956 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	881a      	ldrh	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f0:	b292      	uxth	r2, r2
 80058f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	3302      	adds	r3, #2
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e007      	b.n	800590c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	781a      	ldrb	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3301      	adds	r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1c9      	bne.n	80058be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2200      	movs	r2, #0
 8005932:	2140      	movs	r1, #64	@ 0x40
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 ff6b 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e005      	b.n	8005956 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08a      	sub	sp, #40	@ 0x28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005974:	2b20      	cmp	r3, #32
 8005976:	d137      	bne.n	80059e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_UART_Receive_IT+0x24>
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e030      	b.n	80059ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a18      	ldr	r2, [pc, #96]	@ (80059f4 <HAL_UART_Receive_IT+0x94>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d01f      	beq.n	80059d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d018      	beq.n	80059d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	613b      	str	r3, [r7, #16]
   return(result);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	623b      	str	r3, [r7, #32]
 80059c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	69f9      	ldr	r1, [r7, #28]
 80059ca:	6a3a      	ldr	r2, [r7, #32]
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059d8:	88fb      	ldrh	r3, [r7, #6]
 80059da:	461a      	mov	r2, r3
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 ff7e 	bl	80068e0 <UART_Start_Receive_IT>
 80059e4:	4603      	mov	r3, r0
 80059e6:	e000      	b.n	80059ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059e8:	2302      	movs	r3, #2
  }
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3728      	adds	r7, #40	@ 0x28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40008000 	.word	0x40008000

080059f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b0ba      	sub	sp, #232	@ 0xe8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a26:	4013      	ands	r3, r2
 8005a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d115      	bne.n	8005a60 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00f      	beq.n	8005a60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 82ae 	beq.w	8005fb2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
      }
      return;
 8005a5e:	e2a8      	b.n	8005fb2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005a60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8117 	beq.w	8005c98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a7a:	4b85      	ldr	r3, [pc, #532]	@ (8005c90 <HAL_UART_IRQHandler+0x298>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 810a 	beq.w	8005c98 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d011      	beq.n	8005ab4 <HAL_UART_IRQHandler+0xbc>
 8005a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d011      	beq.n	8005ae4 <HAL_UART_IRQHandler+0xec>
 8005ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ada:	f043 0204 	orr.w	r2, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d011      	beq.n	8005b14 <HAL_UART_IRQHandler+0x11c>
 8005af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2204      	movs	r2, #4
 8005b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b0a:	f043 0202 	orr.w	r2, r3, #2
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d017      	beq.n	8005b50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b46:	f043 0208 	orr.w	r2, r3, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d012      	beq.n	8005b82 <HAL_UART_IRQHandler+0x18a>
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00c      	beq.n	8005b82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8214 	beq.w	8005fb6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bca:	2b40      	cmp	r3, #64	@ 0x40
 8005bcc:	d005      	beq.n	8005bda <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d04f      	beq.n	8005c7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 ff46 	bl	8006a6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bea:	2b40      	cmp	r3, #64	@ 0x40
 8005bec:	d141      	bne.n	8005c72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1d9      	bne.n	8005bee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d013      	beq.n	8005c6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c46:	4a13      	ldr	r2, [pc, #76]	@ (8005c94 <HAL_UART_IRQHandler+0x29c>)
 8005c48:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fc fe39 	bl	80028c6 <HAL_DMA_Abort_IT>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d017      	beq.n	8005c8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c64:	4610      	mov	r0, r2
 8005c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c68:	e00f      	b.n	8005c8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f9b8 	bl	8005fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	e00b      	b.n	8005c8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f9b4 	bl	8005fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	e007      	b.n	8005c8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9b0 	bl	8005fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005c88:	e195      	b.n	8005fb6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c8a:	bf00      	nop
    return;
 8005c8c:	e193      	b.n	8005fb6 <HAL_UART_IRQHandler+0x5be>
 8005c8e:	bf00      	nop
 8005c90:	04000120 	.word	0x04000120
 8005c94:	08006b35 	.word	0x08006b35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	f040 814e 	bne.w	8005f3e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8147 	beq.w	8005f3e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8140 	beq.w	8005f3e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2210      	movs	r2, #16
 8005cc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	f040 80b8 	bne.w	8005e46 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ce2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8167 	beq.w	8005fba <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	f080 815f 	bcs.w	8005fba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f040 8086 	bne.w	8005e24 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1da      	bne.n	8005d18 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3308      	adds	r3, #8
 8005d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e1      	bne.n	8005d62 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e3      	bne.n	8005d9e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005df4:	f023 0310 	bic.w	r3, r3, #16
 8005df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e4      	bne.n	8005de4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fc fd13 	bl	800284a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8d8 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e44:	e0b9      	b.n	8005fba <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 80ab 	beq.w	8005fbe <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80a6 	beq.w	8005fbe <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e4      	bne.n	8005e72 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	f023 0301 	bic.w	r3, r3, #1
 8005ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ecc:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e3      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f023 0310 	bic.w	r3, r3, #16
 8005f08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	69b9      	ldr	r1, [r7, #24]
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	617b      	str	r3, [r7, #20]
   return(result);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e4      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f85c 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f3c:	e03f      	b.n	8005fbe <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <HAL_UART_IRQHandler+0x570>
 8005f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 ffe3 	bl	8006f2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f66:	e02d      	b.n	8005fc4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00e      	beq.n	8005f92 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01c      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
    }
    return;
 8005f90:	e017      	b.n	8005fc2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d012      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x5cc>
 8005f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00c      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fdd8 	bl	8006b60 <UART_EndTransmit_IT>
    return;
 8005fb0:	e008      	b.n	8005fc4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005fb2:	bf00      	nop
 8005fb4:	e006      	b.n	8005fc4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005fb6:	bf00      	nop
 8005fb8:	e004      	b.n	8005fc4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005fba:	bf00      	nop
 8005fbc:	e002      	b.n	8005fc4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005fc2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005fc4:	37e8      	adds	r7, #232	@ 0xe8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop

08005fcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800600c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006010:	b08a      	sub	sp, #40	@ 0x28
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	431a      	orrs	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	431a      	orrs	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	4313      	orrs	r3, r2
 8006032:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4ba4      	ldr	r3, [pc, #656]	@ (80062cc <UART_SetConfig+0x2c0>)
 800603c:	4013      	ands	r3, r2
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006044:	430b      	orrs	r3, r1
 8006046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a99      	ldr	r2, [pc, #612]	@ (80062d0 <UART_SetConfig+0x2c4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006074:	4313      	orrs	r3, r2
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006088:	430a      	orrs	r2, r1
 800608a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a90      	ldr	r2, [pc, #576]	@ (80062d4 <UART_SetConfig+0x2c8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d126      	bne.n	80060e4 <UART_SetConfig+0xd8>
 8006096:	4b90      	ldr	r3, [pc, #576]	@ (80062d8 <UART_SetConfig+0x2cc>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d81b      	bhi.n	80060dc <UART_SetConfig+0xd0>
 80060a4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <UART_SetConfig+0xa0>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060bd 	.word	0x080060bd
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060d5 	.word	0x080060d5
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c2:	e116      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060c4:	2302      	movs	r3, #2
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ca:	e112      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d2:	e10e      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060da:	e10a      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060e2:	e106      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a7c      	ldr	r2, [pc, #496]	@ (80062dc <UART_SetConfig+0x2d0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d138      	bne.n	8006160 <UART_SetConfig+0x154>
 80060ee:	4b7a      	ldr	r3, [pc, #488]	@ (80062d8 <UART_SetConfig+0x2cc>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f4:	f003 030c 	and.w	r3, r3, #12
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	d82d      	bhi.n	8006158 <UART_SetConfig+0x14c>
 80060fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006104 <UART_SetConfig+0xf8>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006139 	.word	0x08006139
 8006108:	08006159 	.word	0x08006159
 800610c:	08006159 	.word	0x08006159
 8006110:	08006159 	.word	0x08006159
 8006114:	08006149 	.word	0x08006149
 8006118:	08006159 	.word	0x08006159
 800611c:	08006159 	.word	0x08006159
 8006120:	08006159 	.word	0x08006159
 8006124:	08006141 	.word	0x08006141
 8006128:	08006159 	.word	0x08006159
 800612c:	08006159 	.word	0x08006159
 8006130:	08006159 	.word	0x08006159
 8006134:	08006151 	.word	0x08006151
 8006138:	2300      	movs	r3, #0
 800613a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800613e:	e0d8      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006140:	2302      	movs	r3, #2
 8006142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006146:	e0d4      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006148:	2304      	movs	r3, #4
 800614a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800614e:	e0d0      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006150:	2308      	movs	r3, #8
 8006152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006156:	e0cc      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006158:	2310      	movs	r3, #16
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800615e:	e0c8      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a5e      	ldr	r2, [pc, #376]	@ (80062e0 <UART_SetConfig+0x2d4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d125      	bne.n	80061b6 <UART_SetConfig+0x1aa>
 800616a:	4b5b      	ldr	r3, [pc, #364]	@ (80062d8 <UART_SetConfig+0x2cc>)
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006170:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006174:	2b30      	cmp	r3, #48	@ 0x30
 8006176:	d016      	beq.n	80061a6 <UART_SetConfig+0x19a>
 8006178:	2b30      	cmp	r3, #48	@ 0x30
 800617a:	d818      	bhi.n	80061ae <UART_SetConfig+0x1a2>
 800617c:	2b20      	cmp	r3, #32
 800617e:	d00a      	beq.n	8006196 <UART_SetConfig+0x18a>
 8006180:	2b20      	cmp	r3, #32
 8006182:	d814      	bhi.n	80061ae <UART_SetConfig+0x1a2>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <UART_SetConfig+0x182>
 8006188:	2b10      	cmp	r3, #16
 800618a:	d008      	beq.n	800619e <UART_SetConfig+0x192>
 800618c:	e00f      	b.n	80061ae <UART_SetConfig+0x1a2>
 800618e:	2300      	movs	r3, #0
 8006190:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006194:	e0ad      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006196:	2302      	movs	r3, #2
 8006198:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800619c:	e0a9      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800619e:	2304      	movs	r3, #4
 80061a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061a4:	e0a5      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061a6:	2308      	movs	r3, #8
 80061a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ac:	e0a1      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061ae:	2310      	movs	r3, #16
 80061b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061b4:	e09d      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a4a      	ldr	r2, [pc, #296]	@ (80062e4 <UART_SetConfig+0x2d8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d125      	bne.n	800620c <UART_SetConfig+0x200>
 80061c0:	4b45      	ldr	r3, [pc, #276]	@ (80062d8 <UART_SetConfig+0x2cc>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80061cc:	d016      	beq.n	80061fc <UART_SetConfig+0x1f0>
 80061ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80061d0:	d818      	bhi.n	8006204 <UART_SetConfig+0x1f8>
 80061d2:	2b80      	cmp	r3, #128	@ 0x80
 80061d4:	d00a      	beq.n	80061ec <UART_SetConfig+0x1e0>
 80061d6:	2b80      	cmp	r3, #128	@ 0x80
 80061d8:	d814      	bhi.n	8006204 <UART_SetConfig+0x1f8>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <UART_SetConfig+0x1d8>
 80061de:	2b40      	cmp	r3, #64	@ 0x40
 80061e0:	d008      	beq.n	80061f4 <UART_SetConfig+0x1e8>
 80061e2:	e00f      	b.n	8006204 <UART_SetConfig+0x1f8>
 80061e4:	2300      	movs	r3, #0
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ea:	e082      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061ec:	2302      	movs	r3, #2
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061f2:	e07e      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061f4:	2304      	movs	r3, #4
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061fa:	e07a      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80061fc:	2308      	movs	r3, #8
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006202:	e076      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006204:	2310      	movs	r3, #16
 8006206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800620a:	e072      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a35      	ldr	r2, [pc, #212]	@ (80062e8 <UART_SetConfig+0x2dc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d12a      	bne.n	800626c <UART_SetConfig+0x260>
 8006216:	4b30      	ldr	r3, [pc, #192]	@ (80062d8 <UART_SetConfig+0x2cc>)
 8006218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006220:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006224:	d01a      	beq.n	800625c <UART_SetConfig+0x250>
 8006226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800622a:	d81b      	bhi.n	8006264 <UART_SetConfig+0x258>
 800622c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006230:	d00c      	beq.n	800624c <UART_SetConfig+0x240>
 8006232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006236:	d815      	bhi.n	8006264 <UART_SetConfig+0x258>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <UART_SetConfig+0x238>
 800623c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006240:	d008      	beq.n	8006254 <UART_SetConfig+0x248>
 8006242:	e00f      	b.n	8006264 <UART_SetConfig+0x258>
 8006244:	2300      	movs	r3, #0
 8006246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800624a:	e052      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800624c:	2302      	movs	r3, #2
 800624e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006252:	e04e      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006254:	2304      	movs	r3, #4
 8006256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800625a:	e04a      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800625c:	2308      	movs	r3, #8
 800625e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006262:	e046      	b.n	80062f2 <UART_SetConfig+0x2e6>
 8006264:	2310      	movs	r3, #16
 8006266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800626a:	e042      	b.n	80062f2 <UART_SetConfig+0x2e6>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a17      	ldr	r2, [pc, #92]	@ (80062d0 <UART_SetConfig+0x2c4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d13a      	bne.n	80062ec <UART_SetConfig+0x2e0>
 8006276:	4b18      	ldr	r3, [pc, #96]	@ (80062d8 <UART_SetConfig+0x2cc>)
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800627c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006280:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006284:	d01a      	beq.n	80062bc <UART_SetConfig+0x2b0>
 8006286:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800628a:	d81b      	bhi.n	80062c4 <UART_SetConfig+0x2b8>
 800628c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006290:	d00c      	beq.n	80062ac <UART_SetConfig+0x2a0>
 8006292:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006296:	d815      	bhi.n	80062c4 <UART_SetConfig+0x2b8>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <UART_SetConfig+0x298>
 800629c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a0:	d008      	beq.n	80062b4 <UART_SetConfig+0x2a8>
 80062a2:	e00f      	b.n	80062c4 <UART_SetConfig+0x2b8>
 80062a4:	2300      	movs	r3, #0
 80062a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062aa:	e022      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062ac:	2302      	movs	r3, #2
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062b2:	e01e      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062b4:	2304      	movs	r3, #4
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ba:	e01a      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062bc:	2308      	movs	r3, #8
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062c2:	e016      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ca:	e012      	b.n	80062f2 <UART_SetConfig+0x2e6>
 80062cc:	efff69f3 	.word	0xefff69f3
 80062d0:	40008000 	.word	0x40008000
 80062d4:	40013800 	.word	0x40013800
 80062d8:	40021000 	.word	0x40021000
 80062dc:	40004400 	.word	0x40004400
 80062e0:	40004800 	.word	0x40004800
 80062e4:	40004c00 	.word	0x40004c00
 80062e8:	40005000 	.word	0x40005000
 80062ec:	2310      	movs	r3, #16
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a9f      	ldr	r2, [pc, #636]	@ (8006574 <UART_SetConfig+0x568>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d17a      	bne.n	80063f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006300:	2b08      	cmp	r3, #8
 8006302:	d824      	bhi.n	800634e <UART_SetConfig+0x342>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <UART_SetConfig+0x300>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006331 	.word	0x08006331
 8006310:	0800634f 	.word	0x0800634f
 8006314:	08006339 	.word	0x08006339
 8006318:	0800634f 	.word	0x0800634f
 800631c:	0800633f 	.word	0x0800633f
 8006320:	0800634f 	.word	0x0800634f
 8006324:	0800634f 	.word	0x0800634f
 8006328:	0800634f 	.word	0x0800634f
 800632c:	08006347 	.word	0x08006347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006330:	f7fd faa4 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8006334:	61f8      	str	r0, [r7, #28]
        break;
 8006336:	e010      	b.n	800635a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006338:	4b8f      	ldr	r3, [pc, #572]	@ (8006578 <UART_SetConfig+0x56c>)
 800633a:	61fb      	str	r3, [r7, #28]
        break;
 800633c:	e00d      	b.n	800635a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800633e:	f7fd fa05 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8006342:	61f8      	str	r0, [r7, #28]
        break;
 8006344:	e009      	b.n	800635a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800634a:	61fb      	str	r3, [r7, #28]
        break;
 800634c:	e005      	b.n	800635a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80fb 	beq.w	8006558 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4613      	mov	r3, r2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	4413      	add	r3, r2
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	429a      	cmp	r2, r3
 8006370:	d305      	bcc.n	800637e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	429a      	cmp	r2, r3
 800637c:	d903      	bls.n	8006386 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006384:	e0e8      	b.n	8006558 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2200      	movs	r2, #0
 800638a:	461c      	mov	r4, r3
 800638c:	4615      	mov	r5, r2
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	022b      	lsls	r3, r5, #8
 8006398:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800639c:	0222      	lsls	r2, r4, #8
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6849      	ldr	r1, [r1, #4]
 80063a2:	0849      	lsrs	r1, r1, #1
 80063a4:	2000      	movs	r0, #0
 80063a6:	4688      	mov	r8, r1
 80063a8:	4681      	mov	r9, r0
 80063aa:	eb12 0a08 	adds.w	sl, r2, r8
 80063ae:	eb43 0b09 	adc.w	fp, r3, r9
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c0:	4650      	mov	r0, sl
 80063c2:	4659      	mov	r1, fp
 80063c4:	f7fa fc40 	bl	8000c48 <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4613      	mov	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d6:	d308      	bcc.n	80063ea <UART_SetConfig+0x3de>
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063de:	d204      	bcs.n	80063ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	60da      	str	r2, [r3, #12]
 80063e8:	e0b6      	b.n	8006558 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063f0:	e0b2      	b.n	8006558 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063fa:	d15e      	bne.n	80064ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80063fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006400:	2b08      	cmp	r3, #8
 8006402:	d828      	bhi.n	8006456 <UART_SetConfig+0x44a>
 8006404:	a201      	add	r2, pc, #4	@ (adr r2, 800640c <UART_SetConfig+0x400>)
 8006406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640a:	bf00      	nop
 800640c:	08006431 	.word	0x08006431
 8006410:	08006439 	.word	0x08006439
 8006414:	08006441 	.word	0x08006441
 8006418:	08006457 	.word	0x08006457
 800641c:	08006447 	.word	0x08006447
 8006420:	08006457 	.word	0x08006457
 8006424:	08006457 	.word	0x08006457
 8006428:	08006457 	.word	0x08006457
 800642c:	0800644f 	.word	0x0800644f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006430:	f7fd fa24 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8006434:	61f8      	str	r0, [r7, #28]
        break;
 8006436:	e014      	b.n	8006462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006438:	f7fd fa36 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 800643c:	61f8      	str	r0, [r7, #28]
        break;
 800643e:	e010      	b.n	8006462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006440:	4b4d      	ldr	r3, [pc, #308]	@ (8006578 <UART_SetConfig+0x56c>)
 8006442:	61fb      	str	r3, [r7, #28]
        break;
 8006444:	e00d      	b.n	8006462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006446:	f7fd f981 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800644a:	61f8      	str	r0, [r7, #28]
        break;
 800644c:	e009      	b.n	8006462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006452:	61fb      	str	r3, [r7, #28]
        break;
 8006454:	e005      	b.n	8006462 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d077      	beq.n	8006558 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	005a      	lsls	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	085b      	lsrs	r3, r3, #1
 8006472:	441a      	add	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b0f      	cmp	r3, #15
 8006482:	d916      	bls.n	80064b2 <UART_SetConfig+0x4a6>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800648a:	d212      	bcs.n	80064b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f023 030f 	bic.w	r3, r3, #15
 8006494:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	8afb      	ldrh	r3, [r7, #22]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	8afa      	ldrh	r2, [r7, #22]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e052      	b.n	8006558 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80064b8:	e04e      	b.n	8006558 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d827      	bhi.n	8006512 <UART_SetConfig+0x506>
 80064c2:	a201      	add	r2, pc, #4	@ (adr r2, 80064c8 <UART_SetConfig+0x4bc>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	08006513 	.word	0x08006513
 80064d8:	08006503 	.word	0x08006503
 80064dc:	08006513 	.word	0x08006513
 80064e0:	08006513 	.word	0x08006513
 80064e4:	08006513 	.word	0x08006513
 80064e8:	0800650b 	.word	0x0800650b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064ec:	f7fd f9c6 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 80064f0:	61f8      	str	r0, [r7, #28]
        break;
 80064f2:	e014      	b.n	800651e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f4:	f7fd f9d8 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 80064f8:	61f8      	str	r0, [r7, #28]
        break;
 80064fa:	e010      	b.n	800651e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006578 <UART_SetConfig+0x56c>)
 80064fe:	61fb      	str	r3, [r7, #28]
        break;
 8006500:	e00d      	b.n	800651e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006502:	f7fd f923 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8006506:	61f8      	str	r0, [r7, #28]
        break;
 8006508:	e009      	b.n	800651e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800650e:	61fb      	str	r3, [r7, #28]
        break;
 8006510:	e005      	b.n	800651e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800651c:	bf00      	nop
    }

    if (pclk != 0U)
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d019      	beq.n	8006558 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	085a      	lsrs	r2, r3, #1
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	441a      	add	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	fbb2 f3f3 	udiv	r3, r2, r3
 8006536:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2b0f      	cmp	r3, #15
 800653c:	d909      	bls.n	8006552 <UART_SetConfig+0x546>
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006544:	d205      	bcs.n	8006552 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60da      	str	r2, [r3, #12]
 8006550:	e002      	b.n	8006558 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006564:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006568:	4618      	mov	r0, r3
 800656a:	3728      	adds	r7, #40	@ 0x28
 800656c:	46bd      	mov	sp, r7
 800656e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006572:	bf00      	nop
 8006574:	40008000 	.word	0x40008000
 8006578:	00f42400 	.word	0x00f42400

0800657c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01a      	beq.n	8006692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800667a:	d10a      	bne.n	8006692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  }
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b098      	sub	sp, #96	@ 0x60
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d0:	f7fb ff7a 	bl	80025c8 <HAL_GetTick>
 80066d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d12e      	bne.n	8006742 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ec:	2200      	movs	r2, #0
 80066ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f88c 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d021      	beq.n	8006742 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800670c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006712:	653b      	str	r3, [r7, #80]	@ 0x50
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800671c:	647b      	str	r3, [r7, #68]	@ 0x44
 800671e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800672a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e6      	bne.n	80066fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e062      	b.n	8006808 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b04      	cmp	r3, #4
 800674e:	d149      	bne.n	80067e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006758:	2200      	movs	r2, #0
 800675a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f856 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d03c      	beq.n	80067e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	623b      	str	r3, [r7, #32]
   return(result);
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800677e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006788:	633b      	str	r3, [r7, #48]	@ 0x30
 800678a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800678e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e6      	bne.n	800676a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3308      	adds	r3, #8
 80067a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3308      	adds	r3, #8
 80067ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067bc:	61fa      	str	r2, [r7, #28]
 80067be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	69b9      	ldr	r1, [r7, #24]
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	617b      	str	r3, [r7, #20]
   return(result);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e5      	bne.n	800679c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e011      	b.n	8006808 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3758      	adds	r7, #88	@ 0x58
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006820:	e049      	b.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006828:	d045      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682a:	f7fb fecd 	bl	80025c8 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <UART_WaitOnFlagUntilTimeout+0x30>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e048      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d031      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b08      	cmp	r3, #8
 800685e:	d110      	bne.n	8006882 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2208      	movs	r2, #8
 8006866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f8ff 	bl	8006a6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2208      	movs	r2, #8
 8006872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e029      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800688c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006890:	d111      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800689a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f8e5 	bl	8006a6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e00f      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4013      	ands	r3, r2
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d0a6      	beq.n	8006822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b097      	sub	sp, #92	@ 0x5c
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006912:	d10e      	bne.n	8006932 <UART_Start_Receive_IT+0x52>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d105      	bne.n	8006928 <UART_Start_Receive_IT+0x48>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006922:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006926:	e02d      	b.n	8006984 <UART_Start_Receive_IT+0xa4>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	22ff      	movs	r2, #255	@ 0xff
 800692c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006930:	e028      	b.n	8006984 <UART_Start_Receive_IT+0xa4>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10d      	bne.n	8006956 <UART_Start_Receive_IT+0x76>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <UART_Start_Receive_IT+0x6c>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	22ff      	movs	r2, #255	@ 0xff
 8006946:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800694a:	e01b      	b.n	8006984 <UART_Start_Receive_IT+0xa4>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	227f      	movs	r2, #127	@ 0x7f
 8006950:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006954:	e016      	b.n	8006984 <UART_Start_Receive_IT+0xa4>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800695e:	d10d      	bne.n	800697c <UART_Start_Receive_IT+0x9c>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <UART_Start_Receive_IT+0x92>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	227f      	movs	r2, #127	@ 0x7f
 800696c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006970:	e008      	b.n	8006984 <UART_Start_Receive_IT+0xa4>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	223f      	movs	r2, #63	@ 0x3f
 8006976:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800697a:	e003      	b.n	8006984 <UART_Start_Receive_IT+0xa4>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2222      	movs	r2, #34	@ 0x22
 8006990:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3308      	adds	r3, #8
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069b4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80069b6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80069c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e5      	bne.n	8006994 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069d0:	d107      	bne.n	80069e2 <UART_Start_Receive_IT+0x102>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d103      	bne.n	80069e2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a21      	ldr	r2, [pc, #132]	@ (8006a64 <UART_Start_Receive_IT+0x184>)
 80069de:	669a      	str	r2, [r3, #104]	@ 0x68
 80069e0:	e002      	b.n	80069e8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a20      	ldr	r2, [pc, #128]	@ (8006a68 <UART_Start_Receive_IT+0x188>)
 80069e6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d019      	beq.n	8006a24 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a10:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e6      	bne.n	80069f0 <UART_Start_Receive_IT+0x110>
 8006a22:	e018      	b.n	8006a56 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	613b      	str	r3, [r7, #16]
   return(result);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f043 0320 	orr.w	r3, r3, #32
 8006a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a42:	623b      	str	r3, [r7, #32]
 8006a44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	69f9      	ldr	r1, [r7, #28]
 8006a48:	6a3a      	ldr	r2, [r7, #32]
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e6      	bne.n	8006a24 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	375c      	adds	r7, #92	@ 0x5c
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	08006d71 	.word	0x08006d71
 8006a68:	08006bb5 	.word	0x08006bb5

08006a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b095      	sub	sp, #84	@ 0x54
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a92:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a94:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e6      	bne.n	8006a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e5      	bne.n	8006aa6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d118      	bne.n	8006b14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f023 0310 	bic.w	r3, r3, #16
 8006af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6979      	ldr	r1, [r7, #20]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e6      	bne.n	8006ae2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b28:	bf00      	nop
 8006b2a:	3754      	adds	r7, #84	@ 0x54
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff fa44 	bl	8005fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6979      	ldr	r1, [r7, #20]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	613b      	str	r3, [r7, #16]
   return(result);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fa10 	bl	8005fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bac:	bf00      	nop
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b09c      	sub	sp, #112	@ 0x70
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bc2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bcc:	2b22      	cmp	r3, #34	@ 0x22
 8006bce:	f040 80be 	bne.w	8006d4e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006bd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006be0:	b2d9      	uxtb	r1, r3
 8006be2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bec:	400a      	ands	r2, r1
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f040 80a3 	bne.w	8006d62 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e6      	bne.n	8006c1c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c60:	f023 0301 	bic.w	r3, r3, #1
 8006c64:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e5      	bne.n	8006c4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a34      	ldr	r2, [pc, #208]	@ (8006d6c <UART_RxISR_8BIT+0x1b8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d01f      	beq.n	8006ce0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d018      	beq.n	8006ce0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	623b      	str	r3, [r7, #32]
   return(result);
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e6      	bne.n	8006cae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d12e      	bne.n	8006d46 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0310 	bic.w	r3, r3, #16
 8006d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	69b9      	ldr	r1, [r7, #24]
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d103      	bne.n	8006d36 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2210      	movs	r2, #16
 8006d34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff f958 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d44:	e00d      	b.n	8006d62 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fa fc3e 	bl	80015c8 <HAL_UART_RxCpltCallback>
}
 8006d4c:	e009      	b.n	8006d62 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	8b1b      	ldrh	r3, [r3, #24]
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0208 	orr.w	r2, r2, #8
 8006d5e:	b292      	uxth	r2, r2
 8006d60:	831a      	strh	r2, [r3, #24]
}
 8006d62:	bf00      	nop
 8006d64:	3770      	adds	r7, #112	@ 0x70
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40008000 	.word	0x40008000

08006d70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b09c      	sub	sp, #112	@ 0x70
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d7e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d88:	2b22      	cmp	r3, #34	@ 0x22
 8006d8a:	f040 80be 	bne.w	8006f0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006d94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006da2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006da6:	4013      	ands	r3, r2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006db2:	1c9a      	adds	r2, r3, #2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 80a3 	bne.w	8006f1e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dec:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006df6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006df8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006dfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e6      	bne.n	8006dd8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	f023 0301 	bic.w	r3, r3, #1
 8006e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3308      	adds	r3, #8
 8006e28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e5      	bne.n	8006e0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a34      	ldr	r2, [pc, #208]	@ (8006f28 <UART_RxISR_16BIT+0x1b8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d01f      	beq.n	8006e9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d018      	beq.n	8006e9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e8a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d12e      	bne.n	8006f02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f023 0310 	bic.w	r3, r3, #16
 8006ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ec8:	61bb      	str	r3, [r7, #24]
 8006eca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6979      	ldr	r1, [r7, #20]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e6      	bne.n	8006eaa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 0310 	and.w	r3, r3, #16
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d103      	bne.n	8006ef2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff f87a 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f00:	e00d      	b.n	8006f1e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fa fb60 	bl	80015c8 <HAL_UART_RxCpltCallback>
}
 8006f08:	e009      	b.n	8006f1e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	8b1b      	ldrh	r3, [r3, #24]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0208 	orr.w	r2, r2, #8
 8006f1a:	b292      	uxth	r2, r2
 8006f1c:	831a      	strh	r2, [r3, #24]
}
 8006f1e:	bf00      	nop
 8006f20:	3770      	adds	r7, #112	@ 0x70
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40008000 	.word	0x40008000

08006f2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <atan2>:
 8006f40:	f000 b802 	b.w	8006f48 <__ieee754_atan2>
 8006f44:	0000      	movs	r0, r0
	...

08006f48 <__ieee754_atan2>:
 8006f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f4c:	ec57 6b11 	vmov	r6, r7, d1
 8006f50:	4273      	negs	r3, r6
 8006f52:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80070d0 <__ieee754_atan2+0x188>
 8006f56:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8006f5a:	4333      	orrs	r3, r6
 8006f5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006f60:	4543      	cmp	r3, r8
 8006f62:	ec51 0b10 	vmov	r0, r1, d0
 8006f66:	4635      	mov	r5, r6
 8006f68:	d809      	bhi.n	8006f7e <__ieee754_atan2+0x36>
 8006f6a:	4244      	negs	r4, r0
 8006f6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006f70:	4304      	orrs	r4, r0
 8006f72:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006f76:	4544      	cmp	r4, r8
 8006f78:	468e      	mov	lr, r1
 8006f7a:	4681      	mov	r9, r0
 8006f7c:	d907      	bls.n	8006f8e <__ieee754_atan2+0x46>
 8006f7e:	4632      	mov	r2, r6
 8006f80:	463b      	mov	r3, r7
 8006f82:	f7f9 f983 	bl	800028c <__adddf3>
 8006f86:	ec41 0b10 	vmov	d0, r0, r1
 8006f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8006f92:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8006f96:	4334      	orrs	r4, r6
 8006f98:	d103      	bne.n	8006fa2 <__ieee754_atan2+0x5a>
 8006f9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f9e:	f000 b8c7 	b.w	8007130 <atan>
 8006fa2:	17bc      	asrs	r4, r7, #30
 8006fa4:	f004 0402 	and.w	r4, r4, #2
 8006fa8:	ea53 0909 	orrs.w	r9, r3, r9
 8006fac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006fb0:	d107      	bne.n	8006fc2 <__ieee754_atan2+0x7a>
 8006fb2:	2c02      	cmp	r4, #2
 8006fb4:	d05f      	beq.n	8007076 <__ieee754_atan2+0x12e>
 8006fb6:	2c03      	cmp	r4, #3
 8006fb8:	d1e5      	bne.n	8006f86 <__ieee754_atan2+0x3e>
 8006fba:	a141      	add	r1, pc, #260	@ (adr r1, 80070c0 <__ieee754_atan2+0x178>)
 8006fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fc0:	e7e1      	b.n	8006f86 <__ieee754_atan2+0x3e>
 8006fc2:	4315      	orrs	r5, r2
 8006fc4:	d106      	bne.n	8006fd4 <__ieee754_atan2+0x8c>
 8006fc6:	f1be 0f00 	cmp.w	lr, #0
 8006fca:	da5f      	bge.n	800708c <__ieee754_atan2+0x144>
 8006fcc:	a13e      	add	r1, pc, #248	@ (adr r1, 80070c8 <__ieee754_atan2+0x180>)
 8006fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd2:	e7d8      	b.n	8006f86 <__ieee754_atan2+0x3e>
 8006fd4:	4542      	cmp	r2, r8
 8006fd6:	d10f      	bne.n	8006ff8 <__ieee754_atan2+0xb0>
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8006fde:	d107      	bne.n	8006ff0 <__ieee754_atan2+0xa8>
 8006fe0:	2c02      	cmp	r4, #2
 8006fe2:	d84c      	bhi.n	800707e <__ieee754_atan2+0x136>
 8006fe4:	4b34      	ldr	r3, [pc, #208]	@ (80070b8 <__ieee754_atan2+0x170>)
 8006fe6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fee:	e7ca      	b.n	8006f86 <__ieee754_atan2+0x3e>
 8006ff0:	2c02      	cmp	r4, #2
 8006ff2:	d848      	bhi.n	8007086 <__ieee754_atan2+0x13e>
 8006ff4:	4b31      	ldr	r3, [pc, #196]	@ (80070bc <__ieee754_atan2+0x174>)
 8006ff6:	e7f6      	b.n	8006fe6 <__ieee754_atan2+0x9e>
 8006ff8:	4543      	cmp	r3, r8
 8006ffa:	d0e4      	beq.n	8006fc6 <__ieee754_atan2+0x7e>
 8006ffc:	1a9b      	subs	r3, r3, r2
 8006ffe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8007002:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007006:	da1e      	bge.n	8007046 <__ieee754_atan2+0xfe>
 8007008:	2f00      	cmp	r7, #0
 800700a:	da01      	bge.n	8007010 <__ieee754_atan2+0xc8>
 800700c:	323c      	adds	r2, #60	@ 0x3c
 800700e:	db1e      	blt.n	800704e <__ieee754_atan2+0x106>
 8007010:	4632      	mov	r2, r6
 8007012:	463b      	mov	r3, r7
 8007014:	f7f9 fc1a 	bl	800084c <__aeabi_ddiv>
 8007018:	ec41 0b10 	vmov	d0, r0, r1
 800701c:	f000 fa74 	bl	8007508 <fabs>
 8007020:	f000 f886 	bl	8007130 <atan>
 8007024:	ec51 0b10 	vmov	r0, r1, d0
 8007028:	2c01      	cmp	r4, #1
 800702a:	d013      	beq.n	8007054 <__ieee754_atan2+0x10c>
 800702c:	2c02      	cmp	r4, #2
 800702e:	d015      	beq.n	800705c <__ieee754_atan2+0x114>
 8007030:	2c00      	cmp	r4, #0
 8007032:	d0a8      	beq.n	8006f86 <__ieee754_atan2+0x3e>
 8007034:	a318      	add	r3, pc, #96	@ (adr r3, 8007098 <__ieee754_atan2+0x150>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 f925 	bl	8000288 <__aeabi_dsub>
 800703e:	a318      	add	r3, pc, #96	@ (adr r3, 80070a0 <__ieee754_atan2+0x158>)
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	e014      	b.n	8007070 <__ieee754_atan2+0x128>
 8007046:	a118      	add	r1, pc, #96	@ (adr r1, 80070a8 <__ieee754_atan2+0x160>)
 8007048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800704c:	e7ec      	b.n	8007028 <__ieee754_atan2+0xe0>
 800704e:	2000      	movs	r0, #0
 8007050:	2100      	movs	r1, #0
 8007052:	e7e9      	b.n	8007028 <__ieee754_atan2+0xe0>
 8007054:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007058:	4619      	mov	r1, r3
 800705a:	e794      	b.n	8006f86 <__ieee754_atan2+0x3e>
 800705c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007098 <__ieee754_atan2+0x150>)
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	f7f9 f911 	bl	8000288 <__aeabi_dsub>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	a10d      	add	r1, pc, #52	@ (adr r1, 80070a0 <__ieee754_atan2+0x158>)
 800706c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007070:	f7f9 f90a 	bl	8000288 <__aeabi_dsub>
 8007074:	e787      	b.n	8006f86 <__ieee754_atan2+0x3e>
 8007076:	a10a      	add	r1, pc, #40	@ (adr r1, 80070a0 <__ieee754_atan2+0x158>)
 8007078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800707c:	e783      	b.n	8006f86 <__ieee754_atan2+0x3e>
 800707e:	a10c      	add	r1, pc, #48	@ (adr r1, 80070b0 <__ieee754_atan2+0x168>)
 8007080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007084:	e77f      	b.n	8006f86 <__ieee754_atan2+0x3e>
 8007086:	2000      	movs	r0, #0
 8007088:	2100      	movs	r1, #0
 800708a:	e77c      	b.n	8006f86 <__ieee754_atan2+0x3e>
 800708c:	a106      	add	r1, pc, #24	@ (adr r1, 80070a8 <__ieee754_atan2+0x160>)
 800708e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007092:	e778      	b.n	8006f86 <__ieee754_atan2+0x3e>
 8007094:	f3af 8000 	nop.w
 8007098:	33145c07 	.word	0x33145c07
 800709c:	3ca1a626 	.word	0x3ca1a626
 80070a0:	54442d18 	.word	0x54442d18
 80070a4:	400921fb 	.word	0x400921fb
 80070a8:	54442d18 	.word	0x54442d18
 80070ac:	3ff921fb 	.word	0x3ff921fb
 80070b0:	54442d18 	.word	0x54442d18
 80070b4:	3fe921fb 	.word	0x3fe921fb
 80070b8:	0800b458 	.word	0x0800b458
 80070bc:	0800b440 	.word	0x0800b440
 80070c0:	54442d18 	.word	0x54442d18
 80070c4:	c00921fb 	.word	0xc00921fb
 80070c8:	54442d18 	.word	0x54442d18
 80070cc:	bff921fb 	.word	0xbff921fb
 80070d0:	7ff00000 	.word	0x7ff00000

080070d4 <sqrt>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	ed2d 8b02 	vpush	{d8}
 80070da:	ec55 4b10 	vmov	r4, r5, d0
 80070de:	f000 fa6f 	bl	80075c0 <__ieee754_sqrt>
 80070e2:	4622      	mov	r2, r4
 80070e4:	462b      	mov	r3, r5
 80070e6:	4620      	mov	r0, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	eeb0 8a40 	vmov.f32	s16, s0
 80070ee:	eef0 8a60 	vmov.f32	s17, s1
 80070f2:	f7f9 fd1b 	bl	8000b2c <__aeabi_dcmpun>
 80070f6:	b990      	cbnz	r0, 800711e <sqrt+0x4a>
 80070f8:	2200      	movs	r2, #0
 80070fa:	2300      	movs	r3, #0
 80070fc:	4620      	mov	r0, r4
 80070fe:	4629      	mov	r1, r5
 8007100:	f7f9 fcec 	bl	8000adc <__aeabi_dcmplt>
 8007104:	b158      	cbz	r0, 800711e <sqrt+0x4a>
 8007106:	f002 f851 	bl	80091ac <__errno>
 800710a:	2321      	movs	r3, #33	@ 0x21
 800710c:	6003      	str	r3, [r0, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	2300      	movs	r3, #0
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	f7f9 fb99 	bl	800084c <__aeabi_ddiv>
 800711a:	ec41 0b18 	vmov	d8, r0, r1
 800711e:	eeb0 0a48 	vmov.f32	s0, s16
 8007122:	eef0 0a68 	vmov.f32	s1, s17
 8007126:	ecbd 8b02 	vpop	{d8}
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	0000      	movs	r0, r0
	...

08007130 <atan>:
 8007130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	ec55 4b10 	vmov	r4, r5, d0
 8007138:	4bbf      	ldr	r3, [pc, #764]	@ (8007438 <atan+0x308>)
 800713a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800713e:	429e      	cmp	r6, r3
 8007140:	46ab      	mov	fp, r5
 8007142:	d918      	bls.n	8007176 <atan+0x46>
 8007144:	4bbd      	ldr	r3, [pc, #756]	@ (800743c <atan+0x30c>)
 8007146:	429e      	cmp	r6, r3
 8007148:	d801      	bhi.n	800714e <atan+0x1e>
 800714a:	d109      	bne.n	8007160 <atan+0x30>
 800714c:	b144      	cbz	r4, 8007160 <atan+0x30>
 800714e:	4622      	mov	r2, r4
 8007150:	462b      	mov	r3, r5
 8007152:	4620      	mov	r0, r4
 8007154:	4629      	mov	r1, r5
 8007156:	f7f9 f899 	bl	800028c <__adddf3>
 800715a:	4604      	mov	r4, r0
 800715c:	460d      	mov	r5, r1
 800715e:	e006      	b.n	800716e <atan+0x3e>
 8007160:	f1bb 0f00 	cmp.w	fp, #0
 8007164:	f340 812b 	ble.w	80073be <atan+0x28e>
 8007168:	a597      	add	r5, pc, #604	@ (adr r5, 80073c8 <atan+0x298>)
 800716a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800716e:	ec45 4b10 	vmov	d0, r4, r5
 8007172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	4bb2      	ldr	r3, [pc, #712]	@ (8007440 <atan+0x310>)
 8007178:	429e      	cmp	r6, r3
 800717a:	d813      	bhi.n	80071a4 <atan+0x74>
 800717c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007180:	429e      	cmp	r6, r3
 8007182:	d80c      	bhi.n	800719e <atan+0x6e>
 8007184:	a392      	add	r3, pc, #584	@ (adr r3, 80073d0 <atan+0x2a0>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f7f9 f87d 	bl	800028c <__adddf3>
 8007192:	4bac      	ldr	r3, [pc, #688]	@ (8007444 <atan+0x314>)
 8007194:	2200      	movs	r2, #0
 8007196:	f7f9 fcbf 	bl	8000b18 <__aeabi_dcmpgt>
 800719a:	2800      	cmp	r0, #0
 800719c:	d1e7      	bne.n	800716e <atan+0x3e>
 800719e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80071a2:	e029      	b.n	80071f8 <atan+0xc8>
 80071a4:	f000 f9b0 	bl	8007508 <fabs>
 80071a8:	4ba7      	ldr	r3, [pc, #668]	@ (8007448 <atan+0x318>)
 80071aa:	429e      	cmp	r6, r3
 80071ac:	ec55 4b10 	vmov	r4, r5, d0
 80071b0:	f200 80bc 	bhi.w	800732c <atan+0x1fc>
 80071b4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80071b8:	429e      	cmp	r6, r3
 80071ba:	f200 809e 	bhi.w	80072fa <atan+0x1ca>
 80071be:	4622      	mov	r2, r4
 80071c0:	462b      	mov	r3, r5
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7f9 f861 	bl	800028c <__adddf3>
 80071ca:	4b9e      	ldr	r3, [pc, #632]	@ (8007444 <atan+0x314>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	f7f9 f85b 	bl	8000288 <__aeabi_dsub>
 80071d2:	2200      	movs	r2, #0
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80071dc:	4620      	mov	r0, r4
 80071de:	4629      	mov	r1, r5
 80071e0:	f7f9 f854 	bl	800028c <__adddf3>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4630      	mov	r0, r6
 80071ea:	4639      	mov	r1, r7
 80071ec:	f7f9 fb2e 	bl	800084c <__aeabi_ddiv>
 80071f0:	f04f 0a00 	mov.w	sl, #0
 80071f4:	4604      	mov	r4, r0
 80071f6:	460d      	mov	r5, r1
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	4620      	mov	r0, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	f7f9 f9fa 	bl	80005f8 <__aeabi_dmul>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4680      	mov	r8, r0
 800720a:	4689      	mov	r9, r1
 800720c:	f7f9 f9f4 	bl	80005f8 <__aeabi_dmul>
 8007210:	a371      	add	r3, pc, #452	@ (adr r3, 80073d8 <atan+0x2a8>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	4606      	mov	r6, r0
 8007218:	460f      	mov	r7, r1
 800721a:	f7f9 f9ed 	bl	80005f8 <__aeabi_dmul>
 800721e:	a370      	add	r3, pc, #448	@ (adr r3, 80073e0 <atan+0x2b0>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f9 f832 	bl	800028c <__adddf3>
 8007228:	4632      	mov	r2, r6
 800722a:	463b      	mov	r3, r7
 800722c:	f7f9 f9e4 	bl	80005f8 <__aeabi_dmul>
 8007230:	a36d      	add	r3, pc, #436	@ (adr r3, 80073e8 <atan+0x2b8>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f9 f829 	bl	800028c <__adddf3>
 800723a:	4632      	mov	r2, r6
 800723c:	463b      	mov	r3, r7
 800723e:	f7f9 f9db 	bl	80005f8 <__aeabi_dmul>
 8007242:	a36b      	add	r3, pc, #428	@ (adr r3, 80073f0 <atan+0x2c0>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f9 f820 	bl	800028c <__adddf3>
 800724c:	4632      	mov	r2, r6
 800724e:	463b      	mov	r3, r7
 8007250:	f7f9 f9d2 	bl	80005f8 <__aeabi_dmul>
 8007254:	a368      	add	r3, pc, #416	@ (adr r3, 80073f8 <atan+0x2c8>)
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f7f9 f817 	bl	800028c <__adddf3>
 800725e:	4632      	mov	r2, r6
 8007260:	463b      	mov	r3, r7
 8007262:	f7f9 f9c9 	bl	80005f8 <__aeabi_dmul>
 8007266:	a366      	add	r3, pc, #408	@ (adr r3, 8007400 <atan+0x2d0>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f80e 	bl	800028c <__adddf3>
 8007270:	4642      	mov	r2, r8
 8007272:	464b      	mov	r3, r9
 8007274:	f7f9 f9c0 	bl	80005f8 <__aeabi_dmul>
 8007278:	a363      	add	r3, pc, #396	@ (adr r3, 8007408 <atan+0x2d8>)
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	4680      	mov	r8, r0
 8007280:	4689      	mov	r9, r1
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f9 f9b7 	bl	80005f8 <__aeabi_dmul>
 800728a:	a361      	add	r3, pc, #388	@ (adr r3, 8007410 <atan+0x2e0>)
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f7f8 fffa 	bl	8000288 <__aeabi_dsub>
 8007294:	4632      	mov	r2, r6
 8007296:	463b      	mov	r3, r7
 8007298:	f7f9 f9ae 	bl	80005f8 <__aeabi_dmul>
 800729c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007418 <atan+0x2e8>)
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f8 fff1 	bl	8000288 <__aeabi_dsub>
 80072a6:	4632      	mov	r2, r6
 80072a8:	463b      	mov	r3, r7
 80072aa:	f7f9 f9a5 	bl	80005f8 <__aeabi_dmul>
 80072ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8007420 <atan+0x2f0>)
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f7f8 ffe8 	bl	8000288 <__aeabi_dsub>
 80072b8:	4632      	mov	r2, r6
 80072ba:	463b      	mov	r3, r7
 80072bc:	f7f9 f99c 	bl	80005f8 <__aeabi_dmul>
 80072c0:	a359      	add	r3, pc, #356	@ (adr r3, 8007428 <atan+0x2f8>)
 80072c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c6:	f7f8 ffdf 	bl	8000288 <__aeabi_dsub>
 80072ca:	4632      	mov	r2, r6
 80072cc:	463b      	mov	r3, r7
 80072ce:	f7f9 f993 	bl	80005f8 <__aeabi_dmul>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4640      	mov	r0, r8
 80072d8:	4649      	mov	r1, r9
 80072da:	f7f8 ffd7 	bl	800028c <__adddf3>
 80072de:	4622      	mov	r2, r4
 80072e0:	462b      	mov	r3, r5
 80072e2:	f7f9 f989 	bl	80005f8 <__aeabi_dmul>
 80072e6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	d148      	bne.n	8007382 <atan+0x252>
 80072f0:	4620      	mov	r0, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7f8 ffc8 	bl	8000288 <__aeabi_dsub>
 80072f8:	e72f      	b.n	800715a <atan+0x2a>
 80072fa:	4b52      	ldr	r3, [pc, #328]	@ (8007444 <atan+0x314>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	4620      	mov	r0, r4
 8007300:	4629      	mov	r1, r5
 8007302:	f7f8 ffc1 	bl	8000288 <__aeabi_dsub>
 8007306:	4b4f      	ldr	r3, [pc, #316]	@ (8007444 <atan+0x314>)
 8007308:	4606      	mov	r6, r0
 800730a:	460f      	mov	r7, r1
 800730c:	2200      	movs	r2, #0
 800730e:	4620      	mov	r0, r4
 8007310:	4629      	mov	r1, r5
 8007312:	f7f8 ffbb 	bl	800028c <__adddf3>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4630      	mov	r0, r6
 800731c:	4639      	mov	r1, r7
 800731e:	f7f9 fa95 	bl	800084c <__aeabi_ddiv>
 8007322:	f04f 0a01 	mov.w	sl, #1
 8007326:	4604      	mov	r4, r0
 8007328:	460d      	mov	r5, r1
 800732a:	e765      	b.n	80071f8 <atan+0xc8>
 800732c:	4b47      	ldr	r3, [pc, #284]	@ (800744c <atan+0x31c>)
 800732e:	429e      	cmp	r6, r3
 8007330:	d21c      	bcs.n	800736c <atan+0x23c>
 8007332:	4b47      	ldr	r3, [pc, #284]	@ (8007450 <atan+0x320>)
 8007334:	2200      	movs	r2, #0
 8007336:	4620      	mov	r0, r4
 8007338:	4629      	mov	r1, r5
 800733a:	f7f8 ffa5 	bl	8000288 <__aeabi_dsub>
 800733e:	4b44      	ldr	r3, [pc, #272]	@ (8007450 <atan+0x320>)
 8007340:	4606      	mov	r6, r0
 8007342:	460f      	mov	r7, r1
 8007344:	2200      	movs	r2, #0
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f9 f955 	bl	80005f8 <__aeabi_dmul>
 800734e:	4b3d      	ldr	r3, [pc, #244]	@ (8007444 <atan+0x314>)
 8007350:	2200      	movs	r2, #0
 8007352:	f7f8 ff9b 	bl	800028c <__adddf3>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4630      	mov	r0, r6
 800735c:	4639      	mov	r1, r7
 800735e:	f7f9 fa75 	bl	800084c <__aeabi_ddiv>
 8007362:	f04f 0a02 	mov.w	sl, #2
 8007366:	4604      	mov	r4, r0
 8007368:	460d      	mov	r5, r1
 800736a:	e745      	b.n	80071f8 <atan+0xc8>
 800736c:	4622      	mov	r2, r4
 800736e:	462b      	mov	r3, r5
 8007370:	4938      	ldr	r1, [pc, #224]	@ (8007454 <atan+0x324>)
 8007372:	2000      	movs	r0, #0
 8007374:	f7f9 fa6a 	bl	800084c <__aeabi_ddiv>
 8007378:	f04f 0a03 	mov.w	sl, #3
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	e73a      	b.n	80071f8 <atan+0xc8>
 8007382:	4b35      	ldr	r3, [pc, #212]	@ (8007458 <atan+0x328>)
 8007384:	4e35      	ldr	r6, [pc, #212]	@ (800745c <atan+0x32c>)
 8007386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f8 ff7b 	bl	8000288 <__aeabi_dsub>
 8007392:	4622      	mov	r2, r4
 8007394:	462b      	mov	r3, r5
 8007396:	f7f8 ff77 	bl	8000288 <__aeabi_dsub>
 800739a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80073a6:	f7f8 ff6f 	bl	8000288 <__aeabi_dsub>
 80073aa:	f1bb 0f00 	cmp.w	fp, #0
 80073ae:	4604      	mov	r4, r0
 80073b0:	460d      	mov	r5, r1
 80073b2:	f6bf aedc 	bge.w	800716e <atan+0x3e>
 80073b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073ba:	461d      	mov	r5, r3
 80073bc:	e6d7      	b.n	800716e <atan+0x3e>
 80073be:	a51c      	add	r5, pc, #112	@ (adr r5, 8007430 <atan+0x300>)
 80073c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80073c4:	e6d3      	b.n	800716e <atan+0x3e>
 80073c6:	bf00      	nop
 80073c8:	54442d18 	.word	0x54442d18
 80073cc:	3ff921fb 	.word	0x3ff921fb
 80073d0:	8800759c 	.word	0x8800759c
 80073d4:	7e37e43c 	.word	0x7e37e43c
 80073d8:	e322da11 	.word	0xe322da11
 80073dc:	3f90ad3a 	.word	0x3f90ad3a
 80073e0:	24760deb 	.word	0x24760deb
 80073e4:	3fa97b4b 	.word	0x3fa97b4b
 80073e8:	a0d03d51 	.word	0xa0d03d51
 80073ec:	3fb10d66 	.word	0x3fb10d66
 80073f0:	c54c206e 	.word	0xc54c206e
 80073f4:	3fb745cd 	.word	0x3fb745cd
 80073f8:	920083ff 	.word	0x920083ff
 80073fc:	3fc24924 	.word	0x3fc24924
 8007400:	5555550d 	.word	0x5555550d
 8007404:	3fd55555 	.word	0x3fd55555
 8007408:	2c6a6c2f 	.word	0x2c6a6c2f
 800740c:	bfa2b444 	.word	0xbfa2b444
 8007410:	52defd9a 	.word	0x52defd9a
 8007414:	3fadde2d 	.word	0x3fadde2d
 8007418:	af749a6d 	.word	0xaf749a6d
 800741c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007420:	fe231671 	.word	0xfe231671
 8007424:	3fbc71c6 	.word	0x3fbc71c6
 8007428:	9998ebc4 	.word	0x9998ebc4
 800742c:	3fc99999 	.word	0x3fc99999
 8007430:	54442d18 	.word	0x54442d18
 8007434:	bff921fb 	.word	0xbff921fb
 8007438:	440fffff 	.word	0x440fffff
 800743c:	7ff00000 	.word	0x7ff00000
 8007440:	3fdbffff 	.word	0x3fdbffff
 8007444:	3ff00000 	.word	0x3ff00000
 8007448:	3ff2ffff 	.word	0x3ff2ffff
 800744c:	40038000 	.word	0x40038000
 8007450:	3ff80000 	.word	0x3ff80000
 8007454:	bff00000 	.word	0xbff00000
 8007458:	0800b470 	.word	0x0800b470
 800745c:	0800b490 	.word	0x0800b490

08007460 <cos>:
 8007460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007462:	ec53 2b10 	vmov	r2, r3, d0
 8007466:	4826      	ldr	r0, [pc, #152]	@ (8007500 <cos+0xa0>)
 8007468:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800746c:	4281      	cmp	r1, r0
 800746e:	d806      	bhi.n	800747e <cos+0x1e>
 8007470:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80074f8 <cos+0x98>
 8007474:	b005      	add	sp, #20
 8007476:	f85d eb04 	ldr.w	lr, [sp], #4
 800747a:	f000 bed1 	b.w	8008220 <__kernel_cos>
 800747e:	4821      	ldr	r0, [pc, #132]	@ (8007504 <cos+0xa4>)
 8007480:	4281      	cmp	r1, r0
 8007482:	d908      	bls.n	8007496 <cos+0x36>
 8007484:	4610      	mov	r0, r2
 8007486:	4619      	mov	r1, r3
 8007488:	f7f8 fefe 	bl	8000288 <__aeabi_dsub>
 800748c:	ec41 0b10 	vmov	d0, r0, r1
 8007490:	b005      	add	sp, #20
 8007492:	f85d fb04 	ldr.w	pc, [sp], #4
 8007496:	4668      	mov	r0, sp
 8007498:	f000 f96e 	bl	8007778 <__ieee754_rem_pio2>
 800749c:	f000 0003 	and.w	r0, r0, #3
 80074a0:	2801      	cmp	r0, #1
 80074a2:	d00b      	beq.n	80074bc <cos+0x5c>
 80074a4:	2802      	cmp	r0, #2
 80074a6:	d015      	beq.n	80074d4 <cos+0x74>
 80074a8:	b9d8      	cbnz	r0, 80074e2 <cos+0x82>
 80074aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074ae:	ed9d 0b00 	vldr	d0, [sp]
 80074b2:	f000 feb5 	bl	8008220 <__kernel_cos>
 80074b6:	ec51 0b10 	vmov	r0, r1, d0
 80074ba:	e7e7      	b.n	800748c <cos+0x2c>
 80074bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074c0:	ed9d 0b00 	vldr	d0, [sp]
 80074c4:	f000 ff74 	bl	80083b0 <__kernel_sin>
 80074c8:	ec53 2b10 	vmov	r2, r3, d0
 80074cc:	4610      	mov	r0, r2
 80074ce:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80074d2:	e7db      	b.n	800748c <cos+0x2c>
 80074d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074d8:	ed9d 0b00 	vldr	d0, [sp]
 80074dc:	f000 fea0 	bl	8008220 <__kernel_cos>
 80074e0:	e7f2      	b.n	80074c8 <cos+0x68>
 80074e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074e6:	ed9d 0b00 	vldr	d0, [sp]
 80074ea:	2001      	movs	r0, #1
 80074ec:	f000 ff60 	bl	80083b0 <__kernel_sin>
 80074f0:	e7e1      	b.n	80074b6 <cos+0x56>
 80074f2:	bf00      	nop
 80074f4:	f3af 8000 	nop.w
	...
 8007500:	3fe921fb 	.word	0x3fe921fb
 8007504:	7fefffff 	.word	0x7fefffff

08007508 <fabs>:
 8007508:	ec51 0b10 	vmov	r0, r1, d0
 800750c:	4602      	mov	r2, r0
 800750e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007512:	ec43 2b10 	vmov	d0, r2, r3
 8007516:	4770      	bx	lr

08007518 <sin>:
 8007518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800751a:	ec53 2b10 	vmov	r2, r3, d0
 800751e:	4826      	ldr	r0, [pc, #152]	@ (80075b8 <sin+0xa0>)
 8007520:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007524:	4281      	cmp	r1, r0
 8007526:	d807      	bhi.n	8007538 <sin+0x20>
 8007528:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80075b0 <sin+0x98>
 800752c:	2000      	movs	r0, #0
 800752e:	b005      	add	sp, #20
 8007530:	f85d eb04 	ldr.w	lr, [sp], #4
 8007534:	f000 bf3c 	b.w	80083b0 <__kernel_sin>
 8007538:	4820      	ldr	r0, [pc, #128]	@ (80075bc <sin+0xa4>)
 800753a:	4281      	cmp	r1, r0
 800753c:	d908      	bls.n	8007550 <sin+0x38>
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	f7f8 fea1 	bl	8000288 <__aeabi_dsub>
 8007546:	ec41 0b10 	vmov	d0, r0, r1
 800754a:	b005      	add	sp, #20
 800754c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007550:	4668      	mov	r0, sp
 8007552:	f000 f911 	bl	8007778 <__ieee754_rem_pio2>
 8007556:	f000 0003 	and.w	r0, r0, #3
 800755a:	2801      	cmp	r0, #1
 800755c:	d00c      	beq.n	8007578 <sin+0x60>
 800755e:	2802      	cmp	r0, #2
 8007560:	d011      	beq.n	8007586 <sin+0x6e>
 8007562:	b9e8      	cbnz	r0, 80075a0 <sin+0x88>
 8007564:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007568:	ed9d 0b00 	vldr	d0, [sp]
 800756c:	2001      	movs	r0, #1
 800756e:	f000 ff1f 	bl	80083b0 <__kernel_sin>
 8007572:	ec51 0b10 	vmov	r0, r1, d0
 8007576:	e7e6      	b.n	8007546 <sin+0x2e>
 8007578:	ed9d 1b02 	vldr	d1, [sp, #8]
 800757c:	ed9d 0b00 	vldr	d0, [sp]
 8007580:	f000 fe4e 	bl	8008220 <__kernel_cos>
 8007584:	e7f5      	b.n	8007572 <sin+0x5a>
 8007586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800758a:	ed9d 0b00 	vldr	d0, [sp]
 800758e:	2001      	movs	r0, #1
 8007590:	f000 ff0e 	bl	80083b0 <__kernel_sin>
 8007594:	ec53 2b10 	vmov	r2, r3, d0
 8007598:	4610      	mov	r0, r2
 800759a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800759e:	e7d2      	b.n	8007546 <sin+0x2e>
 80075a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80075a4:	ed9d 0b00 	vldr	d0, [sp]
 80075a8:	f000 fe3a 	bl	8008220 <__kernel_cos>
 80075ac:	e7f2      	b.n	8007594 <sin+0x7c>
 80075ae:	bf00      	nop
	...
 80075b8:	3fe921fb 	.word	0x3fe921fb
 80075bc:	7fefffff 	.word	0x7fefffff

080075c0 <__ieee754_sqrt>:
 80075c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	4a68      	ldr	r2, [pc, #416]	@ (8007768 <__ieee754_sqrt+0x1a8>)
 80075c6:	ec55 4b10 	vmov	r4, r5, d0
 80075ca:	43aa      	bics	r2, r5
 80075cc:	462b      	mov	r3, r5
 80075ce:	4621      	mov	r1, r4
 80075d0:	d110      	bne.n	80075f4 <__ieee754_sqrt+0x34>
 80075d2:	4622      	mov	r2, r4
 80075d4:	4620      	mov	r0, r4
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7f9 f80e 	bl	80005f8 <__aeabi_dmul>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4620      	mov	r0, r4
 80075e2:	4629      	mov	r1, r5
 80075e4:	f7f8 fe52 	bl	800028c <__adddf3>
 80075e8:	4604      	mov	r4, r0
 80075ea:	460d      	mov	r5, r1
 80075ec:	ec45 4b10 	vmov	d0, r4, r5
 80075f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	dc0e      	bgt.n	8007616 <__ieee754_sqrt+0x56>
 80075f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80075fc:	4322      	orrs	r2, r4
 80075fe:	d0f5      	beq.n	80075ec <__ieee754_sqrt+0x2c>
 8007600:	b19d      	cbz	r5, 800762a <__ieee754_sqrt+0x6a>
 8007602:	4622      	mov	r2, r4
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f7f8 fe3e 	bl	8000288 <__aeabi_dsub>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	f7f9 f91c 	bl	800084c <__aeabi_ddiv>
 8007614:	e7e8      	b.n	80075e8 <__ieee754_sqrt+0x28>
 8007616:	152a      	asrs	r2, r5, #20
 8007618:	d115      	bne.n	8007646 <__ieee754_sqrt+0x86>
 800761a:	2000      	movs	r0, #0
 800761c:	e009      	b.n	8007632 <__ieee754_sqrt+0x72>
 800761e:	0acb      	lsrs	r3, r1, #11
 8007620:	3a15      	subs	r2, #21
 8007622:	0549      	lsls	r1, r1, #21
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0fa      	beq.n	800761e <__ieee754_sqrt+0x5e>
 8007628:	e7f7      	b.n	800761a <__ieee754_sqrt+0x5a>
 800762a:	462a      	mov	r2, r5
 800762c:	e7fa      	b.n	8007624 <__ieee754_sqrt+0x64>
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	3001      	adds	r0, #1
 8007632:	02dc      	lsls	r4, r3, #11
 8007634:	d5fb      	bpl.n	800762e <__ieee754_sqrt+0x6e>
 8007636:	1e44      	subs	r4, r0, #1
 8007638:	1b12      	subs	r2, r2, r4
 800763a:	f1c0 0420 	rsb	r4, r0, #32
 800763e:	fa21 f404 	lsr.w	r4, r1, r4
 8007642:	4323      	orrs	r3, r4
 8007644:	4081      	lsls	r1, r0
 8007646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800764a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800764e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007652:	07d2      	lsls	r2, r2, #31
 8007654:	bf5c      	itt	pl
 8007656:	005b      	lslpl	r3, r3, #1
 8007658:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800765c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007660:	bf58      	it	pl
 8007662:	0049      	lslpl	r1, r1, #1
 8007664:	2600      	movs	r6, #0
 8007666:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800766a:	106d      	asrs	r5, r5, #1
 800766c:	0049      	lsls	r1, r1, #1
 800766e:	2016      	movs	r0, #22
 8007670:	4632      	mov	r2, r6
 8007672:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007676:	1917      	adds	r7, r2, r4
 8007678:	429f      	cmp	r7, r3
 800767a:	bfde      	ittt	le
 800767c:	193a      	addle	r2, r7, r4
 800767e:	1bdb      	suble	r3, r3, r7
 8007680:	1936      	addle	r6, r6, r4
 8007682:	0fcf      	lsrs	r7, r1, #31
 8007684:	3801      	subs	r0, #1
 8007686:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800768a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800768e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007692:	d1f0      	bne.n	8007676 <__ieee754_sqrt+0xb6>
 8007694:	4604      	mov	r4, r0
 8007696:	2720      	movs	r7, #32
 8007698:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800769c:	429a      	cmp	r2, r3
 800769e:	eb00 0e0c 	add.w	lr, r0, ip
 80076a2:	db02      	blt.n	80076aa <__ieee754_sqrt+0xea>
 80076a4:	d113      	bne.n	80076ce <__ieee754_sqrt+0x10e>
 80076a6:	458e      	cmp	lr, r1
 80076a8:	d811      	bhi.n	80076ce <__ieee754_sqrt+0x10e>
 80076aa:	f1be 0f00 	cmp.w	lr, #0
 80076ae:	eb0e 000c 	add.w	r0, lr, ip
 80076b2:	da42      	bge.n	800773a <__ieee754_sqrt+0x17a>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	db40      	blt.n	800773a <__ieee754_sqrt+0x17a>
 80076b8:	f102 0801 	add.w	r8, r2, #1
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	458e      	cmp	lr, r1
 80076c0:	bf88      	it	hi
 80076c2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80076c6:	eba1 010e 	sub.w	r1, r1, lr
 80076ca:	4464      	add	r4, ip
 80076cc:	4642      	mov	r2, r8
 80076ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80076d2:	3f01      	subs	r7, #1
 80076d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80076d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80076dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80076e0:	d1dc      	bne.n	800769c <__ieee754_sqrt+0xdc>
 80076e2:	4319      	orrs	r1, r3
 80076e4:	d01b      	beq.n	800771e <__ieee754_sqrt+0x15e>
 80076e6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800776c <__ieee754_sqrt+0x1ac>
 80076ea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007770 <__ieee754_sqrt+0x1b0>
 80076ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80076f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80076f6:	f7f8 fdc7 	bl	8000288 <__aeabi_dsub>
 80076fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4640      	mov	r0, r8
 8007704:	4649      	mov	r1, r9
 8007706:	f7f9 f9f3 	bl	8000af0 <__aeabi_dcmple>
 800770a:	b140      	cbz	r0, 800771e <__ieee754_sqrt+0x15e>
 800770c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8007710:	e9da 0100 	ldrd	r0, r1, [sl]
 8007714:	e9db 2300 	ldrd	r2, r3, [fp]
 8007718:	d111      	bne.n	800773e <__ieee754_sqrt+0x17e>
 800771a:	3601      	adds	r6, #1
 800771c:	463c      	mov	r4, r7
 800771e:	1072      	asrs	r2, r6, #1
 8007720:	0863      	lsrs	r3, r4, #1
 8007722:	07f1      	lsls	r1, r6, #31
 8007724:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007728:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800772c:	bf48      	it	mi
 800772e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007732:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007736:	4618      	mov	r0, r3
 8007738:	e756      	b.n	80075e8 <__ieee754_sqrt+0x28>
 800773a:	4690      	mov	r8, r2
 800773c:	e7be      	b.n	80076bc <__ieee754_sqrt+0xfc>
 800773e:	f7f8 fda5 	bl	800028c <__adddf3>
 8007742:	e9da 8900 	ldrd	r8, r9, [sl]
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4640      	mov	r0, r8
 800774c:	4649      	mov	r1, r9
 800774e:	f7f9 f9c5 	bl	8000adc <__aeabi_dcmplt>
 8007752:	b120      	cbz	r0, 800775e <__ieee754_sqrt+0x19e>
 8007754:	1ca0      	adds	r0, r4, #2
 8007756:	bf08      	it	eq
 8007758:	3601      	addeq	r6, #1
 800775a:	3402      	adds	r4, #2
 800775c:	e7df      	b.n	800771e <__ieee754_sqrt+0x15e>
 800775e:	1c63      	adds	r3, r4, #1
 8007760:	f023 0401 	bic.w	r4, r3, #1
 8007764:	e7db      	b.n	800771e <__ieee754_sqrt+0x15e>
 8007766:	bf00      	nop
 8007768:	7ff00000 	.word	0x7ff00000
 800776c:	20000018 	.word	0x20000018
 8007770:	20000010 	.word	0x20000010
 8007774:	00000000 	.word	0x00000000

08007778 <__ieee754_rem_pio2>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	ec57 6b10 	vmov	r6, r7, d0
 8007780:	4bc5      	ldr	r3, [pc, #788]	@ (8007a98 <__ieee754_rem_pio2+0x320>)
 8007782:	b08d      	sub	sp, #52	@ 0x34
 8007784:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007788:	4598      	cmp	r8, r3
 800778a:	4604      	mov	r4, r0
 800778c:	9704      	str	r7, [sp, #16]
 800778e:	d807      	bhi.n	80077a0 <__ieee754_rem_pio2+0x28>
 8007790:	2200      	movs	r2, #0
 8007792:	2300      	movs	r3, #0
 8007794:	ed80 0b00 	vstr	d0, [r0]
 8007798:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800779c:	2500      	movs	r5, #0
 800779e:	e028      	b.n	80077f2 <__ieee754_rem_pio2+0x7a>
 80077a0:	4bbe      	ldr	r3, [pc, #760]	@ (8007a9c <__ieee754_rem_pio2+0x324>)
 80077a2:	4598      	cmp	r8, r3
 80077a4:	d878      	bhi.n	8007898 <__ieee754_rem_pio2+0x120>
 80077a6:	9b04      	ldr	r3, [sp, #16]
 80077a8:	4dbd      	ldr	r5, [pc, #756]	@ (8007aa0 <__ieee754_rem_pio2+0x328>)
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	4630      	mov	r0, r6
 80077ae:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007a60 <__ieee754_rem_pio2+0x2e8>)
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	4639      	mov	r1, r7
 80077b6:	dd38      	ble.n	800782a <__ieee754_rem_pio2+0xb2>
 80077b8:	f7f8 fd66 	bl	8000288 <__aeabi_dsub>
 80077bc:	45a8      	cmp	r8, r5
 80077be:	4606      	mov	r6, r0
 80077c0:	460f      	mov	r7, r1
 80077c2:	d01a      	beq.n	80077fa <__ieee754_rem_pio2+0x82>
 80077c4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007a68 <__ieee754_rem_pio2+0x2f0>)
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	f7f8 fd5d 	bl	8000288 <__aeabi_dsub>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4680      	mov	r8, r0
 80077d4:	4689      	mov	r9, r1
 80077d6:	4630      	mov	r0, r6
 80077d8:	4639      	mov	r1, r7
 80077da:	f7f8 fd55 	bl	8000288 <__aeabi_dsub>
 80077de:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007a68 <__ieee754_rem_pio2+0x2f0>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f8 fd50 	bl	8000288 <__aeabi_dsub>
 80077e8:	e9c4 8900 	strd	r8, r9, [r4]
 80077ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80077f0:	2501      	movs	r5, #1
 80077f2:	4628      	mov	r0, r5
 80077f4:	b00d      	add	sp, #52	@ 0x34
 80077f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fa:	a39d      	add	r3, pc, #628	@ (adr r3, 8007a70 <__ieee754_rem_pio2+0x2f8>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fd42 	bl	8000288 <__aeabi_dsub>
 8007804:	a39c      	add	r3, pc, #624	@ (adr r3, 8007a78 <__ieee754_rem_pio2+0x300>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	f7f8 fd3b 	bl	8000288 <__aeabi_dsub>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4680      	mov	r8, r0
 8007818:	4689      	mov	r9, r1
 800781a:	4630      	mov	r0, r6
 800781c:	4639      	mov	r1, r7
 800781e:	f7f8 fd33 	bl	8000288 <__aeabi_dsub>
 8007822:	a395      	add	r3, pc, #596	@ (adr r3, 8007a78 <__ieee754_rem_pio2+0x300>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	e7dc      	b.n	80077e4 <__ieee754_rem_pio2+0x6c>
 800782a:	f7f8 fd2f 	bl	800028c <__adddf3>
 800782e:	45a8      	cmp	r8, r5
 8007830:	4606      	mov	r6, r0
 8007832:	460f      	mov	r7, r1
 8007834:	d018      	beq.n	8007868 <__ieee754_rem_pio2+0xf0>
 8007836:	a38c      	add	r3, pc, #560	@ (adr r3, 8007a68 <__ieee754_rem_pio2+0x2f0>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fd26 	bl	800028c <__adddf3>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4680      	mov	r8, r0
 8007846:	4689      	mov	r9, r1
 8007848:	4630      	mov	r0, r6
 800784a:	4639      	mov	r1, r7
 800784c:	f7f8 fd1c 	bl	8000288 <__aeabi_dsub>
 8007850:	a385      	add	r3, pc, #532	@ (adr r3, 8007a68 <__ieee754_rem_pio2+0x2f0>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f7f8 fd19 	bl	800028c <__adddf3>
 800785a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800785e:	e9c4 8900 	strd	r8, r9, [r4]
 8007862:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007866:	e7c4      	b.n	80077f2 <__ieee754_rem_pio2+0x7a>
 8007868:	a381      	add	r3, pc, #516	@ (adr r3, 8007a70 <__ieee754_rem_pio2+0x2f8>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	f7f8 fd0d 	bl	800028c <__adddf3>
 8007872:	a381      	add	r3, pc, #516	@ (adr r3, 8007a78 <__ieee754_rem_pio2+0x300>)
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	4606      	mov	r6, r0
 800787a:	460f      	mov	r7, r1
 800787c:	f7f8 fd06 	bl	800028c <__adddf3>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4680      	mov	r8, r0
 8007886:	4689      	mov	r9, r1
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	f7f8 fcfc 	bl	8000288 <__aeabi_dsub>
 8007890:	a379      	add	r3, pc, #484	@ (adr r3, 8007a78 <__ieee754_rem_pio2+0x300>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	e7de      	b.n	8007856 <__ieee754_rem_pio2+0xde>
 8007898:	4b82      	ldr	r3, [pc, #520]	@ (8007aa4 <__ieee754_rem_pio2+0x32c>)
 800789a:	4598      	cmp	r8, r3
 800789c:	f200 80d1 	bhi.w	8007a42 <__ieee754_rem_pio2+0x2ca>
 80078a0:	f7ff fe32 	bl	8007508 <fabs>
 80078a4:	ec57 6b10 	vmov	r6, r7, d0
 80078a8:	a375      	add	r3, pc, #468	@ (adr r3, 8007a80 <__ieee754_rem_pio2+0x308>)
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	4630      	mov	r0, r6
 80078b0:	4639      	mov	r1, r7
 80078b2:	f7f8 fea1 	bl	80005f8 <__aeabi_dmul>
 80078b6:	4b7c      	ldr	r3, [pc, #496]	@ (8007aa8 <__ieee754_rem_pio2+0x330>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	f7f8 fce7 	bl	800028c <__adddf3>
 80078be:	f7f9 f94b 	bl	8000b58 <__aeabi_d2iz>
 80078c2:	4605      	mov	r5, r0
 80078c4:	f7f8 fe2e 	bl	8000524 <__aeabi_i2d>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078d0:	a363      	add	r3, pc, #396	@ (adr r3, 8007a60 <__ieee754_rem_pio2+0x2e8>)
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f7f8 fe8f 	bl	80005f8 <__aeabi_dmul>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4630      	mov	r0, r6
 80078e0:	4639      	mov	r1, r7
 80078e2:	f7f8 fcd1 	bl	8000288 <__aeabi_dsub>
 80078e6:	a360      	add	r3, pc, #384	@ (adr r3, 8007a68 <__ieee754_rem_pio2+0x2f0>)
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	4682      	mov	sl, r0
 80078ee:	468b      	mov	fp, r1
 80078f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f4:	f7f8 fe80 	bl	80005f8 <__aeabi_dmul>
 80078f8:	2d1f      	cmp	r5, #31
 80078fa:	4606      	mov	r6, r0
 80078fc:	460f      	mov	r7, r1
 80078fe:	dc0c      	bgt.n	800791a <__ieee754_rem_pio2+0x1a2>
 8007900:	4b6a      	ldr	r3, [pc, #424]	@ (8007aac <__ieee754_rem_pio2+0x334>)
 8007902:	1e6a      	subs	r2, r5, #1
 8007904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007908:	4543      	cmp	r3, r8
 800790a:	d006      	beq.n	800791a <__ieee754_rem_pio2+0x1a2>
 800790c:	4632      	mov	r2, r6
 800790e:	463b      	mov	r3, r7
 8007910:	4650      	mov	r0, sl
 8007912:	4659      	mov	r1, fp
 8007914:	f7f8 fcb8 	bl	8000288 <__aeabi_dsub>
 8007918:	e00e      	b.n	8007938 <__ieee754_rem_pio2+0x1c0>
 800791a:	463b      	mov	r3, r7
 800791c:	4632      	mov	r2, r6
 800791e:	4650      	mov	r0, sl
 8007920:	4659      	mov	r1, fp
 8007922:	f7f8 fcb1 	bl	8000288 <__aeabi_dsub>
 8007926:	ea4f 5328 	mov.w	r3, r8, asr #20
 800792a:	9305      	str	r3, [sp, #20]
 800792c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007930:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007934:	2b10      	cmp	r3, #16
 8007936:	dc02      	bgt.n	800793e <__ieee754_rem_pio2+0x1c6>
 8007938:	e9c4 0100 	strd	r0, r1, [r4]
 800793c:	e039      	b.n	80079b2 <__ieee754_rem_pio2+0x23a>
 800793e:	a34c      	add	r3, pc, #304	@ (adr r3, 8007a70 <__ieee754_rem_pio2+0x2f8>)
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007948:	f7f8 fe56 	bl	80005f8 <__aeabi_dmul>
 800794c:	4606      	mov	r6, r0
 800794e:	460f      	mov	r7, r1
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4650      	mov	r0, sl
 8007956:	4659      	mov	r1, fp
 8007958:	f7f8 fc96 	bl	8000288 <__aeabi_dsub>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4680      	mov	r8, r0
 8007962:	4689      	mov	r9, r1
 8007964:	4650      	mov	r0, sl
 8007966:	4659      	mov	r1, fp
 8007968:	f7f8 fc8e 	bl	8000288 <__aeabi_dsub>
 800796c:	4632      	mov	r2, r6
 800796e:	463b      	mov	r3, r7
 8007970:	f7f8 fc8a 	bl	8000288 <__aeabi_dsub>
 8007974:	a340      	add	r3, pc, #256	@ (adr r3, 8007a78 <__ieee754_rem_pio2+0x300>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	4606      	mov	r6, r0
 800797c:	460f      	mov	r7, r1
 800797e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007982:	f7f8 fe39 	bl	80005f8 <__aeabi_dmul>
 8007986:	4632      	mov	r2, r6
 8007988:	463b      	mov	r3, r7
 800798a:	f7f8 fc7d 	bl	8000288 <__aeabi_dsub>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4606      	mov	r6, r0
 8007994:	460f      	mov	r7, r1
 8007996:	4640      	mov	r0, r8
 8007998:	4649      	mov	r1, r9
 800799a:	f7f8 fc75 	bl	8000288 <__aeabi_dsub>
 800799e:	9a05      	ldr	r2, [sp, #20]
 80079a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b31      	cmp	r3, #49	@ 0x31
 80079a8:	dc20      	bgt.n	80079ec <__ieee754_rem_pio2+0x274>
 80079aa:	e9c4 0100 	strd	r0, r1, [r4]
 80079ae:	46c2      	mov	sl, r8
 80079b0:	46cb      	mov	fp, r9
 80079b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80079b6:	4650      	mov	r0, sl
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	4659      	mov	r1, fp
 80079be:	f7f8 fc63 	bl	8000288 <__aeabi_dsub>
 80079c2:	463b      	mov	r3, r7
 80079c4:	4632      	mov	r2, r6
 80079c6:	f7f8 fc5f 	bl	8000288 <__aeabi_dsub>
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80079d2:	f6bf af0e 	bge.w	80077f2 <__ieee754_rem_pio2+0x7a>
 80079d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80079da:	6063      	str	r3, [r4, #4]
 80079dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80079e0:	f8c4 8000 	str.w	r8, [r4]
 80079e4:	60a0      	str	r0, [r4, #8]
 80079e6:	60e3      	str	r3, [r4, #12]
 80079e8:	426d      	negs	r5, r5
 80079ea:	e702      	b.n	80077f2 <__ieee754_rem_pio2+0x7a>
 80079ec:	a326      	add	r3, pc, #152	@ (adr r3, 8007a88 <__ieee754_rem_pio2+0x310>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079f6:	f7f8 fdff 	bl	80005f8 <__aeabi_dmul>
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4640      	mov	r0, r8
 8007a04:	4649      	mov	r1, r9
 8007a06:	f7f8 fc3f 	bl	8000288 <__aeabi_dsub>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4682      	mov	sl, r0
 8007a10:	468b      	mov	fp, r1
 8007a12:	4640      	mov	r0, r8
 8007a14:	4649      	mov	r1, r9
 8007a16:	f7f8 fc37 	bl	8000288 <__aeabi_dsub>
 8007a1a:	4632      	mov	r2, r6
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	f7f8 fc33 	bl	8000288 <__aeabi_dsub>
 8007a22:	a31b      	add	r3, pc, #108	@ (adr r3, 8007a90 <__ieee754_rem_pio2+0x318>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	4606      	mov	r6, r0
 8007a2a:	460f      	mov	r7, r1
 8007a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a30:	f7f8 fde2 	bl	80005f8 <__aeabi_dmul>
 8007a34:	4632      	mov	r2, r6
 8007a36:	463b      	mov	r3, r7
 8007a38:	f7f8 fc26 	bl	8000288 <__aeabi_dsub>
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	e764      	b.n	800790c <__ieee754_rem_pio2+0x194>
 8007a42:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab0 <__ieee754_rem_pio2+0x338>)
 8007a44:	4598      	cmp	r8, r3
 8007a46:	d935      	bls.n	8007ab4 <__ieee754_rem_pio2+0x33c>
 8007a48:	4632      	mov	r2, r6
 8007a4a:	463b      	mov	r3, r7
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7f8 fc1a 	bl	8000288 <__aeabi_dsub>
 8007a54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a58:	e9c4 0100 	strd	r0, r1, [r4]
 8007a5c:	e69e      	b.n	800779c <__ieee754_rem_pio2+0x24>
 8007a5e:	bf00      	nop
 8007a60:	54400000 	.word	0x54400000
 8007a64:	3ff921fb 	.word	0x3ff921fb
 8007a68:	1a626331 	.word	0x1a626331
 8007a6c:	3dd0b461 	.word	0x3dd0b461
 8007a70:	1a600000 	.word	0x1a600000
 8007a74:	3dd0b461 	.word	0x3dd0b461
 8007a78:	2e037073 	.word	0x2e037073
 8007a7c:	3ba3198a 	.word	0x3ba3198a
 8007a80:	6dc9c883 	.word	0x6dc9c883
 8007a84:	3fe45f30 	.word	0x3fe45f30
 8007a88:	2e000000 	.word	0x2e000000
 8007a8c:	3ba3198a 	.word	0x3ba3198a
 8007a90:	252049c1 	.word	0x252049c1
 8007a94:	397b839a 	.word	0x397b839a
 8007a98:	3fe921fb 	.word	0x3fe921fb
 8007a9c:	4002d97b 	.word	0x4002d97b
 8007aa0:	3ff921fb 	.word	0x3ff921fb
 8007aa4:	413921fb 	.word	0x413921fb
 8007aa8:	3fe00000 	.word	0x3fe00000
 8007aac:	0800b4b0 	.word	0x0800b4b0
 8007ab0:	7fefffff 	.word	0x7fefffff
 8007ab4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007ab8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007abc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	460f      	mov	r7, r1
 8007ac4:	f7f9 f848 	bl	8000b58 <__aeabi_d2iz>
 8007ac8:	f7f8 fd2c 	bl	8000524 <__aeabi_i2d>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ad8:	f7f8 fbd6 	bl	8000288 <__aeabi_dsub>
 8007adc:	4b22      	ldr	r3, [pc, #136]	@ (8007b68 <__ieee754_rem_pio2+0x3f0>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f7f8 fd8a 	bl	80005f8 <__aeabi_dmul>
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	f7f9 f836 	bl	8000b58 <__aeabi_d2iz>
 8007aec:	f7f8 fd1a 	bl	8000524 <__aeabi_i2d>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4630      	mov	r0, r6
 8007af6:	4639      	mov	r1, r7
 8007af8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007afc:	f7f8 fbc4 	bl	8000288 <__aeabi_dsub>
 8007b00:	4b19      	ldr	r3, [pc, #100]	@ (8007b68 <__ieee754_rem_pio2+0x3f0>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	f7f8 fd78 	bl	80005f8 <__aeabi_dmul>
 8007b08:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007b0c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007b10:	f04f 0803 	mov.w	r8, #3
 8007b14:	2600      	movs	r6, #0
 8007b16:	2700      	movs	r7, #0
 8007b18:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	463b      	mov	r3, r7
 8007b20:	46c2      	mov	sl, r8
 8007b22:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007b26:	f7f8 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d1f4      	bne.n	8007b18 <__ieee754_rem_pio2+0x3a0>
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b6c <__ieee754_rem_pio2+0x3f4>)
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	2302      	movs	r3, #2
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	462a      	mov	r2, r5
 8007b38:	4653      	mov	r3, sl
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	a806      	add	r0, sp, #24
 8007b3e:	f000 f817 	bl	8007b70 <__kernel_rem_pio2>
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	4605      	mov	r5, r0
 8007b48:	f6bf ae53 	bge.w	80077f2 <__ieee754_rem_pio2+0x7a>
 8007b4c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007b50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b54:	e9c4 2300 	strd	r2, r3, [r4]
 8007b58:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007b5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b60:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007b64:	e740      	b.n	80079e8 <__ieee754_rem_pio2+0x270>
 8007b66:	bf00      	nop
 8007b68:	41700000 	.word	0x41700000
 8007b6c:	0800b530 	.word	0x0800b530

08007b70 <__kernel_rem_pio2>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	ed2d 8b02 	vpush	{d8}
 8007b78:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007b7c:	f112 0f14 	cmn.w	r2, #20
 8007b80:	9306      	str	r3, [sp, #24]
 8007b82:	9104      	str	r1, [sp, #16]
 8007b84:	4bbe      	ldr	r3, [pc, #760]	@ (8007e80 <__kernel_rem_pio2+0x310>)
 8007b86:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007b88:	9008      	str	r0, [sp, #32]
 8007b8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	9b06      	ldr	r3, [sp, #24]
 8007b92:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007b96:	bfa8      	it	ge
 8007b98:	1ed4      	subge	r4, r2, #3
 8007b9a:	9305      	str	r3, [sp, #20]
 8007b9c:	bfb2      	itee	lt
 8007b9e:	2400      	movlt	r4, #0
 8007ba0:	2318      	movge	r3, #24
 8007ba2:	fb94 f4f3 	sdivge	r4, r4, r3
 8007ba6:	f06f 0317 	mvn.w	r3, #23
 8007baa:	fb04 3303 	mla	r3, r4, r3, r3
 8007bae:	eb03 0b02 	add.w	fp, r3, r2
 8007bb2:	9b00      	ldr	r3, [sp, #0]
 8007bb4:	9a05      	ldr	r2, [sp, #20]
 8007bb6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007e70 <__kernel_rem_pio2+0x300>
 8007bba:	eb03 0802 	add.w	r8, r3, r2
 8007bbe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007bc0:	1aa7      	subs	r7, r4, r2
 8007bc2:	ae20      	add	r6, sp, #128	@ 0x80
 8007bc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007bc8:	2500      	movs	r5, #0
 8007bca:	4545      	cmp	r5, r8
 8007bcc:	dd13      	ble.n	8007bf6 <__kernel_rem_pio2+0x86>
 8007bce:	9b06      	ldr	r3, [sp, #24]
 8007bd0:	aa20      	add	r2, sp, #128	@ 0x80
 8007bd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007bd6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007bda:	f04f 0800 	mov.w	r8, #0
 8007bde:	9b00      	ldr	r3, [sp, #0]
 8007be0:	4598      	cmp	r8, r3
 8007be2:	dc31      	bgt.n	8007c48 <__kernel_rem_pio2+0xd8>
 8007be4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007e70 <__kernel_rem_pio2+0x300>
 8007be8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bf0:	462f      	mov	r7, r5
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	e01b      	b.n	8007c2e <__kernel_rem_pio2+0xbe>
 8007bf6:	42ef      	cmn	r7, r5
 8007bf8:	d407      	bmi.n	8007c0a <__kernel_rem_pio2+0x9a>
 8007bfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007bfe:	f7f8 fc91 	bl	8000524 <__aeabi_i2d>
 8007c02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007c06:	3501      	adds	r5, #1
 8007c08:	e7df      	b.n	8007bca <__kernel_rem_pio2+0x5a>
 8007c0a:	ec51 0b18 	vmov	r0, r1, d8
 8007c0e:	e7f8      	b.n	8007c02 <__kernel_rem_pio2+0x92>
 8007c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007c18:	f7f8 fcee 	bl	80005f8 <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c24:	f7f8 fb32 	bl	800028c <__adddf3>
 8007c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	9b05      	ldr	r3, [sp, #20]
 8007c30:	429e      	cmp	r6, r3
 8007c32:	f1a7 0708 	sub.w	r7, r7, #8
 8007c36:	ddeb      	ble.n	8007c10 <__kernel_rem_pio2+0xa0>
 8007c38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c3c:	f108 0801 	add.w	r8, r8, #1
 8007c40:	ecaa 7b02 	vstmia	sl!, {d7}
 8007c44:	3508      	adds	r5, #8
 8007c46:	e7ca      	b.n	8007bde <__kernel_rem_pio2+0x6e>
 8007c48:	9b00      	ldr	r3, [sp, #0]
 8007c4a:	f8dd 8000 	ldr.w	r8, [sp]
 8007c4e:	aa0c      	add	r2, sp, #48	@ 0x30
 8007c50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c54:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007c58:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007c62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c64:	ab98      	add	r3, sp, #608	@ 0x260
 8007c66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c6a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007c6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c72:	ac0c      	add	r4, sp, #48	@ 0x30
 8007c74:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007c76:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007c7a:	46a1      	mov	r9, r4
 8007c7c:	46c2      	mov	sl, r8
 8007c7e:	f1ba 0f00 	cmp.w	sl, #0
 8007c82:	f1a5 0508 	sub.w	r5, r5, #8
 8007c86:	dc77      	bgt.n	8007d78 <__kernel_rem_pio2+0x208>
 8007c88:	4658      	mov	r0, fp
 8007c8a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007c8e:	f000 fc4b 	bl	8008528 <scalbn>
 8007c92:	ec57 6b10 	vmov	r6, r7, d0
 8007c96:	2200      	movs	r2, #0
 8007c98:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 fcaa 	bl	80005f8 <__aeabi_dmul>
 8007ca4:	ec41 0b10 	vmov	d0, r0, r1
 8007ca8:	f000 fcbe 	bl	8008628 <floor>
 8007cac:	4b75      	ldr	r3, [pc, #468]	@ (8007e84 <__kernel_rem_pio2+0x314>)
 8007cae:	ec51 0b10 	vmov	r0, r1, d0
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f7f8 fca0 	bl	80005f8 <__aeabi_dmul>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	f7f8 fae2 	bl	8000288 <__aeabi_dsub>
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	f7f8 ff46 	bl	8000b58 <__aeabi_d2iz>
 8007ccc:	9002      	str	r0, [sp, #8]
 8007cce:	f7f8 fc29 	bl	8000524 <__aeabi_i2d>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	4639      	mov	r1, r7
 8007cda:	f7f8 fad5 	bl	8000288 <__aeabi_dsub>
 8007cde:	f1bb 0f00 	cmp.w	fp, #0
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	460f      	mov	r7, r1
 8007ce6:	dd6c      	ble.n	8007dc2 <__kernel_rem_pio2+0x252>
 8007ce8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8007cec:	ab0c      	add	r3, sp, #48	@ 0x30
 8007cee:	9d02      	ldr	r5, [sp, #8]
 8007cf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cf4:	f1cb 0018 	rsb	r0, fp, #24
 8007cf8:	fa43 f200 	asr.w	r2, r3, r0
 8007cfc:	4415      	add	r5, r2
 8007cfe:	4082      	lsls	r2, r0
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	aa0c      	add	r2, sp, #48	@ 0x30
 8007d04:	9502      	str	r5, [sp, #8]
 8007d06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007d0a:	f1cb 0217 	rsb	r2, fp, #23
 8007d0e:	fa43 f902 	asr.w	r9, r3, r2
 8007d12:	f1b9 0f00 	cmp.w	r9, #0
 8007d16:	dd64      	ble.n	8007de2 <__kernel_rem_pio2+0x272>
 8007d18:	9b02      	ldr	r3, [sp, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	9302      	str	r3, [sp, #8]
 8007d20:	4615      	mov	r5, r2
 8007d22:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007d26:	4590      	cmp	r8, r2
 8007d28:	f300 80b8 	bgt.w	8007e9c <__kernel_rem_pio2+0x32c>
 8007d2c:	f1bb 0f00 	cmp.w	fp, #0
 8007d30:	dd07      	ble.n	8007d42 <__kernel_rem_pio2+0x1d2>
 8007d32:	f1bb 0f01 	cmp.w	fp, #1
 8007d36:	f000 80bf 	beq.w	8007eb8 <__kernel_rem_pio2+0x348>
 8007d3a:	f1bb 0f02 	cmp.w	fp, #2
 8007d3e:	f000 80c6 	beq.w	8007ece <__kernel_rem_pio2+0x35e>
 8007d42:	f1b9 0f02 	cmp.w	r9, #2
 8007d46:	d14c      	bne.n	8007de2 <__kernel_rem_pio2+0x272>
 8007d48:	4632      	mov	r2, r6
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	494e      	ldr	r1, [pc, #312]	@ (8007e88 <__kernel_rem_pio2+0x318>)
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f7f8 fa9a 	bl	8000288 <__aeabi_dsub>
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	d042      	beq.n	8007de2 <__kernel_rem_pio2+0x272>
 8007d5c:	4658      	mov	r0, fp
 8007d5e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007e78 <__kernel_rem_pio2+0x308>
 8007d62:	f000 fbe1 	bl	8008528 <scalbn>
 8007d66:	4630      	mov	r0, r6
 8007d68:	4639      	mov	r1, r7
 8007d6a:	ec53 2b10 	vmov	r2, r3, d0
 8007d6e:	f7f8 fa8b 	bl	8000288 <__aeabi_dsub>
 8007d72:	4606      	mov	r6, r0
 8007d74:	460f      	mov	r7, r1
 8007d76:	e034      	b.n	8007de2 <__kernel_rem_pio2+0x272>
 8007d78:	4b44      	ldr	r3, [pc, #272]	@ (8007e8c <__kernel_rem_pio2+0x31c>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d80:	f7f8 fc3a 	bl	80005f8 <__aeabi_dmul>
 8007d84:	f7f8 fee8 	bl	8000b58 <__aeabi_d2iz>
 8007d88:	f7f8 fbcc 	bl	8000524 <__aeabi_i2d>
 8007d8c:	4b40      	ldr	r3, [pc, #256]	@ (8007e90 <__kernel_rem_pio2+0x320>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	4606      	mov	r6, r0
 8007d92:	460f      	mov	r7, r1
 8007d94:	f7f8 fc30 	bl	80005f8 <__aeabi_dmul>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da0:	f7f8 fa72 	bl	8000288 <__aeabi_dsub>
 8007da4:	f7f8 fed8 	bl	8000b58 <__aeabi_d2iz>
 8007da8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dac:	f849 0b04 	str.w	r0, [r9], #4
 8007db0:	4639      	mov	r1, r7
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7f8 fa6a 	bl	800028c <__adddf3>
 8007db8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc0:	e75d      	b.n	8007c7e <__kernel_rem_pio2+0x10e>
 8007dc2:	d107      	bne.n	8007dd4 <__kernel_rem_pio2+0x264>
 8007dc4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007dc8:	aa0c      	add	r2, sp, #48	@ 0x30
 8007dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dce:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007dd2:	e79e      	b.n	8007d12 <__kernel_rem_pio2+0x1a2>
 8007dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8007e94 <__kernel_rem_pio2+0x324>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f7f8 fe94 	bl	8000b04 <__aeabi_dcmpge>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d143      	bne.n	8007e68 <__kernel_rem_pio2+0x2f8>
 8007de0:	4681      	mov	r9, r0
 8007de2:	2200      	movs	r2, #0
 8007de4:	2300      	movs	r3, #0
 8007de6:	4630      	mov	r0, r6
 8007de8:	4639      	mov	r1, r7
 8007dea:	f7f8 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f000 80bf 	beq.w	8007f72 <__kernel_rem_pio2+0x402>
 8007df4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007df8:	2200      	movs	r2, #0
 8007dfa:	9900      	ldr	r1, [sp, #0]
 8007dfc:	428b      	cmp	r3, r1
 8007dfe:	da6e      	bge.n	8007ede <__kernel_rem_pio2+0x36e>
 8007e00:	2a00      	cmp	r2, #0
 8007e02:	f000 8089 	beq.w	8007f18 <__kernel_rem_pio2+0x3a8>
 8007e06:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007e0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e0c:	f1ab 0b18 	sub.w	fp, fp, #24
 8007e10:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f6      	beq.n	8007e06 <__kernel_rem_pio2+0x296>
 8007e18:	4658      	mov	r0, fp
 8007e1a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007e78 <__kernel_rem_pio2+0x308>
 8007e1e:	f000 fb83 	bl	8008528 <scalbn>
 8007e22:	f108 0301 	add.w	r3, r8, #1
 8007e26:	00da      	lsls	r2, r3, #3
 8007e28:	9205      	str	r2, [sp, #20]
 8007e2a:	ec55 4b10 	vmov	r4, r5, d0
 8007e2e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007e30:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8007e8c <__kernel_rem_pio2+0x31c>
 8007e34:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007e38:	4646      	mov	r6, r8
 8007e3a:	f04f 0a00 	mov.w	sl, #0
 8007e3e:	2e00      	cmp	r6, #0
 8007e40:	f280 80cf 	bge.w	8007fe2 <__kernel_rem_pio2+0x472>
 8007e44:	4644      	mov	r4, r8
 8007e46:	2c00      	cmp	r4, #0
 8007e48:	f2c0 80fd 	blt.w	8008046 <__kernel_rem_pio2+0x4d6>
 8007e4c:	4b12      	ldr	r3, [pc, #72]	@ (8007e98 <__kernel_rem_pio2+0x328>)
 8007e4e:	461f      	mov	r7, r3
 8007e50:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007e52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e56:	9306      	str	r3, [sp, #24]
 8007e58:	f04f 0a00 	mov.w	sl, #0
 8007e5c:	f04f 0b00 	mov.w	fp, #0
 8007e60:	2600      	movs	r6, #0
 8007e62:	eba8 0504 	sub.w	r5, r8, r4
 8007e66:	e0e2      	b.n	800802e <__kernel_rem_pio2+0x4be>
 8007e68:	f04f 0902 	mov.w	r9, #2
 8007e6c:	e754      	b.n	8007d18 <__kernel_rem_pio2+0x1a8>
 8007e6e:	bf00      	nop
	...
 8007e7c:	3ff00000 	.word	0x3ff00000
 8007e80:	0800b678 	.word	0x0800b678
 8007e84:	40200000 	.word	0x40200000
 8007e88:	3ff00000 	.word	0x3ff00000
 8007e8c:	3e700000 	.word	0x3e700000
 8007e90:	41700000 	.word	0x41700000
 8007e94:	3fe00000 	.word	0x3fe00000
 8007e98:	0800b638 	.word	0x0800b638
 8007e9c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007ea0:	b945      	cbnz	r5, 8007eb4 <__kernel_rem_pio2+0x344>
 8007ea2:	b123      	cbz	r3, 8007eae <__kernel_rem_pio2+0x33e>
 8007ea4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007ea8:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eac:	2301      	movs	r3, #1
 8007eae:	3201      	adds	r2, #1
 8007eb0:	461d      	mov	r5, r3
 8007eb2:	e738      	b.n	8007d26 <__kernel_rem_pio2+0x1b6>
 8007eb4:	1acb      	subs	r3, r1, r3
 8007eb6:	e7f7      	b.n	8007ea8 <__kernel_rem_pio2+0x338>
 8007eb8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8007ebc:	ab0c      	add	r3, sp, #48	@ 0x30
 8007ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007ec6:	a90c      	add	r1, sp, #48	@ 0x30
 8007ec8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007ecc:	e739      	b.n	8007d42 <__kernel_rem_pio2+0x1d2>
 8007ece:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8007ed2:	ab0c      	add	r3, sp, #48	@ 0x30
 8007ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007edc:	e7f3      	b.n	8007ec6 <__kernel_rem_pio2+0x356>
 8007ede:	a90c      	add	r1, sp, #48	@ 0x30
 8007ee0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	e787      	b.n	8007dfa <__kernel_rem_pio2+0x28a>
 8007eea:	3401      	adds	r4, #1
 8007eec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	d0fa      	beq.n	8007eea <__kernel_rem_pio2+0x37a>
 8007ef4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ef6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007efa:	eb0d 0503 	add.w	r5, sp, r3
 8007efe:	9b06      	ldr	r3, [sp, #24]
 8007f00:	aa20      	add	r2, sp, #128	@ 0x80
 8007f02:	4443      	add	r3, r8
 8007f04:	f108 0701 	add.w	r7, r8, #1
 8007f08:	3d98      	subs	r5, #152	@ 0x98
 8007f0a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007f0e:	4444      	add	r4, r8
 8007f10:	42bc      	cmp	r4, r7
 8007f12:	da04      	bge.n	8007f1e <__kernel_rem_pio2+0x3ae>
 8007f14:	46a0      	mov	r8, r4
 8007f16:	e6a2      	b.n	8007c5e <__kernel_rem_pio2+0xee>
 8007f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f1a:	2401      	movs	r4, #1
 8007f1c:	e7e6      	b.n	8007eec <__kernel_rem_pio2+0x37c>
 8007f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f20:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007f24:	f7f8 fafe 	bl	8000524 <__aeabi_i2d>
 8007f28:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80081f0 <__kernel_rem_pio2+0x680>
 8007f2c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007f30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f38:	46b2      	mov	sl, r6
 8007f3a:	f04f 0800 	mov.w	r8, #0
 8007f3e:	9b05      	ldr	r3, [sp, #20]
 8007f40:	4598      	cmp	r8, r3
 8007f42:	dd05      	ble.n	8007f50 <__kernel_rem_pio2+0x3e0>
 8007f44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f48:	3701      	adds	r7, #1
 8007f4a:	eca5 7b02 	vstmia	r5!, {d7}
 8007f4e:	e7df      	b.n	8007f10 <__kernel_rem_pio2+0x3a0>
 8007f50:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8007f54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007f58:	f7f8 fb4e 	bl	80005f8 <__aeabi_dmul>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f64:	f7f8 f992 	bl	800028c <__adddf3>
 8007f68:	f108 0801 	add.w	r8, r8, #1
 8007f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f70:	e7e5      	b.n	8007f3e <__kernel_rem_pio2+0x3ce>
 8007f72:	f1cb 0000 	rsb	r0, fp, #0
 8007f76:	ec47 6b10 	vmov	d0, r6, r7
 8007f7a:	f000 fad5 	bl	8008528 <scalbn>
 8007f7e:	ec55 4b10 	vmov	r4, r5, d0
 8007f82:	4b9d      	ldr	r3, [pc, #628]	@ (80081f8 <__kernel_rem_pio2+0x688>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	4620      	mov	r0, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f7f8 fdbb 	bl	8000b04 <__aeabi_dcmpge>
 8007f8e:	b300      	cbz	r0, 8007fd2 <__kernel_rem_pio2+0x462>
 8007f90:	4b9a      	ldr	r3, [pc, #616]	@ (80081fc <__kernel_rem_pio2+0x68c>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	4620      	mov	r0, r4
 8007f96:	4629      	mov	r1, r5
 8007f98:	f7f8 fb2e 	bl	80005f8 <__aeabi_dmul>
 8007f9c:	f7f8 fddc 	bl	8000b58 <__aeabi_d2iz>
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	f7f8 fabf 	bl	8000524 <__aeabi_i2d>
 8007fa6:	4b94      	ldr	r3, [pc, #592]	@ (80081f8 <__kernel_rem_pio2+0x688>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f7f8 fb25 	bl	80005f8 <__aeabi_dmul>
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f7f8 f967 	bl	8000288 <__aeabi_dsub>
 8007fba:	f7f8 fdcd 	bl	8000b58 <__aeabi_d2iz>
 8007fbe:	ab0c      	add	r3, sp, #48	@ 0x30
 8007fc0:	f10b 0b18 	add.w	fp, fp, #24
 8007fc4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007fc8:	f108 0801 	add.w	r8, r8, #1
 8007fcc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007fd0:	e722      	b.n	8007e18 <__kernel_rem_pio2+0x2a8>
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	f7f8 fdbf 	bl	8000b58 <__aeabi_d2iz>
 8007fda:	ab0c      	add	r3, sp, #48	@ 0x30
 8007fdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007fe0:	e71a      	b.n	8007e18 <__kernel_rem_pio2+0x2a8>
 8007fe2:	ab0c      	add	r3, sp, #48	@ 0x30
 8007fe4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007fe8:	f7f8 fa9c 	bl	8000524 <__aeabi_i2d>
 8007fec:	4622      	mov	r2, r4
 8007fee:	462b      	mov	r3, r5
 8007ff0:	f7f8 fb02 	bl	80005f8 <__aeabi_dmul>
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007ffa:	465b      	mov	r3, fp
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4629      	mov	r1, r5
 8008000:	f7f8 fafa 	bl	80005f8 <__aeabi_dmul>
 8008004:	3e01      	subs	r6, #1
 8008006:	4604      	mov	r4, r0
 8008008:	460d      	mov	r5, r1
 800800a:	e718      	b.n	8007e3e <__kernel_rem_pio2+0x2ce>
 800800c:	9906      	ldr	r1, [sp, #24]
 800800e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008012:	9106      	str	r1, [sp, #24]
 8008014:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008018:	f7f8 faee 	bl	80005f8 <__aeabi_dmul>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4650      	mov	r0, sl
 8008022:	4659      	mov	r1, fp
 8008024:	f7f8 f932 	bl	800028c <__adddf3>
 8008028:	3601      	adds	r6, #1
 800802a:	4682      	mov	sl, r0
 800802c:	468b      	mov	fp, r1
 800802e:	9b00      	ldr	r3, [sp, #0]
 8008030:	429e      	cmp	r6, r3
 8008032:	dc01      	bgt.n	8008038 <__kernel_rem_pio2+0x4c8>
 8008034:	42b5      	cmp	r5, r6
 8008036:	dae9      	bge.n	800800c <__kernel_rem_pio2+0x49c>
 8008038:	ab48      	add	r3, sp, #288	@ 0x120
 800803a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800803e:	e9c5 ab00 	strd	sl, fp, [r5]
 8008042:	3c01      	subs	r4, #1
 8008044:	e6ff      	b.n	8007e46 <__kernel_rem_pio2+0x2d6>
 8008046:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008048:	2b02      	cmp	r3, #2
 800804a:	dc0b      	bgt.n	8008064 <__kernel_rem_pio2+0x4f4>
 800804c:	2b00      	cmp	r3, #0
 800804e:	dc39      	bgt.n	80080c4 <__kernel_rem_pio2+0x554>
 8008050:	d05d      	beq.n	800810e <__kernel_rem_pio2+0x59e>
 8008052:	9b02      	ldr	r3, [sp, #8]
 8008054:	f003 0007 	and.w	r0, r3, #7
 8008058:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800805c:	ecbd 8b02 	vpop	{d8}
 8008060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008066:	2b03      	cmp	r3, #3
 8008068:	d1f3      	bne.n	8008052 <__kernel_rem_pio2+0x4e2>
 800806a:	9b05      	ldr	r3, [sp, #20]
 800806c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008070:	eb0d 0403 	add.w	r4, sp, r3
 8008074:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008078:	4625      	mov	r5, r4
 800807a:	46c2      	mov	sl, r8
 800807c:	f1ba 0f00 	cmp.w	sl, #0
 8008080:	f1a5 0508 	sub.w	r5, r5, #8
 8008084:	dc6b      	bgt.n	800815e <__kernel_rem_pio2+0x5ee>
 8008086:	4645      	mov	r5, r8
 8008088:	2d01      	cmp	r5, #1
 800808a:	f1a4 0408 	sub.w	r4, r4, #8
 800808e:	f300 8087 	bgt.w	80081a0 <__kernel_rem_pio2+0x630>
 8008092:	9c05      	ldr	r4, [sp, #20]
 8008094:	ab48      	add	r3, sp, #288	@ 0x120
 8008096:	441c      	add	r4, r3
 8008098:	2000      	movs	r0, #0
 800809a:	2100      	movs	r1, #0
 800809c:	f1b8 0f01 	cmp.w	r8, #1
 80080a0:	f300 809c 	bgt.w	80081dc <__kernel_rem_pio2+0x66c>
 80080a4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80080a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80080ac:	f1b9 0f00 	cmp.w	r9, #0
 80080b0:	f040 80a6 	bne.w	8008200 <__kernel_rem_pio2+0x690>
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	e9c3 7800 	strd	r7, r8, [r3]
 80080ba:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80080be:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80080c2:	e7c6      	b.n	8008052 <__kernel_rem_pio2+0x4e2>
 80080c4:	9d05      	ldr	r5, [sp, #20]
 80080c6:	ab48      	add	r3, sp, #288	@ 0x120
 80080c8:	441d      	add	r5, r3
 80080ca:	4644      	mov	r4, r8
 80080cc:	2000      	movs	r0, #0
 80080ce:	2100      	movs	r1, #0
 80080d0:	2c00      	cmp	r4, #0
 80080d2:	da35      	bge.n	8008140 <__kernel_rem_pio2+0x5d0>
 80080d4:	f1b9 0f00 	cmp.w	r9, #0
 80080d8:	d038      	beq.n	800814c <__kernel_rem_pio2+0x5dc>
 80080da:	4602      	mov	r2, r0
 80080dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080e0:	9c04      	ldr	r4, [sp, #16]
 80080e2:	e9c4 2300 	strd	r2, r3, [r4]
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80080ee:	f7f8 f8cb 	bl	8000288 <__aeabi_dsub>
 80080f2:	ad4a      	add	r5, sp, #296	@ 0x128
 80080f4:	2401      	movs	r4, #1
 80080f6:	45a0      	cmp	r8, r4
 80080f8:	da2b      	bge.n	8008152 <__kernel_rem_pio2+0x5e2>
 80080fa:	f1b9 0f00 	cmp.w	r9, #0
 80080fe:	d002      	beq.n	8008106 <__kernel_rem_pio2+0x596>
 8008100:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008104:	4619      	mov	r1, r3
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800810c:	e7a1      	b.n	8008052 <__kernel_rem_pio2+0x4e2>
 800810e:	9c05      	ldr	r4, [sp, #20]
 8008110:	ab48      	add	r3, sp, #288	@ 0x120
 8008112:	441c      	add	r4, r3
 8008114:	2000      	movs	r0, #0
 8008116:	2100      	movs	r1, #0
 8008118:	f1b8 0f00 	cmp.w	r8, #0
 800811c:	da09      	bge.n	8008132 <__kernel_rem_pio2+0x5c2>
 800811e:	f1b9 0f00 	cmp.w	r9, #0
 8008122:	d002      	beq.n	800812a <__kernel_rem_pio2+0x5ba>
 8008124:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008128:	4619      	mov	r1, r3
 800812a:	9b04      	ldr	r3, [sp, #16]
 800812c:	e9c3 0100 	strd	r0, r1, [r3]
 8008130:	e78f      	b.n	8008052 <__kernel_rem_pio2+0x4e2>
 8008132:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008136:	f7f8 f8a9 	bl	800028c <__adddf3>
 800813a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800813e:	e7eb      	b.n	8008118 <__kernel_rem_pio2+0x5a8>
 8008140:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008144:	f7f8 f8a2 	bl	800028c <__adddf3>
 8008148:	3c01      	subs	r4, #1
 800814a:	e7c1      	b.n	80080d0 <__kernel_rem_pio2+0x560>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	e7c6      	b.n	80080e0 <__kernel_rem_pio2+0x570>
 8008152:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008156:	f7f8 f899 	bl	800028c <__adddf3>
 800815a:	3401      	adds	r4, #1
 800815c:	e7cb      	b.n	80080f6 <__kernel_rem_pio2+0x586>
 800815e:	ed95 7b00 	vldr	d7, [r5]
 8008162:	ed8d 7b00 	vstr	d7, [sp]
 8008166:	ed95 7b02 	vldr	d7, [r5, #8]
 800816a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800816e:	ec53 2b17 	vmov	r2, r3, d7
 8008172:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008176:	f7f8 f889 	bl	800028c <__adddf3>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4606      	mov	r6, r0
 8008180:	460f      	mov	r7, r1
 8008182:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008186:	f7f8 f87f 	bl	8000288 <__aeabi_dsub>
 800818a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800818e:	f7f8 f87d 	bl	800028c <__adddf3>
 8008192:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008196:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800819a:	e9c5 6700 	strd	r6, r7, [r5]
 800819e:	e76d      	b.n	800807c <__kernel_rem_pio2+0x50c>
 80081a0:	ed94 7b00 	vldr	d7, [r4]
 80081a4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80081a8:	ec51 0b17 	vmov	r0, r1, d7
 80081ac:	4652      	mov	r2, sl
 80081ae:	465b      	mov	r3, fp
 80081b0:	ed8d 7b00 	vstr	d7, [sp]
 80081b4:	f7f8 f86a 	bl	800028c <__adddf3>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4606      	mov	r6, r0
 80081be:	460f      	mov	r7, r1
 80081c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081c4:	f7f8 f860 	bl	8000288 <__aeabi_dsub>
 80081c8:	4652      	mov	r2, sl
 80081ca:	465b      	mov	r3, fp
 80081cc:	f7f8 f85e 	bl	800028c <__adddf3>
 80081d0:	3d01      	subs	r5, #1
 80081d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80081d6:	e9c4 6700 	strd	r6, r7, [r4]
 80081da:	e755      	b.n	8008088 <__kernel_rem_pio2+0x518>
 80081dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80081e0:	f7f8 f854 	bl	800028c <__adddf3>
 80081e4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80081e8:	e758      	b.n	800809c <__kernel_rem_pio2+0x52c>
 80081ea:	bf00      	nop
 80081ec:	f3af 8000 	nop.w
	...
 80081f8:	41700000 	.word	0x41700000
 80081fc:	3e700000 	.word	0x3e700000
 8008200:	9b04      	ldr	r3, [sp, #16]
 8008202:	9a04      	ldr	r2, [sp, #16]
 8008204:	601f      	str	r7, [r3, #0]
 8008206:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800820a:	605c      	str	r4, [r3, #4]
 800820c:	609d      	str	r5, [r3, #8]
 800820e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008212:	60d3      	str	r3, [r2, #12]
 8008214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008218:	6110      	str	r0, [r2, #16]
 800821a:	6153      	str	r3, [r2, #20]
 800821c:	e719      	b.n	8008052 <__kernel_rem_pio2+0x4e2>
 800821e:	bf00      	nop

08008220 <__kernel_cos>:
 8008220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	ec57 6b10 	vmov	r6, r7, d0
 8008228:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800822c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008230:	ed8d 1b00 	vstr	d1, [sp]
 8008234:	d206      	bcs.n	8008244 <__kernel_cos+0x24>
 8008236:	4630      	mov	r0, r6
 8008238:	4639      	mov	r1, r7
 800823a:	f7f8 fc8d 	bl	8000b58 <__aeabi_d2iz>
 800823e:	2800      	cmp	r0, #0
 8008240:	f000 8088 	beq.w	8008354 <__kernel_cos+0x134>
 8008244:	4632      	mov	r2, r6
 8008246:	463b      	mov	r3, r7
 8008248:	4630      	mov	r0, r6
 800824a:	4639      	mov	r1, r7
 800824c:	f7f8 f9d4 	bl	80005f8 <__aeabi_dmul>
 8008250:	4b51      	ldr	r3, [pc, #324]	@ (8008398 <__kernel_cos+0x178>)
 8008252:	2200      	movs	r2, #0
 8008254:	4604      	mov	r4, r0
 8008256:	460d      	mov	r5, r1
 8008258:	f7f8 f9ce 	bl	80005f8 <__aeabi_dmul>
 800825c:	a340      	add	r3, pc, #256	@ (adr r3, 8008360 <__kernel_cos+0x140>)
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	4682      	mov	sl, r0
 8008264:	468b      	mov	fp, r1
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f8 f9c5 	bl	80005f8 <__aeabi_dmul>
 800826e:	a33e      	add	r3, pc, #248	@ (adr r3, 8008368 <__kernel_cos+0x148>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f7f8 f80a 	bl	800028c <__adddf3>
 8008278:	4622      	mov	r2, r4
 800827a:	462b      	mov	r3, r5
 800827c:	f7f8 f9bc 	bl	80005f8 <__aeabi_dmul>
 8008280:	a33b      	add	r3, pc, #236	@ (adr r3, 8008370 <__kernel_cos+0x150>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	f7f7 ffff 	bl	8000288 <__aeabi_dsub>
 800828a:	4622      	mov	r2, r4
 800828c:	462b      	mov	r3, r5
 800828e:	f7f8 f9b3 	bl	80005f8 <__aeabi_dmul>
 8008292:	a339      	add	r3, pc, #228	@ (adr r3, 8008378 <__kernel_cos+0x158>)
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	f7f7 fff8 	bl	800028c <__adddf3>
 800829c:	4622      	mov	r2, r4
 800829e:	462b      	mov	r3, r5
 80082a0:	f7f8 f9aa 	bl	80005f8 <__aeabi_dmul>
 80082a4:	a336      	add	r3, pc, #216	@ (adr r3, 8008380 <__kernel_cos+0x160>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	f7f7 ffed 	bl	8000288 <__aeabi_dsub>
 80082ae:	4622      	mov	r2, r4
 80082b0:	462b      	mov	r3, r5
 80082b2:	f7f8 f9a1 	bl	80005f8 <__aeabi_dmul>
 80082b6:	a334      	add	r3, pc, #208	@ (adr r3, 8008388 <__kernel_cos+0x168>)
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	f7f7 ffe6 	bl	800028c <__adddf3>
 80082c0:	4622      	mov	r2, r4
 80082c2:	462b      	mov	r3, r5
 80082c4:	f7f8 f998 	bl	80005f8 <__aeabi_dmul>
 80082c8:	4622      	mov	r2, r4
 80082ca:	462b      	mov	r3, r5
 80082cc:	f7f8 f994 	bl	80005f8 <__aeabi_dmul>
 80082d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082d4:	4604      	mov	r4, r0
 80082d6:	460d      	mov	r5, r1
 80082d8:	4630      	mov	r0, r6
 80082da:	4639      	mov	r1, r7
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	460b      	mov	r3, r1
 80082e2:	4602      	mov	r2, r0
 80082e4:	4629      	mov	r1, r5
 80082e6:	4620      	mov	r0, r4
 80082e8:	f7f7 ffce 	bl	8000288 <__aeabi_dsub>
 80082ec:	4b2b      	ldr	r3, [pc, #172]	@ (800839c <__kernel_cos+0x17c>)
 80082ee:	4598      	cmp	r8, r3
 80082f0:	4606      	mov	r6, r0
 80082f2:	460f      	mov	r7, r1
 80082f4:	d810      	bhi.n	8008318 <__kernel_cos+0xf8>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4650      	mov	r0, sl
 80082fc:	4659      	mov	r1, fp
 80082fe:	f7f7 ffc3 	bl	8000288 <__aeabi_dsub>
 8008302:	460b      	mov	r3, r1
 8008304:	4926      	ldr	r1, [pc, #152]	@ (80083a0 <__kernel_cos+0x180>)
 8008306:	4602      	mov	r2, r0
 8008308:	2000      	movs	r0, #0
 800830a:	f7f7 ffbd 	bl	8000288 <__aeabi_dsub>
 800830e:	ec41 0b10 	vmov	d0, r0, r1
 8008312:	b003      	add	sp, #12
 8008314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008318:	4b22      	ldr	r3, [pc, #136]	@ (80083a4 <__kernel_cos+0x184>)
 800831a:	4921      	ldr	r1, [pc, #132]	@ (80083a0 <__kernel_cos+0x180>)
 800831c:	4598      	cmp	r8, r3
 800831e:	bf8c      	ite	hi
 8008320:	4d21      	ldrhi	r5, [pc, #132]	@ (80083a8 <__kernel_cos+0x188>)
 8008322:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8008326:	2400      	movs	r4, #0
 8008328:	4622      	mov	r2, r4
 800832a:	462b      	mov	r3, r5
 800832c:	2000      	movs	r0, #0
 800832e:	f7f7 ffab 	bl	8000288 <__aeabi_dsub>
 8008332:	4622      	mov	r2, r4
 8008334:	4680      	mov	r8, r0
 8008336:	4689      	mov	r9, r1
 8008338:	462b      	mov	r3, r5
 800833a:	4650      	mov	r0, sl
 800833c:	4659      	mov	r1, fp
 800833e:	f7f7 ffa3 	bl	8000288 <__aeabi_dsub>
 8008342:	4632      	mov	r2, r6
 8008344:	463b      	mov	r3, r7
 8008346:	f7f7 ff9f 	bl	8000288 <__aeabi_dsub>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	4640      	mov	r0, r8
 8008350:	4649      	mov	r1, r9
 8008352:	e7da      	b.n	800830a <__kernel_cos+0xea>
 8008354:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008390 <__kernel_cos+0x170>
 8008358:	e7db      	b.n	8008312 <__kernel_cos+0xf2>
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w
 8008360:	be8838d4 	.word	0xbe8838d4
 8008364:	bda8fae9 	.word	0xbda8fae9
 8008368:	bdb4b1c4 	.word	0xbdb4b1c4
 800836c:	3e21ee9e 	.word	0x3e21ee9e
 8008370:	809c52ad 	.word	0x809c52ad
 8008374:	3e927e4f 	.word	0x3e927e4f
 8008378:	19cb1590 	.word	0x19cb1590
 800837c:	3efa01a0 	.word	0x3efa01a0
 8008380:	16c15177 	.word	0x16c15177
 8008384:	3f56c16c 	.word	0x3f56c16c
 8008388:	5555554c 	.word	0x5555554c
 800838c:	3fa55555 	.word	0x3fa55555
 8008390:	00000000 	.word	0x00000000
 8008394:	3ff00000 	.word	0x3ff00000
 8008398:	3fe00000 	.word	0x3fe00000
 800839c:	3fd33332 	.word	0x3fd33332
 80083a0:	3ff00000 	.word	0x3ff00000
 80083a4:	3fe90000 	.word	0x3fe90000
 80083a8:	3fd20000 	.word	0x3fd20000
 80083ac:	00000000 	.word	0x00000000

080083b0 <__kernel_sin>:
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	ec55 4b10 	vmov	r4, r5, d0
 80083b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80083bc:	b085      	sub	sp, #20
 80083be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80083c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80083c6:	4680      	mov	r8, r0
 80083c8:	d205      	bcs.n	80083d6 <__kernel_sin+0x26>
 80083ca:	4620      	mov	r0, r4
 80083cc:	4629      	mov	r1, r5
 80083ce:	f7f8 fbc3 	bl	8000b58 <__aeabi_d2iz>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d052      	beq.n	800847c <__kernel_sin+0xcc>
 80083d6:	4622      	mov	r2, r4
 80083d8:	462b      	mov	r3, r5
 80083da:	4620      	mov	r0, r4
 80083dc:	4629      	mov	r1, r5
 80083de:	f7f8 f90b 	bl	80005f8 <__aeabi_dmul>
 80083e2:	4682      	mov	sl, r0
 80083e4:	468b      	mov	fp, r1
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4620      	mov	r0, r4
 80083ec:	4629      	mov	r1, r5
 80083ee:	f7f8 f903 	bl	80005f8 <__aeabi_dmul>
 80083f2:	a342      	add	r3, pc, #264	@ (adr r3, 80084fc <__kernel_sin+0x14c>)
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	e9cd 0100 	strd	r0, r1, [sp]
 80083fc:	4650      	mov	r0, sl
 80083fe:	4659      	mov	r1, fp
 8008400:	f7f8 f8fa 	bl	80005f8 <__aeabi_dmul>
 8008404:	a33f      	add	r3, pc, #252	@ (adr r3, 8008504 <__kernel_sin+0x154>)
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	f7f7 ff3d 	bl	8000288 <__aeabi_dsub>
 800840e:	4652      	mov	r2, sl
 8008410:	465b      	mov	r3, fp
 8008412:	f7f8 f8f1 	bl	80005f8 <__aeabi_dmul>
 8008416:	a33d      	add	r3, pc, #244	@ (adr r3, 800850c <__kernel_sin+0x15c>)
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f7f7 ff36 	bl	800028c <__adddf3>
 8008420:	4652      	mov	r2, sl
 8008422:	465b      	mov	r3, fp
 8008424:	f7f8 f8e8 	bl	80005f8 <__aeabi_dmul>
 8008428:	a33a      	add	r3, pc, #232	@ (adr r3, 8008514 <__kernel_sin+0x164>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f7 ff2b 	bl	8000288 <__aeabi_dsub>
 8008432:	4652      	mov	r2, sl
 8008434:	465b      	mov	r3, fp
 8008436:	f7f8 f8df 	bl	80005f8 <__aeabi_dmul>
 800843a:	a338      	add	r3, pc, #224	@ (adr r3, 800851c <__kernel_sin+0x16c>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f7 ff24 	bl	800028c <__adddf3>
 8008444:	4606      	mov	r6, r0
 8008446:	460f      	mov	r7, r1
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	d11b      	bne.n	8008486 <__kernel_sin+0xd6>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4650      	mov	r0, sl
 8008454:	4659      	mov	r1, fp
 8008456:	f7f8 f8cf 	bl	80005f8 <__aeabi_dmul>
 800845a:	a325      	add	r3, pc, #148	@ (adr r3, 80084f0 <__kernel_sin+0x140>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f7f7 ff12 	bl	8000288 <__aeabi_dsub>
 8008464:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008468:	f7f8 f8c6 	bl	80005f8 <__aeabi_dmul>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4620      	mov	r0, r4
 8008472:	4629      	mov	r1, r5
 8008474:	f7f7 ff0a 	bl	800028c <__adddf3>
 8008478:	4604      	mov	r4, r0
 800847a:	460d      	mov	r5, r1
 800847c:	ec45 4b10 	vmov	d0, r4, r5
 8008480:	b005      	add	sp, #20
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848a:	4b1b      	ldr	r3, [pc, #108]	@ (80084f8 <__kernel_sin+0x148>)
 800848c:	2200      	movs	r2, #0
 800848e:	f7f8 f8b3 	bl	80005f8 <__aeabi_dmul>
 8008492:	4632      	mov	r2, r6
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	463b      	mov	r3, r7
 800849a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800849e:	f7f8 f8ab 	bl	80005f8 <__aeabi_dmul>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4640      	mov	r0, r8
 80084a8:	4649      	mov	r1, r9
 80084aa:	f7f7 feed 	bl	8000288 <__aeabi_dsub>
 80084ae:	4652      	mov	r2, sl
 80084b0:	465b      	mov	r3, fp
 80084b2:	f7f8 f8a1 	bl	80005f8 <__aeabi_dmul>
 80084b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084ba:	f7f7 fee5 	bl	8000288 <__aeabi_dsub>
 80084be:	a30c      	add	r3, pc, #48	@ (adr r3, 80084f0 <__kernel_sin+0x140>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	4606      	mov	r6, r0
 80084c6:	460f      	mov	r7, r1
 80084c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084cc:	f7f8 f894 	bl	80005f8 <__aeabi_dmul>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4630      	mov	r0, r6
 80084d6:	4639      	mov	r1, r7
 80084d8:	f7f7 fed8 	bl	800028c <__adddf3>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4620      	mov	r0, r4
 80084e2:	4629      	mov	r1, r5
 80084e4:	f7f7 fed0 	bl	8000288 <__aeabi_dsub>
 80084e8:	e7c6      	b.n	8008478 <__kernel_sin+0xc8>
 80084ea:	bf00      	nop
 80084ec:	f3af 8000 	nop.w
 80084f0:	55555549 	.word	0x55555549
 80084f4:	3fc55555 	.word	0x3fc55555
 80084f8:	3fe00000 	.word	0x3fe00000
 80084fc:	5acfd57c 	.word	0x5acfd57c
 8008500:	3de5d93a 	.word	0x3de5d93a
 8008504:	8a2b9ceb 	.word	0x8a2b9ceb
 8008508:	3e5ae5e6 	.word	0x3e5ae5e6
 800850c:	57b1fe7d 	.word	0x57b1fe7d
 8008510:	3ec71de3 	.word	0x3ec71de3
 8008514:	19c161d5 	.word	0x19c161d5
 8008518:	3f2a01a0 	.word	0x3f2a01a0
 800851c:	1110f8a6 	.word	0x1110f8a6
 8008520:	3f811111 	.word	0x3f811111
 8008524:	00000000 	.word	0x00000000

08008528 <scalbn>:
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	ec55 4b10 	vmov	r4, r5, d0
 800852e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008532:	4606      	mov	r6, r0
 8008534:	462b      	mov	r3, r5
 8008536:	b991      	cbnz	r1, 800855e <scalbn+0x36>
 8008538:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800853c:	4323      	orrs	r3, r4
 800853e:	d03d      	beq.n	80085bc <scalbn+0x94>
 8008540:	4b35      	ldr	r3, [pc, #212]	@ (8008618 <scalbn+0xf0>)
 8008542:	4620      	mov	r0, r4
 8008544:	4629      	mov	r1, r5
 8008546:	2200      	movs	r2, #0
 8008548:	f7f8 f856 	bl	80005f8 <__aeabi_dmul>
 800854c:	4b33      	ldr	r3, [pc, #204]	@ (800861c <scalbn+0xf4>)
 800854e:	429e      	cmp	r6, r3
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	da0f      	bge.n	8008576 <scalbn+0x4e>
 8008556:	a328      	add	r3, pc, #160	@ (adr r3, 80085f8 <scalbn+0xd0>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	e01e      	b.n	800859c <scalbn+0x74>
 800855e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008562:	4291      	cmp	r1, r2
 8008564:	d10b      	bne.n	800857e <scalbn+0x56>
 8008566:	4622      	mov	r2, r4
 8008568:	4620      	mov	r0, r4
 800856a:	4629      	mov	r1, r5
 800856c:	f7f7 fe8e 	bl	800028c <__adddf3>
 8008570:	4604      	mov	r4, r0
 8008572:	460d      	mov	r5, r1
 8008574:	e022      	b.n	80085bc <scalbn+0x94>
 8008576:	460b      	mov	r3, r1
 8008578:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800857c:	3936      	subs	r1, #54	@ 0x36
 800857e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008582:	4296      	cmp	r6, r2
 8008584:	dd0d      	ble.n	80085a2 <scalbn+0x7a>
 8008586:	2d00      	cmp	r5, #0
 8008588:	a11d      	add	r1, pc, #116	@ (adr r1, 8008600 <scalbn+0xd8>)
 800858a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858e:	da02      	bge.n	8008596 <scalbn+0x6e>
 8008590:	a11d      	add	r1, pc, #116	@ (adr r1, 8008608 <scalbn+0xe0>)
 8008592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008596:	a31a      	add	r3, pc, #104	@ (adr r3, 8008600 <scalbn+0xd8>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f7f8 f82c 	bl	80005f8 <__aeabi_dmul>
 80085a0:	e7e6      	b.n	8008570 <scalbn+0x48>
 80085a2:	1872      	adds	r2, r6, r1
 80085a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80085a8:	428a      	cmp	r2, r1
 80085aa:	dcec      	bgt.n	8008586 <scalbn+0x5e>
 80085ac:	2a00      	cmp	r2, #0
 80085ae:	dd08      	ble.n	80085c2 <scalbn+0x9a>
 80085b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80085b4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80085b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80085bc:	ec45 4b10 	vmov	d0, r4, r5
 80085c0:	bd70      	pop	{r4, r5, r6, pc}
 80085c2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80085c6:	da08      	bge.n	80085da <scalbn+0xb2>
 80085c8:	2d00      	cmp	r5, #0
 80085ca:	a10b      	add	r1, pc, #44	@ (adr r1, 80085f8 <scalbn+0xd0>)
 80085cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d0:	dac1      	bge.n	8008556 <scalbn+0x2e>
 80085d2:	a10f      	add	r1, pc, #60	@ (adr r1, 8008610 <scalbn+0xe8>)
 80085d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d8:	e7bd      	b.n	8008556 <scalbn+0x2e>
 80085da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80085de:	3236      	adds	r2, #54	@ 0x36
 80085e0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80085e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80085e8:	4620      	mov	r0, r4
 80085ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <scalbn+0xf8>)
 80085ec:	4629      	mov	r1, r5
 80085ee:	2200      	movs	r2, #0
 80085f0:	e7d4      	b.n	800859c <scalbn+0x74>
 80085f2:	bf00      	nop
 80085f4:	f3af 8000 	nop.w
 80085f8:	c2f8f359 	.word	0xc2f8f359
 80085fc:	01a56e1f 	.word	0x01a56e1f
 8008600:	8800759c 	.word	0x8800759c
 8008604:	7e37e43c 	.word	0x7e37e43c
 8008608:	8800759c 	.word	0x8800759c
 800860c:	fe37e43c 	.word	0xfe37e43c
 8008610:	c2f8f359 	.word	0xc2f8f359
 8008614:	81a56e1f 	.word	0x81a56e1f
 8008618:	43500000 	.word	0x43500000
 800861c:	ffff3cb0 	.word	0xffff3cb0
 8008620:	3c900000 	.word	0x3c900000
 8008624:	00000000 	.word	0x00000000

08008628 <floor>:
 8008628:	ec51 0b10 	vmov	r0, r1, d0
 800862c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008634:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008638:	2e13      	cmp	r6, #19
 800863a:	460c      	mov	r4, r1
 800863c:	4605      	mov	r5, r0
 800863e:	4680      	mov	r8, r0
 8008640:	dc34      	bgt.n	80086ac <floor+0x84>
 8008642:	2e00      	cmp	r6, #0
 8008644:	da17      	bge.n	8008676 <floor+0x4e>
 8008646:	a332      	add	r3, pc, #200	@ (adr r3, 8008710 <floor+0xe8>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f7 fe1e 	bl	800028c <__adddf3>
 8008650:	2200      	movs	r2, #0
 8008652:	2300      	movs	r3, #0
 8008654:	f7f8 fa60 	bl	8000b18 <__aeabi_dcmpgt>
 8008658:	b150      	cbz	r0, 8008670 <floor+0x48>
 800865a:	2c00      	cmp	r4, #0
 800865c:	da55      	bge.n	800870a <floor+0xe2>
 800865e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008662:	432c      	orrs	r4, r5
 8008664:	2500      	movs	r5, #0
 8008666:	42ac      	cmp	r4, r5
 8008668:	4c2b      	ldr	r4, [pc, #172]	@ (8008718 <floor+0xf0>)
 800866a:	bf08      	it	eq
 800866c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008670:	4621      	mov	r1, r4
 8008672:	4628      	mov	r0, r5
 8008674:	e023      	b.n	80086be <floor+0x96>
 8008676:	4f29      	ldr	r7, [pc, #164]	@ (800871c <floor+0xf4>)
 8008678:	4137      	asrs	r7, r6
 800867a:	ea01 0307 	and.w	r3, r1, r7
 800867e:	4303      	orrs	r3, r0
 8008680:	d01d      	beq.n	80086be <floor+0x96>
 8008682:	a323      	add	r3, pc, #140	@ (adr r3, 8008710 <floor+0xe8>)
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f7f7 fe00 	bl	800028c <__adddf3>
 800868c:	2200      	movs	r2, #0
 800868e:	2300      	movs	r3, #0
 8008690:	f7f8 fa42 	bl	8000b18 <__aeabi_dcmpgt>
 8008694:	2800      	cmp	r0, #0
 8008696:	d0eb      	beq.n	8008670 <floor+0x48>
 8008698:	2c00      	cmp	r4, #0
 800869a:	bfbe      	ittt	lt
 800869c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80086a0:	4133      	asrlt	r3, r6
 80086a2:	18e4      	addlt	r4, r4, r3
 80086a4:	ea24 0407 	bic.w	r4, r4, r7
 80086a8:	2500      	movs	r5, #0
 80086aa:	e7e1      	b.n	8008670 <floor+0x48>
 80086ac:	2e33      	cmp	r6, #51	@ 0x33
 80086ae:	dd0a      	ble.n	80086c6 <floor+0x9e>
 80086b0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80086b4:	d103      	bne.n	80086be <floor+0x96>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	f7f7 fde7 	bl	800028c <__adddf3>
 80086be:	ec41 0b10 	vmov	d0, r0, r1
 80086c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80086ca:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80086ce:	40df      	lsrs	r7, r3
 80086d0:	4207      	tst	r7, r0
 80086d2:	d0f4      	beq.n	80086be <floor+0x96>
 80086d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8008710 <floor+0xe8>)
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f7f7 fdd7 	bl	800028c <__adddf3>
 80086de:	2200      	movs	r2, #0
 80086e0:	2300      	movs	r3, #0
 80086e2:	f7f8 fa19 	bl	8000b18 <__aeabi_dcmpgt>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d0c2      	beq.n	8008670 <floor+0x48>
 80086ea:	2c00      	cmp	r4, #0
 80086ec:	da0a      	bge.n	8008704 <floor+0xdc>
 80086ee:	2e14      	cmp	r6, #20
 80086f0:	d101      	bne.n	80086f6 <floor+0xce>
 80086f2:	3401      	adds	r4, #1
 80086f4:	e006      	b.n	8008704 <floor+0xdc>
 80086f6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80086fa:	2301      	movs	r3, #1
 80086fc:	40b3      	lsls	r3, r6
 80086fe:	441d      	add	r5, r3
 8008700:	4545      	cmp	r5, r8
 8008702:	d3f6      	bcc.n	80086f2 <floor+0xca>
 8008704:	ea25 0507 	bic.w	r5, r5, r7
 8008708:	e7b2      	b.n	8008670 <floor+0x48>
 800870a:	2500      	movs	r5, #0
 800870c:	462c      	mov	r4, r5
 800870e:	e7af      	b.n	8008670 <floor+0x48>
 8008710:	8800759c 	.word	0x8800759c
 8008714:	7e37e43c 	.word	0x7e37e43c
 8008718:	bff00000 	.word	0xbff00000
 800871c:	000fffff 	.word	0x000fffff

08008720 <__cvt>:
 8008720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008724:	ec57 6b10 	vmov	r6, r7, d0
 8008728:	2f00      	cmp	r7, #0
 800872a:	460c      	mov	r4, r1
 800872c:	4619      	mov	r1, r3
 800872e:	463b      	mov	r3, r7
 8008730:	bfbb      	ittet	lt
 8008732:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008736:	461f      	movlt	r7, r3
 8008738:	2300      	movge	r3, #0
 800873a:	232d      	movlt	r3, #45	@ 0x2d
 800873c:	700b      	strb	r3, [r1, #0]
 800873e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008740:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008744:	4691      	mov	r9, r2
 8008746:	f023 0820 	bic.w	r8, r3, #32
 800874a:	bfbc      	itt	lt
 800874c:	4632      	movlt	r2, r6
 800874e:	4616      	movlt	r6, r2
 8008750:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008754:	d005      	beq.n	8008762 <__cvt+0x42>
 8008756:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800875a:	d100      	bne.n	800875e <__cvt+0x3e>
 800875c:	3401      	adds	r4, #1
 800875e:	2102      	movs	r1, #2
 8008760:	e000      	b.n	8008764 <__cvt+0x44>
 8008762:	2103      	movs	r1, #3
 8008764:	ab03      	add	r3, sp, #12
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	ab02      	add	r3, sp, #8
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	ec47 6b10 	vmov	d0, r6, r7
 8008770:	4653      	mov	r3, sl
 8008772:	4622      	mov	r2, r4
 8008774:	f000 fdd0 	bl	8009318 <_dtoa_r>
 8008778:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800877c:	4605      	mov	r5, r0
 800877e:	d119      	bne.n	80087b4 <__cvt+0x94>
 8008780:	f019 0f01 	tst.w	r9, #1
 8008784:	d00e      	beq.n	80087a4 <__cvt+0x84>
 8008786:	eb00 0904 	add.w	r9, r0, r4
 800878a:	2200      	movs	r2, #0
 800878c:	2300      	movs	r3, #0
 800878e:	4630      	mov	r0, r6
 8008790:	4639      	mov	r1, r7
 8008792:	f7f8 f999 	bl	8000ac8 <__aeabi_dcmpeq>
 8008796:	b108      	cbz	r0, 800879c <__cvt+0x7c>
 8008798:	f8cd 900c 	str.w	r9, [sp, #12]
 800879c:	2230      	movs	r2, #48	@ 0x30
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	454b      	cmp	r3, r9
 80087a2:	d31e      	bcc.n	80087e2 <__cvt+0xc2>
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087a8:	1b5b      	subs	r3, r3, r5
 80087aa:	4628      	mov	r0, r5
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	b004      	add	sp, #16
 80087b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087b8:	eb00 0904 	add.w	r9, r0, r4
 80087bc:	d1e5      	bne.n	800878a <__cvt+0x6a>
 80087be:	7803      	ldrb	r3, [r0, #0]
 80087c0:	2b30      	cmp	r3, #48	@ 0x30
 80087c2:	d10a      	bne.n	80087da <__cvt+0xba>
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f8 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80087d0:	b918      	cbnz	r0, 80087da <__cvt+0xba>
 80087d2:	f1c4 0401 	rsb	r4, r4, #1
 80087d6:	f8ca 4000 	str.w	r4, [sl]
 80087da:	f8da 3000 	ldr.w	r3, [sl]
 80087de:	4499      	add	r9, r3
 80087e0:	e7d3      	b.n	800878a <__cvt+0x6a>
 80087e2:	1c59      	adds	r1, r3, #1
 80087e4:	9103      	str	r1, [sp, #12]
 80087e6:	701a      	strb	r2, [r3, #0]
 80087e8:	e7d9      	b.n	800879e <__cvt+0x7e>

080087ea <__exponent>:
 80087ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ec:	2900      	cmp	r1, #0
 80087ee:	bfba      	itte	lt
 80087f0:	4249      	neglt	r1, r1
 80087f2:	232d      	movlt	r3, #45	@ 0x2d
 80087f4:	232b      	movge	r3, #43	@ 0x2b
 80087f6:	2909      	cmp	r1, #9
 80087f8:	7002      	strb	r2, [r0, #0]
 80087fa:	7043      	strb	r3, [r0, #1]
 80087fc:	dd29      	ble.n	8008852 <__exponent+0x68>
 80087fe:	f10d 0307 	add.w	r3, sp, #7
 8008802:	461d      	mov	r5, r3
 8008804:	270a      	movs	r7, #10
 8008806:	461a      	mov	r2, r3
 8008808:	fbb1 f6f7 	udiv	r6, r1, r7
 800880c:	fb07 1416 	mls	r4, r7, r6, r1
 8008810:	3430      	adds	r4, #48	@ 0x30
 8008812:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008816:	460c      	mov	r4, r1
 8008818:	2c63      	cmp	r4, #99	@ 0x63
 800881a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800881e:	4631      	mov	r1, r6
 8008820:	dcf1      	bgt.n	8008806 <__exponent+0x1c>
 8008822:	3130      	adds	r1, #48	@ 0x30
 8008824:	1e94      	subs	r4, r2, #2
 8008826:	f803 1c01 	strb.w	r1, [r3, #-1]
 800882a:	1c41      	adds	r1, r0, #1
 800882c:	4623      	mov	r3, r4
 800882e:	42ab      	cmp	r3, r5
 8008830:	d30a      	bcc.n	8008848 <__exponent+0x5e>
 8008832:	f10d 0309 	add.w	r3, sp, #9
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	42ac      	cmp	r4, r5
 800883a:	bf88      	it	hi
 800883c:	2300      	movhi	r3, #0
 800883e:	3302      	adds	r3, #2
 8008840:	4403      	add	r3, r0
 8008842:	1a18      	subs	r0, r3, r0
 8008844:	b003      	add	sp, #12
 8008846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008848:	f813 6b01 	ldrb.w	r6, [r3], #1
 800884c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008850:	e7ed      	b.n	800882e <__exponent+0x44>
 8008852:	2330      	movs	r3, #48	@ 0x30
 8008854:	3130      	adds	r1, #48	@ 0x30
 8008856:	7083      	strb	r3, [r0, #2]
 8008858:	70c1      	strb	r1, [r0, #3]
 800885a:	1d03      	adds	r3, r0, #4
 800885c:	e7f1      	b.n	8008842 <__exponent+0x58>
	...

08008860 <_printf_float>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	b08d      	sub	sp, #52	@ 0x34
 8008866:	460c      	mov	r4, r1
 8008868:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800886c:	4616      	mov	r6, r2
 800886e:	461f      	mov	r7, r3
 8008870:	4605      	mov	r5, r0
 8008872:	f000 fc97 	bl	80091a4 <_localeconv_r>
 8008876:	6803      	ldr	r3, [r0, #0]
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	4618      	mov	r0, r3
 800887c:	f7f7 fcf8 	bl	8000270 <strlen>
 8008880:	2300      	movs	r3, #0
 8008882:	930a      	str	r3, [sp, #40]	@ 0x28
 8008884:	f8d8 3000 	ldr.w	r3, [r8]
 8008888:	9005      	str	r0, [sp, #20]
 800888a:	3307      	adds	r3, #7
 800888c:	f023 0307 	bic.w	r3, r3, #7
 8008890:	f103 0208 	add.w	r2, r3, #8
 8008894:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008898:	f8d4 b000 	ldr.w	fp, [r4]
 800889c:	f8c8 2000 	str.w	r2, [r8]
 80088a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80088a8:	9307      	str	r3, [sp, #28]
 80088aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80088ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80088b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088b6:	4b9c      	ldr	r3, [pc, #624]	@ (8008b28 <_printf_float+0x2c8>)
 80088b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088bc:	f7f8 f936 	bl	8000b2c <__aeabi_dcmpun>
 80088c0:	bb70      	cbnz	r0, 8008920 <_printf_float+0xc0>
 80088c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088c6:	4b98      	ldr	r3, [pc, #608]	@ (8008b28 <_printf_float+0x2c8>)
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088cc:	f7f8 f910 	bl	8000af0 <__aeabi_dcmple>
 80088d0:	bb30      	cbnz	r0, 8008920 <_printf_float+0xc0>
 80088d2:	2200      	movs	r2, #0
 80088d4:	2300      	movs	r3, #0
 80088d6:	4640      	mov	r0, r8
 80088d8:	4649      	mov	r1, r9
 80088da:	f7f8 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80088de:	b110      	cbz	r0, 80088e6 <_printf_float+0x86>
 80088e0:	232d      	movs	r3, #45	@ 0x2d
 80088e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088e6:	4a91      	ldr	r2, [pc, #580]	@ (8008b2c <_printf_float+0x2cc>)
 80088e8:	4b91      	ldr	r3, [pc, #580]	@ (8008b30 <_printf_float+0x2d0>)
 80088ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80088ee:	bf94      	ite	ls
 80088f0:	4690      	movls	r8, r2
 80088f2:	4698      	movhi	r8, r3
 80088f4:	2303      	movs	r3, #3
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	f02b 0304 	bic.w	r3, fp, #4
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	f04f 0900 	mov.w	r9, #0
 8008902:	9700      	str	r7, [sp, #0]
 8008904:	4633      	mov	r3, r6
 8008906:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008908:	4621      	mov	r1, r4
 800890a:	4628      	mov	r0, r5
 800890c:	f000 f9d2 	bl	8008cb4 <_printf_common>
 8008910:	3001      	adds	r0, #1
 8008912:	f040 808d 	bne.w	8008a30 <_printf_float+0x1d0>
 8008916:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800891a:	b00d      	add	sp, #52	@ 0x34
 800891c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008920:	4642      	mov	r2, r8
 8008922:	464b      	mov	r3, r9
 8008924:	4640      	mov	r0, r8
 8008926:	4649      	mov	r1, r9
 8008928:	f7f8 f900 	bl	8000b2c <__aeabi_dcmpun>
 800892c:	b140      	cbz	r0, 8008940 <_printf_float+0xe0>
 800892e:	464b      	mov	r3, r9
 8008930:	2b00      	cmp	r3, #0
 8008932:	bfbc      	itt	lt
 8008934:	232d      	movlt	r3, #45	@ 0x2d
 8008936:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800893a:	4a7e      	ldr	r2, [pc, #504]	@ (8008b34 <_printf_float+0x2d4>)
 800893c:	4b7e      	ldr	r3, [pc, #504]	@ (8008b38 <_printf_float+0x2d8>)
 800893e:	e7d4      	b.n	80088ea <_printf_float+0x8a>
 8008940:	6863      	ldr	r3, [r4, #4]
 8008942:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008946:	9206      	str	r2, [sp, #24]
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	d13b      	bne.n	80089c4 <_printf_float+0x164>
 800894c:	2306      	movs	r3, #6
 800894e:	6063      	str	r3, [r4, #4]
 8008950:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008954:	2300      	movs	r3, #0
 8008956:	6022      	str	r2, [r4, #0]
 8008958:	9303      	str	r3, [sp, #12]
 800895a:	ab0a      	add	r3, sp, #40	@ 0x28
 800895c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008960:	ab09      	add	r3, sp, #36	@ 0x24
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	6861      	ldr	r1, [r4, #4]
 8008966:	ec49 8b10 	vmov	d0, r8, r9
 800896a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800896e:	4628      	mov	r0, r5
 8008970:	f7ff fed6 	bl	8008720 <__cvt>
 8008974:	9b06      	ldr	r3, [sp, #24]
 8008976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008978:	2b47      	cmp	r3, #71	@ 0x47
 800897a:	4680      	mov	r8, r0
 800897c:	d129      	bne.n	80089d2 <_printf_float+0x172>
 800897e:	1cc8      	adds	r0, r1, #3
 8008980:	db02      	blt.n	8008988 <_printf_float+0x128>
 8008982:	6863      	ldr	r3, [r4, #4]
 8008984:	4299      	cmp	r1, r3
 8008986:	dd41      	ble.n	8008a0c <_printf_float+0x1ac>
 8008988:	f1aa 0a02 	sub.w	sl, sl, #2
 800898c:	fa5f fa8a 	uxtb.w	sl, sl
 8008990:	3901      	subs	r1, #1
 8008992:	4652      	mov	r2, sl
 8008994:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008998:	9109      	str	r1, [sp, #36]	@ 0x24
 800899a:	f7ff ff26 	bl	80087ea <__exponent>
 800899e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089a0:	1813      	adds	r3, r2, r0
 80089a2:	2a01      	cmp	r2, #1
 80089a4:	4681      	mov	r9, r0
 80089a6:	6123      	str	r3, [r4, #16]
 80089a8:	dc02      	bgt.n	80089b0 <_printf_float+0x150>
 80089aa:	6822      	ldr	r2, [r4, #0]
 80089ac:	07d2      	lsls	r2, r2, #31
 80089ae:	d501      	bpl.n	80089b4 <_printf_float+0x154>
 80089b0:	3301      	adds	r3, #1
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d0a2      	beq.n	8008902 <_printf_float+0xa2>
 80089bc:	232d      	movs	r3, #45	@ 0x2d
 80089be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089c2:	e79e      	b.n	8008902 <_printf_float+0xa2>
 80089c4:	9a06      	ldr	r2, [sp, #24]
 80089c6:	2a47      	cmp	r2, #71	@ 0x47
 80089c8:	d1c2      	bne.n	8008950 <_printf_float+0xf0>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1c0      	bne.n	8008950 <_printf_float+0xf0>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e7bd      	b.n	800894e <_printf_float+0xee>
 80089d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089d6:	d9db      	bls.n	8008990 <_printf_float+0x130>
 80089d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80089dc:	d118      	bne.n	8008a10 <_printf_float+0x1b0>
 80089de:	2900      	cmp	r1, #0
 80089e0:	6863      	ldr	r3, [r4, #4]
 80089e2:	dd0b      	ble.n	80089fc <_printf_float+0x19c>
 80089e4:	6121      	str	r1, [r4, #16]
 80089e6:	b913      	cbnz	r3, 80089ee <_printf_float+0x18e>
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	07d0      	lsls	r0, r2, #31
 80089ec:	d502      	bpl.n	80089f4 <_printf_float+0x194>
 80089ee:	3301      	adds	r3, #1
 80089f0:	440b      	add	r3, r1
 80089f2:	6123      	str	r3, [r4, #16]
 80089f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089f6:	f04f 0900 	mov.w	r9, #0
 80089fa:	e7db      	b.n	80089b4 <_printf_float+0x154>
 80089fc:	b913      	cbnz	r3, 8008a04 <_printf_float+0x1a4>
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	07d2      	lsls	r2, r2, #31
 8008a02:	d501      	bpl.n	8008a08 <_printf_float+0x1a8>
 8008a04:	3302      	adds	r3, #2
 8008a06:	e7f4      	b.n	80089f2 <_printf_float+0x192>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e7f2      	b.n	80089f2 <_printf_float+0x192>
 8008a0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a12:	4299      	cmp	r1, r3
 8008a14:	db05      	blt.n	8008a22 <_printf_float+0x1c2>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	6121      	str	r1, [r4, #16]
 8008a1a:	07d8      	lsls	r0, r3, #31
 8008a1c:	d5ea      	bpl.n	80089f4 <_printf_float+0x194>
 8008a1e:	1c4b      	adds	r3, r1, #1
 8008a20:	e7e7      	b.n	80089f2 <_printf_float+0x192>
 8008a22:	2900      	cmp	r1, #0
 8008a24:	bfd4      	ite	le
 8008a26:	f1c1 0202 	rsble	r2, r1, #2
 8008a2a:	2201      	movgt	r2, #1
 8008a2c:	4413      	add	r3, r2
 8008a2e:	e7e0      	b.n	80089f2 <_printf_float+0x192>
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	055a      	lsls	r2, r3, #21
 8008a34:	d407      	bmi.n	8008a46 <_printf_float+0x1e6>
 8008a36:	6923      	ldr	r3, [r4, #16]
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b8      	blx	r7
 8008a40:	3001      	adds	r0, #1
 8008a42:	d12b      	bne.n	8008a9c <_printf_float+0x23c>
 8008a44:	e767      	b.n	8008916 <_printf_float+0xb6>
 8008a46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a4a:	f240 80dd 	bls.w	8008c08 <_printf_float+0x3a8>
 8008a4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a52:	2200      	movs	r2, #0
 8008a54:	2300      	movs	r3, #0
 8008a56:	f7f8 f837 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d033      	beq.n	8008ac6 <_printf_float+0x266>
 8008a5e:	4a37      	ldr	r2, [pc, #220]	@ (8008b3c <_printf_float+0x2dc>)
 8008a60:	2301      	movs	r3, #1
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	f43f af54 	beq.w	8008916 <_printf_float+0xb6>
 8008a6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a72:	4543      	cmp	r3, r8
 8008a74:	db02      	blt.n	8008a7c <_printf_float+0x21c>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	07d8      	lsls	r0, r3, #31
 8008a7a:	d50f      	bpl.n	8008a9c <_printf_float+0x23c>
 8008a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a80:	4631      	mov	r1, r6
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	f43f af45 	beq.w	8008916 <_printf_float+0xb6>
 8008a8c:	f04f 0900 	mov.w	r9, #0
 8008a90:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008a94:	f104 0a1a 	add.w	sl, r4, #26
 8008a98:	45c8      	cmp	r8, r9
 8008a9a:	dc09      	bgt.n	8008ab0 <_printf_float+0x250>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	079b      	lsls	r3, r3, #30
 8008aa0:	f100 8103 	bmi.w	8008caa <_printf_float+0x44a>
 8008aa4:	68e0      	ldr	r0, [r4, #12]
 8008aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aa8:	4298      	cmp	r0, r3
 8008aaa:	bfb8      	it	lt
 8008aac:	4618      	movlt	r0, r3
 8008aae:	e734      	b.n	800891a <_printf_float+0xba>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	f43f af2b 	beq.w	8008916 <_printf_float+0xb6>
 8008ac0:	f109 0901 	add.w	r9, r9, #1
 8008ac4:	e7e8      	b.n	8008a98 <_printf_float+0x238>
 8008ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dc39      	bgt.n	8008b40 <_printf_float+0x2e0>
 8008acc:	4a1b      	ldr	r2, [pc, #108]	@ (8008b3c <_printf_float+0x2dc>)
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	47b8      	blx	r7
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	f43f af1d 	beq.w	8008916 <_printf_float+0xb6>
 8008adc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ae0:	ea59 0303 	orrs.w	r3, r9, r3
 8008ae4:	d102      	bne.n	8008aec <_printf_float+0x28c>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	07d9      	lsls	r1, r3, #31
 8008aea:	d5d7      	bpl.n	8008a9c <_printf_float+0x23c>
 8008aec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008af0:	4631      	mov	r1, r6
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	f43f af0d 	beq.w	8008916 <_printf_float+0xb6>
 8008afc:	f04f 0a00 	mov.w	sl, #0
 8008b00:	f104 0b1a 	add.w	fp, r4, #26
 8008b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b06:	425b      	negs	r3, r3
 8008b08:	4553      	cmp	r3, sl
 8008b0a:	dc01      	bgt.n	8008b10 <_printf_float+0x2b0>
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	e793      	b.n	8008a38 <_printf_float+0x1d8>
 8008b10:	2301      	movs	r3, #1
 8008b12:	465a      	mov	r2, fp
 8008b14:	4631      	mov	r1, r6
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b8      	blx	r7
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f43f aefb 	beq.w	8008916 <_printf_float+0xb6>
 8008b20:	f10a 0a01 	add.w	sl, sl, #1
 8008b24:	e7ee      	b.n	8008b04 <_printf_float+0x2a4>
 8008b26:	bf00      	nop
 8008b28:	7fefffff 	.word	0x7fefffff
 8008b2c:	0800b688 	.word	0x0800b688
 8008b30:	0800b68c 	.word	0x0800b68c
 8008b34:	0800b690 	.word	0x0800b690
 8008b38:	0800b694 	.word	0x0800b694
 8008b3c:	0800b698 	.word	0x0800b698
 8008b40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b46:	4553      	cmp	r3, sl
 8008b48:	bfa8      	it	ge
 8008b4a:	4653      	movge	r3, sl
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	4699      	mov	r9, r3
 8008b50:	dc36      	bgt.n	8008bc0 <_printf_float+0x360>
 8008b52:	f04f 0b00 	mov.w	fp, #0
 8008b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b5a:	f104 021a 	add.w	r2, r4, #26
 8008b5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b60:	9306      	str	r3, [sp, #24]
 8008b62:	eba3 0309 	sub.w	r3, r3, r9
 8008b66:	455b      	cmp	r3, fp
 8008b68:	dc31      	bgt.n	8008bce <_printf_float+0x36e>
 8008b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b6c:	459a      	cmp	sl, r3
 8008b6e:	dc3a      	bgt.n	8008be6 <_printf_float+0x386>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	07da      	lsls	r2, r3, #31
 8008b74:	d437      	bmi.n	8008be6 <_printf_float+0x386>
 8008b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b78:	ebaa 0903 	sub.w	r9, sl, r3
 8008b7c:	9b06      	ldr	r3, [sp, #24]
 8008b7e:	ebaa 0303 	sub.w	r3, sl, r3
 8008b82:	4599      	cmp	r9, r3
 8008b84:	bfa8      	it	ge
 8008b86:	4699      	movge	r9, r3
 8008b88:	f1b9 0f00 	cmp.w	r9, #0
 8008b8c:	dc33      	bgt.n	8008bf6 <_printf_float+0x396>
 8008b8e:	f04f 0800 	mov.w	r8, #0
 8008b92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b96:	f104 0b1a 	add.w	fp, r4, #26
 8008b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b9c:	ebaa 0303 	sub.w	r3, sl, r3
 8008ba0:	eba3 0309 	sub.w	r3, r3, r9
 8008ba4:	4543      	cmp	r3, r8
 8008ba6:	f77f af79 	ble.w	8008a9c <_printf_float+0x23c>
 8008baa:	2301      	movs	r3, #1
 8008bac:	465a      	mov	r2, fp
 8008bae:	4631      	mov	r1, r6
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	47b8      	blx	r7
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	f43f aeae 	beq.w	8008916 <_printf_float+0xb6>
 8008bba:	f108 0801 	add.w	r8, r8, #1
 8008bbe:	e7ec      	b.n	8008b9a <_printf_float+0x33a>
 8008bc0:	4642      	mov	r2, r8
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d1c2      	bne.n	8008b52 <_printf_float+0x2f2>
 8008bcc:	e6a3      	b.n	8008916 <_printf_float+0xb6>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	9206      	str	r2, [sp, #24]
 8008bd6:	47b8      	blx	r7
 8008bd8:	3001      	adds	r0, #1
 8008bda:	f43f ae9c 	beq.w	8008916 <_printf_float+0xb6>
 8008bde:	9a06      	ldr	r2, [sp, #24]
 8008be0:	f10b 0b01 	add.w	fp, fp, #1
 8008be4:	e7bb      	b.n	8008b5e <_printf_float+0x2fe>
 8008be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d1c0      	bne.n	8008b76 <_printf_float+0x316>
 8008bf4:	e68f      	b.n	8008916 <_printf_float+0xb6>
 8008bf6:	9a06      	ldr	r2, [sp, #24]
 8008bf8:	464b      	mov	r3, r9
 8008bfa:	4442      	add	r2, r8
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47b8      	blx	r7
 8008c02:	3001      	adds	r0, #1
 8008c04:	d1c3      	bne.n	8008b8e <_printf_float+0x32e>
 8008c06:	e686      	b.n	8008916 <_printf_float+0xb6>
 8008c08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c0c:	f1ba 0f01 	cmp.w	sl, #1
 8008c10:	dc01      	bgt.n	8008c16 <_printf_float+0x3b6>
 8008c12:	07db      	lsls	r3, r3, #31
 8008c14:	d536      	bpl.n	8008c84 <_printf_float+0x424>
 8008c16:	2301      	movs	r3, #1
 8008c18:	4642      	mov	r2, r8
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	47b8      	blx	r7
 8008c20:	3001      	adds	r0, #1
 8008c22:	f43f ae78 	beq.w	8008916 <_printf_float+0xb6>
 8008c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b8      	blx	r7
 8008c30:	3001      	adds	r0, #1
 8008c32:	f43f ae70 	beq.w	8008916 <_printf_float+0xb6>
 8008c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008c42:	f7f7 ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c46:	b9c0      	cbnz	r0, 8008c7a <_printf_float+0x41a>
 8008c48:	4653      	mov	r3, sl
 8008c4a:	f108 0201 	add.w	r2, r8, #1
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4628      	mov	r0, r5
 8008c52:	47b8      	blx	r7
 8008c54:	3001      	adds	r0, #1
 8008c56:	d10c      	bne.n	8008c72 <_printf_float+0x412>
 8008c58:	e65d      	b.n	8008916 <_printf_float+0xb6>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	465a      	mov	r2, fp
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	f43f ae56 	beq.w	8008916 <_printf_float+0xb6>
 8008c6a:	f108 0801 	add.w	r8, r8, #1
 8008c6e:	45d0      	cmp	r8, sl
 8008c70:	dbf3      	blt.n	8008c5a <_printf_float+0x3fa>
 8008c72:	464b      	mov	r3, r9
 8008c74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c78:	e6df      	b.n	8008a3a <_printf_float+0x1da>
 8008c7a:	f04f 0800 	mov.w	r8, #0
 8008c7e:	f104 0b1a 	add.w	fp, r4, #26
 8008c82:	e7f4      	b.n	8008c6e <_printf_float+0x40e>
 8008c84:	2301      	movs	r3, #1
 8008c86:	4642      	mov	r2, r8
 8008c88:	e7e1      	b.n	8008c4e <_printf_float+0x3ee>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	464a      	mov	r2, r9
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b8      	blx	r7
 8008c94:	3001      	adds	r0, #1
 8008c96:	f43f ae3e 	beq.w	8008916 <_printf_float+0xb6>
 8008c9a:	f108 0801 	add.w	r8, r8, #1
 8008c9e:	68e3      	ldr	r3, [r4, #12]
 8008ca0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ca2:	1a5b      	subs	r3, r3, r1
 8008ca4:	4543      	cmp	r3, r8
 8008ca6:	dcf0      	bgt.n	8008c8a <_printf_float+0x42a>
 8008ca8:	e6fc      	b.n	8008aa4 <_printf_float+0x244>
 8008caa:	f04f 0800 	mov.w	r8, #0
 8008cae:	f104 0919 	add.w	r9, r4, #25
 8008cb2:	e7f4      	b.n	8008c9e <_printf_float+0x43e>

08008cb4 <_printf_common>:
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	4616      	mov	r6, r2
 8008cba:	4698      	mov	r8, r3
 8008cbc:	688a      	ldr	r2, [r1, #8]
 8008cbe:	690b      	ldr	r3, [r1, #16]
 8008cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	bfb8      	it	lt
 8008cc8:	4613      	movlt	r3, r2
 8008cca:	6033      	str	r3, [r6, #0]
 8008ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	b10a      	cbz	r2, 8008cda <_printf_common+0x26>
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	6033      	str	r3, [r6, #0]
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	0699      	lsls	r1, r3, #26
 8008cde:	bf42      	ittt	mi
 8008ce0:	6833      	ldrmi	r3, [r6, #0]
 8008ce2:	3302      	addmi	r3, #2
 8008ce4:	6033      	strmi	r3, [r6, #0]
 8008ce6:	6825      	ldr	r5, [r4, #0]
 8008ce8:	f015 0506 	ands.w	r5, r5, #6
 8008cec:	d106      	bne.n	8008cfc <_printf_common+0x48>
 8008cee:	f104 0a19 	add.w	sl, r4, #25
 8008cf2:	68e3      	ldr	r3, [r4, #12]
 8008cf4:	6832      	ldr	r2, [r6, #0]
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	42ab      	cmp	r3, r5
 8008cfa:	dc26      	bgt.n	8008d4a <_printf_common+0x96>
 8008cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d00:	6822      	ldr	r2, [r4, #0]
 8008d02:	3b00      	subs	r3, #0
 8008d04:	bf18      	it	ne
 8008d06:	2301      	movne	r3, #1
 8008d08:	0692      	lsls	r2, r2, #26
 8008d0a:	d42b      	bmi.n	8008d64 <_printf_common+0xb0>
 8008d0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d10:	4641      	mov	r1, r8
 8008d12:	4638      	mov	r0, r7
 8008d14:	47c8      	blx	r9
 8008d16:	3001      	adds	r0, #1
 8008d18:	d01e      	beq.n	8008d58 <_printf_common+0xa4>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	6922      	ldr	r2, [r4, #16]
 8008d1e:	f003 0306 	and.w	r3, r3, #6
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	bf02      	ittt	eq
 8008d26:	68e5      	ldreq	r5, [r4, #12]
 8008d28:	6833      	ldreq	r3, [r6, #0]
 8008d2a:	1aed      	subeq	r5, r5, r3
 8008d2c:	68a3      	ldr	r3, [r4, #8]
 8008d2e:	bf0c      	ite	eq
 8008d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d34:	2500      	movne	r5, #0
 8008d36:	4293      	cmp	r3, r2
 8008d38:	bfc4      	itt	gt
 8008d3a:	1a9b      	subgt	r3, r3, r2
 8008d3c:	18ed      	addgt	r5, r5, r3
 8008d3e:	2600      	movs	r6, #0
 8008d40:	341a      	adds	r4, #26
 8008d42:	42b5      	cmp	r5, r6
 8008d44:	d11a      	bne.n	8008d7c <_printf_common+0xc8>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e008      	b.n	8008d5c <_printf_common+0xa8>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	4641      	mov	r1, r8
 8008d50:	4638      	mov	r0, r7
 8008d52:	47c8      	blx	r9
 8008d54:	3001      	adds	r0, #1
 8008d56:	d103      	bne.n	8008d60 <_printf_common+0xac>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d60:	3501      	adds	r5, #1
 8008d62:	e7c6      	b.n	8008cf2 <_printf_common+0x3e>
 8008d64:	18e1      	adds	r1, r4, r3
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	2030      	movs	r0, #48	@ 0x30
 8008d6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d6e:	4422      	add	r2, r4
 8008d70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d78:	3302      	adds	r3, #2
 8008d7a:	e7c7      	b.n	8008d0c <_printf_common+0x58>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4622      	mov	r2, r4
 8008d80:	4641      	mov	r1, r8
 8008d82:	4638      	mov	r0, r7
 8008d84:	47c8      	blx	r9
 8008d86:	3001      	adds	r0, #1
 8008d88:	d0e6      	beq.n	8008d58 <_printf_common+0xa4>
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7d9      	b.n	8008d42 <_printf_common+0x8e>
	...

08008d90 <_printf_i>:
 8008d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	7e0f      	ldrb	r7, [r1, #24]
 8008d96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d98:	2f78      	cmp	r7, #120	@ 0x78
 8008d9a:	4691      	mov	r9, r2
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	469a      	mov	sl, r3
 8008da2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008da6:	d807      	bhi.n	8008db8 <_printf_i+0x28>
 8008da8:	2f62      	cmp	r7, #98	@ 0x62
 8008daa:	d80a      	bhi.n	8008dc2 <_printf_i+0x32>
 8008dac:	2f00      	cmp	r7, #0
 8008dae:	f000 80d2 	beq.w	8008f56 <_printf_i+0x1c6>
 8008db2:	2f58      	cmp	r7, #88	@ 0x58
 8008db4:	f000 80b9 	beq.w	8008f2a <_printf_i+0x19a>
 8008db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008dc0:	e03a      	b.n	8008e38 <_printf_i+0xa8>
 8008dc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dc6:	2b15      	cmp	r3, #21
 8008dc8:	d8f6      	bhi.n	8008db8 <_printf_i+0x28>
 8008dca:	a101      	add	r1, pc, #4	@ (adr r1, 8008dd0 <_printf_i+0x40>)
 8008dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008e3d 	.word	0x08008e3d
 8008dd8:	08008db9 	.word	0x08008db9
 8008ddc:	08008db9 	.word	0x08008db9
 8008de0:	08008db9 	.word	0x08008db9
 8008de4:	08008db9 	.word	0x08008db9
 8008de8:	08008e3d 	.word	0x08008e3d
 8008dec:	08008db9 	.word	0x08008db9
 8008df0:	08008db9 	.word	0x08008db9
 8008df4:	08008db9 	.word	0x08008db9
 8008df8:	08008db9 	.word	0x08008db9
 8008dfc:	08008f3d 	.word	0x08008f3d
 8008e00:	08008e67 	.word	0x08008e67
 8008e04:	08008ef7 	.word	0x08008ef7
 8008e08:	08008db9 	.word	0x08008db9
 8008e0c:	08008db9 	.word	0x08008db9
 8008e10:	08008f5f 	.word	0x08008f5f
 8008e14:	08008db9 	.word	0x08008db9
 8008e18:	08008e67 	.word	0x08008e67
 8008e1c:	08008db9 	.word	0x08008db9
 8008e20:	08008db9 	.word	0x08008db9
 8008e24:	08008eff 	.word	0x08008eff
 8008e28:	6833      	ldr	r3, [r6, #0]
 8008e2a:	1d1a      	adds	r2, r3, #4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6032      	str	r2, [r6, #0]
 8008e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e09d      	b.n	8008f78 <_printf_i+0x1e8>
 8008e3c:	6833      	ldr	r3, [r6, #0]
 8008e3e:	6820      	ldr	r0, [r4, #0]
 8008e40:	1d19      	adds	r1, r3, #4
 8008e42:	6031      	str	r1, [r6, #0]
 8008e44:	0606      	lsls	r6, r0, #24
 8008e46:	d501      	bpl.n	8008e4c <_printf_i+0xbc>
 8008e48:	681d      	ldr	r5, [r3, #0]
 8008e4a:	e003      	b.n	8008e54 <_printf_i+0xc4>
 8008e4c:	0645      	lsls	r5, r0, #25
 8008e4e:	d5fb      	bpl.n	8008e48 <_printf_i+0xb8>
 8008e50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	da03      	bge.n	8008e60 <_printf_i+0xd0>
 8008e58:	232d      	movs	r3, #45	@ 0x2d
 8008e5a:	426d      	negs	r5, r5
 8008e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e60:	4859      	ldr	r0, [pc, #356]	@ (8008fc8 <_printf_i+0x238>)
 8008e62:	230a      	movs	r3, #10
 8008e64:	e011      	b.n	8008e8a <_printf_i+0xfa>
 8008e66:	6821      	ldr	r1, [r4, #0]
 8008e68:	6833      	ldr	r3, [r6, #0]
 8008e6a:	0608      	lsls	r0, r1, #24
 8008e6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e70:	d402      	bmi.n	8008e78 <_printf_i+0xe8>
 8008e72:	0649      	lsls	r1, r1, #25
 8008e74:	bf48      	it	mi
 8008e76:	b2ad      	uxthmi	r5, r5
 8008e78:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e7a:	4853      	ldr	r0, [pc, #332]	@ (8008fc8 <_printf_i+0x238>)
 8008e7c:	6033      	str	r3, [r6, #0]
 8008e7e:	bf14      	ite	ne
 8008e80:	230a      	movne	r3, #10
 8008e82:	2308      	moveq	r3, #8
 8008e84:	2100      	movs	r1, #0
 8008e86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e8a:	6866      	ldr	r6, [r4, #4]
 8008e8c:	60a6      	str	r6, [r4, #8]
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	bfa2      	ittt	ge
 8008e92:	6821      	ldrge	r1, [r4, #0]
 8008e94:	f021 0104 	bicge.w	r1, r1, #4
 8008e98:	6021      	strge	r1, [r4, #0]
 8008e9a:	b90d      	cbnz	r5, 8008ea0 <_printf_i+0x110>
 8008e9c:	2e00      	cmp	r6, #0
 8008e9e:	d04b      	beq.n	8008f38 <_printf_i+0x1a8>
 8008ea0:	4616      	mov	r6, r2
 8008ea2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ea6:	fb03 5711 	mls	r7, r3, r1, r5
 8008eaa:	5dc7      	ldrb	r7, [r0, r7]
 8008eac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008eb0:	462f      	mov	r7, r5
 8008eb2:	42bb      	cmp	r3, r7
 8008eb4:	460d      	mov	r5, r1
 8008eb6:	d9f4      	bls.n	8008ea2 <_printf_i+0x112>
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d10b      	bne.n	8008ed4 <_printf_i+0x144>
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	07df      	lsls	r7, r3, #31
 8008ec0:	d508      	bpl.n	8008ed4 <_printf_i+0x144>
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	6861      	ldr	r1, [r4, #4]
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	bfde      	ittt	le
 8008eca:	2330      	movle	r3, #48	@ 0x30
 8008ecc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ed0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008ed4:	1b92      	subs	r2, r2, r6
 8008ed6:	6122      	str	r2, [r4, #16]
 8008ed8:	f8cd a000 	str.w	sl, [sp]
 8008edc:	464b      	mov	r3, r9
 8008ede:	aa03      	add	r2, sp, #12
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	f7ff fee6 	bl	8008cb4 <_printf_common>
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d14a      	bne.n	8008f82 <_printf_i+0x1f2>
 8008eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ef0:	b004      	add	sp, #16
 8008ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	f043 0320 	orr.w	r3, r3, #32
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	4833      	ldr	r0, [pc, #204]	@ (8008fcc <_printf_i+0x23c>)
 8008f00:	2778      	movs	r7, #120	@ 0x78
 8008f02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	6831      	ldr	r1, [r6, #0]
 8008f0a:	061f      	lsls	r7, r3, #24
 8008f0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f10:	d402      	bmi.n	8008f18 <_printf_i+0x188>
 8008f12:	065f      	lsls	r7, r3, #25
 8008f14:	bf48      	it	mi
 8008f16:	b2ad      	uxthmi	r5, r5
 8008f18:	6031      	str	r1, [r6, #0]
 8008f1a:	07d9      	lsls	r1, r3, #31
 8008f1c:	bf44      	itt	mi
 8008f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f22:	6023      	strmi	r3, [r4, #0]
 8008f24:	b11d      	cbz	r5, 8008f2e <_printf_i+0x19e>
 8008f26:	2310      	movs	r3, #16
 8008f28:	e7ac      	b.n	8008e84 <_printf_i+0xf4>
 8008f2a:	4827      	ldr	r0, [pc, #156]	@ (8008fc8 <_printf_i+0x238>)
 8008f2c:	e7e9      	b.n	8008f02 <_printf_i+0x172>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	f023 0320 	bic.w	r3, r3, #32
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	e7f6      	b.n	8008f26 <_printf_i+0x196>
 8008f38:	4616      	mov	r6, r2
 8008f3a:	e7bd      	b.n	8008eb8 <_printf_i+0x128>
 8008f3c:	6833      	ldr	r3, [r6, #0]
 8008f3e:	6825      	ldr	r5, [r4, #0]
 8008f40:	6961      	ldr	r1, [r4, #20]
 8008f42:	1d18      	adds	r0, r3, #4
 8008f44:	6030      	str	r0, [r6, #0]
 8008f46:	062e      	lsls	r6, r5, #24
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	d501      	bpl.n	8008f50 <_printf_i+0x1c0>
 8008f4c:	6019      	str	r1, [r3, #0]
 8008f4e:	e002      	b.n	8008f56 <_printf_i+0x1c6>
 8008f50:	0668      	lsls	r0, r5, #25
 8008f52:	d5fb      	bpl.n	8008f4c <_printf_i+0x1bc>
 8008f54:	8019      	strh	r1, [r3, #0]
 8008f56:	2300      	movs	r3, #0
 8008f58:	6123      	str	r3, [r4, #16]
 8008f5a:	4616      	mov	r6, r2
 8008f5c:	e7bc      	b.n	8008ed8 <_printf_i+0x148>
 8008f5e:	6833      	ldr	r3, [r6, #0]
 8008f60:	1d1a      	adds	r2, r3, #4
 8008f62:	6032      	str	r2, [r6, #0]
 8008f64:	681e      	ldr	r6, [r3, #0]
 8008f66:	6862      	ldr	r2, [r4, #4]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f7f7 f930 	bl	80001d0 <memchr>
 8008f70:	b108      	cbz	r0, 8008f76 <_printf_i+0x1e6>
 8008f72:	1b80      	subs	r0, r0, r6
 8008f74:	6060      	str	r0, [r4, #4]
 8008f76:	6863      	ldr	r3, [r4, #4]
 8008f78:	6123      	str	r3, [r4, #16]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f80:	e7aa      	b.n	8008ed8 <_printf_i+0x148>
 8008f82:	6923      	ldr	r3, [r4, #16]
 8008f84:	4632      	mov	r2, r6
 8008f86:	4649      	mov	r1, r9
 8008f88:	4640      	mov	r0, r8
 8008f8a:	47d0      	blx	sl
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d0ad      	beq.n	8008eec <_printf_i+0x15c>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	079b      	lsls	r3, r3, #30
 8008f94:	d413      	bmi.n	8008fbe <_printf_i+0x22e>
 8008f96:	68e0      	ldr	r0, [r4, #12]
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	4298      	cmp	r0, r3
 8008f9c:	bfb8      	it	lt
 8008f9e:	4618      	movlt	r0, r3
 8008fa0:	e7a6      	b.n	8008ef0 <_printf_i+0x160>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4632      	mov	r2, r6
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	4640      	mov	r0, r8
 8008faa:	47d0      	blx	sl
 8008fac:	3001      	adds	r0, #1
 8008fae:	d09d      	beq.n	8008eec <_printf_i+0x15c>
 8008fb0:	3501      	adds	r5, #1
 8008fb2:	68e3      	ldr	r3, [r4, #12]
 8008fb4:	9903      	ldr	r1, [sp, #12]
 8008fb6:	1a5b      	subs	r3, r3, r1
 8008fb8:	42ab      	cmp	r3, r5
 8008fba:	dcf2      	bgt.n	8008fa2 <_printf_i+0x212>
 8008fbc:	e7eb      	b.n	8008f96 <_printf_i+0x206>
 8008fbe:	2500      	movs	r5, #0
 8008fc0:	f104 0619 	add.w	r6, r4, #25
 8008fc4:	e7f5      	b.n	8008fb2 <_printf_i+0x222>
 8008fc6:	bf00      	nop
 8008fc8:	0800b69a 	.word	0x0800b69a
 8008fcc:	0800b6ab 	.word	0x0800b6ab

08008fd0 <siprintf>:
 8008fd0:	b40e      	push	{r1, r2, r3}
 8008fd2:	b500      	push	{lr}
 8008fd4:	b09c      	sub	sp, #112	@ 0x70
 8008fd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008fd8:	9002      	str	r0, [sp, #8]
 8008fda:	9006      	str	r0, [sp, #24]
 8008fdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fe0:	4809      	ldr	r0, [pc, #36]	@ (8009008 <siprintf+0x38>)
 8008fe2:	9107      	str	r1, [sp, #28]
 8008fe4:	9104      	str	r1, [sp, #16]
 8008fe6:	4909      	ldr	r1, [pc, #36]	@ (800900c <siprintf+0x3c>)
 8008fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fec:	9105      	str	r1, [sp, #20]
 8008fee:	6800      	ldr	r0, [r0, #0]
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	a902      	add	r1, sp, #8
 8008ff4:	f000 ffb0 	bl	8009f58 <_svfiprintf_r>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
 8008ffe:	b01c      	add	sp, #112	@ 0x70
 8009000:	f85d eb04 	ldr.w	lr, [sp], #4
 8009004:	b003      	add	sp, #12
 8009006:	4770      	bx	lr
 8009008:	2000002c 	.word	0x2000002c
 800900c:	ffff0208 	.word	0xffff0208

08009010 <std>:
 8009010:	2300      	movs	r3, #0
 8009012:	b510      	push	{r4, lr}
 8009014:	4604      	mov	r4, r0
 8009016:	e9c0 3300 	strd	r3, r3, [r0]
 800901a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800901e:	6083      	str	r3, [r0, #8]
 8009020:	8181      	strh	r1, [r0, #12]
 8009022:	6643      	str	r3, [r0, #100]	@ 0x64
 8009024:	81c2      	strh	r2, [r0, #14]
 8009026:	6183      	str	r3, [r0, #24]
 8009028:	4619      	mov	r1, r3
 800902a:	2208      	movs	r2, #8
 800902c:	305c      	adds	r0, #92	@ 0x5c
 800902e:	f000 f8b1 	bl	8009194 <memset>
 8009032:	4b0d      	ldr	r3, [pc, #52]	@ (8009068 <std+0x58>)
 8009034:	6263      	str	r3, [r4, #36]	@ 0x24
 8009036:	4b0d      	ldr	r3, [pc, #52]	@ (800906c <std+0x5c>)
 8009038:	62a3      	str	r3, [r4, #40]	@ 0x28
 800903a:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <std+0x60>)
 800903c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800903e:	4b0d      	ldr	r3, [pc, #52]	@ (8009074 <std+0x64>)
 8009040:	6323      	str	r3, [r4, #48]	@ 0x30
 8009042:	4b0d      	ldr	r3, [pc, #52]	@ (8009078 <std+0x68>)
 8009044:	6224      	str	r4, [r4, #32]
 8009046:	429c      	cmp	r4, r3
 8009048:	d006      	beq.n	8009058 <std+0x48>
 800904a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800904e:	4294      	cmp	r4, r2
 8009050:	d002      	beq.n	8009058 <std+0x48>
 8009052:	33d0      	adds	r3, #208	@ 0xd0
 8009054:	429c      	cmp	r4, r3
 8009056:	d105      	bne.n	8009064 <std+0x54>
 8009058:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800905c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009060:	f000 b8ce 	b.w	8009200 <__retarget_lock_init_recursive>
 8009064:	bd10      	pop	{r4, pc}
 8009066:	bf00      	nop
 8009068:	0800ab19 	.word	0x0800ab19
 800906c:	0800ab3b 	.word	0x0800ab3b
 8009070:	0800ab73 	.word	0x0800ab73
 8009074:	0800ab97 	.word	0x0800ab97
 8009078:	2000047c 	.word	0x2000047c

0800907c <stdio_exit_handler>:
 800907c:	4a02      	ldr	r2, [pc, #8]	@ (8009088 <stdio_exit_handler+0xc>)
 800907e:	4903      	ldr	r1, [pc, #12]	@ (800908c <stdio_exit_handler+0x10>)
 8009080:	4803      	ldr	r0, [pc, #12]	@ (8009090 <stdio_exit_handler+0x14>)
 8009082:	f000 b869 	b.w	8009158 <_fwalk_sglue>
 8009086:	bf00      	nop
 8009088:	20000020 	.word	0x20000020
 800908c:	0800a3ad 	.word	0x0800a3ad
 8009090:	20000030 	.word	0x20000030

08009094 <cleanup_stdio>:
 8009094:	6841      	ldr	r1, [r0, #4]
 8009096:	4b0c      	ldr	r3, [pc, #48]	@ (80090c8 <cleanup_stdio+0x34>)
 8009098:	4299      	cmp	r1, r3
 800909a:	b510      	push	{r4, lr}
 800909c:	4604      	mov	r4, r0
 800909e:	d001      	beq.n	80090a4 <cleanup_stdio+0x10>
 80090a0:	f001 f984 	bl	800a3ac <_fflush_r>
 80090a4:	68a1      	ldr	r1, [r4, #8]
 80090a6:	4b09      	ldr	r3, [pc, #36]	@ (80090cc <cleanup_stdio+0x38>)
 80090a8:	4299      	cmp	r1, r3
 80090aa:	d002      	beq.n	80090b2 <cleanup_stdio+0x1e>
 80090ac:	4620      	mov	r0, r4
 80090ae:	f001 f97d 	bl	800a3ac <_fflush_r>
 80090b2:	68e1      	ldr	r1, [r4, #12]
 80090b4:	4b06      	ldr	r3, [pc, #24]	@ (80090d0 <cleanup_stdio+0x3c>)
 80090b6:	4299      	cmp	r1, r3
 80090b8:	d004      	beq.n	80090c4 <cleanup_stdio+0x30>
 80090ba:	4620      	mov	r0, r4
 80090bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c0:	f001 b974 	b.w	800a3ac <_fflush_r>
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	bf00      	nop
 80090c8:	2000047c 	.word	0x2000047c
 80090cc:	200004e4 	.word	0x200004e4
 80090d0:	2000054c 	.word	0x2000054c

080090d4 <global_stdio_init.part.0>:
 80090d4:	b510      	push	{r4, lr}
 80090d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009104 <global_stdio_init.part.0+0x30>)
 80090d8:	4c0b      	ldr	r4, [pc, #44]	@ (8009108 <global_stdio_init.part.0+0x34>)
 80090da:	4a0c      	ldr	r2, [pc, #48]	@ (800910c <global_stdio_init.part.0+0x38>)
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	4620      	mov	r0, r4
 80090e0:	2200      	movs	r2, #0
 80090e2:	2104      	movs	r1, #4
 80090e4:	f7ff ff94 	bl	8009010 <std>
 80090e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090ec:	2201      	movs	r2, #1
 80090ee:	2109      	movs	r1, #9
 80090f0:	f7ff ff8e 	bl	8009010 <std>
 80090f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090f8:	2202      	movs	r2, #2
 80090fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090fe:	2112      	movs	r1, #18
 8009100:	f7ff bf86 	b.w	8009010 <std>
 8009104:	200005b4 	.word	0x200005b4
 8009108:	2000047c 	.word	0x2000047c
 800910c:	0800907d 	.word	0x0800907d

08009110 <__sfp_lock_acquire>:
 8009110:	4801      	ldr	r0, [pc, #4]	@ (8009118 <__sfp_lock_acquire+0x8>)
 8009112:	f000 b876 	b.w	8009202 <__retarget_lock_acquire_recursive>
 8009116:	bf00      	nop
 8009118:	200005b9 	.word	0x200005b9

0800911c <__sfp_lock_release>:
 800911c:	4801      	ldr	r0, [pc, #4]	@ (8009124 <__sfp_lock_release+0x8>)
 800911e:	f000 b871 	b.w	8009204 <__retarget_lock_release_recursive>
 8009122:	bf00      	nop
 8009124:	200005b9 	.word	0x200005b9

08009128 <__sinit>:
 8009128:	b510      	push	{r4, lr}
 800912a:	4604      	mov	r4, r0
 800912c:	f7ff fff0 	bl	8009110 <__sfp_lock_acquire>
 8009130:	6a23      	ldr	r3, [r4, #32]
 8009132:	b11b      	cbz	r3, 800913c <__sinit+0x14>
 8009134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009138:	f7ff bff0 	b.w	800911c <__sfp_lock_release>
 800913c:	4b04      	ldr	r3, [pc, #16]	@ (8009150 <__sinit+0x28>)
 800913e:	6223      	str	r3, [r4, #32]
 8009140:	4b04      	ldr	r3, [pc, #16]	@ (8009154 <__sinit+0x2c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1f5      	bne.n	8009134 <__sinit+0xc>
 8009148:	f7ff ffc4 	bl	80090d4 <global_stdio_init.part.0>
 800914c:	e7f2      	b.n	8009134 <__sinit+0xc>
 800914e:	bf00      	nop
 8009150:	08009095 	.word	0x08009095
 8009154:	200005b4 	.word	0x200005b4

08009158 <_fwalk_sglue>:
 8009158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800915c:	4607      	mov	r7, r0
 800915e:	4688      	mov	r8, r1
 8009160:	4614      	mov	r4, r2
 8009162:	2600      	movs	r6, #0
 8009164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009168:	f1b9 0901 	subs.w	r9, r9, #1
 800916c:	d505      	bpl.n	800917a <_fwalk_sglue+0x22>
 800916e:	6824      	ldr	r4, [r4, #0]
 8009170:	2c00      	cmp	r4, #0
 8009172:	d1f7      	bne.n	8009164 <_fwalk_sglue+0xc>
 8009174:	4630      	mov	r0, r6
 8009176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917a:	89ab      	ldrh	r3, [r5, #12]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d907      	bls.n	8009190 <_fwalk_sglue+0x38>
 8009180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009184:	3301      	adds	r3, #1
 8009186:	d003      	beq.n	8009190 <_fwalk_sglue+0x38>
 8009188:	4629      	mov	r1, r5
 800918a:	4638      	mov	r0, r7
 800918c:	47c0      	blx	r8
 800918e:	4306      	orrs	r6, r0
 8009190:	3568      	adds	r5, #104	@ 0x68
 8009192:	e7e9      	b.n	8009168 <_fwalk_sglue+0x10>

08009194 <memset>:
 8009194:	4402      	add	r2, r0
 8009196:	4603      	mov	r3, r0
 8009198:	4293      	cmp	r3, r2
 800919a:	d100      	bne.n	800919e <memset+0xa>
 800919c:	4770      	bx	lr
 800919e:	f803 1b01 	strb.w	r1, [r3], #1
 80091a2:	e7f9      	b.n	8009198 <memset+0x4>

080091a4 <_localeconv_r>:
 80091a4:	4800      	ldr	r0, [pc, #0]	@ (80091a8 <_localeconv_r+0x4>)
 80091a6:	4770      	bx	lr
 80091a8:	2000016c 	.word	0x2000016c

080091ac <__errno>:
 80091ac:	4b01      	ldr	r3, [pc, #4]	@ (80091b4 <__errno+0x8>)
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	2000002c 	.word	0x2000002c

080091b8 <__libc_init_array>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	4d0d      	ldr	r5, [pc, #52]	@ (80091f0 <__libc_init_array+0x38>)
 80091bc:	4c0d      	ldr	r4, [pc, #52]	@ (80091f4 <__libc_init_array+0x3c>)
 80091be:	1b64      	subs	r4, r4, r5
 80091c0:	10a4      	asrs	r4, r4, #2
 80091c2:	2600      	movs	r6, #0
 80091c4:	42a6      	cmp	r6, r4
 80091c6:	d109      	bne.n	80091dc <__libc_init_array+0x24>
 80091c8:	4d0b      	ldr	r5, [pc, #44]	@ (80091f8 <__libc_init_array+0x40>)
 80091ca:	4c0c      	ldr	r4, [pc, #48]	@ (80091fc <__libc_init_array+0x44>)
 80091cc:	f002 f8ee 	bl	800b3ac <_init>
 80091d0:	1b64      	subs	r4, r4, r5
 80091d2:	10a4      	asrs	r4, r4, #2
 80091d4:	2600      	movs	r6, #0
 80091d6:	42a6      	cmp	r6, r4
 80091d8:	d105      	bne.n	80091e6 <__libc_init_array+0x2e>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e0:	4798      	blx	r3
 80091e2:	3601      	adds	r6, #1
 80091e4:	e7ee      	b.n	80091c4 <__libc_init_array+0xc>
 80091e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ea:	4798      	blx	r3
 80091ec:	3601      	adds	r6, #1
 80091ee:	e7f2      	b.n	80091d6 <__libc_init_array+0x1e>
 80091f0:	0800ba00 	.word	0x0800ba00
 80091f4:	0800ba00 	.word	0x0800ba00
 80091f8:	0800ba00 	.word	0x0800ba00
 80091fc:	0800ba04 	.word	0x0800ba04

08009200 <__retarget_lock_init_recursive>:
 8009200:	4770      	bx	lr

08009202 <__retarget_lock_acquire_recursive>:
 8009202:	4770      	bx	lr

08009204 <__retarget_lock_release_recursive>:
 8009204:	4770      	bx	lr

08009206 <quorem>:
 8009206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920a:	6903      	ldr	r3, [r0, #16]
 800920c:	690c      	ldr	r4, [r1, #16]
 800920e:	42a3      	cmp	r3, r4
 8009210:	4607      	mov	r7, r0
 8009212:	db7e      	blt.n	8009312 <quorem+0x10c>
 8009214:	3c01      	subs	r4, #1
 8009216:	f101 0814 	add.w	r8, r1, #20
 800921a:	00a3      	lsls	r3, r4, #2
 800921c:	f100 0514 	add.w	r5, r0, #20
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800922c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009230:	3301      	adds	r3, #1
 8009232:	429a      	cmp	r2, r3
 8009234:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009238:	fbb2 f6f3 	udiv	r6, r2, r3
 800923c:	d32e      	bcc.n	800929c <quorem+0x96>
 800923e:	f04f 0a00 	mov.w	sl, #0
 8009242:	46c4      	mov	ip, r8
 8009244:	46ae      	mov	lr, r5
 8009246:	46d3      	mov	fp, sl
 8009248:	f85c 3b04 	ldr.w	r3, [ip], #4
 800924c:	b298      	uxth	r0, r3
 800924e:	fb06 a000 	mla	r0, r6, r0, sl
 8009252:	0c02      	lsrs	r2, r0, #16
 8009254:	0c1b      	lsrs	r3, r3, #16
 8009256:	fb06 2303 	mla	r3, r6, r3, r2
 800925a:	f8de 2000 	ldr.w	r2, [lr]
 800925e:	b280      	uxth	r0, r0
 8009260:	b292      	uxth	r2, r2
 8009262:	1a12      	subs	r2, r2, r0
 8009264:	445a      	add	r2, fp
 8009266:	f8de 0000 	ldr.w	r0, [lr]
 800926a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800926e:	b29b      	uxth	r3, r3
 8009270:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009274:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009278:	b292      	uxth	r2, r2
 800927a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800927e:	45e1      	cmp	r9, ip
 8009280:	f84e 2b04 	str.w	r2, [lr], #4
 8009284:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009288:	d2de      	bcs.n	8009248 <quorem+0x42>
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	58eb      	ldr	r3, [r5, r3]
 800928e:	b92b      	cbnz	r3, 800929c <quorem+0x96>
 8009290:	9b01      	ldr	r3, [sp, #4]
 8009292:	3b04      	subs	r3, #4
 8009294:	429d      	cmp	r5, r3
 8009296:	461a      	mov	r2, r3
 8009298:	d32f      	bcc.n	80092fa <quorem+0xf4>
 800929a:	613c      	str	r4, [r7, #16]
 800929c:	4638      	mov	r0, r7
 800929e:	f001 fb33 	bl	800a908 <__mcmp>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	db25      	blt.n	80092f2 <quorem+0xec>
 80092a6:	4629      	mov	r1, r5
 80092a8:	2000      	movs	r0, #0
 80092aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80092ae:	f8d1 c000 	ldr.w	ip, [r1]
 80092b2:	fa1f fe82 	uxth.w	lr, r2
 80092b6:	fa1f f38c 	uxth.w	r3, ip
 80092ba:	eba3 030e 	sub.w	r3, r3, lr
 80092be:	4403      	add	r3, r0
 80092c0:	0c12      	lsrs	r2, r2, #16
 80092c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092d0:	45c1      	cmp	r9, r8
 80092d2:	f841 3b04 	str.w	r3, [r1], #4
 80092d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092da:	d2e6      	bcs.n	80092aa <quorem+0xa4>
 80092dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092e4:	b922      	cbnz	r2, 80092f0 <quorem+0xea>
 80092e6:	3b04      	subs	r3, #4
 80092e8:	429d      	cmp	r5, r3
 80092ea:	461a      	mov	r2, r3
 80092ec:	d30b      	bcc.n	8009306 <quorem+0x100>
 80092ee:	613c      	str	r4, [r7, #16]
 80092f0:	3601      	adds	r6, #1
 80092f2:	4630      	mov	r0, r6
 80092f4:	b003      	add	sp, #12
 80092f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fa:	6812      	ldr	r2, [r2, #0]
 80092fc:	3b04      	subs	r3, #4
 80092fe:	2a00      	cmp	r2, #0
 8009300:	d1cb      	bne.n	800929a <quorem+0x94>
 8009302:	3c01      	subs	r4, #1
 8009304:	e7c6      	b.n	8009294 <quorem+0x8e>
 8009306:	6812      	ldr	r2, [r2, #0]
 8009308:	3b04      	subs	r3, #4
 800930a:	2a00      	cmp	r2, #0
 800930c:	d1ef      	bne.n	80092ee <quorem+0xe8>
 800930e:	3c01      	subs	r4, #1
 8009310:	e7ea      	b.n	80092e8 <quorem+0xe2>
 8009312:	2000      	movs	r0, #0
 8009314:	e7ee      	b.n	80092f4 <quorem+0xee>
	...

08009318 <_dtoa_r>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	69c7      	ldr	r7, [r0, #28]
 800931e:	b099      	sub	sp, #100	@ 0x64
 8009320:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009324:	ec55 4b10 	vmov	r4, r5, d0
 8009328:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800932a:	9109      	str	r1, [sp, #36]	@ 0x24
 800932c:	4683      	mov	fp, r0
 800932e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009330:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009332:	b97f      	cbnz	r7, 8009354 <_dtoa_r+0x3c>
 8009334:	2010      	movs	r0, #16
 8009336:	f000 ff0b 	bl	800a150 <malloc>
 800933a:	4602      	mov	r2, r0
 800933c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009340:	b920      	cbnz	r0, 800934c <_dtoa_r+0x34>
 8009342:	4ba7      	ldr	r3, [pc, #668]	@ (80095e0 <_dtoa_r+0x2c8>)
 8009344:	21ef      	movs	r1, #239	@ 0xef
 8009346:	48a7      	ldr	r0, [pc, #668]	@ (80095e4 <_dtoa_r+0x2cc>)
 8009348:	f001 fcd6 	bl	800acf8 <__assert_func>
 800934c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009350:	6007      	str	r7, [r0, #0]
 8009352:	60c7      	str	r7, [r0, #12]
 8009354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009358:	6819      	ldr	r1, [r3, #0]
 800935a:	b159      	cbz	r1, 8009374 <_dtoa_r+0x5c>
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	604a      	str	r2, [r1, #4]
 8009360:	2301      	movs	r3, #1
 8009362:	4093      	lsls	r3, r2
 8009364:	608b      	str	r3, [r1, #8]
 8009366:	4658      	mov	r0, fp
 8009368:	f001 f894 	bl	800a494 <_Bfree>
 800936c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	1e2b      	subs	r3, r5, #0
 8009376:	bfb9      	ittee	lt
 8009378:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800937c:	9303      	strlt	r3, [sp, #12]
 800937e:	2300      	movge	r3, #0
 8009380:	6033      	strge	r3, [r6, #0]
 8009382:	9f03      	ldr	r7, [sp, #12]
 8009384:	4b98      	ldr	r3, [pc, #608]	@ (80095e8 <_dtoa_r+0x2d0>)
 8009386:	bfbc      	itt	lt
 8009388:	2201      	movlt	r2, #1
 800938a:	6032      	strlt	r2, [r6, #0]
 800938c:	43bb      	bics	r3, r7
 800938e:	d112      	bne.n	80093b6 <_dtoa_r+0x9e>
 8009390:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009392:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800939c:	4323      	orrs	r3, r4
 800939e:	f000 854d 	beq.w	8009e3c <_dtoa_r+0xb24>
 80093a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80095fc <_dtoa_r+0x2e4>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 854f 	beq.w	8009e4c <_dtoa_r+0xb34>
 80093ae:	f10a 0303 	add.w	r3, sl, #3
 80093b2:	f000 bd49 	b.w	8009e48 <_dtoa_r+0xb30>
 80093b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093ba:	2200      	movs	r2, #0
 80093bc:	ec51 0b17 	vmov	r0, r1, d7
 80093c0:	2300      	movs	r3, #0
 80093c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80093c6:	f7f7 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80093ca:	4680      	mov	r8, r0
 80093cc:	b158      	cbz	r0, 80093e6 <_dtoa_r+0xce>
 80093ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093d0:	2301      	movs	r3, #1
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093d6:	b113      	cbz	r3, 80093de <_dtoa_r+0xc6>
 80093d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093da:	4b84      	ldr	r3, [pc, #528]	@ (80095ec <_dtoa_r+0x2d4>)
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009600 <_dtoa_r+0x2e8>
 80093e2:	f000 bd33 	b.w	8009e4c <_dtoa_r+0xb34>
 80093e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80093ea:	aa16      	add	r2, sp, #88	@ 0x58
 80093ec:	a917      	add	r1, sp, #92	@ 0x5c
 80093ee:	4658      	mov	r0, fp
 80093f0:	f001 fb3a 	bl	800aa68 <__d2b>
 80093f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80093f8:	4681      	mov	r9, r0
 80093fa:	2e00      	cmp	r6, #0
 80093fc:	d077      	beq.n	80094ee <_dtoa_r+0x1d6>
 80093fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009400:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800940c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009410:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009414:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009418:	4619      	mov	r1, r3
 800941a:	2200      	movs	r2, #0
 800941c:	4b74      	ldr	r3, [pc, #464]	@ (80095f0 <_dtoa_r+0x2d8>)
 800941e:	f7f6 ff33 	bl	8000288 <__aeabi_dsub>
 8009422:	a369      	add	r3, pc, #420	@ (adr r3, 80095c8 <_dtoa_r+0x2b0>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f7 f8e6 	bl	80005f8 <__aeabi_dmul>
 800942c:	a368      	add	r3, pc, #416	@ (adr r3, 80095d0 <_dtoa_r+0x2b8>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f6 ff2b 	bl	800028c <__adddf3>
 8009436:	4604      	mov	r4, r0
 8009438:	4630      	mov	r0, r6
 800943a:	460d      	mov	r5, r1
 800943c:	f7f7 f872 	bl	8000524 <__aeabi_i2d>
 8009440:	a365      	add	r3, pc, #404	@ (adr r3, 80095d8 <_dtoa_r+0x2c0>)
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	f7f7 f8d7 	bl	80005f8 <__aeabi_dmul>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	4620      	mov	r0, r4
 8009450:	4629      	mov	r1, r5
 8009452:	f7f6 ff1b 	bl	800028c <__adddf3>
 8009456:	4604      	mov	r4, r0
 8009458:	460d      	mov	r5, r1
 800945a:	f7f7 fb7d 	bl	8000b58 <__aeabi_d2iz>
 800945e:	2200      	movs	r2, #0
 8009460:	4607      	mov	r7, r0
 8009462:	2300      	movs	r3, #0
 8009464:	4620      	mov	r0, r4
 8009466:	4629      	mov	r1, r5
 8009468:	f7f7 fb38 	bl	8000adc <__aeabi_dcmplt>
 800946c:	b140      	cbz	r0, 8009480 <_dtoa_r+0x168>
 800946e:	4638      	mov	r0, r7
 8009470:	f7f7 f858 	bl	8000524 <__aeabi_i2d>
 8009474:	4622      	mov	r2, r4
 8009476:	462b      	mov	r3, r5
 8009478:	f7f7 fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 800947c:	b900      	cbnz	r0, 8009480 <_dtoa_r+0x168>
 800947e:	3f01      	subs	r7, #1
 8009480:	2f16      	cmp	r7, #22
 8009482:	d851      	bhi.n	8009528 <_dtoa_r+0x210>
 8009484:	4b5b      	ldr	r3, [pc, #364]	@ (80095f4 <_dtoa_r+0x2dc>)
 8009486:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009492:	f7f7 fb23 	bl	8000adc <__aeabi_dcmplt>
 8009496:	2800      	cmp	r0, #0
 8009498:	d048      	beq.n	800952c <_dtoa_r+0x214>
 800949a:	3f01      	subs	r7, #1
 800949c:	2300      	movs	r3, #0
 800949e:	9312      	str	r3, [sp, #72]	@ 0x48
 80094a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80094a2:	1b9b      	subs	r3, r3, r6
 80094a4:	1e5a      	subs	r2, r3, #1
 80094a6:	bf44      	itt	mi
 80094a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80094ac:	2300      	movmi	r3, #0
 80094ae:	9208      	str	r2, [sp, #32]
 80094b0:	bf54      	ite	pl
 80094b2:	f04f 0800 	movpl.w	r8, #0
 80094b6:	9308      	strmi	r3, [sp, #32]
 80094b8:	2f00      	cmp	r7, #0
 80094ba:	db39      	blt.n	8009530 <_dtoa_r+0x218>
 80094bc:	9b08      	ldr	r3, [sp, #32]
 80094be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80094c0:	443b      	add	r3, r7
 80094c2:	9308      	str	r3, [sp, #32]
 80094c4:	2300      	movs	r3, #0
 80094c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80094c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ca:	2b09      	cmp	r3, #9
 80094cc:	d864      	bhi.n	8009598 <_dtoa_r+0x280>
 80094ce:	2b05      	cmp	r3, #5
 80094d0:	bfc4      	itt	gt
 80094d2:	3b04      	subgt	r3, #4
 80094d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80094d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d8:	f1a3 0302 	sub.w	r3, r3, #2
 80094dc:	bfcc      	ite	gt
 80094de:	2400      	movgt	r4, #0
 80094e0:	2401      	movle	r4, #1
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d863      	bhi.n	80095ae <_dtoa_r+0x296>
 80094e6:	e8df f003 	tbb	[pc, r3]
 80094ea:	372a      	.short	0x372a
 80094ec:	5535      	.short	0x5535
 80094ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80094f2:	441e      	add	r6, r3
 80094f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	bfc1      	itttt	gt
 80094fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009500:	409f      	lslgt	r7, r3
 8009502:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009506:	fa24 f303 	lsrgt.w	r3, r4, r3
 800950a:	bfd6      	itet	le
 800950c:	f1c3 0320 	rsble	r3, r3, #32
 8009510:	ea47 0003 	orrgt.w	r0, r7, r3
 8009514:	fa04 f003 	lslle.w	r0, r4, r3
 8009518:	f7f6 fff4 	bl	8000504 <__aeabi_ui2d>
 800951c:	2201      	movs	r2, #1
 800951e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009522:	3e01      	subs	r6, #1
 8009524:	9214      	str	r2, [sp, #80]	@ 0x50
 8009526:	e777      	b.n	8009418 <_dtoa_r+0x100>
 8009528:	2301      	movs	r3, #1
 800952a:	e7b8      	b.n	800949e <_dtoa_r+0x186>
 800952c:	9012      	str	r0, [sp, #72]	@ 0x48
 800952e:	e7b7      	b.n	80094a0 <_dtoa_r+0x188>
 8009530:	427b      	negs	r3, r7
 8009532:	930a      	str	r3, [sp, #40]	@ 0x28
 8009534:	2300      	movs	r3, #0
 8009536:	eba8 0807 	sub.w	r8, r8, r7
 800953a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800953c:	e7c4      	b.n	80094c8 <_dtoa_r+0x1b0>
 800953e:	2300      	movs	r3, #0
 8009540:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	dc35      	bgt.n	80095b4 <_dtoa_r+0x29c>
 8009548:	2301      	movs	r3, #1
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	9307      	str	r3, [sp, #28]
 800954e:	461a      	mov	r2, r3
 8009550:	920e      	str	r2, [sp, #56]	@ 0x38
 8009552:	e00b      	b.n	800956c <_dtoa_r+0x254>
 8009554:	2301      	movs	r3, #1
 8009556:	e7f3      	b.n	8009540 <_dtoa_r+0x228>
 8009558:	2300      	movs	r3, #0
 800955a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800955c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	2b01      	cmp	r3, #1
 8009566:	9307      	str	r3, [sp, #28]
 8009568:	bfb8      	it	lt
 800956a:	2301      	movlt	r3, #1
 800956c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009570:	2100      	movs	r1, #0
 8009572:	2204      	movs	r2, #4
 8009574:	f102 0514 	add.w	r5, r2, #20
 8009578:	429d      	cmp	r5, r3
 800957a:	d91f      	bls.n	80095bc <_dtoa_r+0x2a4>
 800957c:	6041      	str	r1, [r0, #4]
 800957e:	4658      	mov	r0, fp
 8009580:	f000 ff48 	bl	800a414 <_Balloc>
 8009584:	4682      	mov	sl, r0
 8009586:	2800      	cmp	r0, #0
 8009588:	d13c      	bne.n	8009604 <_dtoa_r+0x2ec>
 800958a:	4b1b      	ldr	r3, [pc, #108]	@ (80095f8 <_dtoa_r+0x2e0>)
 800958c:	4602      	mov	r2, r0
 800958e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009592:	e6d8      	b.n	8009346 <_dtoa_r+0x2e>
 8009594:	2301      	movs	r3, #1
 8009596:	e7e0      	b.n	800955a <_dtoa_r+0x242>
 8009598:	2401      	movs	r4, #1
 800959a:	2300      	movs	r3, #0
 800959c:	9309      	str	r3, [sp, #36]	@ 0x24
 800959e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	9307      	str	r3, [sp, #28]
 80095a8:	2200      	movs	r2, #0
 80095aa:	2312      	movs	r3, #18
 80095ac:	e7d0      	b.n	8009550 <_dtoa_r+0x238>
 80095ae:	2301      	movs	r3, #1
 80095b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095b2:	e7f5      	b.n	80095a0 <_dtoa_r+0x288>
 80095b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	9307      	str	r3, [sp, #28]
 80095ba:	e7d7      	b.n	800956c <_dtoa_r+0x254>
 80095bc:	3101      	adds	r1, #1
 80095be:	0052      	lsls	r2, r2, #1
 80095c0:	e7d8      	b.n	8009574 <_dtoa_r+0x25c>
 80095c2:	bf00      	nop
 80095c4:	f3af 8000 	nop.w
 80095c8:	636f4361 	.word	0x636f4361
 80095cc:	3fd287a7 	.word	0x3fd287a7
 80095d0:	8b60c8b3 	.word	0x8b60c8b3
 80095d4:	3fc68a28 	.word	0x3fc68a28
 80095d8:	509f79fb 	.word	0x509f79fb
 80095dc:	3fd34413 	.word	0x3fd34413
 80095e0:	0800b6c9 	.word	0x0800b6c9
 80095e4:	0800b6e0 	.word	0x0800b6e0
 80095e8:	7ff00000 	.word	0x7ff00000
 80095ec:	0800b699 	.word	0x0800b699
 80095f0:	3ff80000 	.word	0x3ff80000
 80095f4:	0800b7e8 	.word	0x0800b7e8
 80095f8:	0800b738 	.word	0x0800b738
 80095fc:	0800b6c5 	.word	0x0800b6c5
 8009600:	0800b698 	.word	0x0800b698
 8009604:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009608:	6018      	str	r0, [r3, #0]
 800960a:	9b07      	ldr	r3, [sp, #28]
 800960c:	2b0e      	cmp	r3, #14
 800960e:	f200 80a4 	bhi.w	800975a <_dtoa_r+0x442>
 8009612:	2c00      	cmp	r4, #0
 8009614:	f000 80a1 	beq.w	800975a <_dtoa_r+0x442>
 8009618:	2f00      	cmp	r7, #0
 800961a:	dd33      	ble.n	8009684 <_dtoa_r+0x36c>
 800961c:	4bad      	ldr	r3, [pc, #692]	@ (80098d4 <_dtoa_r+0x5bc>)
 800961e:	f007 020f 	and.w	r2, r7, #15
 8009622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009626:	ed93 7b00 	vldr	d7, [r3]
 800962a:	05f8      	lsls	r0, r7, #23
 800962c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009630:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009634:	d516      	bpl.n	8009664 <_dtoa_r+0x34c>
 8009636:	4ba8      	ldr	r3, [pc, #672]	@ (80098d8 <_dtoa_r+0x5c0>)
 8009638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800963c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009640:	f7f7 f904 	bl	800084c <__aeabi_ddiv>
 8009644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009648:	f004 040f 	and.w	r4, r4, #15
 800964c:	2603      	movs	r6, #3
 800964e:	4da2      	ldr	r5, [pc, #648]	@ (80098d8 <_dtoa_r+0x5c0>)
 8009650:	b954      	cbnz	r4, 8009668 <_dtoa_r+0x350>
 8009652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800965a:	f7f7 f8f7 	bl	800084c <__aeabi_ddiv>
 800965e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009662:	e028      	b.n	80096b6 <_dtoa_r+0x39e>
 8009664:	2602      	movs	r6, #2
 8009666:	e7f2      	b.n	800964e <_dtoa_r+0x336>
 8009668:	07e1      	lsls	r1, r4, #31
 800966a:	d508      	bpl.n	800967e <_dtoa_r+0x366>
 800966c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009670:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009674:	f7f6 ffc0 	bl	80005f8 <__aeabi_dmul>
 8009678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800967c:	3601      	adds	r6, #1
 800967e:	1064      	asrs	r4, r4, #1
 8009680:	3508      	adds	r5, #8
 8009682:	e7e5      	b.n	8009650 <_dtoa_r+0x338>
 8009684:	f000 80d2 	beq.w	800982c <_dtoa_r+0x514>
 8009688:	427c      	negs	r4, r7
 800968a:	4b92      	ldr	r3, [pc, #584]	@ (80098d4 <_dtoa_r+0x5bc>)
 800968c:	4d92      	ldr	r5, [pc, #584]	@ (80098d8 <_dtoa_r+0x5c0>)
 800968e:	f004 020f 	and.w	r2, r4, #15
 8009692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800969e:	f7f6 ffab 	bl	80005f8 <__aeabi_dmul>
 80096a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096a6:	1124      	asrs	r4, r4, #4
 80096a8:	2300      	movs	r3, #0
 80096aa:	2602      	movs	r6, #2
 80096ac:	2c00      	cmp	r4, #0
 80096ae:	f040 80b2 	bne.w	8009816 <_dtoa_r+0x4fe>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1d3      	bne.n	800965e <_dtoa_r+0x346>
 80096b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 80b7 	beq.w	8009830 <_dtoa_r+0x518>
 80096c2:	4b86      	ldr	r3, [pc, #536]	@ (80098dc <_dtoa_r+0x5c4>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f7 fa07 	bl	8000adc <__aeabi_dcmplt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f000 80ae 	beq.w	8009830 <_dtoa_r+0x518>
 80096d4:	9b07      	ldr	r3, [sp, #28]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 80aa 	beq.w	8009830 <_dtoa_r+0x518>
 80096dc:	9b00      	ldr	r3, [sp, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	dd37      	ble.n	8009752 <_dtoa_r+0x43a>
 80096e2:	1e7b      	subs	r3, r7, #1
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	4620      	mov	r0, r4
 80096e8:	4b7d      	ldr	r3, [pc, #500]	@ (80098e0 <_dtoa_r+0x5c8>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096f6:	9c00      	ldr	r4, [sp, #0]
 80096f8:	3601      	adds	r6, #1
 80096fa:	4630      	mov	r0, r6
 80096fc:	f7f6 ff12 	bl	8000524 <__aeabi_i2d>
 8009700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009704:	f7f6 ff78 	bl	80005f8 <__aeabi_dmul>
 8009708:	4b76      	ldr	r3, [pc, #472]	@ (80098e4 <_dtoa_r+0x5cc>)
 800970a:	2200      	movs	r2, #0
 800970c:	f7f6 fdbe 	bl	800028c <__adddf3>
 8009710:	4605      	mov	r5, r0
 8009712:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009716:	2c00      	cmp	r4, #0
 8009718:	f040 808d 	bne.w	8009836 <_dtoa_r+0x51e>
 800971c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009720:	4b71      	ldr	r3, [pc, #452]	@ (80098e8 <_dtoa_r+0x5d0>)
 8009722:	2200      	movs	r2, #0
 8009724:	f7f6 fdb0 	bl	8000288 <__aeabi_dsub>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009730:	462a      	mov	r2, r5
 8009732:	4633      	mov	r3, r6
 8009734:	f7f7 f9f0 	bl	8000b18 <__aeabi_dcmpgt>
 8009738:	2800      	cmp	r0, #0
 800973a:	f040 828b 	bne.w	8009c54 <_dtoa_r+0x93c>
 800973e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009742:	462a      	mov	r2, r5
 8009744:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009748:	f7f7 f9c8 	bl	8000adc <__aeabi_dcmplt>
 800974c:	2800      	cmp	r0, #0
 800974e:	f040 8128 	bne.w	80099a2 <_dtoa_r+0x68a>
 8009752:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009756:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800975a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800975c:	2b00      	cmp	r3, #0
 800975e:	f2c0 815a 	blt.w	8009a16 <_dtoa_r+0x6fe>
 8009762:	2f0e      	cmp	r7, #14
 8009764:	f300 8157 	bgt.w	8009a16 <_dtoa_r+0x6fe>
 8009768:	4b5a      	ldr	r3, [pc, #360]	@ (80098d4 <_dtoa_r+0x5bc>)
 800976a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800976e:	ed93 7b00 	vldr	d7, [r3]
 8009772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009774:	2b00      	cmp	r3, #0
 8009776:	ed8d 7b00 	vstr	d7, [sp]
 800977a:	da03      	bge.n	8009784 <_dtoa_r+0x46c>
 800977c:	9b07      	ldr	r3, [sp, #28]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f340 8101 	ble.w	8009986 <_dtoa_r+0x66e>
 8009784:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009788:	4656      	mov	r6, sl
 800978a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800978e:	4620      	mov	r0, r4
 8009790:	4629      	mov	r1, r5
 8009792:	f7f7 f85b 	bl	800084c <__aeabi_ddiv>
 8009796:	f7f7 f9df 	bl	8000b58 <__aeabi_d2iz>
 800979a:	4680      	mov	r8, r0
 800979c:	f7f6 fec2 	bl	8000524 <__aeabi_i2d>
 80097a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097a4:	f7f6 ff28 	bl	80005f8 <__aeabi_dmul>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4620      	mov	r0, r4
 80097ae:	4629      	mov	r1, r5
 80097b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097b4:	f7f6 fd68 	bl	8000288 <__aeabi_dsub>
 80097b8:	f806 4b01 	strb.w	r4, [r6], #1
 80097bc:	9d07      	ldr	r5, [sp, #28]
 80097be:	eba6 040a 	sub.w	r4, r6, sl
 80097c2:	42a5      	cmp	r5, r4
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	f040 8117 	bne.w	80099fa <_dtoa_r+0x6e2>
 80097cc:	f7f6 fd5e 	bl	800028c <__adddf3>
 80097d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d4:	4604      	mov	r4, r0
 80097d6:	460d      	mov	r5, r1
 80097d8:	f7f7 f99e 	bl	8000b18 <__aeabi_dcmpgt>
 80097dc:	2800      	cmp	r0, #0
 80097de:	f040 80f9 	bne.w	80099d4 <_dtoa_r+0x6bc>
 80097e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097e6:	4620      	mov	r0, r4
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f7 f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80097ee:	b118      	cbz	r0, 80097f8 <_dtoa_r+0x4e0>
 80097f0:	f018 0f01 	tst.w	r8, #1
 80097f4:	f040 80ee 	bne.w	80099d4 <_dtoa_r+0x6bc>
 80097f8:	4649      	mov	r1, r9
 80097fa:	4658      	mov	r0, fp
 80097fc:	f000 fe4a 	bl	800a494 <_Bfree>
 8009800:	2300      	movs	r3, #0
 8009802:	7033      	strb	r3, [r6, #0]
 8009804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009806:	3701      	adds	r7, #1
 8009808:	601f      	str	r7, [r3, #0]
 800980a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 831d 	beq.w	8009e4c <_dtoa_r+0xb34>
 8009812:	601e      	str	r6, [r3, #0]
 8009814:	e31a      	b.n	8009e4c <_dtoa_r+0xb34>
 8009816:	07e2      	lsls	r2, r4, #31
 8009818:	d505      	bpl.n	8009826 <_dtoa_r+0x50e>
 800981a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800981e:	f7f6 feeb 	bl	80005f8 <__aeabi_dmul>
 8009822:	3601      	adds	r6, #1
 8009824:	2301      	movs	r3, #1
 8009826:	1064      	asrs	r4, r4, #1
 8009828:	3508      	adds	r5, #8
 800982a:	e73f      	b.n	80096ac <_dtoa_r+0x394>
 800982c:	2602      	movs	r6, #2
 800982e:	e742      	b.n	80096b6 <_dtoa_r+0x39e>
 8009830:	9c07      	ldr	r4, [sp, #28]
 8009832:	9704      	str	r7, [sp, #16]
 8009834:	e761      	b.n	80096fa <_dtoa_r+0x3e2>
 8009836:	4b27      	ldr	r3, [pc, #156]	@ (80098d4 <_dtoa_r+0x5bc>)
 8009838:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800983a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800983e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009842:	4454      	add	r4, sl
 8009844:	2900      	cmp	r1, #0
 8009846:	d053      	beq.n	80098f0 <_dtoa_r+0x5d8>
 8009848:	4928      	ldr	r1, [pc, #160]	@ (80098ec <_dtoa_r+0x5d4>)
 800984a:	2000      	movs	r0, #0
 800984c:	f7f6 fffe 	bl	800084c <__aeabi_ddiv>
 8009850:	4633      	mov	r3, r6
 8009852:	462a      	mov	r2, r5
 8009854:	f7f6 fd18 	bl	8000288 <__aeabi_dsub>
 8009858:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800985c:	4656      	mov	r6, sl
 800985e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009862:	f7f7 f979 	bl	8000b58 <__aeabi_d2iz>
 8009866:	4605      	mov	r5, r0
 8009868:	f7f6 fe5c 	bl	8000524 <__aeabi_i2d>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009874:	f7f6 fd08 	bl	8000288 <__aeabi_dsub>
 8009878:	3530      	adds	r5, #48	@ 0x30
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009882:	f806 5b01 	strb.w	r5, [r6], #1
 8009886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800988a:	f7f7 f927 	bl	8000adc <__aeabi_dcmplt>
 800988e:	2800      	cmp	r0, #0
 8009890:	d171      	bne.n	8009976 <_dtoa_r+0x65e>
 8009892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009896:	4911      	ldr	r1, [pc, #68]	@ (80098dc <_dtoa_r+0x5c4>)
 8009898:	2000      	movs	r0, #0
 800989a:	f7f6 fcf5 	bl	8000288 <__aeabi_dsub>
 800989e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098a2:	f7f7 f91b 	bl	8000adc <__aeabi_dcmplt>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f040 8095 	bne.w	80099d6 <_dtoa_r+0x6be>
 80098ac:	42a6      	cmp	r6, r4
 80098ae:	f43f af50 	beq.w	8009752 <_dtoa_r+0x43a>
 80098b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80098b6:	4b0a      	ldr	r3, [pc, #40]	@ (80098e0 <_dtoa_r+0x5c8>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	f7f6 fe9d 	bl	80005f8 <__aeabi_dmul>
 80098be:	4b08      	ldr	r3, [pc, #32]	@ (80098e0 <_dtoa_r+0x5c8>)
 80098c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098c4:	2200      	movs	r2, #0
 80098c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ca:	f7f6 fe95 	bl	80005f8 <__aeabi_dmul>
 80098ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098d2:	e7c4      	b.n	800985e <_dtoa_r+0x546>
 80098d4:	0800b7e8 	.word	0x0800b7e8
 80098d8:	0800b7c0 	.word	0x0800b7c0
 80098dc:	3ff00000 	.word	0x3ff00000
 80098e0:	40240000 	.word	0x40240000
 80098e4:	401c0000 	.word	0x401c0000
 80098e8:	40140000 	.word	0x40140000
 80098ec:	3fe00000 	.word	0x3fe00000
 80098f0:	4631      	mov	r1, r6
 80098f2:	4628      	mov	r0, r5
 80098f4:	f7f6 fe80 	bl	80005f8 <__aeabi_dmul>
 80098f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80098fe:	4656      	mov	r6, sl
 8009900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009904:	f7f7 f928 	bl	8000b58 <__aeabi_d2iz>
 8009908:	4605      	mov	r5, r0
 800990a:	f7f6 fe0b 	bl	8000524 <__aeabi_i2d>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009916:	f7f6 fcb7 	bl	8000288 <__aeabi_dsub>
 800991a:	3530      	adds	r5, #48	@ 0x30
 800991c:	f806 5b01 	strb.w	r5, [r6], #1
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	42a6      	cmp	r6, r4
 8009926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800992a:	f04f 0200 	mov.w	r2, #0
 800992e:	d124      	bne.n	800997a <_dtoa_r+0x662>
 8009930:	4bac      	ldr	r3, [pc, #688]	@ (8009be4 <_dtoa_r+0x8cc>)
 8009932:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009936:	f7f6 fca9 	bl	800028c <__adddf3>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009942:	f7f7 f8e9 	bl	8000b18 <__aeabi_dcmpgt>
 8009946:	2800      	cmp	r0, #0
 8009948:	d145      	bne.n	80099d6 <_dtoa_r+0x6be>
 800994a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800994e:	49a5      	ldr	r1, [pc, #660]	@ (8009be4 <_dtoa_r+0x8cc>)
 8009950:	2000      	movs	r0, #0
 8009952:	f7f6 fc99 	bl	8000288 <__aeabi_dsub>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800995e:	f7f7 f8bd 	bl	8000adc <__aeabi_dcmplt>
 8009962:	2800      	cmp	r0, #0
 8009964:	f43f aef5 	beq.w	8009752 <_dtoa_r+0x43a>
 8009968:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800996a:	1e73      	subs	r3, r6, #1
 800996c:	9315      	str	r3, [sp, #84]	@ 0x54
 800996e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009972:	2b30      	cmp	r3, #48	@ 0x30
 8009974:	d0f8      	beq.n	8009968 <_dtoa_r+0x650>
 8009976:	9f04      	ldr	r7, [sp, #16]
 8009978:	e73e      	b.n	80097f8 <_dtoa_r+0x4e0>
 800997a:	4b9b      	ldr	r3, [pc, #620]	@ (8009be8 <_dtoa_r+0x8d0>)
 800997c:	f7f6 fe3c 	bl	80005f8 <__aeabi_dmul>
 8009980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009984:	e7bc      	b.n	8009900 <_dtoa_r+0x5e8>
 8009986:	d10c      	bne.n	80099a2 <_dtoa_r+0x68a>
 8009988:	4b98      	ldr	r3, [pc, #608]	@ (8009bec <_dtoa_r+0x8d4>)
 800998a:	2200      	movs	r2, #0
 800998c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009990:	f7f6 fe32 	bl	80005f8 <__aeabi_dmul>
 8009994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009998:	f7f7 f8b4 	bl	8000b04 <__aeabi_dcmpge>
 800999c:	2800      	cmp	r0, #0
 800999e:	f000 8157 	beq.w	8009c50 <_dtoa_r+0x938>
 80099a2:	2400      	movs	r4, #0
 80099a4:	4625      	mov	r5, r4
 80099a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099a8:	43db      	mvns	r3, r3
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	4656      	mov	r6, sl
 80099ae:	2700      	movs	r7, #0
 80099b0:	4621      	mov	r1, r4
 80099b2:	4658      	mov	r0, fp
 80099b4:	f000 fd6e 	bl	800a494 <_Bfree>
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	d0dc      	beq.n	8009976 <_dtoa_r+0x65e>
 80099bc:	b12f      	cbz	r7, 80099ca <_dtoa_r+0x6b2>
 80099be:	42af      	cmp	r7, r5
 80099c0:	d003      	beq.n	80099ca <_dtoa_r+0x6b2>
 80099c2:	4639      	mov	r1, r7
 80099c4:	4658      	mov	r0, fp
 80099c6:	f000 fd65 	bl	800a494 <_Bfree>
 80099ca:	4629      	mov	r1, r5
 80099cc:	4658      	mov	r0, fp
 80099ce:	f000 fd61 	bl	800a494 <_Bfree>
 80099d2:	e7d0      	b.n	8009976 <_dtoa_r+0x65e>
 80099d4:	9704      	str	r7, [sp, #16]
 80099d6:	4633      	mov	r3, r6
 80099d8:	461e      	mov	r6, r3
 80099da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099de:	2a39      	cmp	r2, #57	@ 0x39
 80099e0:	d107      	bne.n	80099f2 <_dtoa_r+0x6da>
 80099e2:	459a      	cmp	sl, r3
 80099e4:	d1f8      	bne.n	80099d8 <_dtoa_r+0x6c0>
 80099e6:	9a04      	ldr	r2, [sp, #16]
 80099e8:	3201      	adds	r2, #1
 80099ea:	9204      	str	r2, [sp, #16]
 80099ec:	2230      	movs	r2, #48	@ 0x30
 80099ee:	f88a 2000 	strb.w	r2, [sl]
 80099f2:	781a      	ldrb	r2, [r3, #0]
 80099f4:	3201      	adds	r2, #1
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	e7bd      	b.n	8009976 <_dtoa_r+0x65e>
 80099fa:	4b7b      	ldr	r3, [pc, #492]	@ (8009be8 <_dtoa_r+0x8d0>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	f7f6 fdfb 	bl	80005f8 <__aeabi_dmul>
 8009a02:	2200      	movs	r2, #0
 8009a04:	2300      	movs	r3, #0
 8009a06:	4604      	mov	r4, r0
 8009a08:	460d      	mov	r5, r1
 8009a0a:	f7f7 f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f43f aebb 	beq.w	800978a <_dtoa_r+0x472>
 8009a14:	e6f0      	b.n	80097f8 <_dtoa_r+0x4e0>
 8009a16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a18:	2a00      	cmp	r2, #0
 8009a1a:	f000 80db 	beq.w	8009bd4 <_dtoa_r+0x8bc>
 8009a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a20:	2a01      	cmp	r2, #1
 8009a22:	f300 80bf 	bgt.w	8009ba4 <_dtoa_r+0x88c>
 8009a26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a28:	2a00      	cmp	r2, #0
 8009a2a:	f000 80b7 	beq.w	8009b9c <_dtoa_r+0x884>
 8009a2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a34:	4646      	mov	r6, r8
 8009a36:	9a08      	ldr	r2, [sp, #32]
 8009a38:	2101      	movs	r1, #1
 8009a3a:	441a      	add	r2, r3
 8009a3c:	4658      	mov	r0, fp
 8009a3e:	4498      	add	r8, r3
 8009a40:	9208      	str	r2, [sp, #32]
 8009a42:	f000 fddb 	bl	800a5fc <__i2b>
 8009a46:	4605      	mov	r5, r0
 8009a48:	b15e      	cbz	r6, 8009a62 <_dtoa_r+0x74a>
 8009a4a:	9b08      	ldr	r3, [sp, #32]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dd08      	ble.n	8009a62 <_dtoa_r+0x74a>
 8009a50:	42b3      	cmp	r3, r6
 8009a52:	9a08      	ldr	r2, [sp, #32]
 8009a54:	bfa8      	it	ge
 8009a56:	4633      	movge	r3, r6
 8009a58:	eba8 0803 	sub.w	r8, r8, r3
 8009a5c:	1af6      	subs	r6, r6, r3
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	9308      	str	r3, [sp, #32]
 8009a62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a64:	b1f3      	cbz	r3, 8009aa4 <_dtoa_r+0x78c>
 8009a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 80b7 	beq.w	8009bdc <_dtoa_r+0x8c4>
 8009a6e:	b18c      	cbz	r4, 8009a94 <_dtoa_r+0x77c>
 8009a70:	4629      	mov	r1, r5
 8009a72:	4622      	mov	r2, r4
 8009a74:	4658      	mov	r0, fp
 8009a76:	f000 fe81 	bl	800a77c <__pow5mult>
 8009a7a:	464a      	mov	r2, r9
 8009a7c:	4601      	mov	r1, r0
 8009a7e:	4605      	mov	r5, r0
 8009a80:	4658      	mov	r0, fp
 8009a82:	f000 fdd1 	bl	800a628 <__multiply>
 8009a86:	4649      	mov	r1, r9
 8009a88:	9004      	str	r0, [sp, #16]
 8009a8a:	4658      	mov	r0, fp
 8009a8c:	f000 fd02 	bl	800a494 <_Bfree>
 8009a90:	9b04      	ldr	r3, [sp, #16]
 8009a92:	4699      	mov	r9, r3
 8009a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a96:	1b1a      	subs	r2, r3, r4
 8009a98:	d004      	beq.n	8009aa4 <_dtoa_r+0x78c>
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	4658      	mov	r0, fp
 8009a9e:	f000 fe6d 	bl	800a77c <__pow5mult>
 8009aa2:	4681      	mov	r9, r0
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	4658      	mov	r0, fp
 8009aa8:	f000 fda8 	bl	800a5fc <__i2b>
 8009aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aae:	4604      	mov	r4, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 81cf 	beq.w	8009e54 <_dtoa_r+0xb3c>
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	4601      	mov	r1, r0
 8009aba:	4658      	mov	r0, fp
 8009abc:	f000 fe5e 	bl	800a77c <__pow5mult>
 8009ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	f300 8095 	bgt.w	8009bf4 <_dtoa_r+0x8dc>
 8009aca:	9b02      	ldr	r3, [sp, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f040 8087 	bne.w	8009be0 <_dtoa_r+0x8c8>
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f040 8089 	bne.w	8009bf0 <_dtoa_r+0x8d8>
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ae4:	0d1b      	lsrs	r3, r3, #20
 8009ae6:	051b      	lsls	r3, r3, #20
 8009ae8:	b12b      	cbz	r3, 8009af6 <_dtoa_r+0x7de>
 8009aea:	9b08      	ldr	r3, [sp, #32]
 8009aec:	3301      	adds	r3, #1
 8009aee:	9308      	str	r3, [sp, #32]
 8009af0:	f108 0801 	add.w	r8, r8, #1
 8009af4:	2301      	movs	r3, #1
 8009af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 81b0 	beq.w	8009e60 <_dtoa_r+0xb48>
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b06:	6918      	ldr	r0, [r3, #16]
 8009b08:	f000 fd2c 	bl	800a564 <__hi0bits>
 8009b0c:	f1c0 0020 	rsb	r0, r0, #32
 8009b10:	9b08      	ldr	r3, [sp, #32]
 8009b12:	4418      	add	r0, r3
 8009b14:	f010 001f 	ands.w	r0, r0, #31
 8009b18:	d077      	beq.n	8009c0a <_dtoa_r+0x8f2>
 8009b1a:	f1c0 0320 	rsb	r3, r0, #32
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	dd6b      	ble.n	8009bfa <_dtoa_r+0x8e2>
 8009b22:	9b08      	ldr	r3, [sp, #32]
 8009b24:	f1c0 001c 	rsb	r0, r0, #28
 8009b28:	4403      	add	r3, r0
 8009b2a:	4480      	add	r8, r0
 8009b2c:	4406      	add	r6, r0
 8009b2e:	9308      	str	r3, [sp, #32]
 8009b30:	f1b8 0f00 	cmp.w	r8, #0
 8009b34:	dd05      	ble.n	8009b42 <_dtoa_r+0x82a>
 8009b36:	4649      	mov	r1, r9
 8009b38:	4642      	mov	r2, r8
 8009b3a:	4658      	mov	r0, fp
 8009b3c:	f000 fe78 	bl	800a830 <__lshift>
 8009b40:	4681      	mov	r9, r0
 8009b42:	9b08      	ldr	r3, [sp, #32]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	dd05      	ble.n	8009b54 <_dtoa_r+0x83c>
 8009b48:	4621      	mov	r1, r4
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	4658      	mov	r0, fp
 8009b4e:	f000 fe6f 	bl	800a830 <__lshift>
 8009b52:	4604      	mov	r4, r0
 8009b54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d059      	beq.n	8009c0e <_dtoa_r+0x8f6>
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4648      	mov	r0, r9
 8009b5e:	f000 fed3 	bl	800a908 <__mcmp>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	da53      	bge.n	8009c0e <_dtoa_r+0x8f6>
 8009b66:	1e7b      	subs	r3, r7, #1
 8009b68:	9304      	str	r3, [sp, #16]
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	220a      	movs	r2, #10
 8009b70:	4658      	mov	r0, fp
 8009b72:	f000 fcb1 	bl	800a4d8 <__multadd>
 8009b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b78:	4681      	mov	r9, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 8172 	beq.w	8009e64 <_dtoa_r+0xb4c>
 8009b80:	2300      	movs	r3, #0
 8009b82:	4629      	mov	r1, r5
 8009b84:	220a      	movs	r2, #10
 8009b86:	4658      	mov	r0, fp
 8009b88:	f000 fca6 	bl	800a4d8 <__multadd>
 8009b8c:	9b00      	ldr	r3, [sp, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	4605      	mov	r5, r0
 8009b92:	dc67      	bgt.n	8009c64 <_dtoa_r+0x94c>
 8009b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	dc41      	bgt.n	8009c1e <_dtoa_r+0x906>
 8009b9a:	e063      	b.n	8009c64 <_dtoa_r+0x94c>
 8009b9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ba2:	e746      	b.n	8009a32 <_dtoa_r+0x71a>
 8009ba4:	9b07      	ldr	r3, [sp, #28]
 8009ba6:	1e5c      	subs	r4, r3, #1
 8009ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009baa:	42a3      	cmp	r3, r4
 8009bac:	bfbf      	itttt	lt
 8009bae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009bb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009bb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009bb4:	1ae3      	sublt	r3, r4, r3
 8009bb6:	bfb4      	ite	lt
 8009bb8:	18d2      	addlt	r2, r2, r3
 8009bba:	1b1c      	subge	r4, r3, r4
 8009bbc:	9b07      	ldr	r3, [sp, #28]
 8009bbe:	bfbc      	itt	lt
 8009bc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009bc2:	2400      	movlt	r4, #0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	bfb5      	itete	lt
 8009bc8:	eba8 0603 	sublt.w	r6, r8, r3
 8009bcc:	9b07      	ldrge	r3, [sp, #28]
 8009bce:	2300      	movlt	r3, #0
 8009bd0:	4646      	movge	r6, r8
 8009bd2:	e730      	b.n	8009a36 <_dtoa_r+0x71e>
 8009bd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009bd8:	4646      	mov	r6, r8
 8009bda:	e735      	b.n	8009a48 <_dtoa_r+0x730>
 8009bdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bde:	e75c      	b.n	8009a9a <_dtoa_r+0x782>
 8009be0:	2300      	movs	r3, #0
 8009be2:	e788      	b.n	8009af6 <_dtoa_r+0x7de>
 8009be4:	3fe00000 	.word	0x3fe00000
 8009be8:	40240000 	.word	0x40240000
 8009bec:	40140000 	.word	0x40140000
 8009bf0:	9b02      	ldr	r3, [sp, #8]
 8009bf2:	e780      	b.n	8009af6 <_dtoa_r+0x7de>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bf8:	e782      	b.n	8009b00 <_dtoa_r+0x7e8>
 8009bfa:	d099      	beq.n	8009b30 <_dtoa_r+0x818>
 8009bfc:	9a08      	ldr	r2, [sp, #32]
 8009bfe:	331c      	adds	r3, #28
 8009c00:	441a      	add	r2, r3
 8009c02:	4498      	add	r8, r3
 8009c04:	441e      	add	r6, r3
 8009c06:	9208      	str	r2, [sp, #32]
 8009c08:	e792      	b.n	8009b30 <_dtoa_r+0x818>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	e7f6      	b.n	8009bfc <_dtoa_r+0x8e4>
 8009c0e:	9b07      	ldr	r3, [sp, #28]
 8009c10:	9704      	str	r7, [sp, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	dc20      	bgt.n	8009c58 <_dtoa_r+0x940>
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	dd1e      	ble.n	8009c5c <_dtoa_r+0x944>
 8009c1e:	9b00      	ldr	r3, [sp, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f47f aec0 	bne.w	80099a6 <_dtoa_r+0x68e>
 8009c26:	4621      	mov	r1, r4
 8009c28:	2205      	movs	r2, #5
 8009c2a:	4658      	mov	r0, fp
 8009c2c:	f000 fc54 	bl	800a4d8 <__multadd>
 8009c30:	4601      	mov	r1, r0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4648      	mov	r0, r9
 8009c36:	f000 fe67 	bl	800a908 <__mcmp>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	f77f aeb3 	ble.w	80099a6 <_dtoa_r+0x68e>
 8009c40:	4656      	mov	r6, sl
 8009c42:	2331      	movs	r3, #49	@ 0x31
 8009c44:	f806 3b01 	strb.w	r3, [r6], #1
 8009c48:	9b04      	ldr	r3, [sp, #16]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	e6ae      	b.n	80099ae <_dtoa_r+0x696>
 8009c50:	9c07      	ldr	r4, [sp, #28]
 8009c52:	9704      	str	r7, [sp, #16]
 8009c54:	4625      	mov	r5, r4
 8009c56:	e7f3      	b.n	8009c40 <_dtoa_r+0x928>
 8009c58:	9b07      	ldr	r3, [sp, #28]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 8104 	beq.w	8009e6c <_dtoa_r+0xb54>
 8009c64:	2e00      	cmp	r6, #0
 8009c66:	dd05      	ble.n	8009c74 <_dtoa_r+0x95c>
 8009c68:	4629      	mov	r1, r5
 8009c6a:	4632      	mov	r2, r6
 8009c6c:	4658      	mov	r0, fp
 8009c6e:	f000 fddf 	bl	800a830 <__lshift>
 8009c72:	4605      	mov	r5, r0
 8009c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d05a      	beq.n	8009d30 <_dtoa_r+0xa18>
 8009c7a:	6869      	ldr	r1, [r5, #4]
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	f000 fbc9 	bl	800a414 <_Balloc>
 8009c82:	4606      	mov	r6, r0
 8009c84:	b928      	cbnz	r0, 8009c92 <_dtoa_r+0x97a>
 8009c86:	4b84      	ldr	r3, [pc, #528]	@ (8009e98 <_dtoa_r+0xb80>)
 8009c88:	4602      	mov	r2, r0
 8009c8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c8e:	f7ff bb5a 	b.w	8009346 <_dtoa_r+0x2e>
 8009c92:	692a      	ldr	r2, [r5, #16]
 8009c94:	3202      	adds	r2, #2
 8009c96:	0092      	lsls	r2, r2, #2
 8009c98:	f105 010c 	add.w	r1, r5, #12
 8009c9c:	300c      	adds	r0, #12
 8009c9e:	f001 f81d 	bl	800acdc <memcpy>
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4658      	mov	r0, fp
 8009ca8:	f000 fdc2 	bl	800a830 <__lshift>
 8009cac:	f10a 0301 	add.w	r3, sl, #1
 8009cb0:	9307      	str	r3, [sp, #28]
 8009cb2:	9b00      	ldr	r3, [sp, #0]
 8009cb4:	4453      	add	r3, sl
 8009cb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cb8:	9b02      	ldr	r3, [sp, #8]
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	462f      	mov	r7, r5
 8009cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	9b07      	ldr	r3, [sp, #28]
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	4648      	mov	r0, r9
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	f7ff fa9a 	bl	8009206 <quorem>
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	9002      	str	r0, [sp, #8]
 8009cd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cda:	4648      	mov	r0, r9
 8009cdc:	f000 fe14 	bl	800a908 <__mcmp>
 8009ce0:	462a      	mov	r2, r5
 8009ce2:	9008      	str	r0, [sp, #32]
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4658      	mov	r0, fp
 8009ce8:	f000 fe2a 	bl	800a940 <__mdiff>
 8009cec:	68c2      	ldr	r2, [r0, #12]
 8009cee:	4606      	mov	r6, r0
 8009cf0:	bb02      	cbnz	r2, 8009d34 <_dtoa_r+0xa1c>
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	4648      	mov	r0, r9
 8009cf6:	f000 fe07 	bl	800a908 <__mcmp>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4658      	mov	r0, fp
 8009d00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d02:	f000 fbc7 	bl	800a494 <_Bfree>
 8009d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d0a:	9e07      	ldr	r6, [sp, #28]
 8009d0c:	ea43 0102 	orr.w	r1, r3, r2
 8009d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d12:	4319      	orrs	r1, r3
 8009d14:	d110      	bne.n	8009d38 <_dtoa_r+0xa20>
 8009d16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d1a:	d029      	beq.n	8009d70 <_dtoa_r+0xa58>
 8009d1c:	9b08      	ldr	r3, [sp, #32]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	dd02      	ble.n	8009d28 <_dtoa_r+0xa10>
 8009d22:	9b02      	ldr	r3, [sp, #8]
 8009d24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d28:	9b00      	ldr	r3, [sp, #0]
 8009d2a:	f883 8000 	strb.w	r8, [r3]
 8009d2e:	e63f      	b.n	80099b0 <_dtoa_r+0x698>
 8009d30:	4628      	mov	r0, r5
 8009d32:	e7bb      	b.n	8009cac <_dtoa_r+0x994>
 8009d34:	2201      	movs	r2, #1
 8009d36:	e7e1      	b.n	8009cfc <_dtoa_r+0x9e4>
 8009d38:	9b08      	ldr	r3, [sp, #32]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	db04      	blt.n	8009d48 <_dtoa_r+0xa30>
 8009d3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d40:	430b      	orrs	r3, r1
 8009d42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d44:	430b      	orrs	r3, r1
 8009d46:	d120      	bne.n	8009d8a <_dtoa_r+0xa72>
 8009d48:	2a00      	cmp	r2, #0
 8009d4a:	dded      	ble.n	8009d28 <_dtoa_r+0xa10>
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	2201      	movs	r2, #1
 8009d50:	4658      	mov	r0, fp
 8009d52:	f000 fd6d 	bl	800a830 <__lshift>
 8009d56:	4621      	mov	r1, r4
 8009d58:	4681      	mov	r9, r0
 8009d5a:	f000 fdd5 	bl	800a908 <__mcmp>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	dc03      	bgt.n	8009d6a <_dtoa_r+0xa52>
 8009d62:	d1e1      	bne.n	8009d28 <_dtoa_r+0xa10>
 8009d64:	f018 0f01 	tst.w	r8, #1
 8009d68:	d0de      	beq.n	8009d28 <_dtoa_r+0xa10>
 8009d6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d6e:	d1d8      	bne.n	8009d22 <_dtoa_r+0xa0a>
 8009d70:	9a00      	ldr	r2, [sp, #0]
 8009d72:	2339      	movs	r3, #57	@ 0x39
 8009d74:	7013      	strb	r3, [r2, #0]
 8009d76:	4633      	mov	r3, r6
 8009d78:	461e      	mov	r6, r3
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d80:	2a39      	cmp	r2, #57	@ 0x39
 8009d82:	d052      	beq.n	8009e2a <_dtoa_r+0xb12>
 8009d84:	3201      	adds	r2, #1
 8009d86:	701a      	strb	r2, [r3, #0]
 8009d88:	e612      	b.n	80099b0 <_dtoa_r+0x698>
 8009d8a:	2a00      	cmp	r2, #0
 8009d8c:	dd07      	ble.n	8009d9e <_dtoa_r+0xa86>
 8009d8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d92:	d0ed      	beq.n	8009d70 <_dtoa_r+0xa58>
 8009d94:	9a00      	ldr	r2, [sp, #0]
 8009d96:	f108 0301 	add.w	r3, r8, #1
 8009d9a:	7013      	strb	r3, [r2, #0]
 8009d9c:	e608      	b.n	80099b0 <_dtoa_r+0x698>
 8009d9e:	9b07      	ldr	r3, [sp, #28]
 8009da0:	9a07      	ldr	r2, [sp, #28]
 8009da2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009da6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d028      	beq.n	8009dfe <_dtoa_r+0xae6>
 8009dac:	4649      	mov	r1, r9
 8009dae:	2300      	movs	r3, #0
 8009db0:	220a      	movs	r2, #10
 8009db2:	4658      	mov	r0, fp
 8009db4:	f000 fb90 	bl	800a4d8 <__multadd>
 8009db8:	42af      	cmp	r7, r5
 8009dba:	4681      	mov	r9, r0
 8009dbc:	f04f 0300 	mov.w	r3, #0
 8009dc0:	f04f 020a 	mov.w	r2, #10
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	4658      	mov	r0, fp
 8009dc8:	d107      	bne.n	8009dda <_dtoa_r+0xac2>
 8009dca:	f000 fb85 	bl	800a4d8 <__multadd>
 8009dce:	4607      	mov	r7, r0
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	9b07      	ldr	r3, [sp, #28]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	9307      	str	r3, [sp, #28]
 8009dd8:	e774      	b.n	8009cc4 <_dtoa_r+0x9ac>
 8009dda:	f000 fb7d 	bl	800a4d8 <__multadd>
 8009dde:	4629      	mov	r1, r5
 8009de0:	4607      	mov	r7, r0
 8009de2:	2300      	movs	r3, #0
 8009de4:	220a      	movs	r2, #10
 8009de6:	4658      	mov	r0, fp
 8009de8:	f000 fb76 	bl	800a4d8 <__multadd>
 8009dec:	4605      	mov	r5, r0
 8009dee:	e7f0      	b.n	8009dd2 <_dtoa_r+0xaba>
 8009df0:	9b00      	ldr	r3, [sp, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	bfcc      	ite	gt
 8009df6:	461e      	movgt	r6, r3
 8009df8:	2601      	movle	r6, #1
 8009dfa:	4456      	add	r6, sl
 8009dfc:	2700      	movs	r7, #0
 8009dfe:	4649      	mov	r1, r9
 8009e00:	2201      	movs	r2, #1
 8009e02:	4658      	mov	r0, fp
 8009e04:	f000 fd14 	bl	800a830 <__lshift>
 8009e08:	4621      	mov	r1, r4
 8009e0a:	4681      	mov	r9, r0
 8009e0c:	f000 fd7c 	bl	800a908 <__mcmp>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	dcb0      	bgt.n	8009d76 <_dtoa_r+0xa5e>
 8009e14:	d102      	bne.n	8009e1c <_dtoa_r+0xb04>
 8009e16:	f018 0f01 	tst.w	r8, #1
 8009e1a:	d1ac      	bne.n	8009d76 <_dtoa_r+0xa5e>
 8009e1c:	4633      	mov	r3, r6
 8009e1e:	461e      	mov	r6, r3
 8009e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e24:	2a30      	cmp	r2, #48	@ 0x30
 8009e26:	d0fa      	beq.n	8009e1e <_dtoa_r+0xb06>
 8009e28:	e5c2      	b.n	80099b0 <_dtoa_r+0x698>
 8009e2a:	459a      	cmp	sl, r3
 8009e2c:	d1a4      	bne.n	8009d78 <_dtoa_r+0xa60>
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	3301      	adds	r3, #1
 8009e32:	9304      	str	r3, [sp, #16]
 8009e34:	2331      	movs	r3, #49	@ 0x31
 8009e36:	f88a 3000 	strb.w	r3, [sl]
 8009e3a:	e5b9      	b.n	80099b0 <_dtoa_r+0x698>
 8009e3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009e9c <_dtoa_r+0xb84>
 8009e42:	b11b      	cbz	r3, 8009e4c <_dtoa_r+0xb34>
 8009e44:	f10a 0308 	add.w	r3, sl, #8
 8009e48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	4650      	mov	r0, sl
 8009e4e:	b019      	add	sp, #100	@ 0x64
 8009e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	f77f ae37 	ble.w	8009aca <_dtoa_r+0x7b2>
 8009e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e60:	2001      	movs	r0, #1
 8009e62:	e655      	b.n	8009b10 <_dtoa_r+0x7f8>
 8009e64:	9b00      	ldr	r3, [sp, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f77f aed6 	ble.w	8009c18 <_dtoa_r+0x900>
 8009e6c:	4656      	mov	r6, sl
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4648      	mov	r0, r9
 8009e72:	f7ff f9c8 	bl	8009206 <quorem>
 8009e76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e7a:	f806 8b01 	strb.w	r8, [r6], #1
 8009e7e:	9b00      	ldr	r3, [sp, #0]
 8009e80:	eba6 020a 	sub.w	r2, r6, sl
 8009e84:	4293      	cmp	r3, r2
 8009e86:	ddb3      	ble.n	8009df0 <_dtoa_r+0xad8>
 8009e88:	4649      	mov	r1, r9
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	220a      	movs	r2, #10
 8009e8e:	4658      	mov	r0, fp
 8009e90:	f000 fb22 	bl	800a4d8 <__multadd>
 8009e94:	4681      	mov	r9, r0
 8009e96:	e7ea      	b.n	8009e6e <_dtoa_r+0xb56>
 8009e98:	0800b738 	.word	0x0800b738
 8009e9c:	0800b6bc 	.word	0x0800b6bc

08009ea0 <__ssputs_r>:
 8009ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea4:	688e      	ldr	r6, [r1, #8]
 8009ea6:	461f      	mov	r7, r3
 8009ea8:	42be      	cmp	r6, r7
 8009eaa:	680b      	ldr	r3, [r1, #0]
 8009eac:	4682      	mov	sl, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	4690      	mov	r8, r2
 8009eb2:	d82d      	bhi.n	8009f10 <__ssputs_r+0x70>
 8009eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009eb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ebc:	d026      	beq.n	8009f0c <__ssputs_r+0x6c>
 8009ebe:	6965      	ldr	r5, [r4, #20]
 8009ec0:	6909      	ldr	r1, [r1, #16]
 8009ec2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ec6:	eba3 0901 	sub.w	r9, r3, r1
 8009eca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ece:	1c7b      	adds	r3, r7, #1
 8009ed0:	444b      	add	r3, r9
 8009ed2:	106d      	asrs	r5, r5, #1
 8009ed4:	429d      	cmp	r5, r3
 8009ed6:	bf38      	it	cc
 8009ed8:	461d      	movcc	r5, r3
 8009eda:	0553      	lsls	r3, r2, #21
 8009edc:	d527      	bpl.n	8009f2e <__ssputs_r+0x8e>
 8009ede:	4629      	mov	r1, r5
 8009ee0:	f000 f960 	bl	800a1a4 <_malloc_r>
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	b360      	cbz	r0, 8009f42 <__ssputs_r+0xa2>
 8009ee8:	6921      	ldr	r1, [r4, #16]
 8009eea:	464a      	mov	r2, r9
 8009eec:	f000 fef6 	bl	800acdc <memcpy>
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	6126      	str	r6, [r4, #16]
 8009efe:	6165      	str	r5, [r4, #20]
 8009f00:	444e      	add	r6, r9
 8009f02:	eba5 0509 	sub.w	r5, r5, r9
 8009f06:	6026      	str	r6, [r4, #0]
 8009f08:	60a5      	str	r5, [r4, #8]
 8009f0a:	463e      	mov	r6, r7
 8009f0c:	42be      	cmp	r6, r7
 8009f0e:	d900      	bls.n	8009f12 <__ssputs_r+0x72>
 8009f10:	463e      	mov	r6, r7
 8009f12:	6820      	ldr	r0, [r4, #0]
 8009f14:	4632      	mov	r2, r6
 8009f16:	4641      	mov	r1, r8
 8009f18:	f000 fe6f 	bl	800abfa <memmove>
 8009f1c:	68a3      	ldr	r3, [r4, #8]
 8009f1e:	1b9b      	subs	r3, r3, r6
 8009f20:	60a3      	str	r3, [r4, #8]
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	4433      	add	r3, r6
 8009f26:	6023      	str	r3, [r4, #0]
 8009f28:	2000      	movs	r0, #0
 8009f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2e:	462a      	mov	r2, r5
 8009f30:	f000 fe35 	bl	800ab9e <_realloc_r>
 8009f34:	4606      	mov	r6, r0
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d1e0      	bne.n	8009efc <__ssputs_r+0x5c>
 8009f3a:	6921      	ldr	r1, [r4, #16]
 8009f3c:	4650      	mov	r0, sl
 8009f3e:	f000 ff0d 	bl	800ad5c <_free_r>
 8009f42:	230c      	movs	r3, #12
 8009f44:	f8ca 3000 	str.w	r3, [sl]
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f4e:	81a3      	strh	r3, [r4, #12]
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f54:	e7e9      	b.n	8009f2a <__ssputs_r+0x8a>
	...

08009f58 <_svfiprintf_r>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	4698      	mov	r8, r3
 8009f5e:	898b      	ldrh	r3, [r1, #12]
 8009f60:	061b      	lsls	r3, r3, #24
 8009f62:	b09d      	sub	sp, #116	@ 0x74
 8009f64:	4607      	mov	r7, r0
 8009f66:	460d      	mov	r5, r1
 8009f68:	4614      	mov	r4, r2
 8009f6a:	d510      	bpl.n	8009f8e <_svfiprintf_r+0x36>
 8009f6c:	690b      	ldr	r3, [r1, #16]
 8009f6e:	b973      	cbnz	r3, 8009f8e <_svfiprintf_r+0x36>
 8009f70:	2140      	movs	r1, #64	@ 0x40
 8009f72:	f000 f917 	bl	800a1a4 <_malloc_r>
 8009f76:	6028      	str	r0, [r5, #0]
 8009f78:	6128      	str	r0, [r5, #16]
 8009f7a:	b930      	cbnz	r0, 8009f8a <_svfiprintf_r+0x32>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f84:	b01d      	add	sp, #116	@ 0x74
 8009f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8a:	2340      	movs	r3, #64	@ 0x40
 8009f8c:	616b      	str	r3, [r5, #20]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f92:	2320      	movs	r3, #32
 8009f94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f9c:	2330      	movs	r3, #48	@ 0x30
 8009f9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a13c <_svfiprintf_r+0x1e4>
 8009fa2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fa6:	f04f 0901 	mov.w	r9, #1
 8009faa:	4623      	mov	r3, r4
 8009fac:	469a      	mov	sl, r3
 8009fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fb2:	b10a      	cbz	r2, 8009fb8 <_svfiprintf_r+0x60>
 8009fb4:	2a25      	cmp	r2, #37	@ 0x25
 8009fb6:	d1f9      	bne.n	8009fac <_svfiprintf_r+0x54>
 8009fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8009fbc:	d00b      	beq.n	8009fd6 <_svfiprintf_r+0x7e>
 8009fbe:	465b      	mov	r3, fp
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	4638      	mov	r0, r7
 8009fc6:	f7ff ff6b 	bl	8009ea0 <__ssputs_r>
 8009fca:	3001      	adds	r0, #1
 8009fcc:	f000 80a7 	beq.w	800a11e <_svfiprintf_r+0x1c6>
 8009fd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fd2:	445a      	add	r2, fp
 8009fd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 809f 	beq.w	800a11e <_svfiprintf_r+0x1c6>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fea:	f10a 0a01 	add.w	sl, sl, #1
 8009fee:	9304      	str	r3, [sp, #16]
 8009ff0:	9307      	str	r3, [sp, #28]
 8009ff2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ff6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ff8:	4654      	mov	r4, sl
 8009ffa:	2205      	movs	r2, #5
 8009ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a000:	484e      	ldr	r0, [pc, #312]	@ (800a13c <_svfiprintf_r+0x1e4>)
 800a002:	f7f6 f8e5 	bl	80001d0 <memchr>
 800a006:	9a04      	ldr	r2, [sp, #16]
 800a008:	b9d8      	cbnz	r0, 800a042 <_svfiprintf_r+0xea>
 800a00a:	06d0      	lsls	r0, r2, #27
 800a00c:	bf44      	itt	mi
 800a00e:	2320      	movmi	r3, #32
 800a010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a014:	0711      	lsls	r1, r2, #28
 800a016:	bf44      	itt	mi
 800a018:	232b      	movmi	r3, #43	@ 0x2b
 800a01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a01e:	f89a 3000 	ldrb.w	r3, [sl]
 800a022:	2b2a      	cmp	r3, #42	@ 0x2a
 800a024:	d015      	beq.n	800a052 <_svfiprintf_r+0xfa>
 800a026:	9a07      	ldr	r2, [sp, #28]
 800a028:	4654      	mov	r4, sl
 800a02a:	2000      	movs	r0, #0
 800a02c:	f04f 0c0a 	mov.w	ip, #10
 800a030:	4621      	mov	r1, r4
 800a032:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a036:	3b30      	subs	r3, #48	@ 0x30
 800a038:	2b09      	cmp	r3, #9
 800a03a:	d94b      	bls.n	800a0d4 <_svfiprintf_r+0x17c>
 800a03c:	b1b0      	cbz	r0, 800a06c <_svfiprintf_r+0x114>
 800a03e:	9207      	str	r2, [sp, #28]
 800a040:	e014      	b.n	800a06c <_svfiprintf_r+0x114>
 800a042:	eba0 0308 	sub.w	r3, r0, r8
 800a046:	fa09 f303 	lsl.w	r3, r9, r3
 800a04a:	4313      	orrs	r3, r2
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	46a2      	mov	sl, r4
 800a050:	e7d2      	b.n	8009ff8 <_svfiprintf_r+0xa0>
 800a052:	9b03      	ldr	r3, [sp, #12]
 800a054:	1d19      	adds	r1, r3, #4
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	9103      	str	r1, [sp, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	bfbb      	ittet	lt
 800a05e:	425b      	neglt	r3, r3
 800a060:	f042 0202 	orrlt.w	r2, r2, #2
 800a064:	9307      	strge	r3, [sp, #28]
 800a066:	9307      	strlt	r3, [sp, #28]
 800a068:	bfb8      	it	lt
 800a06a:	9204      	strlt	r2, [sp, #16]
 800a06c:	7823      	ldrb	r3, [r4, #0]
 800a06e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a070:	d10a      	bne.n	800a088 <_svfiprintf_r+0x130>
 800a072:	7863      	ldrb	r3, [r4, #1]
 800a074:	2b2a      	cmp	r3, #42	@ 0x2a
 800a076:	d132      	bne.n	800a0de <_svfiprintf_r+0x186>
 800a078:	9b03      	ldr	r3, [sp, #12]
 800a07a:	1d1a      	adds	r2, r3, #4
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	9203      	str	r2, [sp, #12]
 800a080:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a084:	3402      	adds	r4, #2
 800a086:	9305      	str	r3, [sp, #20]
 800a088:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a14c <_svfiprintf_r+0x1f4>
 800a08c:	7821      	ldrb	r1, [r4, #0]
 800a08e:	2203      	movs	r2, #3
 800a090:	4650      	mov	r0, sl
 800a092:	f7f6 f89d 	bl	80001d0 <memchr>
 800a096:	b138      	cbz	r0, 800a0a8 <_svfiprintf_r+0x150>
 800a098:	9b04      	ldr	r3, [sp, #16]
 800a09a:	eba0 000a 	sub.w	r0, r0, sl
 800a09e:	2240      	movs	r2, #64	@ 0x40
 800a0a0:	4082      	lsls	r2, r0
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	3401      	adds	r4, #1
 800a0a6:	9304      	str	r3, [sp, #16]
 800a0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ac:	4824      	ldr	r0, [pc, #144]	@ (800a140 <_svfiprintf_r+0x1e8>)
 800a0ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0b2:	2206      	movs	r2, #6
 800a0b4:	f7f6 f88c 	bl	80001d0 <memchr>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d036      	beq.n	800a12a <_svfiprintf_r+0x1d2>
 800a0bc:	4b21      	ldr	r3, [pc, #132]	@ (800a144 <_svfiprintf_r+0x1ec>)
 800a0be:	bb1b      	cbnz	r3, 800a108 <_svfiprintf_r+0x1b0>
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	3307      	adds	r3, #7
 800a0c4:	f023 0307 	bic.w	r3, r3, #7
 800a0c8:	3308      	adds	r3, #8
 800a0ca:	9303      	str	r3, [sp, #12]
 800a0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ce:	4433      	add	r3, r6
 800a0d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0d2:	e76a      	b.n	8009faa <_svfiprintf_r+0x52>
 800a0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0d8:	460c      	mov	r4, r1
 800a0da:	2001      	movs	r0, #1
 800a0dc:	e7a8      	b.n	800a030 <_svfiprintf_r+0xd8>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	3401      	adds	r4, #1
 800a0e2:	9305      	str	r3, [sp, #20]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	f04f 0c0a 	mov.w	ip, #10
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0f0:	3a30      	subs	r2, #48	@ 0x30
 800a0f2:	2a09      	cmp	r2, #9
 800a0f4:	d903      	bls.n	800a0fe <_svfiprintf_r+0x1a6>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0c6      	beq.n	800a088 <_svfiprintf_r+0x130>
 800a0fa:	9105      	str	r1, [sp, #20]
 800a0fc:	e7c4      	b.n	800a088 <_svfiprintf_r+0x130>
 800a0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a102:	4604      	mov	r4, r0
 800a104:	2301      	movs	r3, #1
 800a106:	e7f0      	b.n	800a0ea <_svfiprintf_r+0x192>
 800a108:	ab03      	add	r3, sp, #12
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	462a      	mov	r2, r5
 800a10e:	4b0e      	ldr	r3, [pc, #56]	@ (800a148 <_svfiprintf_r+0x1f0>)
 800a110:	a904      	add	r1, sp, #16
 800a112:	4638      	mov	r0, r7
 800a114:	f7fe fba4 	bl	8008860 <_printf_float>
 800a118:	1c42      	adds	r2, r0, #1
 800a11a:	4606      	mov	r6, r0
 800a11c:	d1d6      	bne.n	800a0cc <_svfiprintf_r+0x174>
 800a11e:	89ab      	ldrh	r3, [r5, #12]
 800a120:	065b      	lsls	r3, r3, #25
 800a122:	f53f af2d 	bmi.w	8009f80 <_svfiprintf_r+0x28>
 800a126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a128:	e72c      	b.n	8009f84 <_svfiprintf_r+0x2c>
 800a12a:	ab03      	add	r3, sp, #12
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	462a      	mov	r2, r5
 800a130:	4b05      	ldr	r3, [pc, #20]	@ (800a148 <_svfiprintf_r+0x1f0>)
 800a132:	a904      	add	r1, sp, #16
 800a134:	4638      	mov	r0, r7
 800a136:	f7fe fe2b 	bl	8008d90 <_printf_i>
 800a13a:	e7ed      	b.n	800a118 <_svfiprintf_r+0x1c0>
 800a13c:	0800b749 	.word	0x0800b749
 800a140:	0800b753 	.word	0x0800b753
 800a144:	08008861 	.word	0x08008861
 800a148:	08009ea1 	.word	0x08009ea1
 800a14c:	0800b74f 	.word	0x0800b74f

0800a150 <malloc>:
 800a150:	4b02      	ldr	r3, [pc, #8]	@ (800a15c <malloc+0xc>)
 800a152:	4601      	mov	r1, r0
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	f000 b825 	b.w	800a1a4 <_malloc_r>
 800a15a:	bf00      	nop
 800a15c:	2000002c 	.word	0x2000002c

0800a160 <sbrk_aligned>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	4e0f      	ldr	r6, [pc, #60]	@ (800a1a0 <sbrk_aligned+0x40>)
 800a164:	460c      	mov	r4, r1
 800a166:	6831      	ldr	r1, [r6, #0]
 800a168:	4605      	mov	r5, r0
 800a16a:	b911      	cbnz	r1, 800a172 <sbrk_aligned+0x12>
 800a16c:	f000 fd94 	bl	800ac98 <_sbrk_r>
 800a170:	6030      	str	r0, [r6, #0]
 800a172:	4621      	mov	r1, r4
 800a174:	4628      	mov	r0, r5
 800a176:	f000 fd8f 	bl	800ac98 <_sbrk_r>
 800a17a:	1c43      	adds	r3, r0, #1
 800a17c:	d103      	bne.n	800a186 <sbrk_aligned+0x26>
 800a17e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a182:	4620      	mov	r0, r4
 800a184:	bd70      	pop	{r4, r5, r6, pc}
 800a186:	1cc4      	adds	r4, r0, #3
 800a188:	f024 0403 	bic.w	r4, r4, #3
 800a18c:	42a0      	cmp	r0, r4
 800a18e:	d0f8      	beq.n	800a182 <sbrk_aligned+0x22>
 800a190:	1a21      	subs	r1, r4, r0
 800a192:	4628      	mov	r0, r5
 800a194:	f000 fd80 	bl	800ac98 <_sbrk_r>
 800a198:	3001      	adds	r0, #1
 800a19a:	d1f2      	bne.n	800a182 <sbrk_aligned+0x22>
 800a19c:	e7ef      	b.n	800a17e <sbrk_aligned+0x1e>
 800a19e:	bf00      	nop
 800a1a0:	200005bc 	.word	0x200005bc

0800a1a4 <_malloc_r>:
 800a1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a8:	1ccd      	adds	r5, r1, #3
 800a1aa:	f025 0503 	bic.w	r5, r5, #3
 800a1ae:	3508      	adds	r5, #8
 800a1b0:	2d0c      	cmp	r5, #12
 800a1b2:	bf38      	it	cc
 800a1b4:	250c      	movcc	r5, #12
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	db01      	blt.n	800a1c0 <_malloc_r+0x1c>
 800a1bc:	42a9      	cmp	r1, r5
 800a1be:	d904      	bls.n	800a1ca <_malloc_r+0x26>
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	6033      	str	r3, [r6, #0]
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2a0 <_malloc_r+0xfc>
 800a1ce:	f000 f915 	bl	800a3fc <__malloc_lock>
 800a1d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1d6:	461c      	mov	r4, r3
 800a1d8:	bb44      	cbnz	r4, 800a22c <_malloc_r+0x88>
 800a1da:	4629      	mov	r1, r5
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f7ff ffbf 	bl	800a160 <sbrk_aligned>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	d158      	bne.n	800a29a <_malloc_r+0xf6>
 800a1e8:	f8d8 4000 	ldr.w	r4, [r8]
 800a1ec:	4627      	mov	r7, r4
 800a1ee:	2f00      	cmp	r7, #0
 800a1f0:	d143      	bne.n	800a27a <_malloc_r+0xd6>
 800a1f2:	2c00      	cmp	r4, #0
 800a1f4:	d04b      	beq.n	800a28e <_malloc_r+0xea>
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	eb04 0903 	add.w	r9, r4, r3
 800a200:	f000 fd4a 	bl	800ac98 <_sbrk_r>
 800a204:	4581      	cmp	r9, r0
 800a206:	d142      	bne.n	800a28e <_malloc_r+0xea>
 800a208:	6821      	ldr	r1, [r4, #0]
 800a20a:	1a6d      	subs	r5, r5, r1
 800a20c:	4629      	mov	r1, r5
 800a20e:	4630      	mov	r0, r6
 800a210:	f7ff ffa6 	bl	800a160 <sbrk_aligned>
 800a214:	3001      	adds	r0, #1
 800a216:	d03a      	beq.n	800a28e <_malloc_r+0xea>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	442b      	add	r3, r5
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	f8d8 3000 	ldr.w	r3, [r8]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	bb62      	cbnz	r2, 800a280 <_malloc_r+0xdc>
 800a226:	f8c8 7000 	str.w	r7, [r8]
 800a22a:	e00f      	b.n	800a24c <_malloc_r+0xa8>
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	1b52      	subs	r2, r2, r5
 800a230:	d420      	bmi.n	800a274 <_malloc_r+0xd0>
 800a232:	2a0b      	cmp	r2, #11
 800a234:	d917      	bls.n	800a266 <_malloc_r+0xc2>
 800a236:	1961      	adds	r1, r4, r5
 800a238:	42a3      	cmp	r3, r4
 800a23a:	6025      	str	r5, [r4, #0]
 800a23c:	bf18      	it	ne
 800a23e:	6059      	strne	r1, [r3, #4]
 800a240:	6863      	ldr	r3, [r4, #4]
 800a242:	bf08      	it	eq
 800a244:	f8c8 1000 	streq.w	r1, [r8]
 800a248:	5162      	str	r2, [r4, r5]
 800a24a:	604b      	str	r3, [r1, #4]
 800a24c:	4630      	mov	r0, r6
 800a24e:	f000 f8db 	bl	800a408 <__malloc_unlock>
 800a252:	f104 000b 	add.w	r0, r4, #11
 800a256:	1d23      	adds	r3, r4, #4
 800a258:	f020 0007 	bic.w	r0, r0, #7
 800a25c:	1ac2      	subs	r2, r0, r3
 800a25e:	bf1c      	itt	ne
 800a260:	1a1b      	subne	r3, r3, r0
 800a262:	50a3      	strne	r3, [r4, r2]
 800a264:	e7af      	b.n	800a1c6 <_malloc_r+0x22>
 800a266:	6862      	ldr	r2, [r4, #4]
 800a268:	42a3      	cmp	r3, r4
 800a26a:	bf0c      	ite	eq
 800a26c:	f8c8 2000 	streq.w	r2, [r8]
 800a270:	605a      	strne	r2, [r3, #4]
 800a272:	e7eb      	b.n	800a24c <_malloc_r+0xa8>
 800a274:	4623      	mov	r3, r4
 800a276:	6864      	ldr	r4, [r4, #4]
 800a278:	e7ae      	b.n	800a1d8 <_malloc_r+0x34>
 800a27a:	463c      	mov	r4, r7
 800a27c:	687f      	ldr	r7, [r7, #4]
 800a27e:	e7b6      	b.n	800a1ee <_malloc_r+0x4a>
 800a280:	461a      	mov	r2, r3
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	42a3      	cmp	r3, r4
 800a286:	d1fb      	bne.n	800a280 <_malloc_r+0xdc>
 800a288:	2300      	movs	r3, #0
 800a28a:	6053      	str	r3, [r2, #4]
 800a28c:	e7de      	b.n	800a24c <_malloc_r+0xa8>
 800a28e:	230c      	movs	r3, #12
 800a290:	6033      	str	r3, [r6, #0]
 800a292:	4630      	mov	r0, r6
 800a294:	f000 f8b8 	bl	800a408 <__malloc_unlock>
 800a298:	e794      	b.n	800a1c4 <_malloc_r+0x20>
 800a29a:	6005      	str	r5, [r0, #0]
 800a29c:	e7d6      	b.n	800a24c <_malloc_r+0xa8>
 800a29e:	bf00      	nop
 800a2a0:	200005c0 	.word	0x200005c0

0800a2a4 <__sflush_r>:
 800a2a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ac:	0716      	lsls	r6, r2, #28
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	d454      	bmi.n	800a35e <__sflush_r+0xba>
 800a2b4:	684b      	ldr	r3, [r1, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dc02      	bgt.n	800a2c0 <__sflush_r+0x1c>
 800a2ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dd48      	ble.n	800a352 <__sflush_r+0xae>
 800a2c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d045      	beq.n	800a352 <__sflush_r+0xae>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2cc:	682f      	ldr	r7, [r5, #0]
 800a2ce:	6a21      	ldr	r1, [r4, #32]
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	d030      	beq.n	800a336 <__sflush_r+0x92>
 800a2d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	0759      	lsls	r1, r3, #29
 800a2da:	d505      	bpl.n	800a2e8 <__sflush_r+0x44>
 800a2dc:	6863      	ldr	r3, [r4, #4]
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2e2:	b10b      	cbz	r3, 800a2e8 <__sflush_r+0x44>
 800a2e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2e6:	1ad2      	subs	r2, r2, r3
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2ec:	6a21      	ldr	r1, [r4, #32]
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b0      	blx	r6
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	d106      	bne.n	800a306 <__sflush_r+0x62>
 800a2f8:	6829      	ldr	r1, [r5, #0]
 800a2fa:	291d      	cmp	r1, #29
 800a2fc:	d82b      	bhi.n	800a356 <__sflush_r+0xb2>
 800a2fe:	4a2a      	ldr	r2, [pc, #168]	@ (800a3a8 <__sflush_r+0x104>)
 800a300:	410a      	asrs	r2, r1
 800a302:	07d6      	lsls	r6, r2, #31
 800a304:	d427      	bmi.n	800a356 <__sflush_r+0xb2>
 800a306:	2200      	movs	r2, #0
 800a308:	6062      	str	r2, [r4, #4]
 800a30a:	04d9      	lsls	r1, r3, #19
 800a30c:	6922      	ldr	r2, [r4, #16]
 800a30e:	6022      	str	r2, [r4, #0]
 800a310:	d504      	bpl.n	800a31c <__sflush_r+0x78>
 800a312:	1c42      	adds	r2, r0, #1
 800a314:	d101      	bne.n	800a31a <__sflush_r+0x76>
 800a316:	682b      	ldr	r3, [r5, #0]
 800a318:	b903      	cbnz	r3, 800a31c <__sflush_r+0x78>
 800a31a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a31c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a31e:	602f      	str	r7, [r5, #0]
 800a320:	b1b9      	cbz	r1, 800a352 <__sflush_r+0xae>
 800a322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a326:	4299      	cmp	r1, r3
 800a328:	d002      	beq.n	800a330 <__sflush_r+0x8c>
 800a32a:	4628      	mov	r0, r5
 800a32c:	f000 fd16 	bl	800ad5c <_free_r>
 800a330:	2300      	movs	r3, #0
 800a332:	6363      	str	r3, [r4, #52]	@ 0x34
 800a334:	e00d      	b.n	800a352 <__sflush_r+0xae>
 800a336:	2301      	movs	r3, #1
 800a338:	4628      	mov	r0, r5
 800a33a:	47b0      	blx	r6
 800a33c:	4602      	mov	r2, r0
 800a33e:	1c50      	adds	r0, r2, #1
 800a340:	d1c9      	bne.n	800a2d6 <__sflush_r+0x32>
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d0c6      	beq.n	800a2d6 <__sflush_r+0x32>
 800a348:	2b1d      	cmp	r3, #29
 800a34a:	d001      	beq.n	800a350 <__sflush_r+0xac>
 800a34c:	2b16      	cmp	r3, #22
 800a34e:	d11e      	bne.n	800a38e <__sflush_r+0xea>
 800a350:	602f      	str	r7, [r5, #0]
 800a352:	2000      	movs	r0, #0
 800a354:	e022      	b.n	800a39c <__sflush_r+0xf8>
 800a356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a35a:	b21b      	sxth	r3, r3
 800a35c:	e01b      	b.n	800a396 <__sflush_r+0xf2>
 800a35e:	690f      	ldr	r7, [r1, #16]
 800a360:	2f00      	cmp	r7, #0
 800a362:	d0f6      	beq.n	800a352 <__sflush_r+0xae>
 800a364:	0793      	lsls	r3, r2, #30
 800a366:	680e      	ldr	r6, [r1, #0]
 800a368:	bf08      	it	eq
 800a36a:	694b      	ldreq	r3, [r1, #20]
 800a36c:	600f      	str	r7, [r1, #0]
 800a36e:	bf18      	it	ne
 800a370:	2300      	movne	r3, #0
 800a372:	eba6 0807 	sub.w	r8, r6, r7
 800a376:	608b      	str	r3, [r1, #8]
 800a378:	f1b8 0f00 	cmp.w	r8, #0
 800a37c:	dde9      	ble.n	800a352 <__sflush_r+0xae>
 800a37e:	6a21      	ldr	r1, [r4, #32]
 800a380:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a382:	4643      	mov	r3, r8
 800a384:	463a      	mov	r2, r7
 800a386:	4628      	mov	r0, r5
 800a388:	47b0      	blx	r6
 800a38a:	2800      	cmp	r0, #0
 800a38c:	dc08      	bgt.n	800a3a0 <__sflush_r+0xfc>
 800a38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a0:	4407      	add	r7, r0
 800a3a2:	eba8 0800 	sub.w	r8, r8, r0
 800a3a6:	e7e7      	b.n	800a378 <__sflush_r+0xd4>
 800a3a8:	dfbffffe 	.word	0xdfbffffe

0800a3ac <_fflush_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	690b      	ldr	r3, [r1, #16]
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	b913      	cbnz	r3, 800a3bc <_fflush_r+0x10>
 800a3b6:	2500      	movs	r5, #0
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	b118      	cbz	r0, 800a3c6 <_fflush_r+0x1a>
 800a3be:	6a03      	ldr	r3, [r0, #32]
 800a3c0:	b90b      	cbnz	r3, 800a3c6 <_fflush_r+0x1a>
 800a3c2:	f7fe feb1 	bl	8009128 <__sinit>
 800a3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0f3      	beq.n	800a3b6 <_fflush_r+0xa>
 800a3ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3d0:	07d0      	lsls	r0, r2, #31
 800a3d2:	d404      	bmi.n	800a3de <_fflush_r+0x32>
 800a3d4:	0599      	lsls	r1, r3, #22
 800a3d6:	d402      	bmi.n	800a3de <_fflush_r+0x32>
 800a3d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3da:	f7fe ff12 	bl	8009202 <__retarget_lock_acquire_recursive>
 800a3de:	4628      	mov	r0, r5
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	f7ff ff5f 	bl	800a2a4 <__sflush_r>
 800a3e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3e8:	07da      	lsls	r2, r3, #31
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	d4e4      	bmi.n	800a3b8 <_fflush_r+0xc>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	059b      	lsls	r3, r3, #22
 800a3f2:	d4e1      	bmi.n	800a3b8 <_fflush_r+0xc>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3f6:	f7fe ff05 	bl	8009204 <__retarget_lock_release_recursive>
 800a3fa:	e7dd      	b.n	800a3b8 <_fflush_r+0xc>

0800a3fc <__malloc_lock>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	@ (800a404 <__malloc_lock+0x8>)
 800a3fe:	f7fe bf00 	b.w	8009202 <__retarget_lock_acquire_recursive>
 800a402:	bf00      	nop
 800a404:	200005b8 	.word	0x200005b8

0800a408 <__malloc_unlock>:
 800a408:	4801      	ldr	r0, [pc, #4]	@ (800a410 <__malloc_unlock+0x8>)
 800a40a:	f7fe befb 	b.w	8009204 <__retarget_lock_release_recursive>
 800a40e:	bf00      	nop
 800a410:	200005b8 	.word	0x200005b8

0800a414 <_Balloc>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	69c6      	ldr	r6, [r0, #28]
 800a418:	4604      	mov	r4, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	b976      	cbnz	r6, 800a43c <_Balloc+0x28>
 800a41e:	2010      	movs	r0, #16
 800a420:	f7ff fe96 	bl	800a150 <malloc>
 800a424:	4602      	mov	r2, r0
 800a426:	61e0      	str	r0, [r4, #28]
 800a428:	b920      	cbnz	r0, 800a434 <_Balloc+0x20>
 800a42a:	4b18      	ldr	r3, [pc, #96]	@ (800a48c <_Balloc+0x78>)
 800a42c:	4818      	ldr	r0, [pc, #96]	@ (800a490 <_Balloc+0x7c>)
 800a42e:	216b      	movs	r1, #107	@ 0x6b
 800a430:	f000 fc62 	bl	800acf8 <__assert_func>
 800a434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a438:	6006      	str	r6, [r0, #0]
 800a43a:	60c6      	str	r6, [r0, #12]
 800a43c:	69e6      	ldr	r6, [r4, #28]
 800a43e:	68f3      	ldr	r3, [r6, #12]
 800a440:	b183      	cbz	r3, 800a464 <_Balloc+0x50>
 800a442:	69e3      	ldr	r3, [r4, #28]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a44a:	b9b8      	cbnz	r0, 800a47c <_Balloc+0x68>
 800a44c:	2101      	movs	r1, #1
 800a44e:	fa01 f605 	lsl.w	r6, r1, r5
 800a452:	1d72      	adds	r2, r6, #5
 800a454:	0092      	lsls	r2, r2, #2
 800a456:	4620      	mov	r0, r4
 800a458:	f000 fc6c 	bl	800ad34 <_calloc_r>
 800a45c:	b160      	cbz	r0, 800a478 <_Balloc+0x64>
 800a45e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a462:	e00e      	b.n	800a482 <_Balloc+0x6e>
 800a464:	2221      	movs	r2, #33	@ 0x21
 800a466:	2104      	movs	r1, #4
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fc63 	bl	800ad34 <_calloc_r>
 800a46e:	69e3      	ldr	r3, [r4, #28]
 800a470:	60f0      	str	r0, [r6, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e4      	bne.n	800a442 <_Balloc+0x2e>
 800a478:	2000      	movs	r0, #0
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	6802      	ldr	r2, [r0, #0]
 800a47e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a482:	2300      	movs	r3, #0
 800a484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a488:	e7f7      	b.n	800a47a <_Balloc+0x66>
 800a48a:	bf00      	nop
 800a48c:	0800b6c9 	.word	0x0800b6c9
 800a490:	0800b75a 	.word	0x0800b75a

0800a494 <_Bfree>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	69c6      	ldr	r6, [r0, #28]
 800a498:	4605      	mov	r5, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	b976      	cbnz	r6, 800a4bc <_Bfree+0x28>
 800a49e:	2010      	movs	r0, #16
 800a4a0:	f7ff fe56 	bl	800a150 <malloc>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	61e8      	str	r0, [r5, #28]
 800a4a8:	b920      	cbnz	r0, 800a4b4 <_Bfree+0x20>
 800a4aa:	4b09      	ldr	r3, [pc, #36]	@ (800a4d0 <_Bfree+0x3c>)
 800a4ac:	4809      	ldr	r0, [pc, #36]	@ (800a4d4 <_Bfree+0x40>)
 800a4ae:	218f      	movs	r1, #143	@ 0x8f
 800a4b0:	f000 fc22 	bl	800acf8 <__assert_func>
 800a4b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b8:	6006      	str	r6, [r0, #0]
 800a4ba:	60c6      	str	r6, [r0, #12]
 800a4bc:	b13c      	cbz	r4, 800a4ce <_Bfree+0x3a>
 800a4be:	69eb      	ldr	r3, [r5, #28]
 800a4c0:	6862      	ldr	r2, [r4, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4c8:	6021      	str	r1, [r4, #0]
 800a4ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	0800b6c9 	.word	0x0800b6c9
 800a4d4:	0800b75a 	.word	0x0800b75a

0800a4d8 <__multadd>:
 800a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4dc:	690d      	ldr	r5, [r1, #16]
 800a4de:	4607      	mov	r7, r0
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	461e      	mov	r6, r3
 800a4e4:	f101 0c14 	add.w	ip, r1, #20
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	f8dc 3000 	ldr.w	r3, [ip]
 800a4ee:	b299      	uxth	r1, r3
 800a4f0:	fb02 6101 	mla	r1, r2, r1, r6
 800a4f4:	0c1e      	lsrs	r6, r3, #16
 800a4f6:	0c0b      	lsrs	r3, r1, #16
 800a4f8:	fb02 3306 	mla	r3, r2, r6, r3
 800a4fc:	b289      	uxth	r1, r1
 800a4fe:	3001      	adds	r0, #1
 800a500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a504:	4285      	cmp	r5, r0
 800a506:	f84c 1b04 	str.w	r1, [ip], #4
 800a50a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a50e:	dcec      	bgt.n	800a4ea <__multadd+0x12>
 800a510:	b30e      	cbz	r6, 800a556 <__multadd+0x7e>
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	42ab      	cmp	r3, r5
 800a516:	dc19      	bgt.n	800a54c <__multadd+0x74>
 800a518:	6861      	ldr	r1, [r4, #4]
 800a51a:	4638      	mov	r0, r7
 800a51c:	3101      	adds	r1, #1
 800a51e:	f7ff ff79 	bl	800a414 <_Balloc>
 800a522:	4680      	mov	r8, r0
 800a524:	b928      	cbnz	r0, 800a532 <__multadd+0x5a>
 800a526:	4602      	mov	r2, r0
 800a528:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <__multadd+0x84>)
 800a52a:	480d      	ldr	r0, [pc, #52]	@ (800a560 <__multadd+0x88>)
 800a52c:	21ba      	movs	r1, #186	@ 0xba
 800a52e:	f000 fbe3 	bl	800acf8 <__assert_func>
 800a532:	6922      	ldr	r2, [r4, #16]
 800a534:	3202      	adds	r2, #2
 800a536:	f104 010c 	add.w	r1, r4, #12
 800a53a:	0092      	lsls	r2, r2, #2
 800a53c:	300c      	adds	r0, #12
 800a53e:	f000 fbcd 	bl	800acdc <memcpy>
 800a542:	4621      	mov	r1, r4
 800a544:	4638      	mov	r0, r7
 800a546:	f7ff ffa5 	bl	800a494 <_Bfree>
 800a54a:	4644      	mov	r4, r8
 800a54c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a550:	3501      	adds	r5, #1
 800a552:	615e      	str	r6, [r3, #20]
 800a554:	6125      	str	r5, [r4, #16]
 800a556:	4620      	mov	r0, r4
 800a558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55c:	0800b738 	.word	0x0800b738
 800a560:	0800b75a 	.word	0x0800b75a

0800a564 <__hi0bits>:
 800a564:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a568:	4603      	mov	r3, r0
 800a56a:	bf36      	itet	cc
 800a56c:	0403      	lslcc	r3, r0, #16
 800a56e:	2000      	movcs	r0, #0
 800a570:	2010      	movcc	r0, #16
 800a572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a576:	bf3c      	itt	cc
 800a578:	021b      	lslcc	r3, r3, #8
 800a57a:	3008      	addcc	r0, #8
 800a57c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a580:	bf3c      	itt	cc
 800a582:	011b      	lslcc	r3, r3, #4
 800a584:	3004      	addcc	r0, #4
 800a586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a58a:	bf3c      	itt	cc
 800a58c:	009b      	lslcc	r3, r3, #2
 800a58e:	3002      	addcc	r0, #2
 800a590:	2b00      	cmp	r3, #0
 800a592:	db05      	blt.n	800a5a0 <__hi0bits+0x3c>
 800a594:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a598:	f100 0001 	add.w	r0, r0, #1
 800a59c:	bf08      	it	eq
 800a59e:	2020      	moveq	r0, #32
 800a5a0:	4770      	bx	lr

0800a5a2 <__lo0bits>:
 800a5a2:	6803      	ldr	r3, [r0, #0]
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	f013 0007 	ands.w	r0, r3, #7
 800a5aa:	d00b      	beq.n	800a5c4 <__lo0bits+0x22>
 800a5ac:	07d9      	lsls	r1, r3, #31
 800a5ae:	d421      	bmi.n	800a5f4 <__lo0bits+0x52>
 800a5b0:	0798      	lsls	r0, r3, #30
 800a5b2:	bf49      	itett	mi
 800a5b4:	085b      	lsrmi	r3, r3, #1
 800a5b6:	089b      	lsrpl	r3, r3, #2
 800a5b8:	2001      	movmi	r0, #1
 800a5ba:	6013      	strmi	r3, [r2, #0]
 800a5bc:	bf5c      	itt	pl
 800a5be:	6013      	strpl	r3, [r2, #0]
 800a5c0:	2002      	movpl	r0, #2
 800a5c2:	4770      	bx	lr
 800a5c4:	b299      	uxth	r1, r3
 800a5c6:	b909      	cbnz	r1, 800a5cc <__lo0bits+0x2a>
 800a5c8:	0c1b      	lsrs	r3, r3, #16
 800a5ca:	2010      	movs	r0, #16
 800a5cc:	b2d9      	uxtb	r1, r3
 800a5ce:	b909      	cbnz	r1, 800a5d4 <__lo0bits+0x32>
 800a5d0:	3008      	adds	r0, #8
 800a5d2:	0a1b      	lsrs	r3, r3, #8
 800a5d4:	0719      	lsls	r1, r3, #28
 800a5d6:	bf04      	itt	eq
 800a5d8:	091b      	lsreq	r3, r3, #4
 800a5da:	3004      	addeq	r0, #4
 800a5dc:	0799      	lsls	r1, r3, #30
 800a5de:	bf04      	itt	eq
 800a5e0:	089b      	lsreq	r3, r3, #2
 800a5e2:	3002      	addeq	r0, #2
 800a5e4:	07d9      	lsls	r1, r3, #31
 800a5e6:	d403      	bmi.n	800a5f0 <__lo0bits+0x4e>
 800a5e8:	085b      	lsrs	r3, r3, #1
 800a5ea:	f100 0001 	add.w	r0, r0, #1
 800a5ee:	d003      	beq.n	800a5f8 <__lo0bits+0x56>
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	4770      	bx	lr
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	4770      	bx	lr
 800a5f8:	2020      	movs	r0, #32
 800a5fa:	4770      	bx	lr

0800a5fc <__i2b>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	460c      	mov	r4, r1
 800a600:	2101      	movs	r1, #1
 800a602:	f7ff ff07 	bl	800a414 <_Balloc>
 800a606:	4602      	mov	r2, r0
 800a608:	b928      	cbnz	r0, 800a616 <__i2b+0x1a>
 800a60a:	4b05      	ldr	r3, [pc, #20]	@ (800a620 <__i2b+0x24>)
 800a60c:	4805      	ldr	r0, [pc, #20]	@ (800a624 <__i2b+0x28>)
 800a60e:	f240 1145 	movw	r1, #325	@ 0x145
 800a612:	f000 fb71 	bl	800acf8 <__assert_func>
 800a616:	2301      	movs	r3, #1
 800a618:	6144      	str	r4, [r0, #20]
 800a61a:	6103      	str	r3, [r0, #16]
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	bf00      	nop
 800a620:	0800b738 	.word	0x0800b738
 800a624:	0800b75a 	.word	0x0800b75a

0800a628 <__multiply>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	4614      	mov	r4, r2
 800a62e:	690a      	ldr	r2, [r1, #16]
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	429a      	cmp	r2, r3
 800a634:	bfa8      	it	ge
 800a636:	4623      	movge	r3, r4
 800a638:	460f      	mov	r7, r1
 800a63a:	bfa4      	itt	ge
 800a63c:	460c      	movge	r4, r1
 800a63e:	461f      	movge	r7, r3
 800a640:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a644:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a648:	68a3      	ldr	r3, [r4, #8]
 800a64a:	6861      	ldr	r1, [r4, #4]
 800a64c:	eb0a 0609 	add.w	r6, sl, r9
 800a650:	42b3      	cmp	r3, r6
 800a652:	b085      	sub	sp, #20
 800a654:	bfb8      	it	lt
 800a656:	3101      	addlt	r1, #1
 800a658:	f7ff fedc 	bl	800a414 <_Balloc>
 800a65c:	b930      	cbnz	r0, 800a66c <__multiply+0x44>
 800a65e:	4602      	mov	r2, r0
 800a660:	4b44      	ldr	r3, [pc, #272]	@ (800a774 <__multiply+0x14c>)
 800a662:	4845      	ldr	r0, [pc, #276]	@ (800a778 <__multiply+0x150>)
 800a664:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a668:	f000 fb46 	bl	800acf8 <__assert_func>
 800a66c:	f100 0514 	add.w	r5, r0, #20
 800a670:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a674:	462b      	mov	r3, r5
 800a676:	2200      	movs	r2, #0
 800a678:	4543      	cmp	r3, r8
 800a67a:	d321      	bcc.n	800a6c0 <__multiply+0x98>
 800a67c:	f107 0114 	add.w	r1, r7, #20
 800a680:	f104 0214 	add.w	r2, r4, #20
 800a684:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a688:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a68c:	9302      	str	r3, [sp, #8]
 800a68e:	1b13      	subs	r3, r2, r4
 800a690:	3b15      	subs	r3, #21
 800a692:	f023 0303 	bic.w	r3, r3, #3
 800a696:	3304      	adds	r3, #4
 800a698:	f104 0715 	add.w	r7, r4, #21
 800a69c:	42ba      	cmp	r2, r7
 800a69e:	bf38      	it	cc
 800a6a0:	2304      	movcc	r3, #4
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	9b02      	ldr	r3, [sp, #8]
 800a6a6:	9103      	str	r1, [sp, #12]
 800a6a8:	428b      	cmp	r3, r1
 800a6aa:	d80c      	bhi.n	800a6c6 <__multiply+0x9e>
 800a6ac:	2e00      	cmp	r6, #0
 800a6ae:	dd03      	ble.n	800a6b8 <__multiply+0x90>
 800a6b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d05b      	beq.n	800a770 <__multiply+0x148>
 800a6b8:	6106      	str	r6, [r0, #16]
 800a6ba:	b005      	add	sp, #20
 800a6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c0:	f843 2b04 	str.w	r2, [r3], #4
 800a6c4:	e7d8      	b.n	800a678 <__multiply+0x50>
 800a6c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6ca:	f1ba 0f00 	cmp.w	sl, #0
 800a6ce:	d024      	beq.n	800a71a <__multiply+0xf2>
 800a6d0:	f104 0e14 	add.w	lr, r4, #20
 800a6d4:	46a9      	mov	r9, r5
 800a6d6:	f04f 0c00 	mov.w	ip, #0
 800a6da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6de:	f8d9 3000 	ldr.w	r3, [r9]
 800a6e2:	fa1f fb87 	uxth.w	fp, r7
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a6f0:	f8d9 7000 	ldr.w	r7, [r9]
 800a6f4:	4463      	add	r3, ip
 800a6f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a6fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800a6fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a702:	b29b      	uxth	r3, r3
 800a704:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a708:	4572      	cmp	r2, lr
 800a70a:	f849 3b04 	str.w	r3, [r9], #4
 800a70e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a712:	d8e2      	bhi.n	800a6da <__multiply+0xb2>
 800a714:	9b01      	ldr	r3, [sp, #4]
 800a716:	f845 c003 	str.w	ip, [r5, r3]
 800a71a:	9b03      	ldr	r3, [sp, #12]
 800a71c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a720:	3104      	adds	r1, #4
 800a722:	f1b9 0f00 	cmp.w	r9, #0
 800a726:	d021      	beq.n	800a76c <__multiply+0x144>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	f104 0c14 	add.w	ip, r4, #20
 800a72e:	46ae      	mov	lr, r5
 800a730:	f04f 0a00 	mov.w	sl, #0
 800a734:	f8bc b000 	ldrh.w	fp, [ip]
 800a738:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a73c:	fb09 770b 	mla	r7, r9, fp, r7
 800a740:	4457      	add	r7, sl
 800a742:	b29b      	uxth	r3, r3
 800a744:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a748:	f84e 3b04 	str.w	r3, [lr], #4
 800a74c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a750:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a754:	f8be 3000 	ldrh.w	r3, [lr]
 800a758:	fb09 330a 	mla	r3, r9, sl, r3
 800a75c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a760:	4562      	cmp	r2, ip
 800a762:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a766:	d8e5      	bhi.n	800a734 <__multiply+0x10c>
 800a768:	9f01      	ldr	r7, [sp, #4]
 800a76a:	51eb      	str	r3, [r5, r7]
 800a76c:	3504      	adds	r5, #4
 800a76e:	e799      	b.n	800a6a4 <__multiply+0x7c>
 800a770:	3e01      	subs	r6, #1
 800a772:	e79b      	b.n	800a6ac <__multiply+0x84>
 800a774:	0800b738 	.word	0x0800b738
 800a778:	0800b75a 	.word	0x0800b75a

0800a77c <__pow5mult>:
 800a77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a780:	4615      	mov	r5, r2
 800a782:	f012 0203 	ands.w	r2, r2, #3
 800a786:	4607      	mov	r7, r0
 800a788:	460e      	mov	r6, r1
 800a78a:	d007      	beq.n	800a79c <__pow5mult+0x20>
 800a78c:	4c25      	ldr	r4, [pc, #148]	@ (800a824 <__pow5mult+0xa8>)
 800a78e:	3a01      	subs	r2, #1
 800a790:	2300      	movs	r3, #0
 800a792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a796:	f7ff fe9f 	bl	800a4d8 <__multadd>
 800a79a:	4606      	mov	r6, r0
 800a79c:	10ad      	asrs	r5, r5, #2
 800a79e:	d03d      	beq.n	800a81c <__pow5mult+0xa0>
 800a7a0:	69fc      	ldr	r4, [r7, #28]
 800a7a2:	b97c      	cbnz	r4, 800a7c4 <__pow5mult+0x48>
 800a7a4:	2010      	movs	r0, #16
 800a7a6:	f7ff fcd3 	bl	800a150 <malloc>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	61f8      	str	r0, [r7, #28]
 800a7ae:	b928      	cbnz	r0, 800a7bc <__pow5mult+0x40>
 800a7b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a828 <__pow5mult+0xac>)
 800a7b2:	481e      	ldr	r0, [pc, #120]	@ (800a82c <__pow5mult+0xb0>)
 800a7b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7b8:	f000 fa9e 	bl	800acf8 <__assert_func>
 800a7bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7c0:	6004      	str	r4, [r0, #0]
 800a7c2:	60c4      	str	r4, [r0, #12]
 800a7c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a7c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7cc:	b94c      	cbnz	r4, 800a7e2 <__pow5mult+0x66>
 800a7ce:	f240 2171 	movw	r1, #625	@ 0x271
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	f7ff ff12 	bl	800a5fc <__i2b>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7de:	4604      	mov	r4, r0
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	f04f 0900 	mov.w	r9, #0
 800a7e6:	07eb      	lsls	r3, r5, #31
 800a7e8:	d50a      	bpl.n	800a800 <__pow5mult+0x84>
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	f7ff ff1a 	bl	800a628 <__multiply>
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	f7ff fe4b 	bl	800a494 <_Bfree>
 800a7fe:	4646      	mov	r6, r8
 800a800:	106d      	asrs	r5, r5, #1
 800a802:	d00b      	beq.n	800a81c <__pow5mult+0xa0>
 800a804:	6820      	ldr	r0, [r4, #0]
 800a806:	b938      	cbnz	r0, 800a818 <__pow5mult+0x9c>
 800a808:	4622      	mov	r2, r4
 800a80a:	4621      	mov	r1, r4
 800a80c:	4638      	mov	r0, r7
 800a80e:	f7ff ff0b 	bl	800a628 <__multiply>
 800a812:	6020      	str	r0, [r4, #0]
 800a814:	f8c0 9000 	str.w	r9, [r0]
 800a818:	4604      	mov	r4, r0
 800a81a:	e7e4      	b.n	800a7e6 <__pow5mult+0x6a>
 800a81c:	4630      	mov	r0, r6
 800a81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a822:	bf00      	nop
 800a824:	0800b7b4 	.word	0x0800b7b4
 800a828:	0800b6c9 	.word	0x0800b6c9
 800a82c:	0800b75a 	.word	0x0800b75a

0800a830 <__lshift>:
 800a830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a834:	460c      	mov	r4, r1
 800a836:	6849      	ldr	r1, [r1, #4]
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a83e:	68a3      	ldr	r3, [r4, #8]
 800a840:	4607      	mov	r7, r0
 800a842:	4691      	mov	r9, r2
 800a844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a848:	f108 0601 	add.w	r6, r8, #1
 800a84c:	42b3      	cmp	r3, r6
 800a84e:	db0b      	blt.n	800a868 <__lshift+0x38>
 800a850:	4638      	mov	r0, r7
 800a852:	f7ff fddf 	bl	800a414 <_Balloc>
 800a856:	4605      	mov	r5, r0
 800a858:	b948      	cbnz	r0, 800a86e <__lshift+0x3e>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b28      	ldr	r3, [pc, #160]	@ (800a900 <__lshift+0xd0>)
 800a85e:	4829      	ldr	r0, [pc, #164]	@ (800a904 <__lshift+0xd4>)
 800a860:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a864:	f000 fa48 	bl	800acf8 <__assert_func>
 800a868:	3101      	adds	r1, #1
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	e7ee      	b.n	800a84c <__lshift+0x1c>
 800a86e:	2300      	movs	r3, #0
 800a870:	f100 0114 	add.w	r1, r0, #20
 800a874:	f100 0210 	add.w	r2, r0, #16
 800a878:	4618      	mov	r0, r3
 800a87a:	4553      	cmp	r3, sl
 800a87c:	db33      	blt.n	800a8e6 <__lshift+0xb6>
 800a87e:	6920      	ldr	r0, [r4, #16]
 800a880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a884:	f104 0314 	add.w	r3, r4, #20
 800a888:	f019 091f 	ands.w	r9, r9, #31
 800a88c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a894:	d02b      	beq.n	800a8ee <__lshift+0xbe>
 800a896:	f1c9 0e20 	rsb	lr, r9, #32
 800a89a:	468a      	mov	sl, r1
 800a89c:	2200      	movs	r2, #0
 800a89e:	6818      	ldr	r0, [r3, #0]
 800a8a0:	fa00 f009 	lsl.w	r0, r0, r9
 800a8a4:	4310      	orrs	r0, r2
 800a8a6:	f84a 0b04 	str.w	r0, [sl], #4
 800a8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ae:	459c      	cmp	ip, r3
 800a8b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8b4:	d8f3      	bhi.n	800a89e <__lshift+0x6e>
 800a8b6:	ebac 0304 	sub.w	r3, ip, r4
 800a8ba:	3b15      	subs	r3, #21
 800a8bc:	f023 0303 	bic.w	r3, r3, #3
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	f104 0015 	add.w	r0, r4, #21
 800a8c6:	4584      	cmp	ip, r0
 800a8c8:	bf38      	it	cc
 800a8ca:	2304      	movcc	r3, #4
 800a8cc:	50ca      	str	r2, [r1, r3]
 800a8ce:	b10a      	cbz	r2, 800a8d4 <__lshift+0xa4>
 800a8d0:	f108 0602 	add.w	r6, r8, #2
 800a8d4:	3e01      	subs	r6, #1
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	612e      	str	r6, [r5, #16]
 800a8da:	4621      	mov	r1, r4
 800a8dc:	f7ff fdda 	bl	800a494 <_Bfree>
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	e7c5      	b.n	800a87a <__lshift+0x4a>
 800a8ee:	3904      	subs	r1, #4
 800a8f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8f8:	459c      	cmp	ip, r3
 800a8fa:	d8f9      	bhi.n	800a8f0 <__lshift+0xc0>
 800a8fc:	e7ea      	b.n	800a8d4 <__lshift+0xa4>
 800a8fe:	bf00      	nop
 800a900:	0800b738 	.word	0x0800b738
 800a904:	0800b75a 	.word	0x0800b75a

0800a908 <__mcmp>:
 800a908:	690a      	ldr	r2, [r1, #16]
 800a90a:	4603      	mov	r3, r0
 800a90c:	6900      	ldr	r0, [r0, #16]
 800a90e:	1a80      	subs	r0, r0, r2
 800a910:	b530      	push	{r4, r5, lr}
 800a912:	d10e      	bne.n	800a932 <__mcmp+0x2a>
 800a914:	3314      	adds	r3, #20
 800a916:	3114      	adds	r1, #20
 800a918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a91c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a928:	4295      	cmp	r5, r2
 800a92a:	d003      	beq.n	800a934 <__mcmp+0x2c>
 800a92c:	d205      	bcs.n	800a93a <__mcmp+0x32>
 800a92e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a932:	bd30      	pop	{r4, r5, pc}
 800a934:	42a3      	cmp	r3, r4
 800a936:	d3f3      	bcc.n	800a920 <__mcmp+0x18>
 800a938:	e7fb      	b.n	800a932 <__mcmp+0x2a>
 800a93a:	2001      	movs	r0, #1
 800a93c:	e7f9      	b.n	800a932 <__mcmp+0x2a>
	...

0800a940 <__mdiff>:
 800a940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	4689      	mov	r9, r1
 800a946:	4606      	mov	r6, r0
 800a948:	4611      	mov	r1, r2
 800a94a:	4648      	mov	r0, r9
 800a94c:	4614      	mov	r4, r2
 800a94e:	f7ff ffdb 	bl	800a908 <__mcmp>
 800a952:	1e05      	subs	r5, r0, #0
 800a954:	d112      	bne.n	800a97c <__mdiff+0x3c>
 800a956:	4629      	mov	r1, r5
 800a958:	4630      	mov	r0, r6
 800a95a:	f7ff fd5b 	bl	800a414 <_Balloc>
 800a95e:	4602      	mov	r2, r0
 800a960:	b928      	cbnz	r0, 800a96e <__mdiff+0x2e>
 800a962:	4b3f      	ldr	r3, [pc, #252]	@ (800aa60 <__mdiff+0x120>)
 800a964:	f240 2137 	movw	r1, #567	@ 0x237
 800a968:	483e      	ldr	r0, [pc, #248]	@ (800aa64 <__mdiff+0x124>)
 800a96a:	f000 f9c5 	bl	800acf8 <__assert_func>
 800a96e:	2301      	movs	r3, #1
 800a970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a974:	4610      	mov	r0, r2
 800a976:	b003      	add	sp, #12
 800a978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97c:	bfbc      	itt	lt
 800a97e:	464b      	movlt	r3, r9
 800a980:	46a1      	movlt	r9, r4
 800a982:	4630      	mov	r0, r6
 800a984:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a988:	bfba      	itte	lt
 800a98a:	461c      	movlt	r4, r3
 800a98c:	2501      	movlt	r5, #1
 800a98e:	2500      	movge	r5, #0
 800a990:	f7ff fd40 	bl	800a414 <_Balloc>
 800a994:	4602      	mov	r2, r0
 800a996:	b918      	cbnz	r0, 800a9a0 <__mdiff+0x60>
 800a998:	4b31      	ldr	r3, [pc, #196]	@ (800aa60 <__mdiff+0x120>)
 800a99a:	f240 2145 	movw	r1, #581	@ 0x245
 800a99e:	e7e3      	b.n	800a968 <__mdiff+0x28>
 800a9a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9a4:	6926      	ldr	r6, [r4, #16]
 800a9a6:	60c5      	str	r5, [r0, #12]
 800a9a8:	f109 0310 	add.w	r3, r9, #16
 800a9ac:	f109 0514 	add.w	r5, r9, #20
 800a9b0:	f104 0e14 	add.w	lr, r4, #20
 800a9b4:	f100 0b14 	add.w	fp, r0, #20
 800a9b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	46d9      	mov	r9, fp
 800a9c4:	f04f 0c00 	mov.w	ip, #0
 800a9c8:	9b01      	ldr	r3, [sp, #4]
 800a9ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9d2:	9301      	str	r3, [sp, #4]
 800a9d4:	fa1f f38a 	uxth.w	r3, sl
 800a9d8:	4619      	mov	r1, r3
 800a9da:	b283      	uxth	r3, r0
 800a9dc:	1acb      	subs	r3, r1, r3
 800a9de:	0c00      	lsrs	r0, r0, #16
 800a9e0:	4463      	add	r3, ip
 800a9e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9f0:	4576      	cmp	r6, lr
 800a9f2:	f849 3b04 	str.w	r3, [r9], #4
 800a9f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9fa:	d8e5      	bhi.n	800a9c8 <__mdiff+0x88>
 800a9fc:	1b33      	subs	r3, r6, r4
 800a9fe:	3b15      	subs	r3, #21
 800aa00:	f023 0303 	bic.w	r3, r3, #3
 800aa04:	3415      	adds	r4, #21
 800aa06:	3304      	adds	r3, #4
 800aa08:	42a6      	cmp	r6, r4
 800aa0a:	bf38      	it	cc
 800aa0c:	2304      	movcc	r3, #4
 800aa0e:	441d      	add	r5, r3
 800aa10:	445b      	add	r3, fp
 800aa12:	461e      	mov	r6, r3
 800aa14:	462c      	mov	r4, r5
 800aa16:	4544      	cmp	r4, r8
 800aa18:	d30e      	bcc.n	800aa38 <__mdiff+0xf8>
 800aa1a:	f108 0103 	add.w	r1, r8, #3
 800aa1e:	1b49      	subs	r1, r1, r5
 800aa20:	f021 0103 	bic.w	r1, r1, #3
 800aa24:	3d03      	subs	r5, #3
 800aa26:	45a8      	cmp	r8, r5
 800aa28:	bf38      	it	cc
 800aa2a:	2100      	movcc	r1, #0
 800aa2c:	440b      	add	r3, r1
 800aa2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa32:	b191      	cbz	r1, 800aa5a <__mdiff+0x11a>
 800aa34:	6117      	str	r7, [r2, #16]
 800aa36:	e79d      	b.n	800a974 <__mdiff+0x34>
 800aa38:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa3c:	46e6      	mov	lr, ip
 800aa3e:	0c08      	lsrs	r0, r1, #16
 800aa40:	fa1c fc81 	uxtah	ip, ip, r1
 800aa44:	4471      	add	r1, lr
 800aa46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa4a:	b289      	uxth	r1, r1
 800aa4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa50:	f846 1b04 	str.w	r1, [r6], #4
 800aa54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa58:	e7dd      	b.n	800aa16 <__mdiff+0xd6>
 800aa5a:	3f01      	subs	r7, #1
 800aa5c:	e7e7      	b.n	800aa2e <__mdiff+0xee>
 800aa5e:	bf00      	nop
 800aa60:	0800b738 	.word	0x0800b738
 800aa64:	0800b75a 	.word	0x0800b75a

0800aa68 <__d2b>:
 800aa68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	2101      	movs	r1, #1
 800aa70:	ec59 8b10 	vmov	r8, r9, d0
 800aa74:	4616      	mov	r6, r2
 800aa76:	f7ff fccd 	bl	800a414 <_Balloc>
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	b930      	cbnz	r0, 800aa8c <__d2b+0x24>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	4b23      	ldr	r3, [pc, #140]	@ (800ab10 <__d2b+0xa8>)
 800aa82:	4824      	ldr	r0, [pc, #144]	@ (800ab14 <__d2b+0xac>)
 800aa84:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa88:	f000 f936 	bl	800acf8 <__assert_func>
 800aa8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa94:	b10d      	cbz	r5, 800aa9a <__d2b+0x32>
 800aa96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	f1b8 0300 	subs.w	r3, r8, #0
 800aaa0:	d023      	beq.n	800aaea <__d2b+0x82>
 800aaa2:	4668      	mov	r0, sp
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	f7ff fd7c 	bl	800a5a2 <__lo0bits>
 800aaaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aaae:	b1d0      	cbz	r0, 800aae6 <__d2b+0x7e>
 800aab0:	f1c0 0320 	rsb	r3, r0, #32
 800aab4:	fa02 f303 	lsl.w	r3, r2, r3
 800aab8:	430b      	orrs	r3, r1
 800aaba:	40c2      	lsrs	r2, r0
 800aabc:	6163      	str	r3, [r4, #20]
 800aabe:	9201      	str	r2, [sp, #4]
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	61a3      	str	r3, [r4, #24]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	bf0c      	ite	eq
 800aac8:	2201      	moveq	r2, #1
 800aaca:	2202      	movne	r2, #2
 800aacc:	6122      	str	r2, [r4, #16]
 800aace:	b1a5      	cbz	r5, 800aafa <__d2b+0x92>
 800aad0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aad4:	4405      	add	r5, r0
 800aad6:	603d      	str	r5, [r7, #0]
 800aad8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aadc:	6030      	str	r0, [r6, #0]
 800aade:	4620      	mov	r0, r4
 800aae0:	b003      	add	sp, #12
 800aae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aae6:	6161      	str	r1, [r4, #20]
 800aae8:	e7ea      	b.n	800aac0 <__d2b+0x58>
 800aaea:	a801      	add	r0, sp, #4
 800aaec:	f7ff fd59 	bl	800a5a2 <__lo0bits>
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	6163      	str	r3, [r4, #20]
 800aaf4:	3020      	adds	r0, #32
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	e7e8      	b.n	800aacc <__d2b+0x64>
 800aafa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aafe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab02:	6038      	str	r0, [r7, #0]
 800ab04:	6918      	ldr	r0, [r3, #16]
 800ab06:	f7ff fd2d 	bl	800a564 <__hi0bits>
 800ab0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab0e:	e7e5      	b.n	800aadc <__d2b+0x74>
 800ab10:	0800b738 	.word	0x0800b738
 800ab14:	0800b75a 	.word	0x0800b75a

0800ab18 <__sread>:
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab20:	f000 f8a8 	bl	800ac74 <_read_r>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	bfab      	itete	ge
 800ab28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab2c:	181b      	addge	r3, r3, r0
 800ab2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab32:	bfac      	ite	ge
 800ab34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab36:	81a3      	strhlt	r3, [r4, #12]
 800ab38:	bd10      	pop	{r4, pc}

0800ab3a <__swrite>:
 800ab3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3e:	461f      	mov	r7, r3
 800ab40:	898b      	ldrh	r3, [r1, #12]
 800ab42:	05db      	lsls	r3, r3, #23
 800ab44:	4605      	mov	r5, r0
 800ab46:	460c      	mov	r4, r1
 800ab48:	4616      	mov	r6, r2
 800ab4a:	d505      	bpl.n	800ab58 <__swrite+0x1e>
 800ab4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab50:	2302      	movs	r3, #2
 800ab52:	2200      	movs	r2, #0
 800ab54:	f000 f87c 	bl	800ac50 <_lseek_r>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab62:	81a3      	strh	r3, [r4, #12]
 800ab64:	4632      	mov	r2, r6
 800ab66:	463b      	mov	r3, r7
 800ab68:	4628      	mov	r0, r5
 800ab6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6e:	f000 b8a3 	b.w	800acb8 <_write_r>

0800ab72 <__sseek>:
 800ab72:	b510      	push	{r4, lr}
 800ab74:	460c      	mov	r4, r1
 800ab76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7a:	f000 f869 	bl	800ac50 <_lseek_r>
 800ab7e:	1c43      	adds	r3, r0, #1
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	bf15      	itete	ne
 800ab84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab8e:	81a3      	strheq	r3, [r4, #12]
 800ab90:	bf18      	it	ne
 800ab92:	81a3      	strhne	r3, [r4, #12]
 800ab94:	bd10      	pop	{r4, pc}

0800ab96 <__sclose>:
 800ab96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9a:	f000 b849 	b.w	800ac30 <_close_r>

0800ab9e <_realloc_r>:
 800ab9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba2:	4680      	mov	r8, r0
 800aba4:	4615      	mov	r5, r2
 800aba6:	460c      	mov	r4, r1
 800aba8:	b921      	cbnz	r1, 800abb4 <_realloc_r+0x16>
 800abaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abae:	4611      	mov	r1, r2
 800abb0:	f7ff baf8 	b.w	800a1a4 <_malloc_r>
 800abb4:	b92a      	cbnz	r2, 800abc2 <_realloc_r+0x24>
 800abb6:	f000 f8d1 	bl	800ad5c <_free_r>
 800abba:	2400      	movs	r4, #0
 800abbc:	4620      	mov	r0, r4
 800abbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc2:	f000 f927 	bl	800ae14 <_malloc_usable_size_r>
 800abc6:	4285      	cmp	r5, r0
 800abc8:	4606      	mov	r6, r0
 800abca:	d802      	bhi.n	800abd2 <_realloc_r+0x34>
 800abcc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800abd0:	d8f4      	bhi.n	800abbc <_realloc_r+0x1e>
 800abd2:	4629      	mov	r1, r5
 800abd4:	4640      	mov	r0, r8
 800abd6:	f7ff fae5 	bl	800a1a4 <_malloc_r>
 800abda:	4607      	mov	r7, r0
 800abdc:	2800      	cmp	r0, #0
 800abde:	d0ec      	beq.n	800abba <_realloc_r+0x1c>
 800abe0:	42b5      	cmp	r5, r6
 800abe2:	462a      	mov	r2, r5
 800abe4:	4621      	mov	r1, r4
 800abe6:	bf28      	it	cs
 800abe8:	4632      	movcs	r2, r6
 800abea:	f000 f877 	bl	800acdc <memcpy>
 800abee:	4621      	mov	r1, r4
 800abf0:	4640      	mov	r0, r8
 800abf2:	f000 f8b3 	bl	800ad5c <_free_r>
 800abf6:	463c      	mov	r4, r7
 800abf8:	e7e0      	b.n	800abbc <_realloc_r+0x1e>

0800abfa <memmove>:
 800abfa:	4288      	cmp	r0, r1
 800abfc:	b510      	push	{r4, lr}
 800abfe:	eb01 0402 	add.w	r4, r1, r2
 800ac02:	d902      	bls.n	800ac0a <memmove+0x10>
 800ac04:	4284      	cmp	r4, r0
 800ac06:	4623      	mov	r3, r4
 800ac08:	d807      	bhi.n	800ac1a <memmove+0x20>
 800ac0a:	1e43      	subs	r3, r0, #1
 800ac0c:	42a1      	cmp	r1, r4
 800ac0e:	d008      	beq.n	800ac22 <memmove+0x28>
 800ac10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac18:	e7f8      	b.n	800ac0c <memmove+0x12>
 800ac1a:	4402      	add	r2, r0
 800ac1c:	4601      	mov	r1, r0
 800ac1e:	428a      	cmp	r2, r1
 800ac20:	d100      	bne.n	800ac24 <memmove+0x2a>
 800ac22:	bd10      	pop	{r4, pc}
 800ac24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac2c:	e7f7      	b.n	800ac1e <memmove+0x24>
	...

0800ac30 <_close_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d06      	ldr	r5, [pc, #24]	@ (800ac4c <_close_r+0x1c>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	f7f7 f8ac 	bl	8001d98 <_close>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d102      	bne.n	800ac4a <_close_r+0x1a>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	b103      	cbz	r3, 800ac4a <_close_r+0x1a>
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	bd38      	pop	{r3, r4, r5, pc}
 800ac4c:	200005c4 	.word	0x200005c4

0800ac50 <_lseek_r>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	4d07      	ldr	r5, [pc, #28]	@ (800ac70 <_lseek_r+0x20>)
 800ac54:	4604      	mov	r4, r0
 800ac56:	4608      	mov	r0, r1
 800ac58:	4611      	mov	r1, r2
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	602a      	str	r2, [r5, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f7f7 f8c1 	bl	8001de6 <_lseek>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d102      	bne.n	800ac6e <_lseek_r+0x1e>
 800ac68:	682b      	ldr	r3, [r5, #0]
 800ac6a:	b103      	cbz	r3, 800ac6e <_lseek_r+0x1e>
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
 800ac70:	200005c4 	.word	0x200005c4

0800ac74 <_read_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4d07      	ldr	r5, [pc, #28]	@ (800ac94 <_read_r+0x20>)
 800ac78:	4604      	mov	r4, r0
 800ac7a:	4608      	mov	r0, r1
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	602a      	str	r2, [r5, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	f7f7 f86b 	bl	8001d5e <_read>
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	d102      	bne.n	800ac92 <_read_r+0x1e>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	b103      	cbz	r3, 800ac92 <_read_r+0x1e>
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
 800ac94:	200005c4 	.word	0x200005c4

0800ac98 <_sbrk_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4d06      	ldr	r5, [pc, #24]	@ (800acb4 <_sbrk_r+0x1c>)
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	602b      	str	r3, [r5, #0]
 800aca4:	f7f7 f8ac 	bl	8001e00 <_sbrk>
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	d102      	bne.n	800acb2 <_sbrk_r+0x1a>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	b103      	cbz	r3, 800acb2 <_sbrk_r+0x1a>
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
 800acb4:	200005c4 	.word	0x200005c4

0800acb8 <_write_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4d07      	ldr	r5, [pc, #28]	@ (800acd8 <_write_r+0x20>)
 800acbc:	4604      	mov	r4, r0
 800acbe:	4608      	mov	r0, r1
 800acc0:	4611      	mov	r1, r2
 800acc2:	2200      	movs	r2, #0
 800acc4:	602a      	str	r2, [r5, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	f7f6 fcf8 	bl	80016bc <_write>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d102      	bne.n	800acd6 <_write_r+0x1e>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b103      	cbz	r3, 800acd6 <_write_r+0x1e>
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	200005c4 	.word	0x200005c4

0800acdc <memcpy>:
 800acdc:	440a      	add	r2, r1
 800acde:	4291      	cmp	r1, r2
 800ace0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ace4:	d100      	bne.n	800ace8 <memcpy+0xc>
 800ace6:	4770      	bx	lr
 800ace8:	b510      	push	{r4, lr}
 800acea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acf2:	4291      	cmp	r1, r2
 800acf4:	d1f9      	bne.n	800acea <memcpy+0xe>
 800acf6:	bd10      	pop	{r4, pc}

0800acf8 <__assert_func>:
 800acf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acfa:	4614      	mov	r4, r2
 800acfc:	461a      	mov	r2, r3
 800acfe:	4b09      	ldr	r3, [pc, #36]	@ (800ad24 <__assert_func+0x2c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4605      	mov	r5, r0
 800ad04:	68d8      	ldr	r0, [r3, #12]
 800ad06:	b954      	cbnz	r4, 800ad1e <__assert_func+0x26>
 800ad08:	4b07      	ldr	r3, [pc, #28]	@ (800ad28 <__assert_func+0x30>)
 800ad0a:	461c      	mov	r4, r3
 800ad0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad10:	9100      	str	r1, [sp, #0]
 800ad12:	462b      	mov	r3, r5
 800ad14:	4905      	ldr	r1, [pc, #20]	@ (800ad2c <__assert_func+0x34>)
 800ad16:	f000 f885 	bl	800ae24 <fiprintf>
 800ad1a:	f000 f8a2 	bl	800ae62 <abort>
 800ad1e:	4b04      	ldr	r3, [pc, #16]	@ (800ad30 <__assert_func+0x38>)
 800ad20:	e7f4      	b.n	800ad0c <__assert_func+0x14>
 800ad22:	bf00      	nop
 800ad24:	2000002c 	.word	0x2000002c
 800ad28:	0800b9f6 	.word	0x0800b9f6
 800ad2c:	0800b9c8 	.word	0x0800b9c8
 800ad30:	0800b9bb 	.word	0x0800b9bb

0800ad34 <_calloc_r>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	fba1 5402 	umull	r5, r4, r1, r2
 800ad3a:	b93c      	cbnz	r4, 800ad4c <_calloc_r+0x18>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	f7ff fa31 	bl	800a1a4 <_malloc_r>
 800ad42:	4606      	mov	r6, r0
 800ad44:	b928      	cbnz	r0, 800ad52 <_calloc_r+0x1e>
 800ad46:	2600      	movs	r6, #0
 800ad48:	4630      	mov	r0, r6
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}
 800ad4c:	220c      	movs	r2, #12
 800ad4e:	6002      	str	r2, [r0, #0]
 800ad50:	e7f9      	b.n	800ad46 <_calloc_r+0x12>
 800ad52:	462a      	mov	r2, r5
 800ad54:	4621      	mov	r1, r4
 800ad56:	f7fe fa1d 	bl	8009194 <memset>
 800ad5a:	e7f5      	b.n	800ad48 <_calloc_r+0x14>

0800ad5c <_free_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4605      	mov	r5, r0
 800ad60:	2900      	cmp	r1, #0
 800ad62:	d041      	beq.n	800ade8 <_free_r+0x8c>
 800ad64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad68:	1f0c      	subs	r4, r1, #4
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	bfb8      	it	lt
 800ad6e:	18e4      	addlt	r4, r4, r3
 800ad70:	f7ff fb44 	bl	800a3fc <__malloc_lock>
 800ad74:	4a1d      	ldr	r2, [pc, #116]	@ (800adec <_free_r+0x90>)
 800ad76:	6813      	ldr	r3, [r2, #0]
 800ad78:	b933      	cbnz	r3, 800ad88 <_free_r+0x2c>
 800ad7a:	6063      	str	r3, [r4, #4]
 800ad7c:	6014      	str	r4, [r2, #0]
 800ad7e:	4628      	mov	r0, r5
 800ad80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad84:	f7ff bb40 	b.w	800a408 <__malloc_unlock>
 800ad88:	42a3      	cmp	r3, r4
 800ad8a:	d908      	bls.n	800ad9e <_free_r+0x42>
 800ad8c:	6820      	ldr	r0, [r4, #0]
 800ad8e:	1821      	adds	r1, r4, r0
 800ad90:	428b      	cmp	r3, r1
 800ad92:	bf01      	itttt	eq
 800ad94:	6819      	ldreq	r1, [r3, #0]
 800ad96:	685b      	ldreq	r3, [r3, #4]
 800ad98:	1809      	addeq	r1, r1, r0
 800ad9a:	6021      	streq	r1, [r4, #0]
 800ad9c:	e7ed      	b.n	800ad7a <_free_r+0x1e>
 800ad9e:	461a      	mov	r2, r3
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	b10b      	cbz	r3, 800ada8 <_free_r+0x4c>
 800ada4:	42a3      	cmp	r3, r4
 800ada6:	d9fa      	bls.n	800ad9e <_free_r+0x42>
 800ada8:	6811      	ldr	r1, [r2, #0]
 800adaa:	1850      	adds	r0, r2, r1
 800adac:	42a0      	cmp	r0, r4
 800adae:	d10b      	bne.n	800adc8 <_free_r+0x6c>
 800adb0:	6820      	ldr	r0, [r4, #0]
 800adb2:	4401      	add	r1, r0
 800adb4:	1850      	adds	r0, r2, r1
 800adb6:	4283      	cmp	r3, r0
 800adb8:	6011      	str	r1, [r2, #0]
 800adba:	d1e0      	bne.n	800ad7e <_free_r+0x22>
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	6053      	str	r3, [r2, #4]
 800adc2:	4408      	add	r0, r1
 800adc4:	6010      	str	r0, [r2, #0]
 800adc6:	e7da      	b.n	800ad7e <_free_r+0x22>
 800adc8:	d902      	bls.n	800add0 <_free_r+0x74>
 800adca:	230c      	movs	r3, #12
 800adcc:	602b      	str	r3, [r5, #0]
 800adce:	e7d6      	b.n	800ad7e <_free_r+0x22>
 800add0:	6820      	ldr	r0, [r4, #0]
 800add2:	1821      	adds	r1, r4, r0
 800add4:	428b      	cmp	r3, r1
 800add6:	bf04      	itt	eq
 800add8:	6819      	ldreq	r1, [r3, #0]
 800adda:	685b      	ldreq	r3, [r3, #4]
 800addc:	6063      	str	r3, [r4, #4]
 800adde:	bf04      	itt	eq
 800ade0:	1809      	addeq	r1, r1, r0
 800ade2:	6021      	streq	r1, [r4, #0]
 800ade4:	6054      	str	r4, [r2, #4]
 800ade6:	e7ca      	b.n	800ad7e <_free_r+0x22>
 800ade8:	bd38      	pop	{r3, r4, r5, pc}
 800adea:	bf00      	nop
 800adec:	200005c0 	.word	0x200005c0

0800adf0 <__ascii_mbtowc>:
 800adf0:	b082      	sub	sp, #8
 800adf2:	b901      	cbnz	r1, 800adf6 <__ascii_mbtowc+0x6>
 800adf4:	a901      	add	r1, sp, #4
 800adf6:	b142      	cbz	r2, 800ae0a <__ascii_mbtowc+0x1a>
 800adf8:	b14b      	cbz	r3, 800ae0e <__ascii_mbtowc+0x1e>
 800adfa:	7813      	ldrb	r3, [r2, #0]
 800adfc:	600b      	str	r3, [r1, #0]
 800adfe:	7812      	ldrb	r2, [r2, #0]
 800ae00:	1e10      	subs	r0, r2, #0
 800ae02:	bf18      	it	ne
 800ae04:	2001      	movne	r0, #1
 800ae06:	b002      	add	sp, #8
 800ae08:	4770      	bx	lr
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	e7fb      	b.n	800ae06 <__ascii_mbtowc+0x16>
 800ae0e:	f06f 0001 	mvn.w	r0, #1
 800ae12:	e7f8      	b.n	800ae06 <__ascii_mbtowc+0x16>

0800ae14 <_malloc_usable_size_r>:
 800ae14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae18:	1f18      	subs	r0, r3, #4
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	bfbc      	itt	lt
 800ae1e:	580b      	ldrlt	r3, [r1, r0]
 800ae20:	18c0      	addlt	r0, r0, r3
 800ae22:	4770      	bx	lr

0800ae24 <fiprintf>:
 800ae24:	b40e      	push	{r1, r2, r3}
 800ae26:	b503      	push	{r0, r1, lr}
 800ae28:	4601      	mov	r1, r0
 800ae2a:	ab03      	add	r3, sp, #12
 800ae2c:	4805      	ldr	r0, [pc, #20]	@ (800ae44 <fiprintf+0x20>)
 800ae2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae32:	6800      	ldr	r0, [r0, #0]
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	f000 f845 	bl	800aec4 <_vfiprintf_r>
 800ae3a:	b002      	add	sp, #8
 800ae3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae40:	b003      	add	sp, #12
 800ae42:	4770      	bx	lr
 800ae44:	2000002c 	.word	0x2000002c

0800ae48 <__ascii_wctomb>:
 800ae48:	4603      	mov	r3, r0
 800ae4a:	4608      	mov	r0, r1
 800ae4c:	b141      	cbz	r1, 800ae60 <__ascii_wctomb+0x18>
 800ae4e:	2aff      	cmp	r2, #255	@ 0xff
 800ae50:	d904      	bls.n	800ae5c <__ascii_wctomb+0x14>
 800ae52:	228a      	movs	r2, #138	@ 0x8a
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae5a:	4770      	bx	lr
 800ae5c:	700a      	strb	r2, [r1, #0]
 800ae5e:	2001      	movs	r0, #1
 800ae60:	4770      	bx	lr

0800ae62 <abort>:
 800ae62:	b508      	push	{r3, lr}
 800ae64:	2006      	movs	r0, #6
 800ae66:	f000 fa85 	bl	800b374 <raise>
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	f7f6 ff6c 	bl	8001d48 <_exit>

0800ae70 <__sfputc_r>:
 800ae70:	6893      	ldr	r3, [r2, #8]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	b410      	push	{r4}
 800ae78:	6093      	str	r3, [r2, #8]
 800ae7a:	da08      	bge.n	800ae8e <__sfputc_r+0x1e>
 800ae7c:	6994      	ldr	r4, [r2, #24]
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	db01      	blt.n	800ae86 <__sfputc_r+0x16>
 800ae82:	290a      	cmp	r1, #10
 800ae84:	d103      	bne.n	800ae8e <__sfputc_r+0x1e>
 800ae86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae8a:	f000 b933 	b.w	800b0f4 <__swbuf_r>
 800ae8e:	6813      	ldr	r3, [r2, #0]
 800ae90:	1c58      	adds	r0, r3, #1
 800ae92:	6010      	str	r0, [r2, #0]
 800ae94:	7019      	strb	r1, [r3, #0]
 800ae96:	4608      	mov	r0, r1
 800ae98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <__sfputs_r>:
 800ae9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea0:	4606      	mov	r6, r0
 800aea2:	460f      	mov	r7, r1
 800aea4:	4614      	mov	r4, r2
 800aea6:	18d5      	adds	r5, r2, r3
 800aea8:	42ac      	cmp	r4, r5
 800aeaa:	d101      	bne.n	800aeb0 <__sfputs_r+0x12>
 800aeac:	2000      	movs	r0, #0
 800aeae:	e007      	b.n	800aec0 <__sfputs_r+0x22>
 800aeb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb4:	463a      	mov	r2, r7
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f7ff ffda 	bl	800ae70 <__sfputc_r>
 800aebc:	1c43      	adds	r3, r0, #1
 800aebe:	d1f3      	bne.n	800aea8 <__sfputs_r+0xa>
 800aec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aec4 <_vfiprintf_r>:
 800aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	460d      	mov	r5, r1
 800aeca:	b09d      	sub	sp, #116	@ 0x74
 800aecc:	4614      	mov	r4, r2
 800aece:	4698      	mov	r8, r3
 800aed0:	4606      	mov	r6, r0
 800aed2:	b118      	cbz	r0, 800aedc <_vfiprintf_r+0x18>
 800aed4:	6a03      	ldr	r3, [r0, #32]
 800aed6:	b90b      	cbnz	r3, 800aedc <_vfiprintf_r+0x18>
 800aed8:	f7fe f926 	bl	8009128 <__sinit>
 800aedc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aede:	07d9      	lsls	r1, r3, #31
 800aee0:	d405      	bmi.n	800aeee <_vfiprintf_r+0x2a>
 800aee2:	89ab      	ldrh	r3, [r5, #12]
 800aee4:	059a      	lsls	r2, r3, #22
 800aee6:	d402      	bmi.n	800aeee <_vfiprintf_r+0x2a>
 800aee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeea:	f7fe f98a 	bl	8009202 <__retarget_lock_acquire_recursive>
 800aeee:	89ab      	ldrh	r3, [r5, #12]
 800aef0:	071b      	lsls	r3, r3, #28
 800aef2:	d501      	bpl.n	800aef8 <_vfiprintf_r+0x34>
 800aef4:	692b      	ldr	r3, [r5, #16]
 800aef6:	b99b      	cbnz	r3, 800af20 <_vfiprintf_r+0x5c>
 800aef8:	4629      	mov	r1, r5
 800aefa:	4630      	mov	r0, r6
 800aefc:	f000 f938 	bl	800b170 <__swsetup_r>
 800af00:	b170      	cbz	r0, 800af20 <_vfiprintf_r+0x5c>
 800af02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af04:	07dc      	lsls	r4, r3, #31
 800af06:	d504      	bpl.n	800af12 <_vfiprintf_r+0x4e>
 800af08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af0c:	b01d      	add	sp, #116	@ 0x74
 800af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af12:	89ab      	ldrh	r3, [r5, #12]
 800af14:	0598      	lsls	r0, r3, #22
 800af16:	d4f7      	bmi.n	800af08 <_vfiprintf_r+0x44>
 800af18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af1a:	f7fe f973 	bl	8009204 <__retarget_lock_release_recursive>
 800af1e:	e7f3      	b.n	800af08 <_vfiprintf_r+0x44>
 800af20:	2300      	movs	r3, #0
 800af22:	9309      	str	r3, [sp, #36]	@ 0x24
 800af24:	2320      	movs	r3, #32
 800af26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af2e:	2330      	movs	r3, #48	@ 0x30
 800af30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b0e0 <_vfiprintf_r+0x21c>
 800af34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af38:	f04f 0901 	mov.w	r9, #1
 800af3c:	4623      	mov	r3, r4
 800af3e:	469a      	mov	sl, r3
 800af40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af44:	b10a      	cbz	r2, 800af4a <_vfiprintf_r+0x86>
 800af46:	2a25      	cmp	r2, #37	@ 0x25
 800af48:	d1f9      	bne.n	800af3e <_vfiprintf_r+0x7a>
 800af4a:	ebba 0b04 	subs.w	fp, sl, r4
 800af4e:	d00b      	beq.n	800af68 <_vfiprintf_r+0xa4>
 800af50:	465b      	mov	r3, fp
 800af52:	4622      	mov	r2, r4
 800af54:	4629      	mov	r1, r5
 800af56:	4630      	mov	r0, r6
 800af58:	f7ff ffa1 	bl	800ae9e <__sfputs_r>
 800af5c:	3001      	adds	r0, #1
 800af5e:	f000 80a7 	beq.w	800b0b0 <_vfiprintf_r+0x1ec>
 800af62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af64:	445a      	add	r2, fp
 800af66:	9209      	str	r2, [sp, #36]	@ 0x24
 800af68:	f89a 3000 	ldrb.w	r3, [sl]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 809f 	beq.w	800b0b0 <_vfiprintf_r+0x1ec>
 800af72:	2300      	movs	r3, #0
 800af74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af7c:	f10a 0a01 	add.w	sl, sl, #1
 800af80:	9304      	str	r3, [sp, #16]
 800af82:	9307      	str	r3, [sp, #28]
 800af84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af88:	931a      	str	r3, [sp, #104]	@ 0x68
 800af8a:	4654      	mov	r4, sl
 800af8c:	2205      	movs	r2, #5
 800af8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af92:	4853      	ldr	r0, [pc, #332]	@ (800b0e0 <_vfiprintf_r+0x21c>)
 800af94:	f7f5 f91c 	bl	80001d0 <memchr>
 800af98:	9a04      	ldr	r2, [sp, #16]
 800af9a:	b9d8      	cbnz	r0, 800afd4 <_vfiprintf_r+0x110>
 800af9c:	06d1      	lsls	r1, r2, #27
 800af9e:	bf44      	itt	mi
 800afa0:	2320      	movmi	r3, #32
 800afa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afa6:	0713      	lsls	r3, r2, #28
 800afa8:	bf44      	itt	mi
 800afaa:	232b      	movmi	r3, #43	@ 0x2b
 800afac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afb0:	f89a 3000 	ldrb.w	r3, [sl]
 800afb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800afb6:	d015      	beq.n	800afe4 <_vfiprintf_r+0x120>
 800afb8:	9a07      	ldr	r2, [sp, #28]
 800afba:	4654      	mov	r4, sl
 800afbc:	2000      	movs	r0, #0
 800afbe:	f04f 0c0a 	mov.w	ip, #10
 800afc2:	4621      	mov	r1, r4
 800afc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afc8:	3b30      	subs	r3, #48	@ 0x30
 800afca:	2b09      	cmp	r3, #9
 800afcc:	d94b      	bls.n	800b066 <_vfiprintf_r+0x1a2>
 800afce:	b1b0      	cbz	r0, 800affe <_vfiprintf_r+0x13a>
 800afd0:	9207      	str	r2, [sp, #28]
 800afd2:	e014      	b.n	800affe <_vfiprintf_r+0x13a>
 800afd4:	eba0 0308 	sub.w	r3, r0, r8
 800afd8:	fa09 f303 	lsl.w	r3, r9, r3
 800afdc:	4313      	orrs	r3, r2
 800afde:	9304      	str	r3, [sp, #16]
 800afe0:	46a2      	mov	sl, r4
 800afe2:	e7d2      	b.n	800af8a <_vfiprintf_r+0xc6>
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	1d19      	adds	r1, r3, #4
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	9103      	str	r1, [sp, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	bfbb      	ittet	lt
 800aff0:	425b      	neglt	r3, r3
 800aff2:	f042 0202 	orrlt.w	r2, r2, #2
 800aff6:	9307      	strge	r3, [sp, #28]
 800aff8:	9307      	strlt	r3, [sp, #28]
 800affa:	bfb8      	it	lt
 800affc:	9204      	strlt	r2, [sp, #16]
 800affe:	7823      	ldrb	r3, [r4, #0]
 800b000:	2b2e      	cmp	r3, #46	@ 0x2e
 800b002:	d10a      	bne.n	800b01a <_vfiprintf_r+0x156>
 800b004:	7863      	ldrb	r3, [r4, #1]
 800b006:	2b2a      	cmp	r3, #42	@ 0x2a
 800b008:	d132      	bne.n	800b070 <_vfiprintf_r+0x1ac>
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	1d1a      	adds	r2, r3, #4
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	9203      	str	r2, [sp, #12]
 800b012:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b016:	3402      	adds	r4, #2
 800b018:	9305      	str	r3, [sp, #20]
 800b01a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b0f0 <_vfiprintf_r+0x22c>
 800b01e:	7821      	ldrb	r1, [r4, #0]
 800b020:	2203      	movs	r2, #3
 800b022:	4650      	mov	r0, sl
 800b024:	f7f5 f8d4 	bl	80001d0 <memchr>
 800b028:	b138      	cbz	r0, 800b03a <_vfiprintf_r+0x176>
 800b02a:	9b04      	ldr	r3, [sp, #16]
 800b02c:	eba0 000a 	sub.w	r0, r0, sl
 800b030:	2240      	movs	r2, #64	@ 0x40
 800b032:	4082      	lsls	r2, r0
 800b034:	4313      	orrs	r3, r2
 800b036:	3401      	adds	r4, #1
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03e:	4829      	ldr	r0, [pc, #164]	@ (800b0e4 <_vfiprintf_r+0x220>)
 800b040:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b044:	2206      	movs	r2, #6
 800b046:	f7f5 f8c3 	bl	80001d0 <memchr>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d03f      	beq.n	800b0ce <_vfiprintf_r+0x20a>
 800b04e:	4b26      	ldr	r3, [pc, #152]	@ (800b0e8 <_vfiprintf_r+0x224>)
 800b050:	bb1b      	cbnz	r3, 800b09a <_vfiprintf_r+0x1d6>
 800b052:	9b03      	ldr	r3, [sp, #12]
 800b054:	3307      	adds	r3, #7
 800b056:	f023 0307 	bic.w	r3, r3, #7
 800b05a:	3308      	adds	r3, #8
 800b05c:	9303      	str	r3, [sp, #12]
 800b05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b060:	443b      	add	r3, r7
 800b062:	9309      	str	r3, [sp, #36]	@ 0x24
 800b064:	e76a      	b.n	800af3c <_vfiprintf_r+0x78>
 800b066:	fb0c 3202 	mla	r2, ip, r2, r3
 800b06a:	460c      	mov	r4, r1
 800b06c:	2001      	movs	r0, #1
 800b06e:	e7a8      	b.n	800afc2 <_vfiprintf_r+0xfe>
 800b070:	2300      	movs	r3, #0
 800b072:	3401      	adds	r4, #1
 800b074:	9305      	str	r3, [sp, #20]
 800b076:	4619      	mov	r1, r3
 800b078:	f04f 0c0a 	mov.w	ip, #10
 800b07c:	4620      	mov	r0, r4
 800b07e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b082:	3a30      	subs	r2, #48	@ 0x30
 800b084:	2a09      	cmp	r2, #9
 800b086:	d903      	bls.n	800b090 <_vfiprintf_r+0x1cc>
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d0c6      	beq.n	800b01a <_vfiprintf_r+0x156>
 800b08c:	9105      	str	r1, [sp, #20]
 800b08e:	e7c4      	b.n	800b01a <_vfiprintf_r+0x156>
 800b090:	fb0c 2101 	mla	r1, ip, r1, r2
 800b094:	4604      	mov	r4, r0
 800b096:	2301      	movs	r3, #1
 800b098:	e7f0      	b.n	800b07c <_vfiprintf_r+0x1b8>
 800b09a:	ab03      	add	r3, sp, #12
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	462a      	mov	r2, r5
 800b0a0:	4b12      	ldr	r3, [pc, #72]	@ (800b0ec <_vfiprintf_r+0x228>)
 800b0a2:	a904      	add	r1, sp, #16
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	f7fd fbdb 	bl	8008860 <_printf_float>
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	1c78      	adds	r0, r7, #1
 800b0ae:	d1d6      	bne.n	800b05e <_vfiprintf_r+0x19a>
 800b0b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0b2:	07d9      	lsls	r1, r3, #31
 800b0b4:	d405      	bmi.n	800b0c2 <_vfiprintf_r+0x1fe>
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	059a      	lsls	r2, r3, #22
 800b0ba:	d402      	bmi.n	800b0c2 <_vfiprintf_r+0x1fe>
 800b0bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0be:	f7fe f8a1 	bl	8009204 <__retarget_lock_release_recursive>
 800b0c2:	89ab      	ldrh	r3, [r5, #12]
 800b0c4:	065b      	lsls	r3, r3, #25
 800b0c6:	f53f af1f 	bmi.w	800af08 <_vfiprintf_r+0x44>
 800b0ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0cc:	e71e      	b.n	800af0c <_vfiprintf_r+0x48>
 800b0ce:	ab03      	add	r3, sp, #12
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	4b05      	ldr	r3, [pc, #20]	@ (800b0ec <_vfiprintf_r+0x228>)
 800b0d6:	a904      	add	r1, sp, #16
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f7fd fe59 	bl	8008d90 <_printf_i>
 800b0de:	e7e4      	b.n	800b0aa <_vfiprintf_r+0x1e6>
 800b0e0:	0800b749 	.word	0x0800b749
 800b0e4:	0800b753 	.word	0x0800b753
 800b0e8:	08008861 	.word	0x08008861
 800b0ec:	0800ae9f 	.word	0x0800ae9f
 800b0f0:	0800b74f 	.word	0x0800b74f

0800b0f4 <__swbuf_r>:
 800b0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f6:	460e      	mov	r6, r1
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	4605      	mov	r5, r0
 800b0fc:	b118      	cbz	r0, 800b106 <__swbuf_r+0x12>
 800b0fe:	6a03      	ldr	r3, [r0, #32]
 800b100:	b90b      	cbnz	r3, 800b106 <__swbuf_r+0x12>
 800b102:	f7fe f811 	bl	8009128 <__sinit>
 800b106:	69a3      	ldr	r3, [r4, #24]
 800b108:	60a3      	str	r3, [r4, #8]
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	071a      	lsls	r2, r3, #28
 800b10e:	d501      	bpl.n	800b114 <__swbuf_r+0x20>
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	b943      	cbnz	r3, 800b126 <__swbuf_r+0x32>
 800b114:	4621      	mov	r1, r4
 800b116:	4628      	mov	r0, r5
 800b118:	f000 f82a 	bl	800b170 <__swsetup_r>
 800b11c:	b118      	cbz	r0, 800b126 <__swbuf_r+0x32>
 800b11e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b122:	4638      	mov	r0, r7
 800b124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	6922      	ldr	r2, [r4, #16]
 800b12a:	1a98      	subs	r0, r3, r2
 800b12c:	6963      	ldr	r3, [r4, #20]
 800b12e:	b2f6      	uxtb	r6, r6
 800b130:	4283      	cmp	r3, r0
 800b132:	4637      	mov	r7, r6
 800b134:	dc05      	bgt.n	800b142 <__swbuf_r+0x4e>
 800b136:	4621      	mov	r1, r4
 800b138:	4628      	mov	r0, r5
 800b13a:	f7ff f937 	bl	800a3ac <_fflush_r>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d1ed      	bne.n	800b11e <__swbuf_r+0x2a>
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	3b01      	subs	r3, #1
 800b146:	60a3      	str	r3, [r4, #8]
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	6022      	str	r2, [r4, #0]
 800b14e:	701e      	strb	r6, [r3, #0]
 800b150:	6962      	ldr	r2, [r4, #20]
 800b152:	1c43      	adds	r3, r0, #1
 800b154:	429a      	cmp	r2, r3
 800b156:	d004      	beq.n	800b162 <__swbuf_r+0x6e>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	07db      	lsls	r3, r3, #31
 800b15c:	d5e1      	bpl.n	800b122 <__swbuf_r+0x2e>
 800b15e:	2e0a      	cmp	r6, #10
 800b160:	d1df      	bne.n	800b122 <__swbuf_r+0x2e>
 800b162:	4621      	mov	r1, r4
 800b164:	4628      	mov	r0, r5
 800b166:	f7ff f921 	bl	800a3ac <_fflush_r>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d0d9      	beq.n	800b122 <__swbuf_r+0x2e>
 800b16e:	e7d6      	b.n	800b11e <__swbuf_r+0x2a>

0800b170 <__swsetup_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4b29      	ldr	r3, [pc, #164]	@ (800b218 <__swsetup_r+0xa8>)
 800b174:	4605      	mov	r5, r0
 800b176:	6818      	ldr	r0, [r3, #0]
 800b178:	460c      	mov	r4, r1
 800b17a:	b118      	cbz	r0, 800b184 <__swsetup_r+0x14>
 800b17c:	6a03      	ldr	r3, [r0, #32]
 800b17e:	b90b      	cbnz	r3, 800b184 <__swsetup_r+0x14>
 800b180:	f7fd ffd2 	bl	8009128 <__sinit>
 800b184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b188:	0719      	lsls	r1, r3, #28
 800b18a:	d422      	bmi.n	800b1d2 <__swsetup_r+0x62>
 800b18c:	06da      	lsls	r2, r3, #27
 800b18e:	d407      	bmi.n	800b1a0 <__swsetup_r+0x30>
 800b190:	2209      	movs	r2, #9
 800b192:	602a      	str	r2, [r5, #0]
 800b194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b198:	81a3      	strh	r3, [r4, #12]
 800b19a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b19e:	e033      	b.n	800b208 <__swsetup_r+0x98>
 800b1a0:	0758      	lsls	r0, r3, #29
 800b1a2:	d512      	bpl.n	800b1ca <__swsetup_r+0x5a>
 800b1a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1a6:	b141      	cbz	r1, 800b1ba <__swsetup_r+0x4a>
 800b1a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1ac:	4299      	cmp	r1, r3
 800b1ae:	d002      	beq.n	800b1b6 <__swsetup_r+0x46>
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f7ff fdd3 	bl	800ad5c <_free_r>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1c0:	81a3      	strh	r3, [r4, #12]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	6063      	str	r3, [r4, #4]
 800b1c6:	6923      	ldr	r3, [r4, #16]
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	f043 0308 	orr.w	r3, r3, #8
 800b1d0:	81a3      	strh	r3, [r4, #12]
 800b1d2:	6923      	ldr	r3, [r4, #16]
 800b1d4:	b94b      	cbnz	r3, 800b1ea <__swsetup_r+0x7a>
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b1dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1e0:	d003      	beq.n	800b1ea <__swsetup_r+0x7a>
 800b1e2:	4621      	mov	r1, r4
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f000 f83f 	bl	800b268 <__smakebuf_r>
 800b1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ee:	f013 0201 	ands.w	r2, r3, #1
 800b1f2:	d00a      	beq.n	800b20a <__swsetup_r+0x9a>
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	60a2      	str	r2, [r4, #8]
 800b1f8:	6962      	ldr	r2, [r4, #20]
 800b1fa:	4252      	negs	r2, r2
 800b1fc:	61a2      	str	r2, [r4, #24]
 800b1fe:	6922      	ldr	r2, [r4, #16]
 800b200:	b942      	cbnz	r2, 800b214 <__swsetup_r+0xa4>
 800b202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b206:	d1c5      	bne.n	800b194 <__swsetup_r+0x24>
 800b208:	bd38      	pop	{r3, r4, r5, pc}
 800b20a:	0799      	lsls	r1, r3, #30
 800b20c:	bf58      	it	pl
 800b20e:	6962      	ldrpl	r2, [r4, #20]
 800b210:	60a2      	str	r2, [r4, #8]
 800b212:	e7f4      	b.n	800b1fe <__swsetup_r+0x8e>
 800b214:	2000      	movs	r0, #0
 800b216:	e7f7      	b.n	800b208 <__swsetup_r+0x98>
 800b218:	2000002c 	.word	0x2000002c

0800b21c <__swhatbuf_r>:
 800b21c:	b570      	push	{r4, r5, r6, lr}
 800b21e:	460c      	mov	r4, r1
 800b220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b224:	2900      	cmp	r1, #0
 800b226:	b096      	sub	sp, #88	@ 0x58
 800b228:	4615      	mov	r5, r2
 800b22a:	461e      	mov	r6, r3
 800b22c:	da0d      	bge.n	800b24a <__swhatbuf_r+0x2e>
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b234:	f04f 0100 	mov.w	r1, #0
 800b238:	bf14      	ite	ne
 800b23a:	2340      	movne	r3, #64	@ 0x40
 800b23c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b240:	2000      	movs	r0, #0
 800b242:	6031      	str	r1, [r6, #0]
 800b244:	602b      	str	r3, [r5, #0]
 800b246:	b016      	add	sp, #88	@ 0x58
 800b248:	bd70      	pop	{r4, r5, r6, pc}
 800b24a:	466a      	mov	r2, sp
 800b24c:	f000 f848 	bl	800b2e0 <_fstat_r>
 800b250:	2800      	cmp	r0, #0
 800b252:	dbec      	blt.n	800b22e <__swhatbuf_r+0x12>
 800b254:	9901      	ldr	r1, [sp, #4]
 800b256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b25a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b25e:	4259      	negs	r1, r3
 800b260:	4159      	adcs	r1, r3
 800b262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b266:	e7eb      	b.n	800b240 <__swhatbuf_r+0x24>

0800b268 <__smakebuf_r>:
 800b268:	898b      	ldrh	r3, [r1, #12]
 800b26a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b26c:	079d      	lsls	r5, r3, #30
 800b26e:	4606      	mov	r6, r0
 800b270:	460c      	mov	r4, r1
 800b272:	d507      	bpl.n	800b284 <__smakebuf_r+0x1c>
 800b274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	6123      	str	r3, [r4, #16]
 800b27c:	2301      	movs	r3, #1
 800b27e:	6163      	str	r3, [r4, #20]
 800b280:	b003      	add	sp, #12
 800b282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b284:	ab01      	add	r3, sp, #4
 800b286:	466a      	mov	r2, sp
 800b288:	f7ff ffc8 	bl	800b21c <__swhatbuf_r>
 800b28c:	9f00      	ldr	r7, [sp, #0]
 800b28e:	4605      	mov	r5, r0
 800b290:	4639      	mov	r1, r7
 800b292:	4630      	mov	r0, r6
 800b294:	f7fe ff86 	bl	800a1a4 <_malloc_r>
 800b298:	b948      	cbnz	r0, 800b2ae <__smakebuf_r+0x46>
 800b29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b29e:	059a      	lsls	r2, r3, #22
 800b2a0:	d4ee      	bmi.n	800b280 <__smakebuf_r+0x18>
 800b2a2:	f023 0303 	bic.w	r3, r3, #3
 800b2a6:	f043 0302 	orr.w	r3, r3, #2
 800b2aa:	81a3      	strh	r3, [r4, #12]
 800b2ac:	e7e2      	b.n	800b274 <__smakebuf_r+0xc>
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	6020      	str	r0, [r4, #0]
 800b2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2b6:	81a3      	strh	r3, [r4, #12]
 800b2b8:	9b01      	ldr	r3, [sp, #4]
 800b2ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2be:	b15b      	cbz	r3, 800b2d8 <__smakebuf_r+0x70>
 800b2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f000 f81d 	bl	800b304 <_isatty_r>
 800b2ca:	b128      	cbz	r0, 800b2d8 <__smakebuf_r+0x70>
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	f023 0303 	bic.w	r3, r3, #3
 800b2d2:	f043 0301 	orr.w	r3, r3, #1
 800b2d6:	81a3      	strh	r3, [r4, #12]
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	431d      	orrs	r5, r3
 800b2dc:	81a5      	strh	r5, [r4, #12]
 800b2de:	e7cf      	b.n	800b280 <__smakebuf_r+0x18>

0800b2e0 <_fstat_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d07      	ldr	r5, [pc, #28]	@ (800b300 <_fstat_r+0x20>)
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	602b      	str	r3, [r5, #0]
 800b2ee:	f7f6 fd5f 	bl	8001db0 <_fstat>
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	d102      	bne.n	800b2fc <_fstat_r+0x1c>
 800b2f6:	682b      	ldr	r3, [r5, #0]
 800b2f8:	b103      	cbz	r3, 800b2fc <_fstat_r+0x1c>
 800b2fa:	6023      	str	r3, [r4, #0]
 800b2fc:	bd38      	pop	{r3, r4, r5, pc}
 800b2fe:	bf00      	nop
 800b300:	200005c4 	.word	0x200005c4

0800b304 <_isatty_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4d06      	ldr	r5, [pc, #24]	@ (800b320 <_isatty_r+0x1c>)
 800b308:	2300      	movs	r3, #0
 800b30a:	4604      	mov	r4, r0
 800b30c:	4608      	mov	r0, r1
 800b30e:	602b      	str	r3, [r5, #0]
 800b310:	f7f6 fd5e 	bl	8001dd0 <_isatty>
 800b314:	1c43      	adds	r3, r0, #1
 800b316:	d102      	bne.n	800b31e <_isatty_r+0x1a>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	b103      	cbz	r3, 800b31e <_isatty_r+0x1a>
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	200005c4 	.word	0x200005c4

0800b324 <_raise_r>:
 800b324:	291f      	cmp	r1, #31
 800b326:	b538      	push	{r3, r4, r5, lr}
 800b328:	4605      	mov	r5, r0
 800b32a:	460c      	mov	r4, r1
 800b32c:	d904      	bls.n	800b338 <_raise_r+0x14>
 800b32e:	2316      	movs	r3, #22
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b336:	bd38      	pop	{r3, r4, r5, pc}
 800b338:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b33a:	b112      	cbz	r2, 800b342 <_raise_r+0x1e>
 800b33c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b340:	b94b      	cbnz	r3, 800b356 <_raise_r+0x32>
 800b342:	4628      	mov	r0, r5
 800b344:	f000 f830 	bl	800b3a8 <_getpid_r>
 800b348:	4622      	mov	r2, r4
 800b34a:	4601      	mov	r1, r0
 800b34c:	4628      	mov	r0, r5
 800b34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b352:	f000 b817 	b.w	800b384 <_kill_r>
 800b356:	2b01      	cmp	r3, #1
 800b358:	d00a      	beq.n	800b370 <_raise_r+0x4c>
 800b35a:	1c59      	adds	r1, r3, #1
 800b35c:	d103      	bne.n	800b366 <_raise_r+0x42>
 800b35e:	2316      	movs	r3, #22
 800b360:	6003      	str	r3, [r0, #0]
 800b362:	2001      	movs	r0, #1
 800b364:	e7e7      	b.n	800b336 <_raise_r+0x12>
 800b366:	2100      	movs	r1, #0
 800b368:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b36c:	4620      	mov	r0, r4
 800b36e:	4798      	blx	r3
 800b370:	2000      	movs	r0, #0
 800b372:	e7e0      	b.n	800b336 <_raise_r+0x12>

0800b374 <raise>:
 800b374:	4b02      	ldr	r3, [pc, #8]	@ (800b380 <raise+0xc>)
 800b376:	4601      	mov	r1, r0
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	f7ff bfd3 	b.w	800b324 <_raise_r>
 800b37e:	bf00      	nop
 800b380:	2000002c 	.word	0x2000002c

0800b384 <_kill_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4d07      	ldr	r5, [pc, #28]	@ (800b3a4 <_kill_r+0x20>)
 800b388:	2300      	movs	r3, #0
 800b38a:	4604      	mov	r4, r0
 800b38c:	4608      	mov	r0, r1
 800b38e:	4611      	mov	r1, r2
 800b390:	602b      	str	r3, [r5, #0]
 800b392:	f7f6 fcc9 	bl	8001d28 <_kill>
 800b396:	1c43      	adds	r3, r0, #1
 800b398:	d102      	bne.n	800b3a0 <_kill_r+0x1c>
 800b39a:	682b      	ldr	r3, [r5, #0]
 800b39c:	b103      	cbz	r3, 800b3a0 <_kill_r+0x1c>
 800b39e:	6023      	str	r3, [r4, #0]
 800b3a0:	bd38      	pop	{r3, r4, r5, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200005c4 	.word	0x200005c4

0800b3a8 <_getpid_r>:
 800b3a8:	f7f6 bcb6 	b.w	8001d18 <_getpid>

0800b3ac <_init>:
 800b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ae:	bf00      	nop
 800b3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b2:	bc08      	pop	{r3}
 800b3b4:	469e      	mov	lr, r3
 800b3b6:	4770      	bx	lr

0800b3b8 <_fini>:
 800b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ba:	bf00      	nop
 800b3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3be:	bc08      	pop	{r3}
 800b3c0:	469e      	mov	lr, r3
 800b3c2:	4770      	bx	lr
